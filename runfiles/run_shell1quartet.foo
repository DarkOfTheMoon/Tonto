! Copyright (C) Dylan Jayatilaka, 1999
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: run_shell4.foo 2800 2006-05-02 02:43:48Z dylan_ $

program run_SHELL1QUARTET

   implicit none

   sh  :: SHELL4*
   s4 :: SHELL1QUARTET*
   ab,cd :: SHELL1PAIR*
   I1,I2,I3 :: MAT4{REAL}*
   al,bl,cl,dl :: INT
   maxi :: REAL

   TONTO_CREATE

   stdout.create_stdout; stdout.open

   stdout.set_real_style("f")
   stdout.set_real_precision(9)
   stdout.set_real_width(15)
   stdout.set_int_width(3)

   GAUSSIAN_DATA:set_indices(2*4)

   stdout.flush
   stdout.text("ERI integrals for various shell4's, to test all shell4 ERI routines")

   do al=0,4
     do bl=0,4
       do cl=0,4
         do dl=0,4

           sh.create

           sh.a.n_cc = 2
           sh.b.n_cc = 2
           sh.c.n_cc = 2
           sh.d.n_cc = 2
           sh.a.contraction.create(2)
           sh.b.contraction.create(2)
           sh.c.contraction.create(2)
           sh.d.contraction.create(2)
           sh.a.contraction(1) = ONE
           sh.b.contraction(1) = ONE
           sh.c.contraction(1) = THREE
           sh.d.contraction(1) = ONE
           sh.a.contraction(2) = ONE
           sh.b.contraction(2) = THREE
           sh.c.contraction(2) = TWO
           sh.d.contraction(2) = TWO

           sh.a.exponent.create(2)
           sh.b.exponent.create(2)
           sh.c.exponent.create(2)
           sh.d.exponent.create(2)
           sh.a.exponent(1) = 2d0
           sh.b.exponent(1) = 1d0
           sh.c.exponent(1) = 50d0
           sh.d.exponent(1) = 0.1d0
           sh.a.exponent(2) = 20d0
           sh.b.exponent(2) = 10d0
           sh.c.exponent(2) = 5d0
           sh.d.exponent(2) = 1d0

           sh.a.set_l(al)
           sh.b.set_l(bl)
           sh.c.set_l(cl)
           sh.d.set_l(dl)
           sh.a.set_n_comp
           sh.b.set_n_comp
           sh.c.set_n_comp
           sh.d.set_n_comp

           sh.a.pos = [0.0d0, 0.2d0, 0.0d0]
           sh.b.pos = [0.3d0,-0.3d0, 0.6d0]
           sh.c.pos = [0.8d0, 0.5d0, 0.2d0]
           sh.d.pos = [0.0d0, 0.2d0,-0.3d0]

           ab.create
           cd.create
           ab.copy_a(sh.a)
           ab.copy_b(sh.b)
           cd.copy_a(sh.c)
           cd.copy_b(sh.d)
           ab.make_precalculated_data
           cd.make_precalculated_data

           s4.create
           s4.set_ab_new(ab,sh.a.pos,sh.b.pos,same_center=FALSE,skip=FALSE)
           s4.set_cd_new(cd,sh.c.pos,sh.d.pos,same_center=FALSE,skip=FALSE)

           I1.create(sh.a.n_comp,sh.b.n_comp,sh.c.n_comp,sh.d.n_comp)
           I2.create(sh.a.n_comp,sh.b.n_comp,sh.c.n_comp,sh.d.n_comp)
           I3.create(sh.a.n_comp,sh.b.n_comp,sh.c.n_comp,sh.d.n_comp)

           stdout.text("*************************************************************")
           sh.put
           stdout.flush
           stdout.text("Calculated using Roland Lindh's method:")
           stdout.flush

           sh.get_ERI(I1)
           stdout.put(I1)
           stdout.flush

           stdout.text("Calculated using the HONDO Rys method:")
           stdout.flush
           sh.make_ERI_ints(I2)
           stdout.put(I2)
           stdout.flush

           stdout.text("Calculated using SHELL1QUARTET method:")
           stdout.flush
           sh.make_ERI_ints(I3)
           stdout.put(I2)
           stdout.flush

           maxi = maxval(abs(I1-I2))
           stdout.set_real_style("d")
           stdout.show("Maximum difference, Lindh - HONDO         = ",maxi)
           stdout.set_real_style("f")
           stdout.flush

           maxi = maxval(abs(I1-I3))
           stdout.set_real_style("d")
           stdout.show("Maximum difference, Lindh - SHELL1QUARTET = ",maxi)
           stdout.set_real_style("f")
           stdout.flush

           maxi = maxval(abs(I2-I2))
           stdout.set_real_style("d")
           stdout.show("Maximum difference, HONDO - SHELL1QUARTET = ",maxi)
           stdout.set_real_style("f")
           stdout.flush

           I3.destroy
           I2.destroy
           I1.destroy
           cd.destroy
           ab.destroy
           s4.destroy
           sh.destroy

         end
       end
     end
   end

   TONTO_REPORT
   TEXTFILE:destroy(stdout)
   TONTO_DESTROY

end

