! Copyright (C) Dylan Jayatilaka, 1999
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: run_cif_to_gnuplot $

program run_CIF_TO_GNUPLOT

   implicit none

   crystal :: CRYSTAL*
   command_line :: COMMAND_LINE*
   cif :: CIF*
   found :: BIN
   cif_file_name :: STR
   gnu_file_name :: STR
   word,etime,ctime :: STR

   ! Macro to create Tonto system object
   ! Initialise MPI parallel stuff too.
   TONTO_CREATE

   ! Initialise standard I/O files.
   ! Always have this.
   std_time.start_timing
 ! stdin.create_stdin;   stdin.open
 ! stdout.create_stdout; stdout.open
 ! stderr.create_stderr; stderr.open
   stdout.create_stdout

   ! Initialize miscellaneous ...
   GAUSSIAN_DATA:set_indices(GAUSSIAN_DATA_L_MAX)

   ! Command line
   command_line.create
 ! command_line.process_options
 ! DIE_IF(command_line.has_options,      "Unexpected options: provide the cif file name as argument")
 ! DIE_IF(NOT command_line.has_arguments,"No arguments given: provide the cif file name")
 ! DIE_IF(command_line.n_args>1,         "Too many arguments: provide only the cif file name")

   ! Get the CIF file name
 ! cif_file_name = command_line.arg(1)
   cif_file_name = "input.cif"
   DIE_IF(len_trim(cif_file_name)<=4,       "CIF file name must end in .cif")
   DIE_IF(NOT cif_file_name.ends_in(".cif"),"CIF file name must end in .cif")

   ! Set the gnuplot file name
   gnu_file_name = cif_file_name
   gnu_file_name.replace_first("cif","gnuplot")

   ! Script banner
   stdout.flush
   stdout.text("========================")
   stdout.text("CIF -> gnuplot plot file")
   stdout.text("========================")
   stdout.flush
   stdout.text("This program converts CIF geometry and ADPs into")
   stdout.text("columns suitable for plotting via gnuplot.")
   stdout.flush
   stdout.show("CIF file to process   = ",cif_file_name)
   stdout.show("gnuplot command file  = ",gnu_file_name)

   ! Create CIF object
   cif.create
   cif.set_file_name(cif_file_name)
   cif.open

   ! Find CIF data block
   cif.find_crystal_data_block(found)
   DIE_IF(NOT found,"No crystal data block found in CIF!")

   ! Create crystal and read CIF
   crystal.create
   crystal.read_CIF(cif)   
   crystal.make_fragment_data(crystal.fragment_atom,assign_atom=TRUE)

   ! Put defragmented molecule
   crystal.put

   ! Job timing
   stdout.flush
   word  = "processing "//'"'// trim(cif_file_name) //'"'
   ctime = std_time.elapsed_time_message(word)
   etime = std_time.elapsed_cpu_time_message(word)
   stdout.text(etime)
   stdout.text(ctime)

   ! Clean-up
   crystal.destroy
   cif.destroy
   command_line.destroy

   ! Clean-up files
 ! TEXTFILE:destroy(stderr)
 ! TEXTFILE:destroy(stdout)
 ! TEXTFILE:destroy(stdin)

   ! Memory report
   TONTO_REPORT

   ! Clean-up tonto system
   TONTO_DESTROY

end
