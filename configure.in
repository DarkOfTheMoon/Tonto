dnl Process this file with autoconf to produce a configure script.
dnl Attempt number 1 by Daniel Grimwood, October 2000.

dnl ****************************************************************************
dnl Define macros first
dnl ****************************************************************************

AC_DEFUN(DAN_CHECK_LAPACK,
[
if test ${havelibs} != "1"; then
ac_save_LIBS="$LIBS"
AC_MSG_CHECKING("for $1")
LIBS="$1 $LIBS"
cat > conftest.f90 <<EOF
      program main
        write(*,*) lsame("a","b")
        call dgesv(4,nrhs,LU,4,pivot,solution,4,err)
      end
EOF
rm -f conftest.x
csh -c "$FC -O0 $LIBS -o conftest.x conftest.f90 >& /dev/null"
LIBS="$ac_save_LIBS"
if eval "test -e conftest.x"; then
  AC_MSG_RESULT(yes)
  havelibs="1"
  LIBS="$1 $LIBS"
dnl   AC_DEFINE(LIBS,LIBS)
else
  AC_MSG_RESULT(no)
fi
rm -f conftest.x conftest.f90
fi
])

AC_DEFUN(DAN_CHECK_ESSL,
[
if test ${havelibs} != "1"; then
ac_save_LIBS="$LIBS"
AC_MSG_CHECKING("for $1")
LIBS="$1 $LIBS"
cat > conftest.f90 <<EOF
      program main
        write(*,*) lsame("a","b")
        call dges(LU,4,4,pivot,solution,0)
      end
EOF
rm -f conftest.x
csh -c "$FC -O0 $LIBS -o conftest.x conftest.f90 >& /dev/null"
LIBS="$ac_save_LIBS"
if eval "test -e conftest.x"; then
  AC_MSG_RESULT(yes)
  havelibs="1"
  essl="1"
  LIBS="$1 $LIBS"
dnl   AC_DEFINE(LIBS,LIBS)
else
  AC_MSG_RESULT(no)
fi
rm -f conftest.x conftest.f90
fi
])

AC_DEFUN(DAN_GET_COMPILER,
[
if test ${compiler} = UNKNOWN; then
  ${PERL} -e 'open(A,"conf.test"); while (<A>) {if (/$1/) {exit 0}; exit 1;}'
  if test ${?} = 0; then
    compiler=$2
  fi

fi
])

dnl ****************************************************************************
dnl                   The actual script follows now
dnl ****************************************************************************

define([AC_CACHE_LOAD], )dnl
define([AC_CACHE_SAVE], )dnl
AC_INIT(Makefile.in)



dnl Checks for programs.
dnl
dnl
AC_MSG_RESULT("")
AC_CHECKING(Programs)
AC_CHECK_PROG(PERL,perl,perl,none)
test ${PERL} = none && AC_MSG_ERROR("perl not found")
AC_CHECK_PROG(UNAME,uname,uname,none)
test ${UNAME} = none && AC_MSG_ERROR("uname not found")
AC_CHECK_PROG(CMP,cmp,cmp,none)
test ${CMP} = none && AC_MSG_ERROR("cmp not found")
AC_CHECK_PROGS(MAKE,make gmake,none)
test ${MAKE} = none && AC_MSG_ERROR("make not found")
AC_MSG_CHECKING("whether GNU make")
${MAKE} -v -f/dev/null > conf.test 2>&1
${PERL} -e 'open(A,"conf.test"); while (<A>) {if (/GNU/) {exit 0}; exit 1;}'
if test ${?} = 1; then
  rm -f conf.test
  AC_MSG_RESULT("no")
  AC_MSG_ERROR("GNU make required")
else
  rm -f conf.test
  AC_MSG_RESULT("yes")
fi



dnl Get OS Type
dnl
dnl
uname=`${UNAME}`
OS=UNKNOWN
test ${uname} = Linux && OS=LINUX
test ${uname} = OSF1  && OS=OSF1
test ${uname} = AIX   && OS=AIX
test ${uname} = HP-UX && OS=HPUX

AC_MSG_RESULT("")
AC_CHECKING(Fortran compiler)
AC_CHECK_PROGS(FC,f95 f90 frt xlf90,none)
test ${FC} = none && AC_MSG_ERROR("Fortran compiler not found")

dnl Get Fortran Compiler name
dnl
dnl
${FC} -V > conf.test 2>&1 || ${FC} -v > conf.test 2>&1 || ${FC} -version > conf.test 2>&1
compiler=UNKNOWN
DAN_GET_COMPILER(Fujitsu,FUJITSU)
DAN_GET_COMPILER(Compaq,COMPAQ)
DAN_GET_COMPILER(Digital,DEC)
DAN_GET_COMPILER(IBM,IBM)
DAN_GET_COMPILER(NAG,NAG)
DAN_GET_COMPILER(HP,HP)
rm -f conf.test a.out
SYSCOMP="${compiler}-${OS}"

dnl Checks for libraries.
dnl
dnl
AC_MSG_RESULT("")
AC_CHECKING(Libraries)
havelibs="0"
essl="0"
DAN_CHECK_LAPACK(-lcxml)
DAN_CHECK_LAPACK(-ldxml)
DAN_CHECK_LAPACK(-lblas -llapack)
DAN_CHECK_ESSL(-lblas -lessl)

${PERL} -e 'open(A,"conf.test"); while (<A>) {if (/GNU/) {exit 0}; exit 1;}'

set srcdir = " := .:objects:modules:f90:dependencies:documentation/htmlfiles:scripts:foofiles"
DEFS=""
if test ${essl} = 1; then
DEFS="${DEFS} -DESSL"
fi



dnl fix macros for buggy DEC compiler
dnl
dnl
if test ${compiler} = "DEC"; then
  cat macros | ${PERL} \
    -pe '$_ =~ s/^ *! *define *DEFAULT_NULL *$/#define DEFAULT_NULL/o;' \
    -pe '$_ =~ s/^ *# *define *DEFAULT_NULL *=> *NULL\(\)/!define DEFAULT_NULL       => NULL()/o;' \
    -pe '$_ =~ s/^ *! *define *DEFAULT\(X\) *$/#define DEFAULT(X)/o;' \
    -pe '$_ =~ s/^ *# *define *DEFAULT\(X\) *= *X/!define DEFAULT(X)         = X/o;' > conf.macros
  mv -f conf.macros macros
else
  cat macros | ${PERL} \
    -pe '$_ =~ s/^ *# *define *DEFAULT_NULL *$/!define DEFAULT_NULL/o;' \
    -pe '$_ =~ s/^ *! *define *DEFAULT_NULL *=> *NULL\(\)/#define DEFAULT_NULL       => NULL()/o;' \
    -pe '$_ =~ s/^ *# *define *DEFAULT\(X\) *$/!define DEFAULT(X)/o;' \
    -pe '$_ =~ s/^ *! *define *DEFAULT\(X\) *= *X/#define DEFAULT(X)         = X/o;' > conf.macros
  mv -f conf.macros macros
fi

dnl insert compiler dependent flags into Makefile, from the site_config/$SYSCOMP file.
dnl
dnl
AC_MSG_RESULT("")
SITECONFIG="${srcdir}/site_config/${SYSCOMP}"
SITE_CONFIG=${SITECONFIG}
AC_MSG_RESULT("Your site_config file is ${SITECONFIG}")
if test ! -f ${SITECONFIG}; then
cp -f ${srcdir}/site_config/template ${SITECONFIG}
tmp="You will need to edit this file, default settings have been used."
AC_MSG_RESULT(${tmp})
exit 1
else
tmp="You may want to edit this file, but it should work as is."
AC_MSG_RESULT(${tmp})
fi
AC_MSG_RESULT("See the documentation for more information.")
AC_MSG_RESULT("")
AC_SUBST_FILE(SITECONFIG)
AC_SUBST(FC)
AC_SUBST(LIBS)
AC_SUBST(PERL)
AC_SUBST(MAKE)
AC_SUBST(DEFS)
AC_SUBST(prefix)
AC_SUBST(exec_prefix)
AC_SUBST(bindir)
AC_SUBST(SITE_CONFIG)
AC_OUTPUT(Makefile)
AC_MSG_RESULT("")
tmp="Next, type \"${MAKE} install\""
AC_MSG_RESULT(${tmp})
