#==============================================================================
#
# >>> Makefile for the TONTO system <<<
#
# You will need GNU make and perl for this Makefile to work.
#
# For basic installation just type
#
#      perl -w Makefile.pl
#      make
#
# To override the default compiler use :
#
#      Makefile.pl -fc=<your-fortran-compiler> 
#
# There should be nothing in this file that you need to change. 
# This file gets overwritten each time "Makefile.pl" is run!
#
# Type "make help" for common options.
#
# Type "make tests" to run the test suite. Failures should be checked but are
# usually due to small numerical differences. See the README in this directory.
#
# (c) Dylan Jayatilaka, Daniel Grimwood 
#     University of Western Australia, 1999-2004
#
# $Id$
#
#==============================================================================


# The Tonto source directory
srcdir := @SRCDIR@

# Where the program executable is copied to
installdir := @INSTALLDIR@

# The gmake command
MAKE := @MAKE@

# Shell to use for gmake command
SHELL = /bin/csh -f

# The Perl command
PERL := @PERL@

# The Fortran compiler command
FC := @FC@

# The operating system this Makefile is for
OS := @OS@

# Fortran compiler and operating system identifier string
PLATFORM_ID := @PLATFORM_ID@
PLATFORM_ID_ := @PLATFORM_ID_@
COMPILER_ID_ := @COMPILER_ID_@

# Build date for this executable
BUILD_DATE := $(shell date)

# Tonto version
VERSION := 2.3

# The main program
MAIN_PROGRAM := run_molecule

# Fortran default data type kind
INT_KIND := @INT_KIND@
BIN_KIND := @BIN_KIND@
REAL_KIND := @REAL_KIND@
CPX_KIND := @CPX_KIND@

#------------------------------------------------------------------------------
#
# >>> Platform specific compilation information <<<
#
# For example fortran compiler options, foo translation options,
# library locations, fortran source extensions, etc.
#
#------------------------------------------------------------------------------

PLATFORM_INFO_FILE := @PLATFORM_INFO_FILE@

include $(PLATFORM_INFO_FILE)

#------------------------------------------------------------------------------
#
# >>> Defaults for variables <<<
#
# Defined if not already set in the PLATFORM_INFO_FILE file.
#
#------------------------------------------------------------------------------

ifndef FSUFFIX
       FSUFFIX := f90
endif

ifndef PROGSUFFIX
       PROGSUFFIX := exe
endif

ifndef MODSUFFIX
       MODSUFFIX := mod
endif

ifndef OBJSUFFIX
       OBJSUFFIX := o
endif

ifndef LIBSUFFIX
       LIBSUFFIX := a
endif

ifndef MKLIB
       MKLIB := ar -ru
endif

ifndef FOUTOBJ
       FOUTOBJ := -c -o
endif

ifndef FOUTEXE
       FOUTEXE := -o
endif

ifdef FCOLON
   FOUTOBJ := $(FOUTOBJ)$(FCOLON)
   FOUTEXE := $(FOUTEXE)$(FCOLON)
   LIBOUT  :=  $(LIBOUT)$(FCOLON)
else
   EMPTY   := 
   FOUTOBJ := $(FOUTOBJ)$(EMPTY) $(EMPTY)
   FOUTEXE := $(FOUTEXE)$(EMPTY) $(EMPTY)
   LIBOUT  :=  $(LIBOUT)$(EMPTY) $(EMPTY)
endif

#------------------------------------------------------------------------------
#
# >>> Locations of important directories <<<
#
# Tonto places its files neatly in subdirectories with sensible names.
#
# Binary objects go into subdirectories related to the compiler/vendor
# name, which allows builds for multiple architectures using the same
# source files.  Also supported are simultanoues production, debug and
# custom compilation option versions
#
#------------------------------------------------------------------------------

bindir      := $(srcdir)/$(PLATFORM_ID)/custom
ifeq ($(FOPTNS),$(FFAST))
bindir      := $(srcdir)/$(PLATFORM_ID)/fast
endif
ifeq ($(FOPTNS),$(FDEBUG))
bindir      := $(srcdir)/$(PLATFORM_ID)/debug
endif

f95depdir   := $(bindir)/f95dependencies
f95dir      := $(bindir)/f95files
objdir      := $(bindir)/objects
moddir      := $(bindir)/modules
incdir      := $(bindir)/includes
rcfdir      := $(bindir)/compactify
usddir      := $(bindir)/compactify

scriptdir   := $(srcdir)/scripts
rundir      := $(srcdir)/runfiles
foodir      := $(srcdir)/foofiles
foodepdir   := $(srcdir)/foodependencies

testdir     := $(srcdir)/tests

#------------------------------------------------------------------------------
#
# >>> Some useful functions and abbreviations <<<
#
# Perl is used for portability.
#
#------------------------------------------------------------------------------

MKDIR      := perl -MExtUtils::Command -e mkpath
CP         := perl -MExtUtils::Command -e cp
MV         := perl -MExtUtils::Command -e mv
RMDIR      := perl -w $(scriptdir)/rmdir.pl
RM         := perl -w $(scriptdir)/rm.pl
CAT        := perl -w $(scriptdir)/cat.pl

SET_NOGLOB := set noglob &&

PROTECT          = $(subst {,\{,$(1)) 
DOUBLE_PROTECT   = $(subst {,\\\{,$(1)) 

# These are long names for cryptic gmake short forms

#TARGET           = $(call PROTECT,$@)
#TARGET_FILE      = $(call DOUBLE_PROTECT,$(@F))
TARGET               = $@
TARGET_FILE          = $(@F)
TARGET_FILENAME_HEAD = $(*F)
TARGET_OBJECT        = $($(join $(TARGET_FILE),.associated_object))
TARGET_MODULES       = $($(join $(TARGET_FILE),.module_list))

#PREREQUISITES         = $(call PROTECT,$^)
PREREQUISITES         = $^
FIRST_PREREQUISITE    = $<
FORTRAN_PREREQUISITES = $(filter %.$(FSUFFIX),$(PREREQUISITES))

#ALL_OBJECT_FILES = $(wildcard $(call PROTECT,$(objdir)/*.$(OBJSUFFIX)))
#TARGET_OBJECT    = $(join $(basename $(TARGET)),.$(OBJSUFFIX))
#TARGET_MODULES   = $($(join $(join $(basename $(TARGET)),.$(MODSUFFIX)),.module_list))
ALL_OBJECT_FILES = $(wildcard $(objdir)/*.$(OBJSUFFIX))

# Whether to use -nogeneric, -nounknown, -used_routines, or -routine_calls

DO_STACK      = $(if $(filter -DUSE_CALL_STACK_MANAGEMENT,$(DEFS)),-stack)
DO_TIMER      = $(if $(filter -DUSE_TIME_PROFILING,$(DEFS)),-timer)
DO_MPI        = $(if $(filter -DMPI,$(DEFS)),-mpi)
NO_SYSTEM     = $(if $(DO_MPI),, \
                $(if $(filter -DNO_TONTO_SYSTEM_CALLS,$(DEFS)),-no_system))
NO_GENERIC    = $(if $(filter -DNO_GENERIC_NAMES,$(DEFS)),-no_generic)
NO_MOD_USE    = $(if $(filter -DNO_MOD_USE,$(DEFS)),-no_mod_use)
NO_MOD_ONLY   = $(if $(filter -DNO_MOD_ONLY,$(DEFS)),-no_mod_only)
NO_UNKNOWN    = $(if $(filter -DNO_CASE_OPTIONS,$(DEFS)),-no_unknown)
USED_ROUTINES = $(if $(wildcard $(usddir)/*.usd), \
                     -used_routines $(usddir)/$(TARGET_FILENAME_HEAD).usd)
ROUTINE_CALLS = $(if $(USED_ROUTINES),, \
                     -routine_calls $(rcfdir)/$(TARGET_FILENAME_HEAD).rcf)

#------------------------------------------------------------------------------
#
# >>> Lists of files used in Tonto <<<
#
# Program source files should have a name starting with "run_" and be
# placed in the "runfiles" directory.
#
#------------------------------------------------------------------------------

# Foo modules (library)
foofiles := $(wildcard $(foodir)/*.foo)

# Programs
runfiles := $(wildcard $(rundir)/*.foo)

# Fortran dependency rules
f95depfiles := $(patsubst $(foodir)/%.foo,$(f95depdir)/%.f95dep,$(foofiles)) \
               $(patsubst $(rundir)/%.foo,$(f95depdir)/%.f95dep,$(runfiles))

# Foo dependency rules
foodepfiles := $(patsubst $(foodir)/%.foo,$(foodepdir)/%.foodep,$(foofiles)) \
               $(patsubst $(rundir)/%.foo,$(foodepdir)/%.foodep,$(runfiles))

# Routine call files (rcf's)
rcffiles    := $(patsubst $(foodir)/%.foo,$(rcfdir)/%.rcf,$(foofiles)) \
               $(patsubst $(rundir)/%.foo,$(rcfdir)/%.rcf,$(runfiles))

# Fortran-USE'd routines file (usd's)
usdfiles := $(patsubst $(foodir)/%.foo,$(usddir)/%.usd,$(foofiles)) \
            $(patsubst $(rundir)/%.foo,$(usddir)/%.usd,$(runfiles))

# The generated Fortran files
f95files := $(patsubst $(foodir)/%.foo,$(f95dir)/%.$(FSUFFIX),$(foofiles)) \
            $(patsubst $(rundir)/%.foo,$(f95dir)/%.$(FSUFFIX),$(runfiles))

#------------------------------------------------------------------------------
#
# >>> Makefile suffixes and search paths <<<
#
#------------------------------------------------------------------------------

.DEFAULT :
.DELETE_ON_ERROR :
.SUFFIXES :
.SUFFIXES : .$(OBJSUFFIX) .$(PROGSUFFIX) .$(FSUFFIX) .$(MODSUFFIX) .foodep .f95dep .foo .html
.PHONY : clean all directories install help blas lapack tests 
.SECONDARY : $(f95files)

VPATH := $(scriptdir)
vpath %.foo $(foodir)
vpath %.$(FSUFFIX) $(f95dir)
vpath %.foodep $(foodepdir)
vpath %.f95dep $(f95depdir)
vpath %.$(MODSUFFIX) $(moddir)

#------------------------------------------------------------------------------
#
# >>> Targets and dependencies <<<
#
# Immediately below are high level targets that the user will type.
#
#------------------------------------------------------------------------------

all : blas lapack $(bindir)/$(MAIN_PROGRAM).$(PROGSUFFIX)

help :
	@echo 
	@echo "Common arguments are:"
	@echo 
	@echo "    help            - displays this screen"
	@echo "    all             - builds the program run_mol.$(PROGSUFFIX)"
	@echo "    run_mol.$(PROGSUFFIX)       - builds the program run_mol.$(PROGSUFFIX)"
	@echo "    run_XXXXX.$(PROGSUFFIX)       - builds the program run_XXXXX.$(PROGSUFFIX)"
	@echo "    install         - installs any compiled programs into $(installdir)"
	@echo "    clean           - removes built program files"
	@echo "    blas            - build basic BLAS library"
	@echo "    lapack          - build basic LAPACK library"
	@echo 

install : $(wildcard $(PLATFORM_ID)/*.$(PROGSUFFIX))
	@$(CP) $(PREREQUISITES) $(installdir)

clean :
	@$(SET_NOGLOB) $(RMDIR) $(PLATFORM_ID)
	@$(SET_NOGLOB) $(MKDIR) $(PLATFORM_ID)
	@$(SET_NOGLOB) $(MKDIR) $(bindir)

blas : $(objdir)/libblas.$(LIBSUFFIX)

lapack : $(objdir)/liblapack.$(LIBSUFFIX)

#------------------------------------------------------------------------------
#
# >>> Compactification <<<
#
# "make compactify" is used to make the smallest possible executable
# by eliminating all "dead" code i.e. unused code. 
#
# NOTE: if you change the foo code to include new routines and calls
# to new routines then you will have to "make compactify" again.
# Alternatively, you can manually edit the .usd files to include the
# new routines. This procedure is not recommended because it is
# error-prone.  Compactification is designed for producing a clean
# final executable for distribution, not necessarily for development
# of new code.
#
#------------------------------------------------------------------------------
 
compactify: $(rcfdir)/run_molecule.rcf $(rcffiles)
	$(SET_NOGLOB) $(RM) $(usdfiles)
	$(SET_NOGLOB) touch $(foofiles)
	$(SET_NOGLOB) touch $(runfiles)
	$(SET_NOGLOB) make $(f95files)
	cd $(rcfdir) && \
        $(SET_NOGLOB) ../../$(scriptdir)/compactify_calls.pl \
        -caller run_molecule.rcf \
        -called $(rcffiles)
	$(SET_NOGLOB) echo "*all*" > $(rcfdir)/system.usd
	$(SET_NOGLOB) touch $(foofiles)
	make

#-------------------------------------------------------------------------------
#
# >>> Dependency rules <<<
#
# The "make_f95_dependencies.pl" script makes a .f95dep file for each
# .foo file.  These .f95dep files are placed in the "dependencies"
# directory and are combined together to form the main "f95dependfile"
# rules for the Makefile.  These rules arise from Fortran module or
# Fortran source dependencies.
#
# The "make_foo_dependencies.pl" script makes a .foodep file for each
# .foo file.  These .foodep files are placed in the "foodependencies"
# directory and are combined together to form the main "foodependfile"
# rulse for the makefile.  These rules arise from foo-language textual
# or parameterised type inheritance.
#
#-------------------------------------------------------------------------------

skip_cmds := clean foodependfile f95dependfile help \
             blas lapack tests tests_for_CX compactify 

skip_depfile := $(filter $(skip_cmds),$(MAKECMDGOALS))

# Include the generated dependencies
ifeq ($(skip_depfile),)
include $(bindir)/f95dependfile
include $(bindir)/foodependfile
endif

# How to make the dependencies?
$(bindir)/foodependfile : $(foodepfiles)
	@$(SET_NOGLOB) $(CAT) $(PREREQUISITES) > $(TARGET)

$(bindir)/f95dependfile : $(f95depfiles)
	@$(SET_NOGLOB) $(CAT) $(PREREQUISITES) > $(TARGET)

# Fortran dependencies
$(f95depdir)/%.f95dep : \
           $(f95dir)/%.$(FSUFFIX) \
           $(scriptdir)/make_f95_dependencies.pl \
           Makefile \
           $(PLATFORM_INFO_FILE)                 # Now begin the rules ...
	@test -d $(f95depdir) || $(MKDIR) $(f95depdir)
	@$(SET_NOGLOB) echo Making $(shell $(SET_NOGLOB) echo $(TARGET_FILENAME_HEAD) | tr a-z A-Z) Fortran dependency rules ...
	@$(SET_NOGLOB) $(PERL) -w $(scriptdir)/make_f95_dependencies.pl \
           -I $(f95dir) -I . \
           -prog_ext $(PROGSUFFIX) \
           -mod_ext  $(MODSUFFIX) \
	   -skip_use mpi \
           -obj_ext  $(OBJSUFFIX) \
           -src      $(FIRST_PREREQUISITE) \
           $(MODCASE) -o $(TARGET)

# Foo file dependencies
$(foodepdir)/%.foodep : \
           $(foodir)/%.foo \
           $(scriptdir)/make_foo_dependencies.pl \
           Makefile \
           $(PLATFORM_INFO_FILE)                 # Now begin the rules ...
	@test -d $(foodepdir) || $(MKDIR) $(foodepdir)
	@$(SET_NOGLOB) echo Making $(shell $(SET_NOGLOB) echo $(TARGET_FILENAME_HEAD) | tr a-z A-Z) Foo dependency rules ...
	@$(SET_NOGLOB) $(PERL) -w $(scriptdir)/make_foo_dependencies.pl \
           -src $(FIRST_PREREQUISITE) \
           -o   $(TARGET)

# Run file dependencies
$(foodepdir)/%.foodep : \
           $(rundir)/%.foo \
           $(scriptdir)/make_foo_dependencies.pl \
           Makefile \
           $(PLATFORM_INFO_FILE)                 # Now begin the rules ...
	@test -d $(foodepdir) || $(MKDIR) $(foodepdir)
	@$(SET_NOGLOB) echo Making $(shell $(SET_NOGLOB) echo $(TARGET_FILENAME_HEAD) | tr a-z A-Z) Foo dependency rules ...
	@$(SET_NOGLOB) $(PERL) -w $(scriptdir)/make_foo_dependencies.pl \
           -src $(FIRST_PREREQUISITE) \
           -o   $(TARGET)

#------------------------------------------------------------------------------
#
# >>> Convert the foo code to Fortran. <<<
#
# Perl script "foo.pl" generates Fortran files from .foo source code. 
#
#------------------------------------------------------------------------------

# Make .f95 files from .foo files
$(f95dir)/%.$(FSUFFIX) : \
           $(foodir)/%.foo \
           $(foodir)/macros \
           $(scriptdir)/foo.pl \
           $(foodir)/types.foo \
           Makefile \
           $(scriptdir)/filepp.pl \
           $(scriptdir)/tonto.pm \
           $(scriptdir)/literal.pm \
           $(PLATFORM_INFO_FILE)                          # Now begin the rules
	@test -d $(f95dir) || $(MKDIR) $(f95dir)
	@test -d $(incdir) || $(MKDIR) $(incdir)
	@test -d $(rcfdir) || $(MKDIR) $(rcfdir)
	@$(SET_NOGLOB) echo Compiling $(shell $(SET_NOGLOB) echo $(TARGET_FILENAME_HEAD) | tr a-z A-Z) Foo code into Fortran ...
	@$(SET_NOGLOB) $(PERL) -I$(scriptdir) -w $(scriptdir)/foo.pl \
           $(DO_STACK) $(DO_TIMER) $(NO_GENERIC) $(NO_MOD_USE) $(NO_MOD_ONLY) $(NO_UNKNOWN) $(NO_SYSTEM) \
           -types $(foodir)/types.foo \
           -fortran $(TARGET_FILENAME_HEAD).tmp \
           $(ROUTINE_CALLS) $(USED_ROUTINES) $(FIRST_PREREQUISITE)
	@$(SET_NOGLOB) $(PERL) -w $(scriptdir)/filepp.pl -w \
           -I. -I$(foodir) -M$(scriptdir) \
           -m literal.pm -m tonto.pm \
           -DTONTO_VERSION="'$(VERSION)'" \
           -DTONTO_PLATFORM="'$(PLATFORM_ID)'" \
           -DTONTO_BUILD_DATE="'$(BUILD_DATE)'" \
           -DINT_KIND="$(INT_KIND)" \
           -DBIN_KIND="$(BIN_KIND)" \
           -DREAL_KIND="$(REAL_KIND)" \
           -DCPX_KIND="$(CPX_KIND)" \
           -D$(COMPILER_ID_) \
           -D$(PLATFORM_ID_) \
           -o $(TARGET) \
           $(DEFS) $(TARGET_FILENAME_HEAD).tmp
	@$(SET_NOGLOB) $(MV) $(TARGET_FILENAME_HEAD).tmp $(incdir) 
	@$(SET_NOGLOB) $(MV) $(TARGET_FILENAME_HEAD).use $(incdir) 
	@$(SET_NOGLOB) $(MV) $(TARGET_FILENAME_HEAD).int $(incdir) 

# Make .f95 files from run_XXXX.foo files
$(f95dir)/%.$(FSUFFIX) : \
           $(rundir)/%.foo \
           $(foodir)/macros \
           $(scriptdir)/foo.pl \
           $(foodir)/types.foo \
           Makefile \
           $(scriptdir)/filepp.pl \
           $(scriptdir)/tonto.pm \
           $(scriptdir)/literal.pm \
           $(PLATFORM_INFO_FILE)                          # Now begin the rules
	@test -d $(f95dir) || $(MKDIR) $(f95dir)
	@test -d $(incdir) || $(MKDIR) $(incdir)
	@test -d $(rcfdir) || $(MKDIR) $(rcfdir)
	@$(SET_NOGLOB) echo Compiling $(shell $(SET_NOGLOB) echo $(TARGET_FILENAME_HEAD) | tr a-z A-Z) Foo code into Fortran ...
	@$(SET_NOGLOB) $(PERL) -I$(scriptdir) -w $(scriptdir)/foo.pl \
           $(DO_STACK) $(DO_TIMER) $(NO_GENERIC) $(NO_MOD_USE) $(NO_MOD_ONLY) $(NO_UNKNOWN) $(NO_SYSTEM) \
           -types $(foodir)/types.foo \
           -fortran $(TARGET_FILENAME_HEAD).tmp \
           -incdir  $(incdir) \
           $(ROUTINE_CALLS) $(USED_ROUTINES) $(FIRST_PREREQUISITE)
	@$(SET_NOGLOB) $(PERL) -w $(scriptdir)/filepp.pl -w \
           -I$(foodir) -I$(incdir) -M$(scriptdir) \
           -m literal.pm -m tonto.pm \
           -DTONTO_VERSION="'$(VERSION)'" \
           -DTONTO_PLATFORM="'$(PLATFORM_ID)'" \
           -DTONTO_BUILD_DATE="'$(BUILD_DATE)'" \
           -DINT_KIND="$(INT_KIND)" \
           -DBIN_KIND="$(BIN_KIND)" \
           -DREAL_KIND="$(REAL_KIND)" \
           -DCPX_KIND="$(CPX_KIND)" \
           -D$(COMPILER_ID_) \
           -D$(PLATFORM_ID_) \
           -o $(TARGET) \
           $(DEFS) $(TARGET_FILENAME_HEAD).tmp
	@$(SET_NOGLOB) $(RM) $(TARGET_FILENAME_HEAD).tmp

#------------------------------------------------------------------------------
#
# >>> Object files and module files <<<
#
# Use the script compile_mod.pl - this may speed up compilation for
# developers.  (The module files are only updated if required).
#
# The .$(OBJSUFFIX) files are placed in the "objects" directory and
# then added to the "$(objdir)/libtonto.$(LIBSUFFIX)" library archive.
# The archive is then used in the final link stage.
#
#------------------------------------------------------------------------------

# Make the .o object files
$(objdir)/%.$(OBJSUFFIX) : $(PLATFORM_INFO_FILE)
	@test -d $(objdir) || $(MKDIR) $(objdir)
	@test -d $(moddir) || $(MKDIR) $(moddir)
	@$(SET_NOGLOB) echo Making $(TARGET) ...
	@$(if $^,,$(error "Don't know prerequisites for $(TARGET)"))
	@$(SET_NOGLOB) $(PERL) -w $(scriptdir)/compile_mod.pl \
           -fc "$(SET_NOGLOB) $(FC) $(FFLAGS) $(FOPTNS) $(FOUTOBJ)$(TARGET) $(FORTRAN_PREREQUISITES)" \
           -cmp "$(PERL) -w $(scriptdir)/compare_module_file.pl -compiler $(PLATFORM_ID)" \
           -provides $(TARGET_MODULES) $(TARGET) \
           -requires $(PREREQUISITES) 
	@$(SET_NOGLOB) touch $(TARGET_MODULES) $(TARGET) 

# Make the .mod module files
$(moddir)/%.$(MODSUFFIX) : $(PLATFORM_INFO_FILE)
	@test -d $(objdir) || $(MKDIR) $(objdir)
	@test -d $(moddir) || $(MKDIR) $(moddir)
	@$(SET_NOGLOB) echo Making $(TARGET) ...
	@$(if ^,,$(error "Don't know prerequisites for $(TARGET)"))
	@$(SET_NOGLOB) $(PERL) -w $(scriptdir)/compile_mod.pl \
           -fc "$(SET_NOGLOB) $(FC) $(FFLAGS) $(FOPTNS) $(FOUTOBJ)$(TARGET_OBJECT) $(FORTRAN_PREREQUISITES)" \
           -cmp "$(PERL) -w $(scriptdir)/compare_module_file.pl -compiler $(PLATFORM_ID)" \
           -provides $(TARGET_MODULES) $(TARGET_OBJECT) \
           -requires $(PREREQUISITES) 
	@$(SET_NOGLOB) touch $(TARGET_MODULES) $(TARGET_OBJRCT) 

#------------------------------------------------------------------------------
#
# >>> Generate the run_XXXX.exe executable <<<
#
#------------------------------------------------------------------------------

$(bindir)/%.$(PROGSUFFIX) : $(PLATFORM_INFO_FILE)
	@test -d $(bindir) || $(MKDIR) $(bindir)
	@echo 
	@echo This is the final link phase ...
	@echo Building $(objdir)/libtonto.$(LIBSUFFIX) from all object files ...
	@$(SET_NOGLOB) $(MKLIB) $(LIBOUT)$(objdir)/libtonto.$(LIBSUFFIX) $(ALL_OBJECT_FILES)
	@$(SET NO_GLOB) echo Making $(TARGET) ...
	@$(SET_NOGLOB) echo $(FC) $(FFLAGS) $(FOPTNS) $(FOUTEXE)$(TARGET) $(FORTRAN_PREREQUISITES) $(objdir)/libtonto.$(LIBSUFFIX) $(LIBS)
	@$(SET_NOGLOB) $(FC) $(FFLAGS) $(FOPTNS) $(FOUTEXE)$(TARGET) $(FORTRAN_PREREQUISITES) $(objdir)/libtonto.$(LIBSUFFIX) $(LIBS)
	@$(SET_NOGLOB) $(RM) $(*F).$(OBJSUFFIX)
	@$(SET_NOGLOB) $(RMDIR) $(incdir)
	@echo "Finished compilation."
	@echo "The program compiled is $(TARGET)"

#------------------------------------------------------------------------------
#
# >>> Lapack & Blas <<<
#
#------------------------------------------------------------------------------

# Blas
$(objdir)/libblas.$(LIBSUFFIX) : lapack/blas.fpp
	@echo Building BLAS library
	@test -d $(objdir) || $(MKDIR) $(objdir)
	@$(SET_NOGLOB) $(PERL) -w $(scriptdir)/filepp.pl -w \
           -I./lapack -M$(scriptdir) \
           -m literal.pm -m tonto.pm \
           -DTONTO_VERSION="'$(VERSION)'" \
           -DTONTO_PLATFORM="'$(PLATFORM_ID)'" \
           -DTONTO_BUILD_DATE="'$(BUILD_DATE)'" \
           -DINT_KIND="$(INT_KIND)" \
           -DBIN_KIND="$(BIN_KIND)" \
           -DREAL_KIND="$(REAL_KIND)" \
           -DCPX_KIND="$(CPX_KIND)" \
           -D$(PLATFORM_ID_) \
           -o lapack/blas.$(FSUFFIX) \
           $(DEFS) lapack/blas.fpp
	$(FC) $(FOPTNS) $(F77) $(FOUTOBJ)blas.$(OBJSUFFIX) lapack/blas.$(FSUFFIX)
	@$(RM) lapack/blas.$(FSUFFIX)
	$(MKLIB) $(LIBOUT)$(TARGET) blas.$(OBJSUFFIX)
	@echo Deleting blas.$(OBJSUFFIX)
	@$(RM) blas.$(OBJSUFFIX)
	@echo "Finished BLAS library compilation."

# Lapack
$(objdir)/liblapack.$(LIBSUFFIX) : lapack/lapack.fpp
	@echo Building LAPACK library
	@test -d $(objdir) || $(MKDIR) $(objdir)
	@$(SET_NOGLOB) $(PERL) -w $(scriptdir)/filepp.pl -w \
           -I./lapack -M$(scriptdir) \
           -m literal.pm -m tonto.pm \
           -DTONTO_VERSION="'$(VERSION)'" \
           -DTONTO_PLATFORM="'$(PLATFORM_ID)'" \
           -DTONTO_BUILD_DATE="'$(BUILD_DATE)'" \
           -DINT_KIND="$(INT_KIND)" \
           -DBIN_KIND="$(BIN_KIND)" \
           -DREAL_KIND="$(REAL_KIND)" \
           -DCPX_KIND="$(CPX_KIND)" \
           -D$(PLATFORM_ID_) \
           -o lapack/lapack.$(FSUFFIX) \
           $(DEFS) lapack/lapack.fpp
	$(FC) $(FOPTNS) $(F77) $(FOUTOBJ)lapack.$(OBJSUFFIX) lapack/lapack.$(FSUFFIX)
	@$(RM) lapack/lapack.$(FSUFFIX)
	$(MKLIB) $(LIBOUT)$(TARGET) lapack.$(OBJSUFFIX)
	@echo Deleting lapack.$(OBJSUFFIX)
	@$(RM) lapack.$(OBJSUFFIX)
	@echo "Finished LAPACK library compilation."

#------------------------------------------------------------------------------
#
# >>> Regression tests <<<
#
# "make tests" runs through the test jobs and makes sure that the results are
# the same as those given in the reference outputs.
#
#------------------------------------------------------------------------------

tests :
	@echo Running test suite
	@$(PERL) -w $(scriptdir)/perform_tests.pl \
           -testdir $(testdir) \
           -program $(bindir)/$(MAIN_PROGRAM).$(PROGSUFFIX) \
           -cmp "$(PERL) -w $(scriptdir)/compare_output.pl"

tests_for_CX :
	@echo Running CrystalExplorer test suite
	@$(PERL) -w $(scriptdir)/perform_tests.pl \
           -testdir ./tests_for_CX \
           -program $(bindir)/$(MAIN_PROGRAM).$(PROGSUFFIX) \
           -cmp "$(PERL) -w $(scriptdir)/compare_output.pl"

#------------------------------------------------------------------------------
#
# >>> Other targets <<<
#
# For making other executables or object files, as desired.
#
#------------------------------------------------------------------------------

%.$(PROGSUFFIX) :
	@$(SET_NOGLOB) $(MAKE) $(bindir)/$(*F).$(PROGSUFFIX)

%.$(OBJSUFFIX) :
	@$(SET_NOGLOB) $(MAKE) $(objdir)/$(*F).$(OBJSUFFIX)

