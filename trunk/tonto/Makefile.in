#==============================================================================
#
# >>> Makefile for the TONTO system
#
# You will need GNU make for this to work.
#
# There should be nothing in this file that you need to change, unless you
# are a developer of new modules.
#
#
# (c) dylan jayatilaka, daniel grimwood 
#     university of western australia, 1999-2000
#
# $Id$
#
#==============================================================================

prefix      := @prefix@
exec_prefix := @exec_prefix@
installdir  := @bindir@
srcdir      := @srcdir@

PERL    := @PERL@
MAKE    := @MAKE@

@SITECONFIG@

scriptdir   := $(srcdir)/scripts
depdir      := $(srcdir)/dependencies
foodir      := $(srcdir)/foofiles
f90dir      := $(srcdir)/f90files
objdir      := $(srcdir)/objects
newmoddir   := $(srcdir)/new_modules
moddir      := $(srcdir)/modules
intdir      := $(srcdir)/interfaces
docdir      := $(srcdir)/documentation
foodocdir   := $(docdir)/foofiles
f90docdir   := $(docdir)/f90files
htmdocdir   := $(docdir)/htmlfiles

#------------------------------------------------------------------------------
# >>> Standard Makefile options
#
# Note: For modules, the f95 compiler produces (temporarily) a .mod file
# in a directory "new_modules". The actual .mod file used by make resides 
# in the "modules" directory (see "VPATH" variable). The temporary .mod file 
# overwrites the old one only if it is different from it. This can save
# a lot of time in compilation.  (see the "update_module_file" script).
#------------------------------------------------------------------------------

COFLAGS  := -M -q
VPATH    := $(srcdir):$(objdir):$(moddir):$(f90dir):$(depdir):$(foodir): \
            $(scriptdir):$(docdir)/htmlfiles:$(docdir)

.DEFAULT :
.DELETE_ON_ERROR :
.SUFFIXES :
.SUFFIXES : .o .x .$(FSUFFIX) .dep .foo .html
.PHONY : clean all objectfiles directories install documentation

#------------------------------------------------------------------------------
# >>> Object files in hierachical order
#
# If you write a new TONTO module, you will need to add its .o filename 
# in the correct hierarchical position below. The correct position is after 
# all the modules which it USE's, but before all the modules which USE it.
#------------------------------------------------------------------------------

basic := types.o system.o time.o str.o int.o dbl.o buffer.o 
array :=  strvec.o   \
          binvec.o   \
            ivec.o   imat.o   imat3.o   imat4.o           \
             vec.o    mat.o    mat3.o    mat4.o    mat5.o \
            cvec.o   cmat.o   cmat3.o   cmat4.o   cmat5.o \
         ivecvec.o                                        \
          vecvec.o matvec.o mat3vec.o mat4vec.o           \
           opvec.o  opmat.o reflection.o reflectionvec.o
files := unitnumber.o file.o textfile.o archive.o
diis  := vecdiis.o
basis := rys.o gaussian.o gaussian2.o gaussian4.o \
         shell.o shell1.o shell2.o shell4.o shellvec.o \
         shellpair.o shellquartet.o shellpairvec.o \
         basis.o basisvec.o  
atoms := atom.o atomvec.o 
group := irrep.o irrepvec.o pointgroup.o spacegroup.o crystal.o
mol   := plotgrid.o dftgrid.o scfdata.o \
         mol.o mol_dylan.o mol_chris.o mol_daniel.o mol_main.o

objectfiles := $(basic) $(array) $(files) $(diis) $(basis) $(atoms) $(group) $(mol)

runfiles := $(patsubst foofiles/%, %  , $(wildcard foofiles/run_*.foo))
runfiles := $(sort $(runfiles:.foo=.x))

dependfiles := $(objectfiles:.o=.dep) $(runfiles:.x=.dep)

htmlfiles := $(objectfiles:.o=.html)

f90files := $(objectfiles:.o=.$(FSUFFIX))

#------------------------------------------------------------------------------
# >>> Targets and dependencies
#------------------------------------------------------------------------------

all : objectfiles run_mol.x

objectfiles : $(objectfiles)

help :
	@echo ""
	@echo "Common arguments are:"
	@echo ""
	@echo "    help            - displays this screen"
	@echo "    documentation   - makes the html documentation"
	@echo "    run_mol.x       - builds the program run_mol.x"
	@echo "    install         - builds and installs run_mol.x"
	@echo "    clean           - removes built program files"
	@echo "    docsclean       - removes built documentation files"
	@echo "    distclean       - removes all built files"
	@echo ""

install : objectfiles run_mol.x
	install $(installdir)/run_mol.x $(srcdir)/run_mol.x

clean :
	@if [ -d $(depdir) ]; then    echo "rm -f $(depdir)/*"; fi
	@if [ -d $(depdir) ]; then          rm -f $(depdir)/*; exit 0; fi
	@if [ -d $(objdir) ]; then    echo "rm -f $(objdir)/*"; fi
	@if [ -d $(moddir) ]; then          rm -f $(objdir)/*; exit 0; fi
	@if [ -d $(moddir) ]; then    echo "rm -f $(moddir)/*"; fi
	@if [ -d $(moddir) ]; then          rm -f $(moddir)/*; exit 0; fi
	@if [ -d $(newmoddir) ]; then echo "rm -f $(newmoddir)/*"; fi
	@if [ -d $(newmoddir) ]; then       rm -f $(newmoddir)/*; exit 0; fi
	@if [ -d $(intdir) ]; then    echo "rm -f $(intdir)/*"; fi
	@if [ -d $(intdir) ]; then          rm -f $(intdir)/*; exit 0; fi
	@if [ -d $(f90dir) ]; then    echo "rm -f $(f90dir)/*"; fi
	@if [ -d $(f90dir) ]; then          rm -f $(f90dir)/*; exit 0; fi
	@if [ -e $(depdir) ]; then    rm -f $(srcdir)/dependfile; fi
	@rm -f $(srcdir)/run_*.x;   exit 0
	@rm -f $(srcdir)/*.mod;     exit 0

docsclean :
	@if [ -d $(htmdocdir) ]; then echo "rm -f $(htmdocdir)/*"; fi
	@if [ -d $(htmdocdir) ]; then       rm -f $(htmdocdir)/*; exit 0; fi
	@if [ -d $(f90docdir) ]; then echo "rm -f $(f90docdir)/*"; fi
	@if [ -d $(f90docdir) ]; then       rm -f $(f90docdir)/*; exit 0; fi
	@if [ -d $(foodocdir) ]; then echo "rm -f $(foodocdir)/*"; fi
	@if [ -d $(foodocdir) ]; then       rm -f $(foodocdir)/*; exit 0; fi

distclean : clean docsclean
	@if [ -e $(srcdir)/Makefile ]; then rm -f $(srcdir)/Makefile; fi

distribution :
	$(scriptdir)/make_dist

Makefile : Makefile.in configure @SITE_CONFIG@
	@$(srcdir)/configure

#configure : configure.in
#	@autoconf

#---------------------------------------------------------------------------
# >>> HTML documentation files
#
# This makes HTML documentation for all modules, and stores it in the
# documentation directory.  Point your browser to the "index.html" file for the
# start of the documentation.
#---------------------------------------------------------------------------

documentation : TONTO-nav-bar.html

TONTO-nav-bar.html : $(htmlfiles) make_navbar
	$(scriptdir)/make_navbar $(sort $(basename $(htmlfiles))) > $(docdir)/TONTO-nav-bar.html

#------------------------------------------------------------------------------
# >>> Main dependency rules file
#
# The "make_deps" script scans all the .foo files to make a .dep file, which
# contains the dependent modules USE'd by the .foo file. These .dep files are
# placed in the "dependencies" directory and are combined together to form the
# main "dependfile" for the makefile, which is included below.
#------------------------------------------------------------------------------

ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),distclean)
ifneq ($(MAKECMDGOALS),docsclean)
ifneq ($(MAKECMDGOALS),distribution)
ifneq ($(MAKECMDGOALS),dependfile)
ifneq ($(MAKECMDGOALS),documentation)
include $(srcdir)/dependfile
endif
endif
endif
endif
endif
endif

dependfile : $(dependfiles)
	@if [ ! -e $(depdir) ]; then mkdir $(depdir); fi
	@$(PERL) -pe "s/f90/$(FSUFFIX)/go;" $(addprefix $(depdir)/, $(dependfiles)) \
          > $(srcdir)/dependfile

#------------------------------------------------------------------------------
# >>> Default (implicit) suffix rules
#
# See the discussion in the "make_deps.perl" script for an idea of
# how this works.
#------------------------------------------------------------------------------

%.dep : %.foo make_deps.perl
	@if [ ! -e $(depdir) ]; then mkdir $(depdir); fi
	$(PERL) -w $(scriptdir)/make_deps.perl $(foodir)/$(*F).foo $(depdir)/$(*F).dep

%.$(FSUFFIX) : %.foo foo.perl types.foo
	@if [ ! -d $(f90dir) ]; then mkdir $(f90dir); fi
	@if [ ! -d $(intdir) ]; then mkdir $(intdir); fi
	$(PERL) -w $(scriptdir)/foo.perl $(foodir)/$(<F) $(f90dir)/$(*F).$(FSUFFIX) $(intdir)/$(*F).int

%.html : %.foo foo2html.perl foo.perl
	@if [ ! -d $(docdir)/htmlfiles ]; then mkdir $(docdir)/htmlfiles; fi
	@if [ ! -d $(docdir)/f90files ]; then  mkdir $(docdir)/f90files; fi
	@if [ ! -d $(docdir)/foofiles ]; then  mkdir $(docdir)/foofiles; fi
	$(PERL) -w $(scriptdir)/foo2html.perl $(foodir)/$(<F) $(htmdocdir)/$(*F).html $(htmdocdir)/$(*F)_short.html
	$(PERL) -w $(scriptdir)/foo.perl $(foodir)/$(<F) $(f90docdir)/$(*F).$(FSUFFIX) $(f90docdir)/$(*F).int
	cp -f $(foodir)/$(*F).foo $(foodocdir)

%.mod : 
	$(MAKE) $(shell echo $(*F) | tr A-Z a-z).o 

%.o : %.$(FSUFFIX) macros Makefile
	@if [ ! -d $(objdir) ]; then    mkdir $(objdir); fi
	@if [ ! -d $(moddir) ]; then    mkdir $(moddir); fi
	@if [ ! -d $(newmoddir) ]; then mkdir $(newmoddir); fi
	$(FC) $(FFLAGS) $(FOPTNS) $(DEFS) -c -o $(objdir)/$(*F).o $(f90dir)/$(<F)
	$(scriptdir)/update_module_file $(*F).mod

%.x : %.$(FSUFFIX) macros Makefile
	$(MAKE) $($(*F))
	$(FC) $(FFLAGS) $(FOPTNS) $(DEFS) -o $(srcdir)/$@ $(addprefix $(objdir)/, $(notdir $(filter %.o, $^))) $(f90dir)/$(<F) $(LIBS)
	@if [ -e $(*F).o ]; then mv -f $(*F).o $(objdir); fi


#------------------------------------------------------------------------------
# Special rule for optimised run_mol.x. Usually breaks the compiler.
#------------------------------------------------------------------------------
#
#run_mol.x : $(f90files) macros Makefile
#	$(FC) $(FFLAGS) $(FOPTNS) -o $(srcdir)/run_mol.x \\
#            $(addprefix $(srcdir)/f90/, $(f90files)) $(LIBS)
