#==============================================================================
#
# >>> Makefile for the TONTO system
#
# You will need GNU make and perl for this to work.
#
# For basic installation just type
#      "perl -w Makefile.pl"
#      "make"
#      "make install"
#
# There should be nothing in this file that you need to change.  To change
# installation directories etc, use "Makefile.pl".
#
# Type "make help" for common options.
#
# Remember that this file gets overwritten each time "Makefile.pl" is run!
#
# (c) Dylan Jayatilaka, Daniel Grimwood 
#     University of Western Australia, 1999-2002
#
# $Id$
#
#==============================================================================

#------------------------------------------------------------------------------
# >>> Site specific information
#
# Where to install programs, and where the source files are located.
# Utilities required are also listed here.
#
# This is all inserted by "Makefile.pl".
#
#------------------------------------------------------------------------------

installdir  := @INSTALLDIR@
srcdir      := @SRCDIR@

FC      := @FC@
PERL    := @PERL@
MAKE    := @MAKE@
OS      := @OS@
SHELL    = /bin/csh

PLATFORM := @PLATFORM@
COMPILER_VENDOR := @COMPILER_VENDOR@
BUILD_DATE := $(shell echo date)

TONTO_VERSION    := 2.1
TONTO_PLATFORM   := @COMPILER_VENDOR@
TONTO_BUILD_DATE := $(shell date)

#------------------------------------------------------------------------------

include $(PLATFORM)

#------------------------------------------------------------------------------
# Set some defaults if not defined in the site_config file which can be found in
# the platforms directory.
#------------------------------------------------------------------------------
ifndef FSUFFIX
FSUFFIX := F95
endif
ifndef PROGSUFFIX
PROGSUFFIX := exe
endif
ifndef MODSUFFIX
MODSUFFIX := mod
endif
ifndef FOUT
FOUT := -o
endif
ifndef OBJSUFFIX
OBJSUFFIX := o
endif
ifndef LIBSUFFIX
LIBSUFFIX := a
endif
ifndef MKLIB
MKLIB := ar -ru
endif

#------------------------------------------------------------------------------
# >>> Locations of important directories.
#
# TONTO places its files neatly in subdirectories with sensible names.
#
# Binary objects go into subdirectories related to the compiler/vendor name,
# which is to allow building for multiple architectures using the same source
# files.
#
# Changing these directories here may break scripts or other parts of the makefile.
#
#------------------------------------------------------------------------------

bindir      := $(srcdir)/$(COMPILER_VENDOR)
scriptdir   := $(srcdir)/scripts
depdir      := $(srcdir)/dependencies
foodir      := $(srcdir)/foofiles
f95dir      := $(srcdir)/f95files
objdir      := $(srcdir)/$(COMPILER_VENDOR)/objects
moddir      := $(srcdir)/$(COMPILER_VENDOR)/modules
intdir      := $(srcdir)/f95files
usedir      := $(srcdir)/f95files
docdir      := $(srcdir)/documentation
f95docdir   := $(docdir)/f95files
htmldir     := $(docdir)/htmlfiles
htmldocdir  := $(docdir)/htmlmanual

#------------------------------------------------------------------------------
# >>> Some useful functions.
#------------------------------------------------------------------------------
MKDIR      := perl -MExtUtils::Command -e mkpath
CP         := perl -MExtUtils::Command -e cp
RMDIR      := perl -w $(scriptdir)/rmdir.pl
RM         := perl -w $(scriptdir)/rm.pl
CAT        := perl -w $(scriptdir)/cat.pl

SET_NOGLOB := set noglob &&

PROTECT          = $(subst {,\{,$(1)) 
DOUBLE_PROTECT   = $(subst {,\\\{,$(1)) 

#TARGET           = $(call PROTECT,$@)
#TARGET_FILE      = $(call DOUBLE_PROTECT,$(@F))
TARGET               = $@
TARGET_FILE          = $(@F)
TARGET_FILENAME_HEAD = $(*F)
TARGET_OBJECT        = $($(join $(TARGET_FILE),.$(OBJSUFFIX)))
TARGET_MODULES       = $($(join $(TARGET_FILE),.mods))

#PREREQUISITES         = $(call PROTECT,$^)
PREREQUISITES         = $^
FIRST_PREREQUISITE    = $<
FORTRAN_PREREQUISITES = $(filter %.$(FSUFFIX),$(PREREQUISITES))

#ALL_OBJECT_FILES = $(wildcard $(call PROTECT,$(objdir)/*.$(OBJSUFFIX)))
#TARGET_OBJECT    = $(join $(basename $(TARGET)),.$(OBJSUFFIX))
#TARGET_MODULES   = $($(join $(join $(basename $(TARGET)),.$(MODSUFFIX)),.mods))
ALL_OBJECT_FILES = $(wildcard $(objdir)/*.$(OBJSUFFIX))

#------------------------------------------------------------------------------
# >>> Construct lists of files.
#
# These are:
#    the source code (foofiles),
#    the object files (objfiles),
#    the program files (runfiles),
#    the html documentation files (htmlfiles),
#    the dependecy files (htmlfiles),
#
# >>> Program source files must have a name starting with "run_".
#
#------------------------------------------------------------------------------

foofiles    := $(wildcard $(foodir)/*.foo)
objfiles    := $(patsubst $(foodir)/%.foo,$(objdir)/%.$(OBJSUFFIX),$(filter-out $(foodir)/run_%,$(foofiles)))
runfiles    := $(patsubst $(foodir)/%.foo,$(bindir)/%.$(PROGSUFFIX),$(filter $(foodir)/run_%,$(foofiles)))
htmlfiles   := $(patsubst $(foodir)/%.foo,$(htmldir)/%.html,$(foofiles))
f95depfiles := $(patsubst $(foodir)/%.foo,$(depdir)/%.f95dep,$(foofiles))
foodepfiles := $(patsubst $(foodir)/%.foo,$(depdir)/%.foodep,$(foofiles))
intfiles    := $(patsubst $(foodir)/%.foo,$(intdir)/%.int,$(foofiles))
usefiles    := $(patsubst $(foodir)/%.foo,$(usedir)/%.use,$(foofiles))
f95files    := $(patsubst $(foodir)/%.foo,$(f95dir)/%.$(FSUFFIX),$(foofiles))
f95docs     := $(patsubst $(f95dir)%,$(f95docdir)%,$(f95files))
intdocs     := $(patsubst $(intdir)%,$(f95docdir)%,$(intfiles))
usedocs     := $(patsubst $(usedir)%,$(f95docdir)%,$(usefiles))
htmlshortfiles := $(patsubst %.html,%_short.html,$(htmlfiles))

#------------------------------------------------------------------------------
# >>> Miscellaneous makefile stuff
#
#------------------------------------------------------------------------------

.DEFAULT :
.DELETE_ON_ERROR :
.SUFFIXES :
.SUFFIXES : .$(OBJSUFFIX) .$(PROGSUFFIX) .$(FSUFFIX) .$(MODSUFFIX) .foodep .f95dep .foo .html
.PHONY : clean distclean docsclean all directories install documentation \
         help distribution manual-pdf manual-html blas lapack
.SECONDARY : $(f95files)

VPATH := $(scriptdir)
vpath %.foo $(foodir)
vpath %.$(FSUFFIX) $(f95dir)
vpath %.foodep $(depdir)
vpath %.f95dep $(depdir)
vpath %.$(MODSUFFIX) $(moddir)

#------------------------------------------------------------------------------
# >>> Targets and dependencies
#
# Immediately below are high level targets that the user will type.
#------------------------------------------------------------------------------

all : $(bindir)/run_molecule.$(PROGSUFFIX)

help :
	@echo 
	@echo "Common arguments are:"
	@echo 
	@echo "    help            - displays this screen"
	@echo "    documentation   - makes the html documentation"
	@echo "    manual-pdf      - make the manual in pdf format"
	@echo "    manual-html     - make the manual in html format"
	@echo
	@echo "    all             - builds the program run_mol.$(PROGSUFFIX)"
	@echo "    run_mol.$(PROGSUFFIX)       - builds the program run_mol.$(PROGSUFFIX)"
	@echo "    run_XXXXX.$(PROGSUFFIX)       - builds the program run_XXXXX.$(PROGSUFFIX)"
	@echo "    install         - installs any compiled programs into $(installdir)"
	@echo
	@echo "    clean           - removes built program files"
	@echo "    docsclean       - removes built documentation files"
	@echo "    distclean       - removes all built files"
	@echo 
	@echo "    blas            - build basic BLAS library"
	@echo "    lapack          - build basic LAPACK library"
	@echo 

install : $(wildcard $(COMPILER_VENDOR)/*.$(PROGSUFFIX))
	@$(CP) $(PREREQUISITES) $(installdir)

clean :
	@$(RM) $(f95depfiles)
	@$(RM) $(foodepfiles)
	@$(RM) $(f95files)
	@$(RM) $(intfiles)
	@$(RM) $(usefiles)
	@$(RM) $(objfiles)
	@$(RM) $(runfiles)
	@$(RM) $(srcdir)/foodependfile $(srcdir)/f95dependfile
	@$(RM) $(objdir)/libtonto.$(LIBSUFFIX)
	@$(RM) $(wildcard $(moddir)/*.$(MODSUFFIX))
	@$(RM) $(wildcard $(moddir)/*.time)
	@$(RM) $(wildcard $(objdir)/*.time)
	@$(RMDIR) $(depdir) $(intdir) $(f95dir)
	@$(RMDIR) $(objdir) $(moddir) $(srcdir)/$(COMPILER_VENDOR)
	@$(RM) $(htmlshortfiles)
	@$(RM) $(htmlfiles)
	@$(RM) $(f95docs)
	@$(RM) $(intdocs)
	@$(RM) $(usedocs)
	@$(RMDIR) $(htmldir) $(f95docdir)

docsclean :
	@$(RM) $(htmlshortfiles)
	@$(RM) $(htmlfiles)
	@$(RM) $(f95docs)
	@$(RM) $(intdocs)
	@$(RM) $(usedocs)
	@$(RMDIR) $(htmldir) $(f95docdir)

distclean : clean docsclean
	@$(RM) $(srcdir)/Makefile

distribution :
	$(scriptdir)/make_dist

documentation : $(htmlfiles) $(docdir)/TONTO-nav-bar.html

manual-pdf : $(docdir)/tonto.pdf

manual-html : $(htmldocdir)/index.html

blas : $(objdir)/libblas.$(LIBSUFFIX)

lapack : $(objdir)/liblapack.$(LIBSUFFIX)

#------------------------------------------------------------------------------
# >>> Documentation.
#
# The manual can be converted to various formats from the docbook source.
#
# The html documentation for each module is generated from the .foo source.
# "foo.pl" also does this.
#
#------------------------------------------------------------------------------

$(htmldocdir)/index.html : \
           $(docdir)/tonto.docbook \
           $(docdir)/tonto.dsl
	@test -d $(htmldocdir) || $(MKDIR) $(htmldocdir)
	@docbook2html -d $(docdir)/tonto.dsl#html -o $(htmldocdir) \
	                $(docdir)/tonto.docbook

$(docdir)/tonto.pdf : \
           $(docdir)/tonto.docbook \
           $(docdir)/tonto.dsl
	@docbook2pdf -d $(docdir)/tonto.dsl#print -o $(docdir) \
	                $(docdir)/tonto.docbook

$(docdir)/TONTO-nav-bar.html : \
           $(htmlfiles) \
           $(srcdir)/make_navbar.pl
	$(PERL) -w $(scriptdir)/make_navbar.pl $(htmldir) > $(TARGET)

$(htmldir)/%.html : \
           $(foodir)/%.foo \
           $(scriptdir)/foo.pl
	@test -d $(htmldir) || $(MKDIR) $(htmldir)
	@test -d $(f95docdir)  || $(MKDIR) $(f95docdir)
	@$(SET_NOGLOB) \
         echo Compiling \
         $(shell $(SET_NOGLOB) echo $(*F) | tr a-z A-Z) \
         Foo code into HTML and Fortran ...
	@$(SET_NOGLOB) \
         $(PERL) -w $(scriptdir)/foo.pl \
	         -htmlshort  $(htmldir)/$(TARGET_FILENAME_HEAD)_short.html \
		 -htmllong   $(TARGET) \
		 -fortran    $(f95docdir)/$(TARGET_FILENAME_HEAD).F95 \
		 -fortranint $(f95docdir)/$(TARGET_FILENAME_HEAD).int \
		 -fortranuse $(f95docdir)/$(TARGET_FILENAME_HEAD).use \
                 $(FIRST_PREREQUISITE)


#-------------------------------------------------------------------------------
# >>> Dependency rules.
#
# The "make_f95_dependencies.pl" script makes a .f95dep file for each .foo file.
# These .f95dep files are placed in the "dependencies" directory and are
# combined together to form the main "f95dependfile" for the makefile. The
# dependencies arise because of Frotran module or Frotran source code
# dependencies.
#
# The "make_foo_dependencies.pl" script makes a .foodep file for each .foo file.
# These .foodep files are placed in the "foodependencies" directory and are
# combined together to form the main "foodependfile" for the makefile. These
# dependencies arise because of textual or parameterised type inheritance.
#
#-------------------------------------------------------------------------------

skip_cmds := clean distclean docsclean distribution \
             foodependfile f95dependfile \
             documentation help manual-pdf manual-html blas lapack
skip_depfile := $(filter $(skip_cmds),$(MAKECMDGOALS))
ifeq ($(skip_depfile),)
include $(srcdir)/f95dependfile
include $(srcdir)/foodependfile
endif

$(srcdir)/foodependfile : $(foodepfiles)
	@$(SET_NOGLOB) \
         $(CAT) $(PREREQUISITES) > $@

$(srcdir)/f95dependfile : $(f95depfiles)
	@$(SET_NOGLOB) \
         $(CAT) $(PREREQUISITES) > $@
#	@$(CAT) $(PREREQUISITES) > $@
#	@$(CAT) $(subst {,\{,$^) > $@

$(depdir)/%.f95dep : \
           $(f95dir)/%.$(FSUFFIX) \
           $(scriptdir)/make_f95_dependencies.pl \
           Makefile \
           $(PLATFORM)                 # Now begine the rule ...
	@test -d $(depdir) || $(MKDIR) $(depdir)
	@$(SET_NOGLOB) \
         echo Making \
         $(shell $(SET_NOGLOB) echo $(TARGET_FILENAME_HEAD) | tr a-z A-Z) \
         Fortran dependency rules ...
	@$(SET_NOGLOB) \
         $(PERL) -w $(scriptdir)/make_f95_dependencies.pl \
                 -I $(f95dir) -I . \
                 -prog_ext $(PROGSUFFIX) \
                 -mod_ext $(MODSUFFIX) \
                 -obj_ext $(OBJSUFFIX)  \
                 -src $(FIRST_PREREQUISITE) \
                 $(MODCASE) \
                 -o $(TARGET)

$(depdir)/%.foodep : \
           $(foodir)/%.foo \
           $(scriptdir)/make_foo_dependencies.pl \
           Makefile \
           $(PLATFORM)                 # Now begin the rules ...
	@test -d $(depdir) || $(MKDIR) $(depdir)
	@$(SET_NOGLOB) \
         echo Making \
         $(shell $(SET_NOGLOB) echo $(TARGET_FILENAME_HEAD) | tr a-z A-Z) \
         Foo dependency rules ...
	@$(SET_NOGLOB) \
         $(PERL) -w $(scriptdir)/make_foo_dependencies.pl \
                 -src $(FIRST_PREREQUISITE) \
                 -o $(TARGET)

#------------------------------------------------------------------------------
# >>> Convert the foo code to Fortran.
#
# "foo.pl" is used to generate .f95 Fortran files from .foo source code. 
#
#------------------------------------------------------------------------------

$(f95dir)/%.$(FSUFFIX) $(intdir)/%.int : \
           $(foodir)/%.foo \
           $(foodir)/macros \
           $(scriptdir)/foo.pl \
           $(foodir)/types.foo \
           Makefile \
           $(scriptdir)/filepp.pl \
           $(scriptdir)/tonto.pm \
           $(scriptdir)/literal.pm \
           $(PLATFORM)                          # Now begin the rules
	@test -d $(f95dir) || $(MKDIR) $(f95dir)
	@test -d $(intdir) || $(MKDIR) $(intdir)
	@$(SET_NOGLOB) \
         echo Compiling \
         $(shell $(SET_NOGLOB) echo $(TARGET_FILENAME_HEAD) | tr a-z A-Z) \
         Foo code into Fortran ...
	@$(SET_NOGLOB) \
         $(PERL) -I$(scriptdir) -w $(scriptdir)/foo.pl \
                 -fortran $(TARGET_FILENAME_HEAD).tmp \
                 -fortranint $(intdir)/$(TARGET_FILENAME_HEAD).int \
                 -fortranuse $(usedir)/$(TARGET_FILENAME_HEAD).use \
                 $(FIRST_PREREQUISITE)
	@$(SET_NOGLOB) \
         $(PERL) -w $(scriptdir)/filepp.pl \
                 -w -I. -I$(foodir) -I$(intdir) -I$(usedir) \
                 -M$(scriptdir) -m literal.pm -m tonto.pm \
                 -o $(TARGET) \
                 -DTONTO_VERSION="'$(TONTO_VERSION)'" \
                 -DTONTO_PLATFORM="'$(TONTO_PLATFORM)'" \
                 -DTONTO_BUILD_DATE="'$(TONTO_BUILD_DATE)'" \
                 $(DEFS) \
                 $(TARGET_FILENAME_HEAD).tmp
	@$(SET_NOGLOB) \
         $(RM) -f $(TARGET_FILENAME_HEAD).tmp

#------------------------------------------------------------------------------
# >>> Object files and module files
#
# Use the script compile_mod.pl - this may speed up compilation for
# developers.  (The module files are only updated if required).
#
# The .$(OBJSUFFIX) files are placed in the "objects" directory and then added
# to the "$(objdir)/libtonto.$(LIBSUFFIX)" library archive as they are made; the archive is
# then used in the final link stage.
#
#------------------------------------------------------------------------------

$(objdir)/%.$(OBJSUFFIX) : $(PLATFORM)
	@test -d $(objdir) || $(MKDIR) $(objdir)
	@test -d $(moddir) || $(MKDIR) $(moddir)
	@$(SET_NOGLOB) \
         echo Making $(TARGET) ...
	@$(if $^,,$(error "Don't know prerequisites for $@"))
	@$(SET_NOGLOB) \
         $(PERL) -w $(scriptdir)/compile_mod.pl \
          -fc "$(SET_NOGLOB) $(FC) $(FFLAGS) $(FOPTNS) -c $(FOUT) $(TARGET) $(FORTRAN_PREREQUISITES)" \
          -provides "$(TARGET_MODULES) $(TARGET)" \
          -requires "$(PREREQUISITES)" \
          -cmp "$(PERL) -w $(scriptdir)/compare_module_file.pl -compiler $(COMPILER_VENDOR)"

$(moddir)/%.$(MODSUFFIX) : $(PLATFORM)
	@test -d $(objdir) || $(MKDIR) $(objdir)
	@test -d $(moddir) || $(MKDIR) $(moddir)
	@$(SET_NOGLOB) \
         echo Making $(TARGET) ...
	@$(if ^,,$(error "Don't know prerequisites for $@"))
	@$(SET_NOGLOB) \
         $(PERL) -w $(scriptdir)/compile_mod.pl \
          -fc "$(SET_NOGLOB) $(FC) $(FFLAGS) $(FOPTNS) -c $(FOUT) $(TARGET_OBJECT) $(FORTRAN_PREREQUISITES)" \
          -provides "$(TARGET_MODULES) $(TARGET_OBJECT)" \
          -requires "$(PREREQUISITES)" \
          -cmp "$(PERL) -w $(scriptdir)/compare_module_file.pl -compiler $(COMPILER_VENDOR)"

#------------------------------------------------------------------------------
# >>> Generate the main run_XXXX.$(PROGSUFFIX) executable
#------------------------------------------------------------------------------

$(bindir)/%.$(PROGSUFFIX) : $(PLATFORM)
	@test -d $(bindir) || $(MKDIR) $(bindir)
	@echo 
	@echo This is the final link phase ...
	@echo Building $(objdir)/libtonto.$(LIBSUFFIX) from all object files ...
	@$(SET_NOGLOB) \
         $(MKLIB) $(LIBOUT)$(objdir)/libtonto.$(LIBSUFFIX) $(ALL_OBJECT_FILES)
	@$(SET NO_GLOB) \
         echo Making $(TARGET) ...
	@$(SET_NOGLOB) \
         echo $(FC) $(FFLAGS) $(FOPTNS) $(FOUT) $(TARGET) $(FORTRAN_PREREQUISITES) \
                  -L$(objdir) -ltonto $(LIBS)
	@$(SET NOGLOB) \
              $(FC) $(FFLAGS) $(FOPTNS) $(FOUT) $(TARGET) $(FORTRAN_PREREQUISITES) \
                  -L$(objdir) -ltonto $(LIBS) || $(RM) $(TARGET)
	@$(SET NOGLOB) \
         $(RM) $(*F).$(OBJSUFFIX)
	@echo "Finished"

#------------------------------------------------------------------------------
# >>> Lapack, blas
#------------------------------------------------------------------------------

$(objdir)/libblas.$(LIBSUFFIX) : lapack/blas.f
	@echo Building BLAS library
	$(FC) $(FOPTNS) -c $(FOUT) blas.$(OBJSUFFIX) $(PREREQUISITES)
	$(MKLIB) $(LIBOUT)$@ blas.$(OBJSUFFIX)
	@echo Deleting blas.$(OBJSUFFIX)
	@$(RM) blas.$(OBJSUFFIX)

$(objdir)/liblapack.$(LIBSUFFIX) : lapack/lapack.f
	@echo Building LAPACK library
	$(FC) $(FOPTNS) -c $(FOUT) lapack.$(OBJSUFFIX) $(PREREQUISITES)
	$(MKLIB) $(LIBOUT)$@ lapack.$(OBJSUFFIX)
	@echo Deleting lapack.$(OBJSUFFIX)
	@$(RM) lapack.$(OBJSUFFIX)


#------------------------------------------------------------------------------
# >>> Lazy targets.
#------------------------------------------------------------------------------

%.$(PROGSUFFIX) :
	@$(SET NOGLOB) \
         $(MAKE) $(bindir)/$(*F).$(PROGSUFFIX)

%.$(OBJSUFFIX) :
	@$(SET NOGLOB) \
         $(MAKE) $(objdir)/$(*F).$(OBJSUFFIX)

