!---------------------------------------------------------------------------
!
! VEC{VEC_{INTRINSIC}} : an array of elements each of which is 
! a vector of intrinsic elements, possible of different length
!
! Copyright (C) Daniel Grimwood, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!---------------------------------------------------------------------------

virtual module VEC{VEC_{INTRINSIC}}

   implicit none

contains

   create(dim) ::: leaky
   ! Create space for object
      self :: PTR
      dim :: INT, IN
      status :: INT
      nullify(self)
      allocate(self(dim),STAT=status)
      DIE_IF(status/=0,"error in allocating memory")
      ADD_MEMORY(dim*ELEMENT_TYPE_SIZE)
      .nullify_ptr_part
   end

   create(dim,dimv) ::: leaky
   ! Create space for a vector of vectors
      self :: PTR
      dim,dimv :: INT
      status :: INT
      nullify(self)
      allocate(self(dim),STAT=status)
      DIE_IF(status/=0,"error in allocating memory")
      ADD_MEMORY(dim*ELEMENT_TYPE_SIZE)
      .nullify_ptr_part
      .create_vec(dimv)
   end

   create(dim,bounds) ::: leaky
   ! Create space for a vector of vectors
      self :: PTR
      dim :: INT
      bounds :: VEC{INT}(2)
      status :: INT
      nullify(self)
      allocate(self(dim),STAT=status)
      DIE_IF(status/=0,"error in allocating memory")
      ADD_MEMORY(dim*ELEMENT_TYPE_SIZE)
      .nullify_ptr_part
      .create_vec(bounds)
   end

   create(bounds1) ::: leaky
   ! Create space for a vector of vectors
      self :: PTR
      bounds1 :: VEC{INT}(2)
      status :: INT
      allocate(self(bounds1(1):bounds1(2)),STAT=status)
      DIE_IF(status/=0,"error in allocating memory")
      ADD_MEMORY((bounds1(2)-bounds1(1)+1)*ELEMENT_TYPE_SIZE)
      .nullify_ptr_part
   end

   create(bounds1,bounds2) ::: leaky
   ! Create space for a vector of vectors
      self :: PTR
      bounds1,bounds2 :: VEC{INT}(2)
      status :: INT
      allocate(self(bounds1(1):bounds1(2)),STAT=status)
      DIE_IF(status/=0,"error in allocating memory")
      ADD_MEMORY((bounds1(2)-bounds1(1)+1)*ELEMENT_TYPE_SIZE)
      .nullify_ptr_part
      .create_vec(bounds2)
   end

   create_vec(dimv) ::: leaky
   ! Allocate the pointer parts
      dimv :: INT
      i :: INT
      do i = 1,.dim
         self(i).element.create(dimv)
      end
   end

   create_vec(bounds) ::: leaky
   ! Allocate the pointer parts
      bounds :: VEC{INT}(2)
      i :: INT
      do i = 1,.dim
         self(i).element.create(bounds)
      end
   end

   create_copy(vec) ::: leaky
   ! Create a replica copy of "vec".
      vec :: VEC{VEC_{INTRINSIC}}, IN
      self :: PTR
      .create(vec.dim)
      .copy(vec)
   end

   nullify_ptr_part
   ! Nullify the pointer parts
      s :: INT
      do s = 1,.dim
         nullify(self(s).element)
      end
   end

   destroy ::: leaky
   ! Destroy space for object
      self :: PTR
      if (.destroyed) return
      .destroy_ptr_part
      DELETE_MEMORY(.dim*ELEMENT_TYPE_SIZE)
      deallocate(self)
   end

   destroy_ptr_part ::: leaky
   ! Destroy the pointer parts
      self :: PTR
      s :: INT
      do s = 1,size(self)
         self(s).element.destroy
      end
   end

   max_element_dim result (res)
   ! Return the maximum element dimension
      self :: IN
      res :: INT
      s :: INT
      res = 0
      do s = 1,.dim
         res = max(res,self(s).element.dim)
      end
   end

   copy(v) ::: leaky
   ! Make a copy of "v".
      v :: VEC{VEC_{INTRINSIC}}
   ENSURE(.dim==v.dim,"v has incompatible size")
      i :: INT
      .nullify_ptr_part
      do i = 1,v.dim
         if (v(i).element.destroyed) cycle
         self(i).element.create_copy(v(i).element)
      end
   end

   shrink(dim) ::: leaky
   ! Shrinks self to dimension "dim". Contents are retained.
      self :: PTR
      dim :: INT, IN
   ENSURE(.created, "no self array")
   ENSURE(lbound(self,1)==1,"lbound must be 1")
   ENSURE(dim<=.dim, "dim not small enough")
      i,old_size :: INT
      old :: VEC{VEC_{INTRINSIC}}*
      if (dim==.dim) return
      old => self
      old_size = old.dim
      nullify(self)
      self.create(dim)
      do i = 1,dim
        self(i).element => old(i).element
        nullify(old(i).element)
      end
      do i = dim+1,old_size
        old(i).element.destroy
      end
      old.destroy
   end

   expand(dim) ::: leaky
   ! Expands self to dimension "dim". Contents are retained.
   ! NOTE: pointer assignment is used to retain contents.
   ! NOTE: Elements which are added are nullified.
      self :: PTR
      dim :: INT, IN

      old :: VEC{VEC_{INTRINSIC}}*
      old_size,i :: INT

      if (.destroyed) then

        .create(dim)

      else

        ENSURE(lbound(self,1)==1,"lbound must be 1")
        ENSURE(dim>=.dim, "dim not large enough")

        old => self
        old_size = old.dim
        self.create(dim)

        do i = 1,old_size
           self(i).element => old(i).element
           nullify(old(i).element)
        end

        old.destroy

        do i = old_size+1,dim
           nullify(self(i).element)
        end

      end

   end

   append(v) ::: leaky
   ! Expands self to the required dimension, and append the contents
   ! of encapsulated vector "v". 
      self :: PTR
      v :: VEC{VEC_{INTRINSIC}}, IN

      dim,i :: INT

      if (.destroyed) then; dim = 0
      else;                 dim = .dim
      end

      .expand(dim+v.dim)

      do i = 1,v.dim
        self(dim+i).element.create_copy(v(i).element)
      end

   end

   append(value) ::: leaky
   ! Expands self to the required dimension, and append the single
   ! "value" onto the end of self.
      self :: PTR
      value :: VEC{INTRINSIC}, IN

      dim :: INT

      if (.destroyed) then; dim = 0
      else;                 dim = .dim
      end

      .expand(dim+1)

      self(dim+1).element.append(value)

   end

   append_listed_to(res,list) ::: leaky
   ! Append together (i.e. concatenate) the vectors in self whose
   ! indices are listed in "list".
      res :: VEC{INTRINSIC}*
      list :: VEC{INT}, IN

   ENSURE(list.dim>=1,"list must not have zero dimension")
   ENSURE(maxval(list)<=.dim,"some elements of list are too large")
   ENSURE(minval(list)>=1,"list elements must be +ve")

      i,l :: INT

      l = list(1)
      res.create_copy(self(l).element)

      do i = 2,list.dim
         l = list(i)
         res.append(self(l).element)
      end

   end

end

