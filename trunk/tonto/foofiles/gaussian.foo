!-------------------------------------------------------------------------------
!
! GAUSSIAN :: For describing a single gaussian function. 
!
! (c) Dylan Jayatilaka, november 1997
!
! $Id$
!-------------------------------------------------------------------------------
module GAUSSIAN

   use TYPES
   use SYSTEM
   use STR
   use INT
   use TEXTFILE

   implicit none         

#  include "macros"
#  include "gaussian.int"

!   type gaussian_type
!
!   INT :: l
!   ! l quantum number for the gaussian
!
!   DBL :: ex
!   ! Exponent for the gaussian
!
!   VEC(3) :: pos
!   ! Position of the gaussian
!   end

contains

   create(l,pos,ex) 
   ! Create a gaussian object
      PTR :: self
      INT :: l
      VEC(3) :: pos
      DBL :: ex
      nullify(self)
      allocate(self)
      ADD_MEM(GAUSSIAN_SIZE)
      .set(l,pos,ex) 
   end

   create(l,Rx,Ry,Rz,ex) 
   ! Create a gaussian object
      PTR :: self
      INT :: l
      DBL :: Rx,Ry,Rz
      DBL :: ex
      nullify(self)
      allocate(self)
      ADD_MEM(GAUSSIAN_SIZE)
      .set(l,Rx,Ry,Rz,ex)
   end

   destroy 
   ! Destroy a shell object
      PTR :: self
      if (.destroyed) return
      DELETE_MEM(GAUSSIAN_SIZE)
      deallocate(self)
   end

   created result(res)
   ! Returns true if self has been created
      PTR :: self
      BIN :: res
      res = associated(self)
   end

   destroyed result(res)
   ! Returns true if self has *not* been created
      PTR :: self
      BIN :: res
      res = NOT associated(self)
   end

   set(l,pos,ex) 
   ! Set a gaussian object
      INT :: l
      VEC(3) :: pos
      DBL :: ex
      .l = l
      .pos = pos
      .ex = ex
   end

   set(l,Rx,Ry,Rz,ex) 
   ! Create a gaussian object
      INT :: l
      DBL :: Rx,Ry,Rz
      DBL :: ex
      .l = l
      .pos = (/Rx,Ry,Rz/)
      .ex = ex
   end

   set(ex) 
   ! Set a gaussian object
      DBL :: ex
      .ex = ex
   end

   l_chr result(res)
   ! Return a character representation for the angular mtm
      CHR :: res
      INT :: l
      l = .l
      select case (l) 
         case (0); res="s"
         case (1); res="p"
         case (2); res="d"
         case (3); res="f"
         case (4); res="g"
         case default; 
            DIE_IF(l>23,"angular momentum too large:"// trim(l.to_str))
            res = achar(l-4+iachar("g"))
      end select
   end

   put(out) 
   ! Put the gaussian information to file "out"
      TEXTFILE :: out
      out.show("L quantum number = ",.l)
      out.show("position         = ",.pos)
      out.show("Exponent         = ",.ex)
   end

!*****************
!  Inquiry methods
!*****************

   l result(res) [pure]
   ! Return the angular momentum l
      IN :: self
      INT :: res
      res = .l
   end

   n_comp result(res) [pure]
   ! Return the number of components in the gaussian shell.
      IN :: self
      INT :: res
      res = (.l+1)*(.l+2)/2
   end

   pos result(res) [pure]
   ! Return the position of the shell
      IN :: self
      VEC(3) :: res
      res = .pos
   end

   pos(comp) result(res) [pure]
   ! Return the position of the shell
      IN :: self
      INT, IN :: comp
      DBL :: res
      res = .pos(comp)
   end

   ex result(res) [pure]
   ! Return the exponent vector pointer
      IN :: self
      DBL :: res
      res = .ex
   end

end 
