!-------------------------------------------------------------------------------
!
! RMS_INDICES
!
! This object is used to store precalculated information pertaining to the
! reduced multiplication scheme (RMS) used in electron repulsion integral 
! evaluation.
!
! Copyright (C) Dylan Jayatilaka, 2000
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!-------------------------------------------------------------------------------

module RMS_INDICES

   implicit none

contains

   create ::: get_from(OBJECT), leaky
   ! Create an object. This version does not set defaults.
   end

   destroy ::: get_from(OBJECT), leaky
   ! Destroy an object
   end
 
   nullify_ptr_part
   ! Nullify the pointer parts of self
!    nullify(.nx)
!    nullify(.ny)
!    nullify(.nz)
     nullify(.xyz0)
     nullify(.xy0)
     nullify(.xz0)
     nullify(.yz0)
     nullify(.z0)
     nullify(.y0)
     nullify(.x0)
     nullify(.n0)
     nullify(.a0)
     nullify(.xy_rms)
     nullify(.xy_rms_n)
     nullify(.xy_unique_n)
     nullify(.xy_rms_a)
     nullify(.xy_unique_a)
   end
 
   destroy_ptr_part ::: leaky
   ! Destroy the pointer parts of self
!    .nx.destroy
!    .ny.destroy
!    .nz.destroy
     .xyz0.destroy
     .xy0.destroy
     .xz0.destroy
     .yz0.destroy
     .z0.destroy
     .y0.destroy
     .x0.destroy
     .n0.destroy
     .a0.destroy
     .xy_rms.destroy
     .xy_rms_n.destroy
     .xy_unique_n.destroy
     .xy_rms_a.destroy
     .xy_unique_a.destroy
   end

   created result(res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has been created
      self :: PTR
      res :: BIN
   end

   destroyed result(res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has *not* been created
      self :: PTR
      res :: BIN
   end

!   set_indices(l_min,l_max,nx,ny,nz) ::: leaky
!   ! Make the arrays which tell where the product of the first two factors is
!   ! repeated.  These arrays are used to reduce work in the multiplication of
!   ! the 2d integrals to form the full ERI's.
!     l_min,l_max :: INT, IN
!     nx,ny,nz :: VEC{INT}, IN
!   ENSURE(nx.dim==(n_comp_up_to(l_max)-n_comp_up_to(l_min-1)),"wrong size nx")
!   ENSURE(ny.dim==nx.dim,"wrong size ny")
!   ENSURE(nz.dim==nx.dim,"wrong size nz")
!     n,i :: INT
!     list :: VEC{STR}*
!     n = n_comp_up_to(l_max) - n_comp_up_to(l_min-1)
!     list.create(n)
!     list = " "
!     do i = 1,n
!        list(i) = trim(nx(i).to_str)//" "//trim(ny(i).to_str)
!     end
!     .xy_rms.repetitions_in(list)
!     list.destroy
!   end

   set_indices(l_min,l_max,nx,ny,nz) ::: leaky
   ! Make the arrays which tell where the powers are zero, and where the product
   ! of the first two factors is repeated, and where they are not. These arrays
   ! are used to reduce work in the multiplication of the 2d integrals to form
   ! the full ERI's.
     l_min,l_max :: INT, IN
     nx,ny,nz :: VEC{INT}, IN
   ENSURE(nx.dim==(n_comp_up_to(l_max)-n_comp_up_to(l_min-1)),"wrong size nx")
   ENSURE(ny.dim==nx.dim,"wrong size ny")
   ENSURE(nz.dim==nx.dim,"wrong size nz")
     n,i,ixyz,ixy,ixz,iyz,ix,iy,iz,in,ia :: INT
     listn,lista :: VEC{STR}*
     n = n_comp_up_to(l_max) - n_comp_up_to(l_min-1)
     .xyz0.create(n)               ! Set where the arrays are 0 (actually 1)
     .xy0.create(n)  
     .xz0.create(n)
     .yz0.create(n)
     .x0.create(n)
     .y0.create(n)
     .z0.create(n)
     .n0.create(n)
     .a0.create(n)
     listn.create(n)
     lista.create(n)
     listn = " "
     lista = " "
     ixyz = 0
     ixy  = 0
     ixz  = 0
     iyz  = 0
     ix   = 0
     iy   = 0
     iz   = 0
     in   = 0
     ia   = 0
     do i = 1,n
        if      (nx(i)==1 AND ny(i)==1 AND nz(i)==1) then; ixyz = ixyz + 1; .xyz0(ixyz) = i
        else if (ny(i)==1 AND nz(i)==1) then;              iyz  = iyz  + 1; .yz0(iyz) = i
        else if (nx(i)==1 AND nz(i)==1) then;              ixz  = ixz  + 1; .xz0(ixz) = i
        else if (nx(i)==1 AND ny(i)==1) then;              ixy  = ixy  + 1; .xy0(ixy) = i
        else if (nz(i)==1) then;                           iz   = iz   + 1;  .z0(iz)  = i
        else if (ny(i)==1) then;                           iy   = iy   + 1;  .y0(iy)  = i
        else if (nx(i)==1) then;                           ix   = ix   + 1;  .x0(ix)  = i
        else;                                              in   = in   + 1;  .n0(in)  = i
                listn(in) = trim(nx(i).to_str)//" "//trim(ny(i).to_str)
        end
        if      (nx(i)==1 OR  ny(i)==1 OR  nz(i)==1) then; ia   = ia   + 1;  .a0(ia) = i
                lista(ia) = trim(nx(i).to_str)//" "//trim(ny(i).to_str)
        end
     end
     .xyz0.shrink(ixyz)
     .xy0.shrink(ixy)
     .xz0.shrink(ixz)
     .yz0.shrink(iyz)
     .x0.shrink(ix)
     .y0.shrink(iy)
     .z0.shrink(iz)
     .n0.shrink(in)
     .a0.shrink(ia)
     listn.shrink(in)
     lista.shrink(ia)
     ! Locate the reduced multiplies
     .xy_rms_n.repetitions_in(listn) ! RMS for terms with non-zero indices
     .xy_rms_a.repetitions_in(lista) ! RMS with at least one zero index
     lista.destroy
     listn.destroy
     !
   ! stdout.show("n = ",n)
   ! stdout.show("l_min = ",l_min)
   ! stdout.show("l_max = ",l_max)
   ! stdout.text("nn:")
   ! do i = 1,n
   !    stdout.put(i)
   !    stdout.put(nx(i))
   !    stdout.put(ny(i))
   !    stdout.put(nz(i))
   !    stdout.flush
   ! end
   ! stdout.text("n0:")
   ! stdout.put(.n0,"column")
   ! stdout.text("xy_rms_n:")
   ! do i = 1,.xy_rms_n.dim
   !    stdout.put(.xy_rms_n(i).element,"row")
   !    stdout.flush
   ! end
   ! stdout.text("a0:")
   ! stdout.put(.a0,"column")
   ! stdout.text("xy_rms_a:")
   ! do i = 1,.xy_rms_a.dim
   !    stdout.put(.xy_rms_a(i).element,"row")
   !    stdout.flush
   ! end
   end

!   set_indices(e_min,e_max,f_min,f_max,ex,ey,ez,fx,fy,fz) ::: leaky
!   ! Make the arrays which tell where the powers are zero, and where the product
!   ! of the first two factors is repeated, and where they are not. These arrays
!   ! are used to reduce work in the multiplication of the 2d integrals to form
!   ! the full ERI's.
!     e_min,e_max,f_min,f_max :: INT, IN
!     ex,ey,ez,fx,fy,fz :: VEC{INT}, IN
!   ENSURE(ex.dim==(n_comp_up_to(e_max)-n_comp_up_to(e_min-1)),"wrong size ex")
!   ENSURE(ey.dim==ex.dim,"wrong size ey")
!   ENSURE(ez.dim==ex.dim,"wrong size ez")
!   ENSURE(fx.dim==(n_comp_up_to(e_max)-n_comp_up_to(e_min-1)),"wrong size fx")
!   ENSURE(fy.dim==fx.dim,"wrong size fy")
!   ENSURE(fz.dim==fx.dim,"wrong size fz")
!     n,i,ixyz,ixy,ixz,iyz,ix,iy,iz,in,ia :: INT
!     list :: VEC{STR}*
!     ne = n_comp_up_to(e_max) - n_comp_up_to(e_min-1)
!     nf = n_comp_up_to(f_max) - n_comp_up_to(f_min-1)
!     .xyz0.create(n)               ! Set where the arrays are 0 (actually 1)
!     .xy0.create(n)  
!     .xz0.create(n)
!     .yz0.create(n)
!     .x0.create(n)
!     .y0.create(n)
!     .z0.create(n)
!     .n0.create(n)
!     .a0.create(n)
!     list.create(n)
!     list = " "
!     ixyz = 0
!     ixy  = 0
!     ixz  = 0
!     iyz  = 0
!     ix   = 0
!     iy   = 0
!     iz   = 0
!     in   = 0
!     ia   = 0
!     do i = 1,n
!        if      (nx(i)==1 AND ny(i)==1 AND nz(i)==1) then; ixyz = ixyz + 1; .xyz0(ixyz) = i
!        else if (ny(i)==1 AND nz(i)==1) then;              iyz  = iyz  + 1; .yz0(iyz) = i
!        else if (nx(i)==1 AND nz(i)==1) then;              ixz  = ixz  + 1; .xz0(ixz) = i
!        else if (nx(i)==1 AND ny(i)==1) then;              ixy  = ixy  + 1; .xy0(ixy) = i
!        else if (nz(i)==1) then;                           iz   = iz   + 1;  .z0(iz)  = i
!        else if (ny(i)==1) then;                           iy   = iy   + 1;  .y0(iy)  = i
!        else if (nx(i)==1) then;                           ix   = ix   + 1;  .x0(ix)  = i
!        else;                                              in   = in   + 1;  .n0(in)  = i
!                    list(in) =   trim(nx(i).to_str)//" "//trim(ny(i).to_str)
!        end
!        if      (nx(i)==1 OR  ny(i)==1 OR  nz(i)==1)       ia   = ia   + 1;  .a0(ia) = i
!     end
!     .xyz0.shrink(ixyz)
!     .xy0.shrink(ixy)
!     .xz0.shrink(ixz)
!     .yz0.shrink(iyz)
!     .x0.shrink(ix)
!     .y0.shrink(iy)
!     .z0.shrink(iz)
!     .n0.shrink(in)
!     .a0.shrink(in)
!     list.shrink(in)
!     ! Locate the reduced multiplies
!     .xy_rms.repetitions_in(list,.xy_unique)
!     stdout.text("list:")
!     stdout.put(list,"column")
!     if (.xy_unique.created) then
!     stdout.text("unique")
!     stdout.put(.xy_unique,"column")
!     end
!     if (.xy_rms.created) then
!     stdout.text("repeated")
!     do i = 1,.xy_rms.dim
!        stdout.put(.xy_rms(i).element,"row")
!     end
!     end
!     list.destroy
!   end

   n_comp_up_to(l) result(res) ::: selfless, private, always_pure
   ! No. of gaussian cartesian component functions up to and including the shell
   ! with momentum "l".
     l :: INT, IN
     res :: INT
     res = (l+1)*(l+2)*(l+3)/6
   end

end
