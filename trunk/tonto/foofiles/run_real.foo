! Copyright (C) Dylan Jayatilaka, 1999
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$

program run_real

   use TYPES
   use SYSTEM
   use TEXTFILE
   use REAL

   implicit none

   val,x,y :: REAL
   a,b,c,fa,fb,fc,fx :: REAL
    i :: INT

   tonto.initialize
   stdout.create_stdout
   stdout.open

   stdout.text("10 random numbers:")
   stdout.flush
   do i=1,10
     a.to_random_normal
     stdout.put(a,flush=1)
   end


   stdout.flush
   stdout.text("Find an initial bracket for the function (x-1)^2 + 1")
   stdout.text("which contains its minimum value")
   stdout.flush

   a = 1.8
   b = 1.5
   c = 1.3
   stdout.text("Initially")
   stdout.show("a  =",a)
   stdout.show("b  =",b)
   stdout.show("c  =",c)
   stdout.show("fa =",func(a))
   stdout.show("fb =",func(b))
   stdout.show("fc =",func(c))

   func.find_initial_bracket(a,b,c,fa,fb,fc)

   stdout.flush
   stdout.text("Finally")
   stdout.show("a  =",a)
   stdout.show("b  =",b)
   stdout.show("c  =",c)
   stdout.show("fa =",fa)
   stdout.show("fb =",fb)
   stdout.show("fc =",fc)

   stdout.flush
   stdout.text("Now minimise the function ...")
   stdout.flush

   func.minimise_brent(a,b,c,x,fx,0.00001d0)

   stdout.show("x_min  =",x)
   stdout.show("f_min  =",fx)

   stdout.flush
   stdout.text("Now integrate it from 1->2:")
   stdout.flush

   val = func.integrate_adaptive_trapezoid(1.0d0,2.0d0,TOL(8))
   stdout.show("Answer =",val)

   stdout.flush
   stdout.text("Integrate arcsin using adaptive trapezoid method")
   stdout.text("from 0->1/2")
   stdout.flush

   val = arcsin.integrate_adaptive_trapezoid(0.0d0,0.5d0,TOL(8))
   stdout.show("Answer =",val)

   stdout.flush
   stdout.text("Integrate arcsin using adaptive simpson method")
   stdout.text("from 0->1/2")
   stdout.flush

   val = arcsin.integrate_adaptive_simpson(0.0d0,0.5d0,TOL(8))
   stdout.show("Answer =",val)

end
