!---------------------------------------------------------------------------
!
! IRREP: For representing an irreducible representation of a pointgroup
!
! Copyright (C) Daniel Grimwood, 1999
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!---------------------------------------------------------------------------

module IRREP

   implicit none

contains

!  ==================
!  Allocation methods
!  ==================

   create ::: get_from(OBJECT), leaky, pure
   ! Create an object. This version does not set defaults.
   end

   destroy ::: get_from(OBJECT), leaky, pure
   ! Destroy an object
   end

   nullify_ptr_part ::: alwyays_pure
   ! Nullify the pointer parts of an irrep
      self :: INOUT

      nullify(.character)
      nullify(.mat)

   end

   destroy_ptr_part ::: leaky, pure
   ! Destroy the pointer parts of an irrep
      self :: INOUT

      .character.destroy
      .mat.destroy

   end

   created result (res) ::: get_from(OBJECT), inlined_by_foo, always_pure
   ! Returns true if self has been created
      self :: PTR
      res :: BIN
   end

   destroyed result (res) ::: get_from(OBJECT), inlined_by_foo, always_pure
   ! Returns true if self has *not* been created
      self :: PTR
      res :: BIN
   end

!  ============
!  Copy methods
!  ============


   create_copy(object) ::: get_from(OBJECT), leaky, pure
   ! Create a copy of object
   end

   copy(object) ::: leaky, pure
   ! Copy object to self
      self :: OUT
      object :: IRREP, IN

      self = object

      .nullify_ptr_part

      COPY_COMPONENT(character)
      COPY_COMPONENT(mat)

   end

end
