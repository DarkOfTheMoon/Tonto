! Copyright (C) Dylan Jayatilaka, 2007
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: $


program run_PI

!  This program generates pi by Reimann integration.
!  It uses the formula pi = \int_0^1 4/(1+x^2) dx.

   implicit none

   pi,h,x :: REAL                        ! Declare variables
   i,n :: INT

   ! Create the tonto system object
   ! Initialise parallel stuff too.
   TONTO_CREATE

   ! Create and open IO files
   stdout.create_stdout; stdout.open     ! stdout is always declared

   ! Set how many Riemann blocks
   n = 100000000
   stdout.show("No. of intervals = ",n)

   ! Start the timer
   std_time.start_timing                 ! std_time is always declared

   ! Do the parallel Pi integration =====================================

   pi = ZERO                             ! Initialise pi
   h = ONE/n                             ! Width of one integration block
   parallel do i = 1,n                   ! <-- Parallel loop .. easy!
      x = h * (i-HALF)                   ! Value of x in the block
      pi = pi + h * FOUR/(ONE+x*x)       ! One Riemann block
   end
   PARALLEL_SUM(pi)                      ! Sum up all processor answers
   stdout.show("Pi               = ",pi) ! Report answer
   ! ====================================================================
   
   ! Stop timing
   std_time.stop_timing

   ! Report time
   stdout.text(std_time.elapsed_time_message)
   stdout.text(std_time.elapsed_cpu_time_message)

   ! Clean up IO file object
   TEXTFILE:destroy(stdout)

   ! Clean up tonto system object
   TONTO_DESTROY

end
