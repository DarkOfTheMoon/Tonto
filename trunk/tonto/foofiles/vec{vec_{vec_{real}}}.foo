!---------------------------------------------------------------------------
!
!  VEC{VEC_{VEC_{REAL}}} : 
!
!  A list of list of list of rweal numbers.
!
! Copyright (C) Daniel Grimwood, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!---------------------------------------------------------------------------

module VEC{VEC_{VEC_{REAL}}}

   implicit none

contains

   create(dim) ::: get_from(VEC{OBJECT}), leaky
   ! Create space for object
      self :: PTR
      dim :: INT, IN
   end

   create(lb,ub) ::: get_from(VEC{OBJECT}), leaky
   ! Create the vector with lower bound "lb", upper bound "ub"
      self :: PTR
      lb,ub :: INT, IN
   end

   destroy ::: get_from(VEC{OBJECT}), leaky
   ! Destroy space for object
      self :: PTR
   end

   nullify_ptr_part
   ! Nullify the pointer part of the vecvec
       s :: INT
      do s = 1,size(self)
         nullify(self(s).element)
      end
   end

   destroy_ptr_part
   ! Destroy the pointer part of the vecvec
       s :: INT
      do s = 1,size(self)
         self(s).element.destroy
      end
   end

   create_copy(vec) ::: get_from(VEC{OBJECT}), leaky
   ! Create a replica copy of "vec".
      vec :: VEC{VEC_{VEC_{REAL}}}, IN
      self :: PTR
   end

   copy(v) ::: leaky
   ! Make a copy of "v".
      v :: VEC{VEC_{VEC_{REAL}}}
   ENSURE(.dim==v.dim,"v has incompatible size")
      i :: INT
      do i = 1,v.dim
         self(i).element.create_copy(v(i).element)
      end
   end

   created result(res) ::: get_from(VEC{OBJECT}), inlined_by_foo
   ! Returns true if self has been created
      self :: PTR
      res :: BIN
   end

   destroyed result(res) ::: get_from(VEC{OBJECT}), inlined_by_foo
   ! Returns true if self has *not* been created
      self :: PTR
      res :: BIN
   end

end
