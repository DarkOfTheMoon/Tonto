!---------------------------------------------------------------------------------------
!
! TYPES : used to deposit all derived types used in TONTO.
!
! A separate module is required so that two modules can use 
! each others types, even if they can't use each others routines by
! with a "use" statement. In C++ language every one of TONTO's objects
! are "friends" with each other.
!
! $Id$
!
!---------------------------------------------------------------------------------------
module TYPES

   implicit none

#include "macros"

   type error_type
      INT :: status                                ! Set non-zero if there is an error condition
      INT :: unit                                  ! Unit number for error messages
   end

   type mm_type
      INT :: used                                  ! Memory used so far
      INT :: blocks                                ! No of memory blocks allocated so far
      INT :: max_used                              ! Maximum amount of memory used so far
      INT :: max_blocks                            ! Maximum amount of memory blocks allocated so far
      INT :: limit                                 ! Soft memory limit
      BIN :: exceeded                              ! True if the memory used exceeds the soft limit
      STR :: units                                 ! Memory usage units
      INT :: level                                 ! The current call-stack level
      INT :: max_level                             ! Maximum call-stack level ?
      INT :: check_level                           ! Memory checking is enabled for all routines at this level or higher in the call-stack
      IVEC, PTR   :: used_stack       DEFAULT_NULL ! Stores the amount of memory used at each call-level
      STRVEC, PTR :: call_stack       DEFAULT_NULL ! Stores the name of each subroutine at each call-level for tracebacks
   end 

   type dblfmt_type
      INT :: fields                                ! No of fields (i.e. columns) to use for outputting     
      INT :: width                                 ! Width of each field
      INT :: precision                             ! No. of decimal places to use for output
      STR :: dbl_style                             ! Fortran style character for the dbl variable
   end 

   type buffer_type
      INT  :: pos                                  ! position of the last character of the last item processed in buffer_str
      INT  :: item                                 ! the item number of the last item processed in buffer_str
      INT  :: n_items                              ! total number of items in the buffer_str
      BIN  :: analysed                             ! true if the buffer_str has been analysed
      STR  :: comment_chars                        ! comment characters to be used in the buffer_str
      BSTR :: buffer_str                           ! the actual buffer string
   end 

   type unitnumber_type
     INT :: unit                                   ! The unit number
   end

   type file_type
      STR :: name                                  ! The name of the file
      INT :: unit                                  ! The unit number
      INT :: record                                ! The current record of the output
      INT :: io_status                             ! Set non-zero if there is an error condition
      STR :: action                                ! The type of action performed on this file
      STR :: file_status                           ! File status
      BIN :: buffered                              ! Whether to use buffering if the file is for numbers
      INT       :: int_buffer_pos                  ! The integer buffer position marker
      IVEC, PTR :: int_buffer         DEFAULT_NULL ! The integer buffer which is flushed to the file when full
      INT       :: dbl_buffer_pos                  ! The dbl buffer position marker
      VEC, PTR  :: dbl_buffer         DEFAULT_NULL ! The dbl buffer which is flushed to the file when full
      INT       :: cdbl_buffer_pos                 ! The cdbl buffer position marker
      CVEC, PTR :: cdbl_buffer        DEFAULT_NULL ! The cdbl buffer which is flushed to the file when full
   end 

   type input_type
      STR :: name                                  ! The name of the file
      INT :: unit                                  ! The unit number
      INT :: record                                ! The current record of the output
      INT :: io_status                             ! Set non-zero if there is an error condition
      BUFFER :: buffer                             ! The input file buffer which holds one line of input
   end 

   type output_type
      STR :: name                                  ! The name of the file
      INT :: unit                                  ! The unit number
      INT :: record                                ! The current record of the output
      INT :: io_status                             ! Set non-zero if there is an error condition
      INT :: fields                                ! No of fields (i.e. columns) to use for outputting the variable 
      INT :: int_width                             ! Width of an integer field
      INT :: dbl_width                             ! Width of a dbl field
      INT :: dbl_precision                         ! No. of decimal places to use for outputing a dbl variable
      STR :: dbl_style                             ! Fortran style character for a dbl variable
      INT :: margin                                ! Margin width 
      BIN :: labels                                ! Whether to use column and row labels on vectors and matrices
      BUFFER :: buffer                             ! The output buffer which holds one line of output to be flushed
   end 

   type archive_type
      STR         :: root_name                     ! Archive root name
      STR         :: name                          ! Archive name
      STR         :: kind                          ! Archive basis kind for opmat objects, or a qualifier for name
      STR         :: format                        ! Archive format (blank for binary)
      FILE , PTR  :: file             DEFAULT_NULL ! Binary file part
      INPUT, PTR  :: in               DEFAULT_NULL ! Input text file part
      OUTPUT, PTR :: out              DEFAULT_NULL ! Output text file part
   end 

   type rys_type
      INT :: n                                     ! No. of rys roots
      VEC, PTR :: w                   DEFAULT_NULL ! The Rys weights
      VEC, PTR :: r                   DEFAULT_NULL ! The Rys roots
   end

   type ivec__type
      IVEC, PTR :: vec                DEFAULT_NULL ! Encapsulated ivec type
   end

   type vec__type
      VEC, PTR :: vec                 DEFAULT_NULL ! Encapsulated vec type
   end

   type mat__type
      MAT, PTR :: mat                 DEFAULT_NULL ! Encapsulated mat type
   end

   type mat3__type
      MAT3, PTR :: mat3               DEFAULT_NULL ! Encapsulated mat3 type
   end

   type opvec_type
      INT       :: n_bf                            ! No of spatial basis functions (i.e. AO's)
      VEC, PTR  :: restricted         DEFAULT_NULL ! Restricted spinorbital representation
      VEC, PTR  :: alpha              DEFAULT_NULL ! Alpha part of a DODS representation
      VEC, PTR  :: beta               DEFAULT_NULL ! Beta  part of a DODS representation
      VEC, PTR  :: general            DEFAULT_NULL ! General mixed alpha-beta matrix representation
   end

   type opmat_type
      INT       :: n_bf                            ! No of real spatial basis functions (i.e. AO's)
      MAT, PTR  :: restricted         DEFAULT_NULL ! Restricted spinorbital representation
      MAT, PTR  :: alpha              DEFAULT_NULL ! Alpha part of a DODS representation
      MAT, PTR  :: beta               DEFAULT_NULL ! Beta  part of a DODS representation
      MAT, PTR  :: general            DEFAULT_NULL ! General mixed alpha-beta matrix representation
      CMAT, PTR :: restricted_complex DEFAULT_NULL ! Complex restricted representation
      CMAT, PTR :: alpha_complex      DEFAULT_NULL ! Complex alpha part of a DODS representation
      CMAT, PTR :: beta_complex       DEFAULT_NULL ! Complex beta  part of a DODS representation
      CMAT, PTR :: general_complex    DEFAULT_NULL ! Complex general mixed alpha-beta matrix representation
      VEC, PTR  :: triangle           DEFAULT_NULL ! Space saving for symmetric matrices: lower triangle only
      VEC, PTR  :: square             DEFAULT_NULL ! Space saving for hermitian matrices: lower triangle is real part, upper is imaginary
   end

   type vecdiis_type
      INT :: keep                                  ! No. of parameter vectors to keep for use in extrapolation
      INT :: start                                 ! The iteration at which DIIS extrapolation should start
      INT :: n_vec                                 ! The number of parameter vectors currently available for extrapolation
      INT :: new                                   ! The integer identifier for the new (current) parameter vector
      DBL :: error_length                          ! The length of the DIIS error vector
      ARCHIVE  :: archive                          ! Archive used to store the DIIS parameter and error vectors
      MAT, PTR :: mat                 DEFAULT_NULL ! The DIIS matrix
      VEC, PTR :: coeff               DEFAULT_NULL ! The DIIS coefficients which combine/extrapolate the stored parameter vectors
   end

   type gaussian_type
      INT    :: l                                  ! l quantum number for the gaussian
      DBL    :: ex                                 ! Exponent for the gaussian
      VEC(3) :: pos                                ! Position of the gaussian
   end 

   type gaussian2_type
      INT    :: l_a                                ! l quantum number for gaussian "a" of the gaussian pair
      INT    :: l_b                                ! l quantum number for gaussian "b" of the gaussian pair
      DBL    :: ex_a                               ! Exponent for gaussian "a" of the gaussian pair
      DBL    :: ex_b                               ! Exponent for gaussian "b" of the gaussian pair
      VEC(3) :: pos_a                              ! Position for gaussian "a" of the gaussian pair
      VEC(3) :: pos_b                              ! Position for gaussian "b" of the gaussian pair
   end 

   type gaussian4_type
      INT    :: l_a                                ! l quantum number for gaussian "a" of the gaussian quartet
      INT    :: l_b                                ! l quantum number for gaussian "b" of the gaussian quartet
      INT    :: l_c                                ! l quantum number for gaussian "c" of the gaussian quartet
      INT    :: l_d                                ! l quantum number for gaussian "d" of the gaussian quartet
      DBL    :: ex_a                               ! Exponent for gaussian "a" of the quartet
      DBL    :: ex_b                               ! Exponent for gaussian "b" of the quartet
      DBL    :: ex_c                               ! Exponent for gaussian "c" of the quartet
      DBL    :: ex_d                               ! Exponent for gaussian "d" of the quartet
      VEC(3) :: pos_a                              ! Position for gaussian "a" of the quartet
      VEC(3) :: pos_b                              ! Position for gaussian "b" of the quartet
      VEC(3) :: pos_c                              ! Position for gaussian "c" of the quartet
      VEC(3) :: pos_d                              ! Position for gaussian "d" of the quartet
   end 

   type shell_type
      INT      :: l                                ! l quantum number for the gaussian shell
      INT      :: n_comp                           ! No. of components for the gaussian shell
      INT      :: n_cc                             ! No. of contractions for the gaussian shell
      VEC, PTR :: ex                  DEFAULT_NULL ! Exponent vector
      VEC, PTR :: cc                  DEFAULT_NULL ! Contraction coefficient vector
   end 

   type shell1_type
      INT      :: l                                ! l quantum number of the shell
      INT      :: n_comp                           ! No. of components for the shell
      INT      :: n_cc                             ! No. of contraction coefficients for the shell
      VEC(3)   :: pos                              ! Position of the shell
      VEC, PTR :: ex                  DEFAULT_NULL ! Exponent vector
      VEC, PTR :: cc                  DEFAULT_NULL ! Contraction coefficient vector
   end 

   type shell2_type
      SHELL1 :: a                                  ! Shell "a" of the pair        
      SHELL1 :: b                                  ! Shell "b" of the pair
   end

   type shell4_type
      SHELL1 :: a                                  ! Shell "a" of the quartet
      SHELL1 :: b                                  ! Shell "b" of the quartet
      SHELL1 :: c                                  ! Shell "c" of the quartet
      SHELL1 :: d                                  ! Shell "d" of the quartet
   end

   type basis_type
      STR :: label                                 ! Unique label for the basis set
      INT :: n_shell                               ! No. of shells in the basis, equal to size(shell)
      INT :: n_bf                                  ! No. of basis functions for the shell
      INT :: n_prim                                ! No. of primitives for the shell
      SHELLVEC, PTR :: shell          DEFAULT_NULL ! The list of gaussian shells in the basis set
   end 

   type atom_type
      STR        :: label                          ! The label for the atom (not necessarily unique)
      INT        :: atomic_number                  ! The atomic number
      VEC(3)     :: pos                            ! Atom position
      MAT(3,3)   :: thermal_tensor   DEFAULT(ZERO) ! The thermal tensor for the atom
      BASIS, PTR :: basis            DEFAULT_NULL  ! The basis for the atom
      OPMAT, PTR :: natural_orbitals               ! The natural orbitals for the atom
      OPVEC, PTR :: occupations                    ! The occupation numbers for the atom
   end 

   type plotgrid_type
      STR    :: kind                               ! The type of plot calculation wanted
      INT    :: orbital                            ! The orbital to plot (if any)
      DBL    :: maximum_cell_distance              ! The maximum cell distance for a crystal-section plot
      INT    :: n_x                                ! The number of points on the x-axis
      INT    :: n_y                                ! The number of points on the y-axis
      INT    :: n_z                                ! The number of points on the z-axis
      INT    :: n_pt                               ! The total no. of points in the plot
      INT    :: centre_atom                        ! Use this atom as the centre of the plot
      INT    :: x_atom_1, x_atom_2                 ! These atoms define the x-axis of the plot
      INT    :: y_atom_1, y_atom_2                 ! These atoms define the y-axis of the plot (made orthogonal to the x-axis)
      DBL    :: del                                ! The distance between axis points in the plot
      VEC(3) :: centre                             ! Centre of the plot
      VEC(3) :: origin                             ! Bottom left point of the plot
      VEC(3) :: x_axis                             ! x-axis of the plot
      VEC(3) :: y_axis                             ! y-axis of the plot
      VEC(3) :: z_axis                             ! z-axis of the plot
      VEC(3) :: width                              ! Thw widths (in AU) of each axis of the plot
      VEC(3) :: offset                             ! The centre of the plot is offset by this amount
      BIN    :: calc_x_width                       ! ?
      BIN    :: calc_y_width                       ! ?
   end 

   type dftgrid_type
      STR :: spherical_grid_kind                   ! Type of spherical grid
      STR :: radial_grid_kind                      ! Type of radial grid
      INT :: spherical_grid_order                  ! Order of the spherical grid
      INT :: radial_grid_order                     ! Order of the radial grid
      INT :: n_spherical_pts                       ! No of spherical grid points
      INT :: n_radial_pts                          ! No of radial grid points
      INT :: n_atom_pts                            ! No of atom grid points
      DBL :: becke_m_partition_power               ! Used in smoothing the partition boundary
      DBL :: gauss_chebyshev_alpha                 ! Gauss-Chebychev radial grid parameters
      DBL :: gauss_chebyshev_m                     !
      DBL :: euler_maclaurin_alpha                 ! Euler-Maclaurin radial grid parameters
      DBL :: euler_maclaurin_m                     !
      ARCHIVE :: archive                           ! Archive to store the generated grids
   end

   type irrep_type
      CHR(4)    :: label                           ! Irrep label
      INT       :: dimension                       ! Irrep dimension
      VEC, PTR  :: character          DEFAULT_NULL ! Characters for the irrep
      MAT3, PTR :: mat                DEFAULT_NULL ! Representation matrices for the irrep
   end

   type pointgroup_type
      CHR(4) :: symbol                             ! symmetry symbol
      CHR(4) :: ID_symbol                          ! group id symbol
      INT    :: ID_number                          ! group id number
      INT    :: axis_order                         ! principal axis order
      INT    :: order                              ! order of the group
      INT    :: n_irrep                            ! no of irreducible representations
      INT    :: n_gen                              ! No. of generators
      BIN    :: has_complex_irreps                 ! true if the group has complex irreps
      IMAT, PTR :: table            DEFAULT_NULL   ! group multiplication table
      MAT3, PTR :: mat              DEFAULT_NULL   ! 3x3 representation matrices
      MAT3, PTR :: ptr              DEFAULT_NULL   ! 3x3 representation matrices for p functions, same as mat
      MAT3, PTR :: dtr              DEFAULT_NULL   ! 6x6 representation matrices for d functions
      MAT3, PTR :: ftr              DEFAULT_NULL   ! 10x10 representation matrices for f functions
      IVEC, PTR :: inverse          DEFAULT_NULL   ! Indices of inverse group elements
      IRREPVEC, PTR :: irrep        DEFAULT_NULL   ! List of irrrducible representations
   end

   type spacegroup_type
      STR :: IT_symbol                             ! International Table (Hermann-Maguin) symmetry symbol
      INT :: IT_group_number                       ! International tables group number
      STR :: Hall_symbol                           ! Hall notation symbol
      CHR :: lattice_symbol                        ! Lattice symmetry symbol
      STR :: lattice_type                          ! Lattice type
      BIN :: centrosymmetric                       ! True if center of symmetry present
      INT :: order(3)                              ! Order of each crystal axis
      INT :: setting_index(3)                      ! Indicates axes of rotation corresponding to x, y, or z...
      BIN :: has_bar(3)                            ! True if bar for this axis
      BIN :: has_subscript(3)                      ! True if subscript present for this axis
      CHR :: setting_symbol(3)                     ! Superscript rotation axis symbols axis
      CHR :: subscript(3,3)                        ! Subscript translations symbols for each axis
      INT :: lattice_symbol_index                  ! Lattice symbol index number
      INT :: nL                                    ! No. of translational lattice generators
      INT :: nR                                    ! No. of rotation generators
      INT :: nG                                    ! No. of generators
      INT :: n_seitz                               ! No. of Seitz matrices
      MAT3, PTR :: seitz            DEFAULT_NULL   ! Seitz matrices (the transpose, as defined in Hall's paper)
      VEC(3)    :: position                        ! Fractional unit cell position to reduce the spacegroup symmetry
      MAT, PTR  :: symop_pos        DEFAULT_NULL   ! List of Equivalent positions generated by seitx matrices
      MAT3, PTR :: symop_mat        DEFAULT_NULL   ! Corresponding symmetry matrix used to generate symop_pos
      INT       :: n_symop                         ! No. of equivalent positions 
      INT       :: n_unique                        ! No. of equivalent positions unrelated by traslation or inversion
      IVEC, PTR :: unique_symop                    ! Index of unique symops not related by translation or inversion
      IVEC, PTR :: map_to_unique    DEFAULT_NULL   ! Maps symop to a unique symop. Negative indicates inversion
   end

   type unitcell_type
      VEC(3)    :: angle                           ! cell angles  (in radians)
      VEC(3)    :: length                          ! cell lengths (in bohr)
      DBL       :: cell_volume                     ! cell volumes (bohr^3)
      MAT(3,3)  :: cell_matrix                     ! direct cell matrix (bohr)
      MAT(3,3)  :: inverse_cell_matrix             ! inverse direct cell matrix (bohr^{-1})
      MAT(3,3)  :: reciprocal_cell_matrix          ! reciprocal cell matrix (bohr^{-1})
      MAT(3,3)  :: rotation_matrix                 ! Rotation matrix applied to reciprocal cell
      MAT(3,3)  :: rrcm                            ! Rotated reciprocal cell matrix (bohr^{-1}) times 2 PI
   end

   type xtal_type
      SPACEGROUP, PTR :: spacegroup DEFAULT_NULL   ! The crystal spacegroup
      UNITCELL, PTR   :: unitcell   DEFAULT_NULL   ! The crystal unitcell
      INT       :: n_refl                          ! No. of reflection planes
      IVEC, PTR :: h                DEFAULT_NULL   ! Miller indices for the reflections
      IVEC, PTR :: k                DEFAULT_NULL   ! Miller indices for the reflections
      IVEC, PTR :: l                DEFAULT_NULL   ! Miller indices for the reflections
      VEC, PTR  :: F_exp            DEFAULT_NULL   ! Experimental structure factors
      VEC, PTR  :: sigma            DEFAULT_NULL   ! Experimental sigma
      VEC, PTR  :: F_calc           DEFAULT_NULL   ! Calculated structure factors
      VEC, PTR  :: F_to_add         DEFAULT_NULL   ! Structure factors to add onto F_calc
      DBL :: chi2                                  ! Chi^2 agreement statistic
      DBL :: gof                                   ! Goodness of fit parameter
      DBL :: r_factor                              ! R factor agreement statistic
      DBL :: weighted_r_factor                     ! Weighted R factor agreement statistic
      INT :: n_param                               ! No of fitting parameters used
      DBL :: scale_factor                          ! Scale factor used to minimise chi^2
      BIN :: F_calc_scaled                         ! True if F_calc is has been scaled by scale_factor
      DBL :: sf_multiplier                         ! Arbitrary scale factor.  (F_calc/F_exp)
      BIN :: correct_extinction                    ! True if extinction is to be corrected
      BIN :: correct_dispersion                    ! True if dispersion is to be corrected
      DBL :: ext_factor                            ! Secondary extinction factor
      DBL :: wavelength                            ! Experiment wavelength
      STR :: kind                                  ! Kind of diffraction experiment used.
   end

   type scfdata_type
     STR     :: kind                               ! The kind of SCF calculation to perform
     STR     :: initial_density                    ! The kind of density matrix to start the SCF calc
     STR     :: initial_mos                        ! The kind of initial MO's to start the SCF calc
     DBL     :: nuclear_energy                     ! The nuclear repulsion energy for the associated molecule
     DBL     :: kinetic_energy                     ! The kinetic energy for the associated molecule
     DBL     :: energy                             ! The SCF energy for the associated molecule
     DBL     :: old_energy                         ! The SCF energy from the previous SCF cycle
     DBL     :: difference                         ! The change in the SCF energy between cycles
     DBL     :: convergence                        ! A number which measures the convergnece of the SCF
     INT     :: iteration                          ! The interation count for the SCF procedure
     INT     :: lambda_iteration                   ! The lambda iteration count for the x-ray SCF procedure
     INT     :: min_iterations                     ! The minimum number of SCF iterations to perform
     INT     :: max_iterations                     ! The maximum number of SCF iterations to perform
     DBL     :: lambda                             ! The initial lambda value to use in an x-ray SCF procedure
     DBL     :: lambda_max                         ! The maximum lambda value to use in an x-ray SCF procedure
     DBL     :: lambda_step                        ! The value to step the lambda value between lambda cycles in an x-ray SCF calc
     DBL     :: chi2                               ! chi^2 agreement statistic for an x-ray SCF calc
     DBL     :: old_chi2                           ! The chi^2 agreement statistic for the previous x-ray SCF cycle
     DBL     :: gof                                ! The goodness-of-fit agreement statistic for an x-ray SCF calc
     DBL     :: r_factor                           ! The r-factor agreement statistic for an x-ray SCF calc
     DBL     :: weighted_r_factor                  ! The weighted r-factor agreement statistic
     BIN     :: direct                             ! True if udsing direct SCF
     BIN     :: using_diis                         ! True if using DIIS
     BIN     :: using_damping                      ! True if using damping
     BIN     :: using_level_shift                  ! True if using level shifting
     VECDIIS :: diis                               ! For (fock matrix) diis extrapolation
     INT     :: damp_finish                        ! The iteration at which density matrix damping is turned off
     DBL     :: damp_factor                        ! The damping factor to use
     DBL     :: level_shift                        ! Value to level shift the virtual orbitals
     BIN     :: output                             ! True if output is wanted
     BIN     :: nddo                               ! Neglect of diatomic differential overlap
     BIN     :: nudo                               ! Neglect of unconnected differential overlap
     BIN     :: using_bl_term                      ! Switch on/off the B.L term (complex SCF reqd.)
     BIN     :: using_bs_term                      ! Switch on/off the B.S term
     BIN     :: using_bs_t_term                    ! Switch on/off the (B.S) T_e term
     BIN     :: using_aa_term                      ! Switch on/off the A.A diamagnetic term 
     BIN     :: using_1e_sl_term                   ! Switch on/off the 1 electron S.L term 
     BIN     :: using_1e_srxa_term                 ! Switch on/off the 1 electron diamagnetic term 
     BIN     :: using_1e_zora_term                 ! Switch on/off the 1 electron ZORA terms
     DBL     :: sl_1e_factor                       ! Factor to apply to the 1-electron S.L terms
     BIN     :: using_2e_sl_term                   ! Switch on/off the 2 electron S.L terms
     DBL     :: sl_2e_factor                       ! Factor to apply to the 2-electron S.L terms
   end

   type time_type
     IVEC(5) :: started                            ! Contains real start time, in Julian day,h,m,s,ms
     IVEC(5) :: stopped                            ! Contains real stop time, in Julian day,h,m,s,ms
     DBL     :: start_cpu                          ! Contains CPU start time, in seconds
     DBL     :: stop_cpu                           ! Contains CPU stop  time, in seconds
   end

   type mol_type
      STR             :: name                                  ! Name of molecule
      INT             :: charge                                ! Electric charge of the molecule
      INT             :: mult                                  ! Spin multiplicity of the molecule
      VEC(3)          :: E_field                               ! Applied electric field in atomic units
      VEC(3)          :: B_field                               ! Applied magnetic field in atomic units
      VEC(3)          :: gauge_origin                          ! Global gauge origin for magnetic field
      VEC(3)          :: quantization_axis                     ! Axis for quantizing any momenta
      ATOMVEC, PTR    :: atom                     DEFAULT_NULL ! List of atoms in molecule
      BASISVEC, PTR   :: basis                    DEFAULT_NULL ! List of basis sets used
      PLOTGRID, PTR   :: grid                     DEFAULT_NULL ! Rectangular grid data, for plots
      DFTGRID, PTR    :: dftgrid                  DEFAULT_NULL ! DFT integration grid data
      XTAL, PTR       :: xtal                     DEFAULT_NULL ! Crystal data for the enclosing crystal
      POINTGROUP, PTR :: pointgroup               DEFAULT_NULL ! Pointgroup symmetry of the molecule
      INT             :: n_e                                   ! No of electrons
      INT             :: n_a                                   ! No of alpha electrons
      INT             :: n_b                                   ! No of beta electrons
      INT             :: n_atom                                ! No of atoms
      INT             :: n_basis                               ! No of basis sets
      INT             :: n_shell                               ! Total number of shells in the molecular basis set
      INT             :: n_shell_pairs                         ! Total number of shell pairs in the molecular basis set
      INT             :: n_shell_quartets                      ! Total number of shell quartets in the molecular basis set
      INT             :: n_bf                                  ! Total number of basis functions in the molecular basis set
      INT             :: n_prim                                ! Total number of primitives in the molecular basis set
      IVEC, PTR       :: atom_for_shell           DEFAULT_NULL ! Atom index for molecular shell index array
      IVEC, PTR       :: atom_shell_for_shell     DEFAULT_NULL ! Atom shell index for molecular shell index array
      IVEC, PTR       :: first_shell_for_atom     DEFAULT_NULL ! First molecule shell index for an atom
      IVEC, PTR       :: first_basis_fn_for_shell DEFAULT_NULL ! First basis function for a given shell
      IVEC, PTR       :: last_basis_fn_for_shell  DEFAULT_NULL ! Last basis function for a given shell
      IVEC, PTR       :: atom_kind_map            DEFAULT_NULL ! Maps the atoms to their kind
      IVECVEC, PTR    :: atom_kind                DEFAULT_NULL ! A vector of atoms for each atom kind.
      IVEC, PTR       :: first                    DEFAULT_NULL ! For the atom basis function limits
      IVEC, PTR       :: last                     DEFAULT_NULL ! For the atom basis function limits
      SCFDATA, PTR    :: scfdata                  DEFAULT_NULL ! SCF data object
      OPVEC, PTR      :: orbital_energies         DEFAULT_NULL ! The orbital energies
      OPMAT, PTR      :: molecular_orbitals       DEFAULT_NULL ! The (real) molecular orbitals
      OPMAT, PTR      :: density_matrix           DEFAULT_NULL ! The real density matrix
      OPMAT, PTR      :: natural_orbitals         DEFAULT_NULL ! The natural orbitals
      OPVEC, PTR      :: occupation               DEFAULT_NULL ! The associated occupation numbers
      OPMAT, PTR      :: fock_matrix              DEFAULT_NULL ! The real fock matrix
      INT             :: thermal_smearing_model                ! Thermal smearing model for ft integrals
      BIN             :: optimise_thermals                     ! Whether to optimise the thermal parameters
      STR             :: partition_model                       ! Model for partitioning fragments of the molecule
      VEC, PTR        :: partition_factors        DEFAULT_NULL ! Partitioning factors for each atom
      INPUT, PTR      :: in                       DEFAULT_NULL ! Input file for this molecule
      OUTPUT, PTR     :: out                      DEFAULT_NULL ! Output file for the molecule
   end 

end
