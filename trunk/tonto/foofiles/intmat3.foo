!---------------------------------------------------------------------------
!
!  IMAT3: 3 dimensional integer matrices
!
!  (c) dylan jayatilaka, 1998
!
! $Id$
!---------------------------------------------------------------------------
module IMAT3

   use SYSTEM

   implicit none         

#include "macros"
#include "imat3.int"

contains

   create(dim1,dim2,dim3)
   ! Create the object with the desired bounds
      PTR :: self
      INT, IN :: dim1,dim2,dim3
      nullify(self)
      allocate(self(dim1,dim2,dim3))
      ADD_MEM(dim1*dim2*dim3*INT_SIZE)
   end

   create(lb1,ub1,lb2,ub2,lb3,ub3)
   ! Create the object with the desired bounds
      PTR :: self
      INT, IN :: lb1,lb2,lb3,ub1,ub2,ub3
      nullify(self)
      allocate(self(lb1:ub1,lb2:ub2,lb3:ub3))
      ADD_MEM((ub1-lb1+1)*(ub2-lb2+1)*(ub3-lb3+1)*INT_SIZE)
   end

   create(bounds1,bounds2,bounds3)
   ! Create the object with the desired bounds
      PTR :: self
      IVEC(2) :: bounds1,bounds2,bounds3
      .create(bounds1(1),bounds1(2),bounds2(1),bounds2(2),bounds3(1),bounds3(2))
   end

   destroy
   ! Destroy the object
      PTR :: self
      DELETE_MEM(size(self)*INT_SIZE)
      deallocate(self)
   end

  make_index_of_components(components) [pure]
  ! Returns the index matrix corresponding to the components.
  ! Each dimension of self is size(components,2).
    IMAT, IN :: components
    OUT :: self
    INT :: ind,a,b,c
    do ind = 1,size(components,2)
      a = components(1,ind)
      b = components(2,ind)
      c = components(3,ind)
      self(a+1,b+1,c+1) = ind
    end
  end

end
