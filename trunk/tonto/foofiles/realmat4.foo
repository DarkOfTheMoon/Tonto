!---------------------------------------------------------------------------
!
!  MAT4: 4 dimensional matrices
!
!  (c) dylan jayatilaka and Daniel Grimwood, 1998
!
! $Id$
!---------------------------------------------------------------------------
module MAT4

   use SYSTEM

   implicit none         

#include "macros"
#include "mat4.int"

contains

  create(dim1,dim2,dim3,dim4)
    PTR :: self
    INT, IN :: dim1,dim2,dim3,dim4
    nullify(self)
    allocate(self(dim1,dim2,dim3,dim4))
    ADD_MEM(dim1*dim2*dim3*dim4*DBL_SIZE)
  end

  create(bounds)
    PTR :: self
    IVEC(4), IN :: bounds
    .create(bounds(1),bounds(2),bounds(3),bounds(4))
  end

  create(lb1,ub1,lb2,ub2,lb3,ub3,lb4,ub4)
    PTR :: self
    INT, IN :: lb1,lb2,lb3,lb4,ub1,ub2,ub3,ub4
    nullify(self)
    allocate(self(lb1:ub1,lb2:ub2,lb3:ub3,lb4:ub4))
    ADD_MEM((ub1-lb1+1)*(ub2-lb2+1)*(ub3-lb3+1)*(ub4-lb4+1)*DBL_SIZE)
  end

  create(bounds1,bounds2,bounds3,bounds4)
    PTR :: self
    IVEC(2), IN :: bounds1,bounds2,bounds3,bounds4
    .create(bounds1(1),bounds1(2),bounds2(1),bounds2(2), &
            bounds3(1),bounds3(2),bounds4(1),bounds4(2))
  end

  create(bounds)
    PTR :: self
    IMAT(4,2), IN :: bounds
    .create(bounds(1,1),bounds(1,2),bounds(2,1),bounds(2,2), &
            bounds(3,1),bounds(3,2),bounds(4,1),bounds(4,2))
  end

   destroy
      PTR :: self
      if (.destroyed) return
      DELETE_MEM(size(self)*DBL_SIZE)
      deallocate(self)
   end

   created result(res)
   ! Returns true if self has been created
      PTR :: self
      BIN :: res
      res = associated(self)
   end

   destroyed result(res)
   ! Returns true if self has *not* been created
      PTR :: self
      BIN :: res
      res = NOT associated(self)
   end

end
