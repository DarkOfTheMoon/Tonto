!---------------------------------------------------------------------------
!
! HASH{VEC{INT},VEC{INT}} : 
!
! A hash table (or associative array) with VEC{INT} keys and VEC{INT} values.
!
! Copyright (C) Dylan Jayatilaka, 2002
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
! 
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
! 
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!---------------------------------------------------------------------------

module HASH{VEC{INT},VEC{INT}}

   implicit none

   index_of_last_key :: INT, save

contains

   create ::: get_from(HASH{VEC{KEY},VEC{VAL}})
   ! Create the hash object.
      self :: PTR
   end

   create(n_size,keydim,valdim) ::: get_from(HASH{VEC{KEY},VEC{VAL}})
   ! Create the hash with key array and value array with length "n_size".  The
   ! dimension of each key is "keydim". The dimension of each values is "valdim"
      self :: PTR
      n_size,keydim,valdim :: INT
   end

   destroy ::: get_from(HASH{VEC{KEY},VEC{VAL}})
   ! Destroy the object.
      self :: PTR
   end

   nullify_ptr_part ::: get_from(HASH{VEC{KEY},VEC{VAL}})
   ! Nullify the pointer parts
   end

   destroy_ptr_part ::: get_from(HASH{VEC{KEY},VEC{VAL}})
   ! Destroy the pointer parts
   end

!   created result(res)
!   ! Returns true if self has been created
!      self :: PTR
!      res :: BIN
!      res = associated(self)
!   end

!   destroyed result(res)
!   ! Returns true if self has *not* been created
!      self :: PTR
!      res :: BIN
!      res = NOT associated(self)
!   end

   set_defaults ::: get_from(HASH{VEC{KEY},VEC{VAL}})
   ! Set defaults
   end

   set_reverse_search(value) ::: get_from(HASH{VEC{KEY},VEC{VAL}})
   ! Set the .reverse_search switch to "value". This determines whether the
   ! search through the keys arrays occurs in reverse order, which may be useful
   ! if you know that the most recent keys added are more likely to contain the
   ! values you are looking for.
      value :: BIN
   end

   create_copy(hash) ::: get_from(HASH{VEC{KEY},VEC{VAL}}), leaky
   ! Create a copy of "hash"
      self :: PTR
      hash :: HASH{VEC{INT},VEC{INT}}
   end

   copy(hash) ::: get_from(HASH{VEC{KEY},VEC{VAL}}), leaky
   ! Make a "self" copy of "hash". NOTE: pointer parts are pointer copied.
      hash :: HASH{VEC{INT},VEC{INT}}
   end

   shrink ::: get_from(HASH{VEC{KEY},VEC{VAL}}), leaky
   ! Shrinks the size of the keys and values arrays to dimension ".n_keys",
   ! *only* when ".n_size" is bigger than the number of keys stored.  Contents
   ! are retained. This is used to save memory.
   end

   shrink(n_size) ::: get_from(HASH{VEC{KEY},VEC{VAL}}), leaky
   ! Shrinks the size of the keys and values arrays to dimension "n_size".
   ! Contents are retained, where possible.
     n_size :: INT, IN
   end

   expand(n_size) ::: get_from(HASH{VEC{KEY},VEC{VAL}}), leaky
   ! Expands the size of the keys and values arrays to dimension "n_size".
   ! Contents are retained.  
     n_size :: INT, IN
   end

   append_pair(key,value) ::: get_from(HASH{VEC{KEY},VEC{VAL}}), leaky
   ! Append the "key" and the corresponding "value" to the hash table.
   ! If the .keys or .values arrays are too small, they are doubled in size.
     key :: VEC{INT}, IN
     value :: VEC{INT}, IN
   end

   set(key,value) ::: get_from(HASH{VEC{KEY},VEC{VAL}}), leaky
   ! Append the "key" and the corresponding "value" to the hash table.
   ! If the .keys or .values arrays are too small, they are doubled in size.
     key :: VEC{INT}, IN
     value :: VEC{INT}, IN
   end

   append_pairs(keys,values) ::: get_from(HASH{VEC{KEY},VEC{VAL}}), leaky
   ! Append the "keys" and the corresponding "values" to the hash table.
   ! If the .keys or .values arrays are too small, they are doubled in size.
     keys :: MAT{INT}, IN
     values :: MAT{INT}, IN
   end

   set(keys,values) ::: get_from(HASH{VEC{KEY},VEC{VAL}}), leaky
   ! Append the "keys" and the corresponding "values" to the hash table.
   ! If the .keys or .values arrays are too small, they are doubled in size.
     keys :: MAT{INT}, IN
     values :: MAT{INT}, IN
   end

   delete(key,has_key)  ::: get_from(HASH{VEC{KEY},VEC{VAL}})
   ! Delete the "key" and the corresponding "value" from the hash table.  A
   ! fatal error occurs if the "key" is not there, unless "has_key" is present.
   ! If it is present, "has_key" is set to TRUE if element *was* there
   ! (after the delete operation it is not there!), otherwise it is set false.
   ! There is no change made to the size of the hash table.
     key :: VEC{INT}, IN
     has_key :: BIN, OUT, optional
   end

   delete_item(index)  ::: get_from(HASH{VEC{KEY},VEC{VAL}})
   ! Delete element "index" from the hash table.  No change is made to the size
   ! of the hash table.
     index :: INT, IN
   end

   index_of_key(key) result (res) ::: get_from(HASH{VEC{KEY},VEC{VAL}})
   ! Returns the index of any key which matches "key" in the hash. If there is
   ! no match, then the result is 0.
     key :: VEC{INT}, IN
     res :: INT
   end

   has_key(key,index) result (res) ::: get_from(HASH{VEC{KEY},VEC{VAL}})
   ! Returns TRUE if the hash contains a specific "key". If present, "index" is
   ! set to the index of that key.
     key :: VEC{INT}, IN
     index :: INT, OUT, optional
     res :: BIN
   end

   value_for_key(key,has_key,index) result (res) ::: get_from(HASH{VEC{KEY},VEC{VAL}})
   ! Returns the value corresponding to the hash "key". If "has_key" is not
   ! present, an error is generated if no matching "key" can be found in the
   ! hash; if it is present, it is set to TRUE if the the key is present, or
   ! FALSE otherwise. If "index" is present, then it is set to the value of the
   ! index of "key" in the hash table.
     key :: VEC{INT}, IN
     has_key :: BIN, OUT, optional
     index :: INT, OUT, optional
     res :: VEC{INT}(size(.values,1))
   end

   value_for_item(index) result (res) ::: get_from(HASH{VEC{KEY},VEC{VAL}})
   ! Returns the "index"-th element in the hash table. 
     index :: INT, IN
     res :: VEC{INT}(size(.values,1))
   end
      
end 
