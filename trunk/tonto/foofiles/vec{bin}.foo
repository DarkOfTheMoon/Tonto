!---------------------------------------------------------------------------
!
! VEC{BIN} : Boolean vector operations ...
!
! Copyright (C) Daniel Grimwood, 1999
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!
!---------------------------------------------------------------------------

module VEC{BIN}

  implicit none

contains

!  ==========
!  Allocation
!  ==========

   create(dim) ::: get_from(VEC{INTRINSIC}), leaky, pure
   ! Create space for object
   end

   create(lb,ub) ::: get_from(VEC{INTRINSIC}), leaky, pure
   ! Create the vector with lower bound "lb", upper bound "ub"
   end

   create(bounds) ::: get_from(VEC{INTRINSIC}), leaky, pure
   ! Create the vector with "bounds"
   end

   destroy ::: get_from(VEC{INTRINSIC}), leaky, pure
   ! Destroy space for object
   end

   created result (res) ::: get_from(VEC{INTRINSIC}), inlined_by_foo, always_pure
   ! Returns true if self has been created
   end

   destroyed result (res) ::: get_from(VEC{INTRINSIC}), inlined_by_foo, always_pure
   ! Returns true if self has *not* been created
   end

!  ============
!  Copy methods
!  ============

   create_copy(v) ::: get_from(VEC{INTRINSIC}), leaky, pure
   ! Create a copy of vector "v".
   end

   copy(v) ::: get_from(VEC{INTRINSIC}), pure
   ! Copy vector "v".
   end

!  ==================
!  Size-of operations
!  ==================

   size result (res) ::: get_from(VEC{INTRINSIC}), inlined_by_foo, always_pure
   ! Return the size of the array
   end

   dim result (res) ::: get_from(VEC{INTRINSIC}), inlined_by_foo, always_pure
   ! Return the size of the 1st dimension
   end

!  =======================
!  Shrinking and expansion
!  =======================

   shrink(dim) ::: get_from(VEC{INTRINSIC}), leaky
   ! Shrink self to dimension dim.  Contents are retained.
   end

   expand(dim,init) ::: get_from(VEC{INTRINSIC}), leaky
   ! Expand self to dimension dim. New slots are left undefined
   ! unless "init" is supplied.
   end

   append(v) ::: get_from(VEC{INTRINSIC}), leaky
   ! Expands self and appends the contents of vector "v".
   end

   append(v1,v2) ::: get_from(VEC{INTRINSIC}), leaky
   ! Expands self and appends the contents of vectors "v1" and "v2".
   end

   append(value) ::: get_from(VEC{INTRINSIC}), leaky
   ! Expands self by 1, and appends the single scalar "value" onto the end.
   end

   prepend(v) ::: get_from(VEC{INTRINSIC}), leaky
   ! Prepend the vector "v" to "self". "self" is expanded.
   end

   prepend(value) ::: get_from(VEC{INTRINSIC}), leaky 
   ! Prepend an single "value" to "self". "self" is expanded.
   end

!  ====================
!  Comparison functions
!  ====================

   equals(v) result (res) ::: pure
   ! Return true if "self" is the same as "v".
      self :: IN
      v :: VEC{BIN}, IN
      res :: BIN
      res = .same_as(v)
   end

   same_as(v) result (res) ::: pure
   ! Return true if "self" is the same as "v".
      self :: IN
      v :: VEC{BIN}, IN
      res :: BIN
      if (.dim/=v.dim) then; res = FALSE
      else;                  res = all(self EQV v)
      end
   end

!  ================
!  Sorting routines
!  ================

   reverse_order ::: get_from(VEC{INTRINSIC}), pure
   ! Reverse the order of the elements of self
   end

   swap_elements(e1,e2) ::: get_from(VEC{INTRINSIC}), pure
   ! Swap elements "e1" and "e2" in "self".
   end

!  ==========
!  Misc stuff
!  ==========

   set_to(v) ::: get_from(VEC{INTRINSIC}, V?=>VEC{BIN}), pure
   ! Set the vector to "v". See also the "copy" routine.
   end

   n_true result (res)
   ! Returns the number of true items in self.
      res :: INT
      res = count(self)
   end

   n_false result (res)
   ! Returns the number of false items in self.
      res :: INT
      res = size(self) - count(self)
   end

   index_of_first_true_element result (res)
   ! Returns the index of the first true element in self, or zero if
   ! there is no true element.
      res :: INT

      i :: INT

      res = 0

      do i = 1,.dim
         if (self(i)) then
            res = i
            exit
         end
      end

   end

!  =============
!  String widths
!  =============
   
   str_lengths result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Returns the minimal string lengths.
   end 

   max_str_length result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Returns the maximum of the string lengths.
   end

!  =====================
!  Conversion to strings
!  =====================

   to_str result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Change self to a string of minimal length
   end 

   to_str(format,left_justify) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Change self to a "string" using the specified fortran "format".
   end

   to_str(width,left_justify) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Change self to a string with specified "width".
   end

   to_concatenated_str(format,separator) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Change self to a string using "format" if specified, and with
   ! "separator" between each item, if specified.
   end

end
