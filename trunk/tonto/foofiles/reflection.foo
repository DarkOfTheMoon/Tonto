!-------------------------------------------------------------------------------
!
! REFLECTION: Reflection data for crystals
!
! Copyright (C) Daniel Grimwood, 2000
! Copyright (C) Dylan Jayatilaka, 2013
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!-------------------------------------------------------------------------------

module REFLECTION

   implicit none

   keys DEFAULT_NULL :: VEC{STR}*, private

   wavelength :: REAL, private

contains

!  ==================
!  Create and destroy
!  ==================

   create ::: get_from(OBJECT), leaky
   ! Create an object. This version does not nullify point parts.
   end

   destroy ::: get_from(OBJECT), leaky
   ! Destroy an object. This version does not destroy pointer parts.
   end

   created result (res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has been created
      self :: PTR
      res :: BIN
   end

   destroyed result (res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has *not* been created
      self :: PTR
      res :: BIN
   end

   create_copy(object) ::: get_from(OBJECT), leaky
   ! Create a copy of object
   end

   copy(object)
   ! Make a copy of "object"
      self :: OUT
      object :: REFLECTION, IN
      self = object
   end

!  ===========
!  Set methods
!  ===========

   set_defaults
   ! Set up a default object
      self :: OUT

      .h = 0
      .k = 0
      .l = 0

      .theta = ZERO
      .equivalence_factor = 1

      .obs    = ZERO
      .sigma  = ZERO
      .cal    = ZERO
      .calc   = (ZERO,ZERO)
      .pred   = ZERO

      .group   = 0

   end

   set_wavelength(val) ::: selfless, public
   ! Set the wavelength in a.u. . Correct this!
      val :: REAL
      wavelength = val
   end

   set_hkl(v)
   ! Set (h k l) to vector "v"
      self :: OUT
      v :: VEC{INT}(3), IN

      .h = v(1)
      .k = v(2)
      .l = v(3)

   end

   set_hkl_component(i,val)
   ! Set (h k l) to "vec"
      self :: OUT
      i :: INT, IN
      val :: INT, IN

      select case (i)
         case (1); .h = val
         case (2); .k = val
         case (3); .l = val
         case default
            UNKNOWN("component index out of range")
      end

   end

   set_F_sigma_from_F2_sigma
   ! The F_sigma value is calculated so that when added or subtracted
   ! from to .F_exp and squared it gives at least .F2_exp +/- .F2_sigma.
   ! NOTE : F2_exp must have already been inputted.

   DIE_IF(NOT .F2_exp_inputted,"F2_exp= must have been inputted first")

      s_p,s_m :: REAL

      if (.F2_exp>.F2_sigma) then

         ENSURE(.F2_exp.equals(.F_exp*.F_exp),"inconsistent F2_exp")

         s_p = -.F_exp + sqrt(.F2_exp + .F2_sigma)
         s_m =  .F_exp - sqrt(.F2_exp - .F2_sigma)

      else

         s_p = -.F_exp + sqrt(.F2_exp + .F2_sigma)
         s_m =  .F_exp 

      end

      .F_sigma = max(s_p,s_m)

   end

   set_F2_sigma_from_F_sigma
   ! F2_sigma is calculated by taking the *largest* difference between
   ! F2_exp and the square of the F_exp range-mapped range.
   ! NOTE : F_exp must have already been inputted.

   DIE_IF(NOT .F_exp_inputted,"F_exp= has not been given")

      s_p,s_m :: REAL

      if (.F_exp>.F_sigma) then

         ENSURE(.F2_exp.equals(.F_exp*.F_exp),"inconsistent F2_exp")

         s_p = -.F2_exp + (.F_exp + .F_sigma)**2 
         s_m =  .F2_exp - (.F_exp - .F_sigma)**2

      else

         s_p = -.F2_exp + (.F_exp + .F_sigma)**2
         s_m =  .F2_exp 

      end

      .F2_sigma = max(s_p,s_m)

   end

   hkl result (v)
   ! Return (h k l) as vector "v"
      self :: IN
      v :: VEC{INT}(3)

      v(1) = .h
      v(2) = .k
      v(3) = .l

   end

!  ============
!  I/O Routines
!  ============

   read_keywords ::: get_from(OBJECT), recursive, leaky
   ! Read data from "stdin" using keyword style input.
   end

   process_keyword(keyword) ::: leaky
   ! Process command "keyword". Any required data needed by the "keyword" is
   ! inputted from "stdin".
      keyword :: STR, IN

      word :: STR

      word = keyword
      word.to_lower_case

      select case (word)
         case ("}         "); ! exit surrounding loop
         case ("f_exp=    "); .read_F_exp
         case ("f_pred=   "); .read_F_pred
         case ("f_sigma=  "); .read_F_sigma
         case ("f2_exp=   "); .read_F2_exp
         case ("f2_pred=  "); .read_F2_pred
         case ("f2_sigma= "); .read_F2_sigma
         case ("group=    "); .read_group
         case ("h=        "); .read_h
         case ("junk=     "); .read_junk
         case ("k=        "); .read_k
         case ("l=        "); .read_l
         case ("units=    "); .read_units
         case default;         UNKNOWN(word)
      end

   end

   read_units ::: get_from(OBJECT), private
   ! Read a string which describes the units to be used
   end

   read_junk ::: get_from(OBJECT), private
   ! Read in a junk string, useful for ignoring a field
   end

   read_group
   ! Read the group index that this reflection belongs to.
      stdin.read(.group)
   end

   read_h
   ! Read in the "h" Miller index
      stdin.read(.h)
   end

   read_k
   ! Read in the "k" Miller index
      stdin.read(.k)
   end

   read_l
   ! Read in the "l" Miller index
      stdin.read(.l)
   end

   read_obs
   ! Read the observed value for the reflection
      stdin.read(.obs)
   end

   read_sigma
   ! Read the error in the observed value i.e. the sigma
   ! NOTE: F_exp= must have been inputted. 

      stdin.read(.sigma)

      DIE_IF(.sigma<=0,"sigma is not +ve, remove offending reflection")

   end

   read_pred
   ! Read in a predicted reflection value. This is useful if you want
   ! to analyse statistics.
      stdin.read(.pred)
   end

!  ====================
!  Key related routines
!  ====================

   read_keys ::: get_from(OBJECT), leaky
   ! Read the "keys".
   end

   process_keys ::: get_from(OBJECT), leaky
   ! Process each of the words in the "keys" list.
   end

   keys_created result (res) ::: get_from(OBJECT)
   ! Return TRUE if the list-element keys are created.
   end

   set_keys(the_keys) ::: get_from(OBJECT)
   ! This is for setting the "keys" externally.
   end

   clear_keys ::: get_from(OBJECT), leaky
   ! This is for destroying the "keys" externally.
   end

!  ================
!  Inquiry Routines
!  ================

   z_statistic result (res) ::: elemental
   ! Return the z statistic for the model structure factor magnitude.
      self :: IN
      res :: REAL
      res = (.pred - .obs) / .sigma
   end

   z_statistic_squared result (res) ::: elemental
   ! Return the *square* of the z statistic.
      self :: IN
      res :: REAL
      res = (.pred - .obs) / .sigma
      res = res*res
   end

   delta result (res) ::: elemental
   ! Return the delta for the model.
      self :: IN
      res :: REAL
      res = .pred - .ob)
   end

   obs_on_sigma result (res) ::: elemental
   ! Return the (absolute value of) ratio obs/sigma
      self :: IN
      res :: REAL
      res = abs(.obs/.sigma)
   end

   calc_phase result (res) ::: elemental
   ! Return the phase of calculated complex quantity
      self :: IN
      res :: REAL
      res = atan2(aimag(.calc),real(.calc))
   end

   calc_abs   result (res) ::: elemental
   ! Return the absolute value of the calculated complex quantity
      self :: IN
      res :: REAL
      res = abs(.calc)
   end

   sin_theta_on_lambda result (res) ::: elemental
   ! Return the value of sin(theta) / lambda for reflection n.
   ! NOTE: the wavelength is changed to be in Angstrom since that is
   ! usually the units sin theta on lamba is reported.
   ! NOTE: wavelength must have been previously set!
      self :: IN
      res :: REAL
      res = sin(.theta)/(wavelength*ANGSTROM_PER_BOHR)
   end

   stl result (res) ::: elemental
   ! Return the value of sin(theta) / lambda for reflection n.
   ! NOTE: the wavelength is changed to be in Angstrom since that is
   ! usually the units sin theta on lamba is reported.
   ! NOTE: wavelength must have been previously set!
      self :: IN
      res :: REAL
      res = sin(.theta)/(wavelength*ANGSTROM_PER_BOHR)
   end

!  ========================
!  Tests on the reflections
!  ========================

   is_weak_obs(cutoff) result (res) ::: elemental
   ! Return TRUE if the reflection is weak w.r.t. "cutoff"
      self :: IN
      cutoff :: REAL, IN
      res :: BIN
      res = .obs_on_sigma < cutoff
   end

   is_small_obs(cutoff) result (res) ::: elemental
   ! Return TRUE if the reflection is small w.r.t. "cutoff"
      self :: IN
      cutoff :: REAL, IN
      res :: BIN
      res = .obs < cutoff
   end

   ha_larges_z_statistic(cutoff) result (res) ::: elemental
   ! Return TRUE if the reflection has a large z atstistic w.r.t. "cutoff"
      self :: IN
      cutoff :: REAL, IN
      res :: BIN
      res = .z_statistic > cutoff
   end

   has_high_stl(cutoff) result (res) ::: elemental
   ! Return TRUE if the reflection has a high s.t.l w.r.t. "cutoff"
      self :: IN
      cutoff :: REAL, IN
      res :: BIN
      res = .sin_theta_on_lambda > cutoff
   end

   has_low_stl(cutoff) result (res) ::: elemental
   ! Return TRUE if the reflection has a low s.t.l w.r.t. "cutoff"
      self :: IN
      cutoff :: REAL, IN
      res :: BIN
      res = .sin_theta_on_lambda < cutoff
   end

end
