! $Id$
!---------------------------------------------------------------------------
!  VEC: Vector operations ...
!  (c) dylan jayatilaka, 1997
!---------------------------------------------------------------------------
module VEC

   use TYPES
   use ERROR
   use MM
   use INT
   use IMAT

   implicit none         

#include "macros"
#include "vec.int"

   DBL, private :: tol5 = 1.0d-5
   
contains

   create(dim)
   ! Create the vector with dimension "dim"
      PTR :: self
      INT, IN :: dim
      nullify(self)
      allocate(self(dim))
      std_mm.add(dim*DBL_SIZE)
   end

   create(lb,ub)
   ! Create the vector with lower bound "lb", upper bound "ub"
      PTR :: self
      INT, IN :: lb,ub
      nullify(self)
      allocate(self(lb:ub))
      std_mm.add((ub-lb+1)*DBL_SIZE)
   end

   create(bounds)
   ! Create the vector with "bounds"
      PTR :: self
      IVEC(2), IN :: bounds
      .create(bounds(1),bounds(2))
   end

   destroy
   ! Destroy the vector
      PTR :: self
      if (.destroyed) return
      std_mm.delete(size(self)*DBL_SIZE)
      deallocate(self)
   end

   created result(res)
   ! Returns true if self has been created
      PTR :: self
      BIN :: res
      res = associated(self)
   end

   destroyed result(res)
   ! Returns true if self has *not* been created
      PTR :: self
      BIN :: res
      res = NOT associated(self)
   end
   
   to_product(mat,vec,transpose)
   ! Set "self" to the product of the matrix and vector. If present,
   ! "transpose" can be set to TRUE if the matrix needs to be transposed.
      MAT, IN :: mat
      VEC, IN :: vec
      BIN, optional :: transpose
      INT :: dim_a1,dim_a2,dim_b1,dim1,i,k
      BIN :: trans

      trans = FALSE
      if (present(transpose)) trans = transpose

      dim_a1 = size(mat,1);           dim_a2 = size(mat,2)
      dim_b1 = size(vec,1)
      dim1   = size(self)

      if (trans) then
        ENSURE(dim1==dim_a2,"array dimensions do not agree")
        ENSURE(dim_b1==dim_a1,"array dimensions do not agree")
        self = ZERO
        do i=1,dim1
          self(i) = mat(1,i) * vec(1)
          do k=2,dim_b1
            self(i) = self(i) + mat(k,i) * vec(k)
          end
        end
      else
        ENSURE(dim1==dim_a1,"array dimensions do not agree")
        ENSURE(dim_b1==dim_a2,"array dimensions do not agree")
        self = ZERO
        do i=1,dim1
          self(i) = mat(i,1) * vec(1)
          do k=2,dim_b1
            self(i) = self(i) + mat(i,k) * vec(k)
          end
        end
      end
   end

   plus_product(mat,vec,transpose)
   ! Add to "self" the product of the matrix and vector. If present,
   ! "transpose" can be set to TRUE if the matrix needs to be transposed.
      MAT, IN :: mat
      VEC, IN :: vec
      BIN, optional :: transpose
      INT :: dim_a1,dim_a2,dim_b1,dim1,i,k
      BIN :: trans

      trans = FALSE
      if (present(transpose)) trans = transpose

      dim_a1 = size(mat,1);           dim_a2 = size(mat,2)
      dim_b1 = size(vec,1)
      dim1   = size(self)

      if (trans) then
        ENSURE(dim1==dim_a2,"array dimensions do not agree")
        ENSURE(dim_b1==dim_a1,"array dimensions do not agree")
        do i=1,dim1
          do k=1,dim_b1
            self(i) = self(i) + mat(k,i) * vec(k)
          end
        end
      else
        ENSURE(dim1==dim_a1,"array dimensions do not agree")
        ENSURE(dim_b1==dim_a2,"array dimensions do not agree")
        do i=1,dim1
          do k=1,dim_b1
            self(i) = self(i) + mat(i,k) * vec(k)
          end
        end
      end
   end

   sum_elements result (res) [pure]
   ! Return the suym of the elements in the vector
      IN :: self
      DBL :: res
      res = sum(self)
   end
   
   dot(b) result (res) [pure]
   ! Return the dot product with "b"
      IN :: self
      VEC, IN :: b
      DBL :: res
      res = dot_product(self,b)
   end
   
   cross(b) result(res) [pure]
   ! Return the cross product of "self" and "b".
      IN :: self
      VEC, IN :: b
      VEC(3) :: res
      res(1) = self(2)*b(3) - b(2)*self(3)
      res(2) = self(3)*b(1) - b(3)*self(1)
      res(3) = self(1)*b(2) - b(1)*self(2)
   end
   
   to_cross_product(a,b) [pure]
   ! Set the vector to the cross product of "a" and "b".
      INOUT :: self
      VEC, IN :: a,b
      self(1) = a(2)*b(3) - b(2)*a(3)
      self(2) = a(3)*b(1) - b(3)*a(1)
      self(3) = a(1)*b(2) - b(1)*a(2)
   end

   norm result (val) [pure]
   ! Return the norm of the vector
      IN :: self
      DBL :: val
!      DBL :: val, dnorm2
!      val = dnorm2(size(self),self,1)
      val = sum(self*self)
      val = sqrt(val)
   end

   normalise 
   ! Normalise the vector
      INOUT :: self
      self = self/.norm
   end

   normalize
   ! Normalise the vector
      INOUT :: self
      self = self/.norm
   end

   distance_to(b) result(res)
   ! Return the distance to "b"
   ! if supplied
      VEC, IN :: b 
      DBL :: res
      INT :: s1,b1,i
      s1 = size(self)
      b1 = size(b)
      DIE_IF(s1/=b1,"incompatible dimensions")
      res = ZERO 
      do i = 1,s1
         res = res + (self(i)-b(i))**2
      end
      res = sqrt(res)
   end

   same_as(b, tol) result(res)
   ! Return true if "self" is the same as "b", within range "tol"
   ! if supplied
      VEC, IN :: b 
      DBL, optional, IN :: tol
      BIN :: res
      DBL :: tolerance
      INT :: s1,b1
      s1 = size(self)
      b1 = size(b)
      DIE_IF(s1/=b1,"incompatible dimensions")
      tolerance = tol5
      if (present(tol)) tolerance = tol
      res = .distance_to(b)<tolerance
   end
   
   to_scaled_vec(fac,b) [pure]
   ! Set the vector to "b" scaled by "fac"
      INOUT :: self
      VEC, IN :: b
      DBL, IN :: fac
      self = fac*b
   end
   
   plus_scaled_vec(fac,b) [pure]
   ! Add a vector "b" scaled by "fac" to "self"
      INOUT :: self
      VEC, IN :: b
      DBL, IN :: fac
      self = self + fac*b
   end
   
   minus_vec(b) [pure]
   ! Subtract vector "b" from "self"
      INOUT :: self
      VEC, IN :: b
      self = self-b
   end
   
   plus_vec(b) [pure]
   ! Add vector "b" to "self"
      INOUT :: self
      VEC, IN :: b
      self = self+b
   end
   
   set_to(b) [pure]
   ! Set the vector to "b"
      INOUT :: self
      VEC, IN :: b
      self = b
   end
   
   zero [pure]
   ! Zero the vector
      INOUT :: self
      self = ZERO
   end
   
   zero_small_values(tol) [pure]
   ! Zero elements of the vector which are less than "tol" in magnitude
      INOUT :: self
      DBL, IN :: tol
      where (abs(self)<tol) self = ZERO
   end
      
   swap_elements(e1,e2)
   ! Swap elements "e1" and "e2" in "self".
      INT :: e1,e2
      INT :: a1
      DBL :: val
      a1 = size(self,1)
      ENSURE(e1<=a1 AND e2<=a1,"element exceeds dimesion")
      val = self(e1)
      self(e1) = self(e2)
      self(e2) = val
   end
   
   chop_large_values(maxval) [pure]
   ! Truncate all values in the vector whose absolute value is larger than "maxval"
      INOUT :: self
      DBL, IN :: maxval
      INT :: dim,i
      DBL :: bb,ba,sign
      dim = size(self)
      do i = 1,dim
         bb = self(i)
         if (bb==ZERO) then
            self(i) = ZERO
         else
            ba = abs(bb)
            sign = bb/ba
            self(i) = sign*min(maxval,ba)
         end
     end
   end
   
   maximum result (val) [pure]
   ! Return the maximum value in the vector
      IN :: self
      DBL :: val
      INT :: i
      val = self(1)
      do i=2,size(self)
        if (self(i) > val) val = self(i)
      end
!      val = dmax(size(self),self,1) ! blas library
   end

   minimum result (val) [pure]
   ! Return the minimum value in the vector
      IN :: self
      DBL :: val
      INT :: i
      val = self(1)
      do i=2,size(self)
        if (self(i) < val) val = self(i)
      end
!      val = dmin(size(self),self,1) ! blas library
   end

   index_of_maximum result (ind) [pure]
   ! Return the index of the maximum in the vector
      IN :: self
      INT :: ind,i
      DBL :: maxval
      maxval = abs(self(1))
      ind = 1
      do i = 2,size(self)
        if (self(i) > maxval) then
          maxval = self(i)
          ind = i
        end
      end
!      ind = idmax(size(self),self,1) ! blas library
   end

   index_of_minimum result (ind) [pure]
   ! Return the index of the minimum in the vector
      IN :: self
      INT :: ind,i
      DBL :: minval
      minval = abs(self(1))
      do i = 2,size(self)
        if (self(i) < minval) then
          minval = self(i)
          ind = i
        end
      end
!      ind = idmin(size(self),self,1) ! blas library
   end

   largest_value result (maxval) [pure]
   ! Return the maximum absolute value in the vector
      IN :: self
      DBL :: maxval,bb
      INT :: i
      maxval = abs(self(1))
      do i = 2,size(self)
        bb = abs(self(i))
        if (bb > maxval) maxval = bb
      end
!      maxval = damax(size(self),self,1) ! blas library
   end

   smallest_value result (minval)  [pure]
   ! Return minimum absolute value in the vector
      IN :: self
      DBL :: minval,bb
      INT :: i
      minval = abs(self(1))
      do i = 2,size(self)
        bb = abs(self(i))
        if (bb < minval) minval = bb
      end
!      minval = damin(size(self),self,1) ! blas library
   end

   index_of_largest_value result (ind) [pure]
   ! Return the index of the largest value in the vector
      IN :: self
      INT :: ind,i
      DBL :: maxval,bb
      maxval = abs(self(1))
      ind = 1
      do i = 2,size(self)
        bb = abs(self(i))
        if (bb > maxval) then
          maxval = bb
          ind = i
        end
      end
!      ind = idamax(size(self),self,1) ! blas library
   end

   index_of_smallest_value result (ind) [pure]
   ! Return the index of the smallest value in the vector
      IN :: self
      INT :: ind,i
      DBL :: minval,bb
      minval = abs(self(1))
      ind = 1
      do i = 2,size(self)
        bb = abs(self(i))
        if (bb < minval) then
          minval = bb
          ind = i
        end
      end
!      ind = idamin(size(self),self,1) ! blas library
   end

   no_of_elements_larger_than(tol) result(res) [pure]
   ! Return the number of elements larger than "tol"
      IN :: self
      DBL, IN :: tol
      INT :: res
      INT :: i
      res = 0
      do i = 1,size(self)
         if (self(i)>tol) res = res+1
      end
   end

  normalizing_factors(l) [pure]
  ! Size of self is l.n_comp.
    INT, IN :: l
    OUT :: self
    IMAT, allocatable :: xyz_momenta
    DBL :: fac
    INT :: i

    if (l<2) then
      self = ONE
    else
      allocate(xyz_momenta(3, l.n_comp ))
      xyz_momenta.make_cartesian_components(l)
      do i=1,size(xyz_momenta,2)
        fac = l.double_factorial / &
                (xyz_momenta(1,i).double_factorial   &
                *xyz_momenta(2,i).double_factorial   &
                *xyz_momenta(3,i).double_factorial)
        self(i)=sqrt(fac)
      end
      deallocate(xyz_momenta)
    end
  end

   alpha result(res)
   ! return the alpha sector of the vector
      TARGET :: self
      VEC, PTR :: res
      INT :: n
      n = size(self)
      ENSURE(n==2*(n/2),"self is not even-dimensioned")
      n = n/2
      res => self(1:n)
   end

   beta result(res)
   ! return the beta sector of the vector
      TARGET :: self
      VEC, PTR :: res
      INT :: n
      n = size(self)
      ENSURE(n==2*(n/2),"self is not even-dimensioned")
      n = n/2
      res => self(n+1:2*n)
   end

   set_alpha(X)
   ! Set the alpha sector of the vector
      VEC :: X
      INT :: n
      n = size(self)
      ENSURE(n==2*(n/2),"self is not even-dimensioned")
      n = n/2
      self(1:n) = X
   end

   set_beta(X)
   ! Set the beta sector of the vector
      VEC :: X
      INT :: n
      n = size(self)
      ENSURE(n==2*(n/2),"self is not even-dimensioned")
      n = n/2
      self(n+1:2*n) = X
   end

   integrate(a,b,accuracy) result(res) [recursive] [functional]
   ! Integrate the vector valued scalar function "self" between the limits 
   ! "a" and "b" using adaptive trapezoidal rule with Simpsons approximation.  
   ! If present, "accuracy" is the required accuracy of the integral.
      interface
         self(x) result(res)
            DBL :: x
            VEC, PTR :: res
         end
      end 
      DBL :: a,b
      DBL, optional :: accuracy
      VEC, PTR :: res
      INT :: n
      BIN :: same
      DBL :: tol,h,m
      VEC,PTR :: fa,fb,fm,one_trap,two_trap,left,right
      tol = TOL(6)
      if (present(accuracy)) tol = accuracy
      h  = b-a
      m  = (a+b)/TWO
      fa => self(a)
      fb => self(b)
      fm => self(m)
      n = size(fa)
      one_trap.create(n)
      two_trap.create(n)
      one_trap = h*(fa+fb)/TWO
      two_trap = h*(fa+TWO*fm+fb)/FOUR
      fm.destroy
      fb.destroy
      fa.destroy
      res.create(n)
      res = abs(one_trap-two_trap)
      same = maxval(res) < THREE*tol
      if (same) then
         res = (FOUR*two_trap - one_trap)/THREE
         two_trap.destroy
         one_trap.destroy
      else 
         two_trap.destroy
         one_trap.destroy
         left  => .integrate(a,m,tol/TWO)
         right => .integrate(m,b,tol/TWO)
         res = left + right
         right.destroy
         left.destroy
      end
   end

  seitz_multiply(seitz)
  ! Self is operated on by the seitz matrix.  Self must be in fractional coordinates.
    INOUT :: self
    MAT, IN :: seitz
    ENSURE(size(seitz,1)==4,"seitz matrix must be 4x4")
    ENSURE(size(seitz,2)==4,"seitz matrix must be 4x4")
    ENSURE(size(self)==3,"vector not of dimension 3")
    .rotate(seitz(1:3,1:3))
    .translate(seitz(4,1:3))
  end

  translate(vector)
  ! Translate self by vector.
    INOUT :: self
    VEC, IN :: vector
    ENSURE(size(self)==size(vector),"vectors not of same dimension")
    self = self + vector
  end

  rotate(matrix)
  ! Rotate self by the rotation matrix
    INOUT :: self
    MAT, IN :: matrix
    ENSURE(size(matrix,1)==size(matrix,2),"matrix must be square")
    ENSURE(size(matrix,2)==size(self),"matrix dimensions must be same as vector dimension")
    self = matmul(matrix,self)
  end

  outer_product(b) result(res)
  ! Returns the outer product of self with b.
    IN :: self
    VEC, IN :: b
    MAT(size(b),size(self)) :: res
    res = spread(self,2,size(b)) * spread(b,1,size(self))
  end

  minimise(new_direction,gradient,old_val,old_gradient,hessian)
  ! Move the vector "self" to a position closer to the minimum, based on the
  ! gradient.  Uses the BFGS scheme.  Doesn't check for convergence, just does
  ! one iteration.
    VEC, OUT :: new_direction
    VEC, IN :: gradient
    VEC, INOUT :: old_val, old_gradient
    MAT, INOUT :: hessian
    VEC, PTR :: dx,dg,hdg,u
    DBL :: dxdg,dghdg,dghdg_inv
    INT :: dim
    dim = size(self)
    dx.create(dim); dg.create(dim); hdg.create(dim); u.create(dim)
    ENSURE(dim==size(new_direction), "vector size mismatch")
    ENSURE(dim==size(gradient), "vector size mismatch")
    ENSURE(dim==size(old_val), "vector size mismatch")
    ENSURE(dim==size(old_gradient), "vector size mismatch")
    ENSURE(dim==size(hessian,1), "incorrect dimension for hessian matrix")
    ENSURE(dim==size(hessian,2), "incorrect dimension for hessian matrix")
    dg = gradient - old_gradient
    dx = self - old_val
    hdg.to_product(hessian,dg)
    dxdg = ONE / dot_product(dx,dg)
    dghdg = dot_product(dg,hdg)
    dghdg_inv = ONE / dghdg
    u  = dxdg * dx - dghdg_inv * hdg
    hessian = hessian + dxdg * dx.outer_product(dx) - &
              dghdg_inv * hdg.outer_product(hdg) + dghdg * u.outer_product(u)
    dx.to_product(hessian,gradient)
    old_val = self
    old_gradient = gradient
    new_direction = - dx
    dx.destroy; dg.destroy; hdg.destroy; u.destroy
  end

end
