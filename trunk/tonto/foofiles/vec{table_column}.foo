!---------------------------------------------------------------------------
!
! VEC{TABLE_COLUMN}: A list of TABLE_COLUMN
!
! Copyright (C) Dylan Jayatilaka, 2011
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
! 
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
! 
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: vec{table_column}.foo $
!---------------------------------------------------------------------------

module VEC{TABLE_COLUMN}

   implicit none

contains

!  ==================
!  Allocation methods
!  ==================

   create(dim) ::: get_from(VEC{OBJECT}), leaky
   ! Create space for object
   end

   destroy ::: get_from(VEC{OBJECT}), leaky
   ! Destroy space for object
   end

   nullify_ptr_part ::: get_from(VEC{OBJECT})
   ! Nullify the pointer parts of self
   end

   destroy_ptr_part ::: get_from(VEC{OBJECT}), leaky
   ! Destroy the pointer parts of self
   end

   created result (res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has been created
   end

   destroyed result (res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has *not* been created
   end

   create_copy(vec) ::: get_from(VEC{OBJECT}), leaky
   ! Create a replica copy of "vec".
   end

   copy(vec) ::: get_from(VEC{OBJECT}), leaky
   ! Copy "vec".
   end

!  ===========
!  Set methods
!  ===========

   set_defaults ::: get_from(VEC{OBJECT})
   ! Set default values
   end

   clear_columns ::: leaky
   ! Clear all the columns
      i :: INT
      do i = 1,.dim
         self(i).clear_column
      end
   end

   set_spacing(val)
   ! Set the free space within each column width
      val :: INT
      i :: INT
      do i = 1,.dim
         self(i).set_spacing(val)
      end
   end

!  ===============
!  Inquiry methods
!  ===============

   no_of_rows result (res)
   ! The number of rows in the list of columns. They must all be the
   ! same to avoid an error.
      res :: INT

      ! Check no. of rows
      .check_no_of_rows

      ! OK
      res = self(1).n_rows

   end

   check_no_of_rows ::: private
   ! Check that the number of rows are all the same
      i,n1 :: INT

      ! No. of rows in col 1
      n1 = self(1).n_rows

      ! Check no. of rows
      do i = 2,.dim
         if (self(i).n_rows==n1) cycle
         DIE("mismatching rows")
      end

   end

   dash_width(label_rows) result (res) ::: private
   ! The length of the dashed line
      label_rows :: BIN, optional
      res :: INT

      lr,ls :: INT
      row_labels :: BIN

      row_labels = FALSE
      if (present(label_rows)) row_labels = label_rows

      ! Width of first column
      lr = 0
      if (row_labels) then
         lr = .no_of_rows
         lr = lr.str_length(TABLE_COLUMN_SPACING)
      end

      ! Width of spacers
      ls = sum(len_trim(.spacer))

      res = sum(.width) + lr + ls

   end

!  =======
!  Methods
!  =======

   put(label_rows)
   ! Put out the table of the columns. "label_rows" tells whether
   ! you want the first column to be the row index (default TRUE)
      label_rows :: BIN, optional

      do_rows :: BIN

      do_rows = TRUE
      if (present(label_rows)) do_rows = label_rows

      .put_headings(do_rows)
      .put_body(do_rows)
      .put_footer(do_rows)

   end

   put_headings(label_rows,no_flush)
   ! Put out the column headings/subheadings
      label_rows :: BIN, optional
      no_flush   :: BIN, optional

      c,lr :: INT
      row_labels,flush :: BIN

      row_labels = FALSE
      if (present(label_rows)) row_labels = label_rows

      flush = TRUE
      if (present(no_flush)) flush = NOT no_flush

      ! Horizontal line
      .put_dash(label_rows,"_")

      ! Flush
      stdout.flush

      ! Row label heading as first column?
      lr = 0
      if (row_labels) then
         lr = .no_of_rows
         lr = lr.str_length(TABLE_COLUMN_SPACING)
         stdout.put("#",width=lr)
      end

      ! Top heading
      do c = 1,.dim
         self(c).put_heading
      end
      stdout.flush

      ! Any subheadings?
      if (any(.subheading/=" ")) then

         ! Blank first row subheading
         if (row_labels) stdout.put(" ",width=lr)

         ! Do subheadings
         do c = 1,.dim
            self(c).put_subheading
         end
         stdout.flush

      end

      ! Any sb3headings?
      if (any(.sb3heading/=" ")) then

         ! Blank first row subheading
         if (row_labels) stdout.put(" ",width=lr)

         ! Do subheadings
         do c = 1,.dim
            self(c).put_sb3heading
         end
         stdout.flush

      end

      ! Horizontal line
      .put_dash(label_rows,"_")

      ! Flush
      if (flush) stdout.flush

   end

   put_body(label_rows)
   ! Put out the body of the table (minus header & footer)
      label_rows :: BIN, optional

      n_rows,lr, r,c :: INT
      row_labels :: BIN

      row_labels = FALSE
      if (present(label_rows)) row_labels = label_rows

      ! No. of rows
      n_rows = .no_of_rows

      ! Row label width (column 1)
      lr = 0
      if (row_labels) then
         lr = n_rows.str_length(TABLE_COLUMN_SPACING)
      end

      ! The table body
      do r = 1,n_rows

         if (row_labels) &
            stdout.put(r,width=lr)

         do c = 1,.dim
            self(c).put_value(r)
         end

         stdout.flush

      end

   end

   put_last_row
   ! Put out the last row of the table (minus header & footer)
   ! Useful for printing tables one row at a time.

      n_rows,c :: INT

      ! Last row
      n_rows = .no_of_rows

      ! The table body
      do c = 1,.dim
         self(c).put_value(n_rows)
      end
      stdout.flush

   end

   put_footer(label_rows)
   ! Put out the table footer
      label_rows :: BIN, optional
      .put_dash(label_rows,"_")
   end

   put_dash(label_rows,symbol)
   ! Put out a dashed line of the correct length
      label_rows :: BIN, optional
      symbol :: STR(1), optional
      stdout.dash(symbol,width=.dash_width(label_rows))
   end

end
