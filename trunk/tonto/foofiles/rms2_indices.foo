!-------------------------------------------------------------------------------
!
! RMS2_INDICES
!
! This object is used to store precalculated information pertaining to the
! reduced multiplication scheme (RMS) used in electron repulsion integral 
! evaluation, for shell quartets. The module RMS_INDICES produces the same
! information but for shell pairs.
!
! Copyright (C) Dylan Jayatilaka, 2006
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!-------------------------------------------------------------------------------

module RMS2_INDICES

   implicit none

contains

   create ::: get_from(OBJECT), leaky
   ! Create an object. This version does not set defaults.
   end

   destroy ::: get_from(OBJECT), leaky
   ! Destroy an object
   end
 
   nullify_ptr_part
   ! Nullify the pointer parts of self
     nullify(.e)
     nullify(.f)
     nullify(.ex)
     nullify(.ey)
     nullify(.ez)
     nullify(.fx)
     nullify(.fy)
     nullify(.fz)
     nullify(.do_Ixy)
     nullify(.do_Ixy_is_x)
     nullify(.do_Ixy_is_y)
     nullify(.do_Ixy_is_1)
   end
 
   destroy_ptr_part ::: leaky
   ! Destroy the pointer parts of self
     .e.destroy
     .f.destroy
     .ex.destroy
     .ey.destroy
     .ez.destroy
     .fx.destroy
     .fy.destroy
     .fz.destroy
     .do_Ixy.destroy
     .do_Ixy_is_x.destroy
     .do_Ixy_is_y.destroy
     .do_Ixy_is_1.destroy
   end

   created result(res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has been created
      self :: PTR
      res :: BIN
   end

   destroyed result(res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has *not* been created
      self :: PTR
      res :: BIN
   end

   set_indices(er,fr,ex,ey,ez,fx,fy,fz, a,b,c,d) ::: leaky
   ! Form the RMS pair indices, which tells when to multiply Ix and Iy,
   ! thus saving work. This version takes care of cases when Ix and Iy
   ! are equal to 1.
     er,fr :: RMS_INDICES, IN
     ex,ey,ez,fx,fy,fz :: VEC{INT}, IN
   a,b,c,d :: INT, IN
     en0,ea0,e0,erms :: VEC{INT}*
     fn0,fa0,f0,frms :: VEC{INT}*
     fxy_rms,exy_rms :: VEC{VEC_{INT}}*
     i,n,ne,nf,e,f,ze,ye,xe,zf,yf,xf,fs,es,fm,em :: INT
     xe1,ye1,xf1,yf1,xye1,xyf1,xy1 :: BIN
     xypart,zpart,sep :: STR
     use_xy :: BIN
     ne = ex.dim
     nf = fx.dim
     n  = ne*nf
     .e.create(n);  .f.create(n)
     .ex.create(n); .ey.create(n); .ez.create(n)
     .fx.create(n); .fy.create(n); .fz.create(n)
     .do_Ixy.create(n);      .do_Ixy = FALSE
     .do_Ixy_is_x.create(n); .do_Ixy_is_x = FALSE
     .do_Ixy_is_y.create(n); .do_Ixy_is_y = FALSE
     .do_Ixy_is_1.create(n); .do_Ixy_is_1 = FALSE
     i = 0
     en0 => er.n0; ea0 => er.a0                       ! Case when Ix, Iy are unity f
     fn0 => fr.n0; fa0 => fr.a0                       ! is done first ...
     fxy_rms => fr.xy_rms_a
     exy_rms => er.xy_rms_a
     f0 => fa0
     e0 => ea0
   stdout.text("case ("//trim(a.to_str)// &
                         trim(b.to_str)// &
                         trim(c.to_str)// &
                         trim(d.to_str)//")")
   sep = " "
   if (ne>9 OR nf>9) sep = "_"
     do fs = 1,fxy_rms.dim                            ! Apply (f) RMS here
        frms => fxy_rms(fs).element
        f = f0(frms(1))
        xf  = fx(f); yf = fy(f)
        xf1 = xf==1; yf1 = yf==1
        xyf1 = xf1 AND yf1
        do es = 1,exy_rms.dim                         ! Apply (e) RMS here
           erms => exy_rms(es).element
           e = e0(erms(1))
           xe  = ex(e); ye  = ey(e)
           xe1 = xe==1; ye1 = ye==1                   ! Eliminate unity factors
           xye1 = xe1  AND ye1
           xy1  = xyf1 AND xye1
           use_xy = TRUE
           if      (    xy1    ) then
              xypart = " "
           else if (xe1 AND xf1) then; .do_Ixy_is_y(i+1) = TRUE
              xypart = "Iy"//trim(ye.to_str)//trim(yf.to_str)
              use_xy = FALSE
           else if (ye1 AND yf1) then; .do_Ixy_is_x(i+1) = TRUE
              xypart = "Ix"//trim(xe.to_str)//trim(xf.to_str)
              use_xy = FALSE
           else;                       .do_Ixy(i+1) = TRUE
              xypart = "Ix"//trim(xe.to_str)//trim(xf.to_str)//"*"// &
                       "Iy"//trim(ye.to_str)//trim(yf.to_str)
           end
              if (xypart/=" " AND frms.dim*erms.dim>1 AND use_xy) stdout.text("   Ixy = "//trim(xypart))
           do fm = 1,frms.dim
              f = f0(frms(fm))
              zf = fz(f)
              do em = 1,erms.dim
                 e = e0(erms(em))
                 ze = ez(e)
                 i = i + 1
                 .e(i)  = e;  .f(i)  = f
                 .ex(i) = xe; .ey(i) = ye; .ez(i) = ze
                 .fx(i) = xf; .fy(i) = yf; .fz(i) = zf
                 .do_Ixy_is_1(i) = xy1
                 if (ze==1 AND zf==1) then
                    zpart = "wt"
                 else
                    zpart = "Iz"//trim(ze.to_str)//trim(zf.to_str)
                 end
                 if (xy1) then
                    stdout.text( &
                    "   v"// &
                    trim(sep)// &
                    trim(e.to_str)// &
                    trim(sep)// &
                    trim(f.to_str)// &
                    " = v"// &
                    trim(sep)// &
                    trim(e.to_str)// &
                    trim(sep)// &
                    trim(f.to_str)// &
                    " + "// &
                    trim(zpart))
                 else if (frms.dim==1 AND erms.dim==1) then
                    stdout.text( &
                    "   v"// &
                    trim(sep)// &
                    trim(e.to_str)// &
                    trim(sep)// &
                    trim(f.to_str)// &
                    " = v"// &
                    trim(sep)// &
                    trim(e.to_str)// &
                    trim(sep)// &
                    trim(f.to_str)// &
                    " + "// &
                    trim(xypart)//"*"// &
                    trim(zpart))
                 else if (use_xy) then
                    stdout.text( &
                    "   v"// &
                    trim(sep)// &
                    trim(e.to_str)// &
                    trim(sep)// &
                    trim(f.to_str)// &
                    " = v"// &
                    trim(sep)// &
                    trim(e.to_str)// &
                    trim(sep)// &
                    trim(f.to_str)// &
                    " + "// &
                    "Ixy*"// &
                    trim(zpart))
                 else
                    stdout.text( &
                    "   v"// &
                    trim(sep)// &
                    trim(e.to_str)// &
                    trim(sep)// &
                    trim(f.to_str)// &
                    " = v"// &
                    trim(sep)// &
                    trim(e.to_str)// &
                    trim(sep)// &
                    trim(f.to_str)// &
                    " + "// &
                    trim(xypart)//"*"// &
                    trim(zpart))
                 end
              end
           end
        end
     end
     .do_Ixy_is_1.shrink(i)
     .do_Ixy_is_y.shrink(i)
     .do_Ixy_is_x.shrink(i)
     fxy_rms => fr.xy_rms_n                           ! Now do cases when there
     exy_rms => er.xy_rms_n                           ! are no unity factors ...
     f0 => fn0
     e0 => en0
     do fs = 1,fxy_rms.dim                            ! Apply (f) RMS here
        frms => fxy_rms(fs).element
        f = f0(frms(1))
        xf  = fx(f); yf = fy(f)
        do es = 1,exy_rms.dim                         ! Apply (e) RMS here
           erms => exy_rms(es).element
           e = e0(erms(1))
           xe  = ex(e); ye  = ey(e)
           .do_Ixy(i+1) = TRUE
              xypart = "Ix"//trim(xe.to_str)//trim(xf.to_str)//"*"// &
                       "Iy"//trim(ye.to_str)//trim(yf.to_str)
              if (frms.dim*erms.dim>1) stdout.text("   Ixy = "//trim(xypart))
           do fm = 1,frms.dim
              f = f0(frms(fm))
              zf = fz(f)
              do em = 1,erms.dim
                 e = e0(erms(em))
                 ze = ez(e)
                 i = i + 1
                 .e(i)  = e;  .f(i)  = f
                 .ex(i) = xe; .ey(i) = ye; .ez(i) = ze
                 .fx(i) = xf; .fy(i) = yf; .fz(i) = zf
                 if (ze==1 AND zf==1) then
                    zpart = "wt"
                 else
                    zpart = "Iz"//trim(ze.to_str)//trim(zf.to_str)
                 end
                 if (frms.dim==1 AND erms.dim==1) then
                    stdout.text( &
                    "   v"// &
                    trim(sep)// &
                    trim(e.to_str)// &
                    trim(sep)// &
                    trim(f.to_str)// &
                    " = v"// &
                    trim(sep)// &
                    trim(e.to_str)// &
                    trim(sep)// &
                    trim(f.to_str)// &
                    " + "// &
                    trim(xypart)//"*"// &
                    trim(zpart))
                 else
                    stdout.text( &
                    "   v"// &
                    trim(sep)// &
                    trim(e.to_str)// &
                    trim(sep)// &
                    trim(f.to_str)// &
                    " = v"// &
                    trim(sep)// &
                    trim(e.to_str)// &
                    trim(sep)// &
                    trim(f.to_str)// &
                    " + "// &
                    "Ixy*"// &
                    trim(zpart))
                 end
              end
           end
        end
     end
     fxy_rms => fr.xy_rms_a
     exy_rms => er.xy_rms_n  
     f0 => fa0
     e0 => en0
     do fs = 1,fxy_rms.dim                            ! Apply (f) RMS here
        frms => fxy_rms(fs).element
        f = f0(frms(1))
        xf  = fx(f); yf = fy(f)
        do es = 1,exy_rms.dim                         ! Apply (e) RMS here
           erms => exy_rms(es).element
           e = e0(erms(1))
           xe  = ex(e); ye  = ey(e)
           .do_Ixy(i+1) = TRUE
              xypart = "Ix"//trim(xe.to_str)//trim(xf.to_str)//"*"// &
                       "Iy"//trim(ye.to_str)//trim(yf.to_str)
              if (frms.dim*erms.dim>1) stdout.text("   Ixy = "//trim(xypart))
           do fm = 1,frms.dim
              f = f0(frms(fm))
              zf = fz(f)
              do em = 1,erms.dim
                 e = e0(erms(em))
                 ze = ez(e)
                 i = i + 1
                 .e(i)  = e;  .f(i)  = f
                 .ex(i) = xe; .ey(i) = ye; .ez(i) = ze
                 .fx(i) = xf; .fy(i) = yf; .fz(i) = zf
                 if (ze==1 AND zf==1) then
                    zpart = "wt"
                 else
                    zpart = "Iz"//trim(ze.to_str)//trim(zf.to_str)
                 end
                 if (frms.dim==1 AND erms.dim==1) then
                    stdout.text( &
                    "   v"// &
                    trim(sep)// &
                    trim(e.to_str)// &
                    trim(sep)// &
                    trim(f.to_str)// &
                    " = v"// &
                    trim(sep)// &
                    trim(e.to_str)// &
                    trim(sep)// &
                    trim(f.to_str)// &
                    " + "// &
                    trim(xypart)//"*"// &
                    trim(zpart))
                 else
                    stdout.text( &
                    "   v"// &
                    trim(sep)// &
                    trim(e.to_str)// &
                    trim(sep)// &
                    trim(f.to_str)// &
                    " = v"// &
                    trim(sep)// &
                    trim(e.to_str)// &
                    trim(sep)// &
                    trim(f.to_str)// &
                    " + "// &
                    "Ixy*"// &
                    trim(zpart))
                 end
              end
           end
        end
     end
     fxy_rms => fr.xy_rms_n
     exy_rms => er.xy_rms_a  
     f0 => fn0
     e0 => ea0
     do fs = 1,fxy_rms.dim                            ! Apply (f) RMS here
        frms => fxy_rms(fs).element
        f = f0(frms(1))
        xf  = fx(f); yf = fy(f)
        do es = 1,exy_rms.dim                         ! Apply (e) RMS here
           erms => exy_rms(es).element
           e = e0(erms(1))
           xe  = ex(e); ye  = ey(e)
           .do_Ixy(i+1) = TRUE
              xypart = "Ix"//trim(xe.to_str)//trim(xf.to_str)//"*"// &
                       "Iy"//trim(ye.to_str)//trim(yf.to_str)
              if (frms.dim*erms.dim>1) stdout.text("   Ixy = "//trim(xypart))
           do fm = 1,frms.dim
              f = f0(frms(fm))
              zf = fz(f)
              do em = 1,erms.dim
                 e = e0(erms(em))
                 ze = ez(e)
                 i = i + 1
                 .e(i)  = e;  .f(i)  = f
                 .ex(i) = xe; .ey(i) = ye; .ez(i) = ze
                 .fx(i) = xf; .fy(i) = yf; .fz(i) = zf
                 if (ze==1 AND zf==1) then
                    zpart = "wt"
                 else
                    zpart = "Iz"//trim(ze.to_str)//trim(zf.to_str)
                 end
                 if (frms.dim==1 AND erms.dim==1) then
                    stdout.text( &
                    "   v"// &
                    trim(sep)// &
                    trim(e.to_str)// &
                    trim(sep)// &
                    trim(f.to_str)// &
                    " = v"// &
                    trim(sep)// &
                    trim(e.to_str)// &
                    trim(sep)// &
                    trim(f.to_str)// &
                    " + "// &
                    trim(xypart)//"*"// &
                    trim(zpart))
                 else
                    stdout.text( &
                    "   v"// &
                    trim(sep)// &
                    trim(e.to_str)// &
                    trim(sep)// &
                    trim(f.to_str)// &
                    " = v"// &
                    trim(sep)// &
                    trim(e.to_str)// &
                    trim(sep)// &
                    trim(f.to_str)// &
                    " + "// &
                    "Ixy*"// &
                    trim(zpart))
                 end
              end
           end
        end
     end
     ENSURE(i==n,"inconsistent final index")
   end

!   set_indices(er,fr,ex,ey,ez,fx,fy,fz, a,b,c,d) ::: leaky
!   ! Form the RMS pair indices, which tells when to multiply Ix and Iy,
!   ! thus saving work. This version takes care of cases when Ix and Iy
!   ! are equal to 1.
!     er,fr :: RMS_INDICES, IN
!     ex,ey,ez,fx,fy,fz :: VEC{INT}, IN
!   a,b,c,d :: INT, IN
!     en0,ea0,e0,erms :: VEC{INT}*
!     fn0,fa0,f0,frms :: VEC{INT}*
!     fxy_rms,exy_rms :: VEC{VEC_{INT}}*
!     i,n,ne,nf,e,f,ze,ye,xe,zf,yf,xf,fs,es,fm,em :: INT
!     xe1,ye1,xf1,yf1,xye1,xyf1,xy1 :: BIN
!     xypart,zpart :: STR
!     ne = ex.dim
!     nf = fx.dim
!     n  = ne*nf
!     .e.create(n);  .f.create(n)
!     .ex.create(n); .ey.create(n); .ez.create(n)
!     .fx.create(n); .fy.create(n); .fz.create(n)
!     .do_Ixy.create(n);      .do_Ixy = FALSE
!     .do_Ixy_is_x.create(n); .do_Ixy_is_x = FALSE
!     .do_Ixy_is_y.create(n); .do_Ixy_is_y = FALSE
!     .do_Ixy_is_1.create(n); .do_Ixy_is_1 = FALSE
!     i = 0
!     en0 => er.n0; ea0 => er.a0                       ! Case when Ix, Iy are unity f
!     fn0 => fr.n0; fa0 => fr.a0                       ! is done first ...
!     fxy_rms => fr.xy_rms_a
!     exy_rms => er.xy_rms_a
!     f0 => fa0
!     e0 => ea0
!   stdout.text("case ("//trim(a.to_str)// &
!                         trim(b.to_str)// &
!                         trim(c.to_str)// &
!                         trim(d.to_str)//")")
!     do fs = 1,fxy_rms.dim                            ! Apply (f) RMS here
!        frms => fxy_rms(fs).element
!        f = f0(frms(1))
!        xf  = fx(f); yf = fy(f)
!        xf1 = xf==1; yf1 = yf==1
!        xyf1 = xf1 AND yf1
!        do es = 1,exy_rms.dim                         ! Apply (e) RMS here
!           erms => exy_rms(es).element
!           e = e0(erms(1))
!           xe  = ex(e); ye  = ey(e)
!           xe1 = xe==1; ye1 = ye==1                   ! Eliminate unity factors
!           xye1 = xe1  AND ye1
!           xy1  = xyf1 AND xye1
!           if      (    xy1    ) then
!              xypart = " "
!           else if (xe1 AND xf1) then; .do_Ixy_is_y(i+1) = TRUE
!              xypart = "Iy(:,"//trim(ye.to_str)//","//trim(yf.to_str)//")"
!           else if (ye1 AND yf1) then; .do_Ixy_is_x(i+1) = TRUE
!              xypart = "Ix(:,"//trim(xe.to_str)//","//trim(xf.to_str)//")"
!           else;                       .do_Ixy(i+1) = TRUE
!              xypart = "Ix(:,"//trim(xe.to_str)//","//trim(xf.to_str)//")*"// &
!                       "Iy(:,"//trim(ye.to_str)//","//trim(yf.to_str)//")"
!           end
!              if (xypart/=" " AND frms.dim*erms.dim>1) stdout.text("   Ixy = "//trim(xypart))
!           do fm = 1,frms.dim
!              f = f0(frms(fm))
!              zf = fz(f)
!              do em = 1,erms.dim
!                 e = e0(erms(em))
!                 ze = ez(e)
!                 i = i + 1
!                 .e(i)  = e;  .f(i)  = f
!                 .ex(i) = xe; .ey(i) = ye; .ez(i) = ze
!                 .fx(i) = xf; .fy(i) = yf; .fz(i) = zf
!                 .do_Ixy_is_1(i) = xy1
!                 if (ze==1 AND zf==1) then
!                    zpart = "wt)"
!                 else
!                    zpart = "Iz(:,"//trim(ze.to_str)//","//trim(zf.to_str)//"))"
!                 end
!                 if (xy1) then
!                    stdout.text( &
!                    "   esfs("// &
!                    trim(e.to_str)// &
!                    ","// &
!                    trim(f.to_str)// &
!                    ") = sum("// &
!                    trim(zpart))
!                 else if (frms.dim==1 AND erms.dim==1) then
!                    stdout.text( &
!                    "   esfs("// &
!                    trim(e.to_str)// &
!                    ","// &
!                    trim(f.to_str)// &
!                    ") = sum("// &
!                    trim(xypart)//"*"// &
!                    trim(zpart))
!                 else
!                    stdout.text( &
!                    "   esfs("// &
!                    trim(e.to_str)// &
!                    ","// &
!                    trim(f.to_str)// &
!                    ") = sum("// &
!                    "Ixy*"// &
!                    trim(zpart))
!                 end
!              end
!           end
!        end
!     end
!     .do_Ixy_is_1.shrink(i)
!     .do_Ixy_is_y.shrink(i)
!     .do_Ixy_is_x.shrink(i)
!     fxy_rms => fr.xy_rms_n                           ! Now do cases when there
!     exy_rms => er.xy_rms_n                           ! are no unity factors ...
!     f0 => fn0
!     e0 => en0
!     do fs = 1,fxy_rms.dim                            ! Apply (f) RMS here
!        frms => fxy_rms(fs).element
!        f = f0(frms(1))
!        xf  = fx(f); yf = fy(f)
!        do es = 1,exy_rms.dim                         ! Apply (e) RMS here
!           erms => exy_rms(es).element
!           e = e0(erms(1))
!           xe  = ex(e); ye  = ey(e)
!           .do_Ixy(i+1) = TRUE
!              xypart = "Ix(:,"//trim(xe.to_str)//","//trim(xf.to_str)//")*"// &
!                       "Iy(:,"//trim(ye.to_str)//","//trim(yf.to_str)//")"
!              if (frms.dim*erms.dim>1) stdout.text("   Ixy = "//trim(xypart))
!           do fm = 1,frms.dim
!              f = f0(frms(fm))
!              zf = fz(f)
!              do em = 1,erms.dim
!                 e = e0(erms(em))
!                 ze = ez(e)
!                 i = i + 1
!                 .e(i)  = e;  .f(i)  = f
!                 .ex(i) = xe; .ey(i) = ye; .ez(i) = ze
!                 .fx(i) = xf; .fy(i) = yf; .fz(i) = zf
!                 if (ze==1 AND zf==1) then
!                    zpart = "wt)"
!                 else
!                    zpart = "Iz(:,"//trim(ze.to_str)//","//trim(zf.to_str)//"))"
!                 end
!                 if (frms.dim==1 AND erms.dim==1) then
!                    stdout.text( &
!                    "   esfs("// &
!                    trim(e.to_str)// &
!                    ","// &
!                    trim(f.to_str)// &
!                    ") = sum("// &
!                    trim(xypart)//"*"// &
!                    trim(zpart))
!                 else
!                    stdout.text( &
!                    "   esfs("// &
!                    trim(e.to_str)// &
!                    ","// &
!                    trim(f.to_str)// &
!                    ") = sum("// &
!                    "Ixy*"// &
!                    trim(zpart))
!                 end
!              end
!           end
!        end
!     end
!     fxy_rms => fr.xy_rms_a
!     exy_rms => er.xy_rms_n  
!     f0 => fa0
!     e0 => en0
!     do fs = 1,fxy_rms.dim                            ! Apply (f) RMS here
!        frms => fxy_rms(fs).element
!        f = f0(frms(1))
!        xf  = fx(f); yf = fy(f)
!        do es = 1,exy_rms.dim                         ! Apply (e) RMS here
!           erms => exy_rms(es).element
!           e = e0(erms(1))
!           xe  = ex(e); ye  = ey(e)
!           .do_Ixy(i+1) = TRUE
!              xypart = "Ix(:,"//trim(xe.to_str)//","//trim(xf.to_str)//")*"// &
!                       "Iy(:,"//trim(ye.to_str)//","//trim(yf.to_str)//")"
!              if (frms.dim*erms.dim>1) stdout.text("   Ixy = "//trim(xypart))
!           do fm = 1,frms.dim
!              f = f0(frms(fm))
!              zf = fz(f)
!              do em = 1,erms.dim
!                 e = e0(erms(em))
!                 ze = ez(e)
!                 i = i + 1
!                 .e(i)  = e;  .f(i)  = f
!                 .ex(i) = xe; .ey(i) = ye; .ez(i) = ze
!                 .fx(i) = xf; .fy(i) = yf; .fz(i) = zf
!                 if (ze==1 AND zf==1) then
!                    zpart = "wt)"
!                 else
!                    zpart = "Iz(:,"//trim(ze.to_str)//","//trim(zf.to_str)//"))"
!                 end
!                 if (frms.dim==1 AND erms.dim==1) then
!                    stdout.text( &
!                    "   esfs("// &
!                    trim(e.to_str)// &
!                    ","// &
!                    trim(f.to_str)// &
!                    ") = sum("// &
!                    trim(xypart)//"*"// &
!                    trim(zpart))
!                 else
!                    stdout.text( &
!                    "   esfs("// &
!                    trim(e.to_str)// &
!                    ","// &
!                    trim(f.to_str)// &
!                    ") = sum("// &
!                    "Ixy*"// &
!                    trim(zpart))
!                 end
!              end
!           end
!        end
!     end
!     fxy_rms => fr.xy_rms_n
!     exy_rms => er.xy_rms_a  
!     f0 => fn0
!     e0 => ea0
!     do fs = 1,fxy_rms.dim                            ! Apply (f) RMS here
!        frms => fxy_rms(fs).element
!        f = f0(frms(1))
!        xf  = fx(f); yf = fy(f)
!        do es = 1,exy_rms.dim                         ! Apply (e) RMS here
!           erms => exy_rms(es).element
!           e = e0(erms(1))
!           xe  = ex(e); ye  = ey(e)
!           .do_Ixy(i+1) = TRUE
!              xypart = "Ix(:,"//trim(xe.to_str)//","//trim(xf.to_str)//")*"// &
!                       "Iy(:,"//trim(ye.to_str)//","//trim(yf.to_str)//")"
!              if (frms.dim*erms.dim>1) stdout.text("   Ixy = "//trim(xypart))
!           do fm = 1,frms.dim
!              f = f0(frms(fm))
!              zf = fz(f)
!              do em = 1,erms.dim
!                 e = e0(erms(em))
!                 ze = ez(e)
!                 i = i + 1
!                 .e(i)  = e;  .f(i)  = f
!                 .ex(i) = xe; .ey(i) = ye; .ez(i) = ze
!                 .fx(i) = xf; .fy(i) = yf; .fz(i) = zf
!                 if (ze==1 AND zf==1) then
!                    zpart = "wt)"
!                 else
!                    zpart = "Iz(:,"//trim(ze.to_str)//","//trim(zf.to_str)//"))"
!                 end
!                 if (frms.dim==1 AND erms.dim==1) then
!                    stdout.text( &
!                    "   esfs("// &
!                    trim(e.to_str)// &
!                    ","// &
!                    trim(f.to_str)// &
!                    ") = sum("// &
!                    trim(xypart)//"*"// &
!                    trim(zpart))
!                 else
!                    stdout.text( &
!                    "   esfs("// &
!                    trim(e.to_str)// &
!                    ","// &
!                    trim(f.to_str)// &
!                    ") = sum("// &
!                    "Ixy*"// &
!                    trim(zpart))
!                 end
!              end
!           end
!        end
!     end
!     ENSURE(i==n,"inconsistent final index")
!   end

   n_comp_up_to(l) result(res) ::: selfless, private, always_pure
   ! No. of gaussian cartesian component functions up to and including the shell
   ! with momentum "l".
     l :: INT, IN
     res :: INT
     res = (l+1)*(l+2)*(l+3)/6
   end

end
