!---------------------------------------------------------------------------
!
! MAT3{INTRINSIC}: 
!
! This is a virtual module, for 3 dimensional matrices of INTRINSIC type.
!
! Copyright (C) Dylan Jayatilaka, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!---------------------------------------------------------------------------

virtual module MAT3{INTRINSIC}

   implicit none

contains


!  =================
!  Memory allocation
!  =================

   create(dim1,dim2,dim3) ::: leaky, pure
   ! Create the object with the desired bounds
      self :: PTR
      dim1,dim2,dim3 :: INT, IN

      status :: INT

      nullify(self)

      allocate(self(dim1,dim2,dim3),STAT=status)

      ENSURE(status==0,"error in allocating memory")
      status = status
      status = 0

      ADD_MEMORY(dim1*dim2*dim3*ELEMENT_TYPE_SIZE)

   end

   create(dim) ::: leaky, pure
   ! Create the object with the desired dimensions "dim"
      self :: PTR
      dim :: VEC{INT}(3), IN

      .create(dim(1),dim(2),dim(3))

   end

   create(lb1,ub1,lb2,ub2,lb3,ub3) ::: leaky, pure
   ! Create the object with the desired bounds
      self :: PTR
      lb1,lb2,lb3,ub1,ub2,ub3 :: INT, IN

      status :: INT

      nullify(self)

      allocate(self(lb1:ub1,lb2:ub2,lb3:ub3),STAT=status)

      ENSURE(status==0,"error in deallocating memory")
      status = status
      status = 0

      ADD_MEMORY((ub1-lb1+1)*(ub2-lb2+1)*(ub3-lb3+1)*ELEMENT_TYPE_SIZE)

   end

   create(bounds1,bounds2,bounds3) ::: leaky, pure
   ! Create the object with the desired bounds
      self :: PTR
      bounds1,bounds2,bounds3 :: VEC{INT}(2), IN

      .create(bounds1(1),bounds1(2),bounds2(1),bounds2(2),bounds3(1),bounds3(2))

   end

   create(bounds) ::: leaky, pure
   ! Create the object with the desired bounds
      self :: PTR
      bounds :: MAT{INT}(3,2), IN

      .create(bounds(1,1),bounds(1,2), &
              bounds(2,1),bounds(2,2), &
              bounds(3,1),bounds(3,2))

   end

   destroy ::: leaky, pure
   ! Destroy the object
      self :: PTR

      status :: INT

      if (.destroyed) return

      DELETE_MEMORY(size(self)*ELEMENT_TYPE_SIZE)

      deallocate(self,stat=status)

      ENSURE(status==0,"error in deallocating memory")
      status = status
      status = 0

   end

   created result (res) ::: inlined_by_foo, always_pure
   ! Returns true if self has been created
      self :: PTR
      res :: BIN
      result = associated(self)
   end

   destroyed result (res) ::: inlined_by_foo, always_pure
   ! Returns true if self has *not* been created
      self :: PTR
      res :: BIN
      result = NOT associated(self)
   end


!  ============
!  Copy methods
!  ============

   create_copy(c) ::: leaky, pure
   ! Create a copy of matrix "c"
      self :: PTR
      c :: MAT3{INTRINSIC}, IN

      .create(lbound(c,1),ubound(c,1), &
              lbound(c,2),ubound(c,2), &
              lbound(c,3),ubound(c,3)  )

      self = c

   end


!  ============================
!  Size-of and shape operations 
!  ============================

   size result (res) ::: inlined_by_foo, always_pure
   ! Return the size of the array
      res :: INT
      res = size(self)
   end

   dim1 result (res) ::: inlined_by_foo, always_pure
   ! Return the size of the 1st dimension
      res :: INT
      res = size(self,1)
   end

   dim2 result (res) ::: inlined_by_foo, always_pure
   ! Return the size of the 2nd dimension
      res :: INT
      res = size(self,2)
   end

   dim3 result (res) ::: inlined_by_foo, always_pure
   ! Return the size of the 2nd dimension
      res :: INT
      res = size(self,3)
   end

   shape result (res) ::: always_pure
   ! Return the size of the 2nd dimension
      res :: VEC{INT}(3)

      res = [size(self,1),size(self,2),size(self,3)]

   end

   is_same_shape_as(b) result (res)  ::: always_pure
   ! Returns TRUE if the matrix "b" has the same shape as self
      self :: IN
      b :: MAT3{INTRINSIC}, IN
      res :: BIN

      res = .dim1==b.dim1 AND .dim2==b.dim2 AND .dim3==b.dim3

   end

   is_cube result (res) ::: always_pure
   ! Returns TRUE if self is a cube
      self :: IN
      res :: BIN

      res = .dim1==.dim2 AND .dim1==.dim3

   end

   set_to(b) ::: always_pure
   ! Set "self" to "b"
      self :: OUT
      b :: MAT3{INTRINSIC}, IN
      self = b
   end

   set_to(b) ::: always_pure
   ! Set "self" to vector "b" in standard order
      self :: OUT
      b :: VEC{INTRINSIC}, IN

      self = reshape(b,[.dim1,.dim2,.dim3])

   end

   set_to_reverse_of(b) ::: pure
   ! Set "self" to the reverse of vector "b" i.e. the standard order is
   ! reversed.
      self :: OUT
      b :: MAT3{INTRINSIC}, IN

   ENSURE(.dim1==b.dim3,"incompatible sizes")
   ENSURE(.dim2==b.dim2,"incompatible sizes")
   ENSURE(.dim3==b.dim1,"incompatible sizes")

      i,j,k :: INT

      do k = 1,.dim3
      do j = 1,.dim2
      do i = 1,.dim1
         self(i,j,k) = b(k,j,i)
      end
      end
      end

   end


!  ========================
!  Change of basis routines
!  ========================

   change_basis_using(V)
   ! Change the basis of "self" using vectors "V"; self = self ... V
      V :: MAT{INTRINSIC}, IN
   ENSURE( .is_cube,"Non-cube matrix")
   ENSURE(V.is_square,"Non-square matrix")
   ENSURE(.dim1==V.dim1,"wrong shapes")
      i,j :: INT
      do i = 1,.dim3
         self(:,:,i).change_basis_using(V)
      end
      do i = 1,.dim3
      do j = 1,.dim3
         self(i,j,:) = matmul(self(i,j,:),V)
      end
      end
   end

   change_basis_to(new,V)
   ! Change the basis of "self" using vectors "V", and place the result in
   ! "new".  new = self ... V
      self :: IN
      new :: MAT3{INTRINSIC}, OUT
      V :: MAT{INTRINSIC}, IN
   ENSURE(   .is_cube,"Non-cube matrix")
   ENSURE(new.is_cube,"Non-square matrix")
   ENSURE(V.dim1==   .dim1,"wrong shapes")
   ENSURE(V.dim2==new.dim1,"wrong shapes")
      i,j :: INT
      do i = 1,.dim3
         self(:,:,i).change_basis_to(new(:,:,i),V)
      end
      do i = 1,.dim3
      do j = 1,.dim3
         new(i,j,:) = matmul(self(i,j,:),V)
      end
      end
   end

   back_transform_using(V)
   ! Change the basis of "self" using vectors "V"; self = self ... V^T
      V :: MAT{INTRINSIC}, IN
   ENSURE( .is_cube,"Non-cube matrix")
   ENSURE(V.is_square,"Non-square matrix")
   ENSURE(.dim1==V.dim1,"wrong shapes")
      i,j :: INT
      do i = 1,.dim3
         self(:,:,i).back_transform_using(V)
      end
      do i = 1,.dim3
      do j = 1,.dim3
         self(i,j,:) = matmul(self(i,j,:),transpose(V))
      end
      end
   end

   back_transform_to(new,V)
   ! Change the basis of "self" using vectors "V", and place the result in
   ! "new".  new = self ... V^T
      self :: IN
      new :: MAT3{INTRINSIC}, OUT
      V :: MAT{INTRINSIC}, IN
   ENSURE(   .is_cube,"Non-cube matrix")
   ENSURE(new.is_cube,"Non-square matrix")
   ENSURE(V.dim1==   .dim1,"wrong shapes")
   ENSURE(V.dim2==new.dim1,"wrong shapes")
      i,j :: INT
      do i = 1,.dim3
         self(:,:,i).back_transform_to(new(:,:,i),V)
      end
      do i = 1,.dim3
      do j = 1,.dim3
         new(i,j,:) = matmul(self(i,j,:),transpose(V))
      end
      end
   end


   make_symmetric ::: pure
   ! Make the upper pyramid of "self" the same as the lower pyramid
      self :: INOUT

 ! ENSURE(.dim1==.dim2,"non-cube tensor")
 ! ENSURE(.dim1==.dim3,"non-cube tensor")
 ! ENSURE(.dim1==.dim4,"non-cube tensor")

      dim,i1,i2,i3 :: INT
      val :: REAL

      dim = .dim1

      do i1 = 1,dim
      do i2 = 1,i1
      do i3 = 1,i2

         val = self(i1,i2,i3)

         self(i1,i2,i3) = val
         self(i1,i3,i2) = val
         self(i2,i1,i3) = val
         self(i2,i3,i1) = val
         self(i3,i1,i2) = val
         self(i3,i2,i1) = val

      end
      end
      end

   end


!  ======================================
!  Compression and uncompression routines
!  ======================================

   compress_to_pyramid(py)
   ! Converts the lower pyramid of self to the pyramid "py".
      py :: VEC{INTRINSIC}

   ENSURE(.is_cube,"non-cube matrix")
   ENSURE(py.dim>=.pyramid_size,"pyramid array too small")

      i,i1,i2,i3 :: INT

      i = 0
      do i1 = 1,.dim1
      do i2 = 1,i1
      do i3 = 1,i2
         i = i + 1
         py(i) = self(i1,i2,i3)
      end
      end
      end

   end

   uncompress_from_pyramid(py)
   ! Converts the pyramid "py" into the symmetric cube "self".
      py :: VEC{INTRINSIC}

   ENSURE(.is_cube,"non-cube matrix")
   ENSURE(py.dim>=.pyramid_size,"pyramid array too small")

      i,i1,i2,i3 :: INT
      val :: INTRINSIC

      i = 0
      do i1 = 1,.dim1
      do i2 = 1,i1
      do i3 = 1,i2

         i = i + 1

         val = py(i)

         self(i1,i2,i3) = val
         self(i1,i3,i2) = val
         self(i2,i1,i3) = val
         self(i2,i3,i1) = val
         self(i3,i1,i2) = val
         self(i3,i2,i1) = val

      end
      end
      end

   end

   pyramid_size result (res)
   ! Returns the size of the lower pyramid needed to store a 
   ! totally symmetric self.
      res :: INT
   ENSURE(.is_cube,"non-cube matrix")
      dim :: INT
      dim = .dim1
      res = dim*(dim+1)*(dim+2)/6
   end


!  =============
!  String widths
!  =============

   str_lengths(spaces) result (res) ::: pure
   ! Returns the minimal string lengths, with optional extra "spaces"
      self :: IN
      spaces :: INT, IN, optional
      res :: MAT3{INT}(.dim1,.dim2,.dim3)

      i1,i2,i3 :: INT

      do i1 = 1,.dim1
      do i2 = 1,.dim2
      do i3 = 1,.dim3
         res(i1,i2,i3) = self(i1,i2,i3).str_length
      end
      end
      end

      if (present(spaces)) res = res + spaces

   end 

   max_str_length(spaces) result (res) ::: pure
   ! Returns the maximum of the string lengths, with optional extra "spaces"
      self :: IN
      spaces :: INT, IN, optional
      res :: INT

      i1,i2,i3 :: INT

      res = 0
      do i1 = 1,.dim1
      do i2 = 1,.dim2
      do i3 = 1,.dim3
         res = max(res,self(i1,i2,i3).str_length)
      end
      end
      end

      if (present(spaces)) res = res + spaces

   end
   
   str_lengths(dp,spaces) result (res) ::: pur
   ! Returns the minimal string lengths, with optional extra "spaces"
      self :: IN
      dp :: INT, IN
      spaces :: INT, IN, optional
      res :: MAT3{INT}(.dim1,.dim2,.dim3)

      i1,i2,i3 :: INT

      do i1 = 1,.dim1
      do i2 = 1,.dim2
      do i3 = 1,.dim3
         res(i1,i2,i3) = self(i1,i2,i3).str_length(dp)
      end
      end
      end

      if (present(spaces)) res = res + spaces

   end 

   max_str_length(dp,spaces) result (res) ::: pure
   ! Returns the maximum of the string lengths, with optional extra "spaces"
      self :: IN
      dp :: INT, IN
      spaces :: INT, IN, optional
      res :: INT

      i1,i2,i3 :: INT

      res = 0
      do i1 = 1,.dim1
      do i2 = 1,.dim2
      do i3 = 1,.dim3
         res= max(res,self(i1,i2,i3).str_length(dp))
      end
      end
      end

      if (present(spaces)) res = res + spaces

   end

end
