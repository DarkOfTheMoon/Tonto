!-------------------------------------------------------------------------------
!
! LEAST_SQUARES: For performing an iteration of least squares
!
! Copyright (C) Dylan Jayatilaka 2013
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!-------------------------------------------------------------------------------

module LEAST_SQUARES

   implicit none

contains

!  ==========
!  Allocation
!  ==========

   create ::: get_from(OBJECT), leaky
   ! Create an object
      self :: PTR
   end

   destroy ::: get_from(OBJECT), leaky
   ! Destroy an object
   end

   nullify_ptr_part
   ! Nullify the pointer parts of the diffraction data object

      nullify(.X)
      nullify(.X0)
      nullify(.dX)
      nullify(.X_labels)

      nullify(.Y)
      nullify(.Y0)
      nullify(.dY)

      nullify(.inv_sigma)
      nullify(.dYdX)

      nullify(.near_0_eigenvalues)
      nullify(.near_0_eigenvectors)

      nullify(.esd)
      nullify(.covariance_matrix)
      nullify(.covariance_matrix0)

      nullify(.table)

   end

   destroy_ptr_part ::: leaky
   ! Erase all pointer information

      .X.destroy
      .X0.destroy
      .dX.destroy
      .X_labels.destroy

      .Y.destroy
      .Y0.destroy
      .dY.destroy

      .inv_sigma.destroy
      .dYdX.destroy

      .near_0_eigenvalues.destroy
      .near_0_eigenvectors.destroy

      .esd.destroy
      .covariance_matrix.destroy
      .covariance_matrix0.destroy

      .table.destroy

   end

   created result (res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has been created
      self :: PTR
      res :: BIN
   end

   destroyed result (res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has *not* been created
      self :: PTR
      res :: BIN
   end

   create_copy(object) ::: get_from(OBJECT), leaky
   ! Create a copy of object
   end

   copy(object) ::: leaky
   ! Copy the object
      object :: LEAST_SQUARES, IN

      self = object

      .nullify_ptr_part

      if (object.X.created)                    .X.create_copy(object.X)
      if (object.X0.created)                   .X0.create_copy(object.X0)
      if (object.dX.created)                   .dX.create_copy(object.dX)
      if (object.X_labels.created)             .X_labels.create_copy(object.X_labels)

      if (object.Y.created)                    .Y.create_copy(object.Y)
      if (object.Y0.created)                   .Y0.create_copy(object.Y0)
      if (object.dY.created)                   .dY.create_copy(object.dY)

      if (object.inv_sigma.created)            .inv_sigma.create_copy(object.inv_sigma)
      if (object.dYdX.created)                 .dYdX.create_copy(object.dYdX)

      if (object.near_0_eigenvalues.created)   .near_0_eigenvalues.create_copy(object.near_0_eigenvalues)
      if (object.near_0_eigenvectors.created)  .near_0_eigenvectors.create_copy(object.near_0_eigenvectors)

      if (object.esd.created)                  .esd.create_copy(object.esd)
      if (object.covariance_matrix.created)    .covariance_matrix.create_copy(object.covariance_matrix)
      if (object.covariance_matrix0.created)   .covariance_matrix0.create_copy(object.covariance_matrix0)

      if (object.table.created)                .table.create_copy(object.table)
   
   end


!  ===========
!  Set methods
!  ===========

   set_defaults ::: leaky
   ! Set default values

      .n_parameters                = 0
      .n_data                      = 0
                                  
      ! Penalty
      .chi2                        = ZERO
      .chi2_0                      = ZERO
                                  
      ! Iterations                
      .iteration                  = 0
      .max_iterations              = LEAST_SQUARES_MAX_ITER
      .min_iterations              = LEAST_SQUARES_MIN_ITER  
                                  
      ! Convergence               
      .converged                   = FALSE
      .chi2_increased              = FALSE
      .too_many_iterations         = FALSE
                                  
      ! Shifts                    
      .max_shift                   = ZERO
      .max_shift_tol               = LEAST_SQUARES_MAX_SHIFT_TOL
      .max_shift_on_esd            = ZERO
      .max_shift_on_esd_tol        = LEAST_SQUARES_MAX_SHIFT_ON_ESD_TOL
      .max_shift_on_esd_ind        = 0
      .max_shift_on_esd_par        = " "

      ! Singularities
      .n_near_0                    = 0
      .tol_near_0                  = LEAST_SQUARES_TOL_NEAR_0

      ! Output control
      .show_fit_output             = FALSE
      .display_near_0_eigenvectors = FALSE
      .display_correlation_matrix  = FALSE
      .min_correlation             = LEAST_SQUARES_MIN_CORRELATION

      ! Table (leaky)
      .set_default_table

   end

   set_default_table ::: leaky
   ! Create the default LS output table

      ! Create the table (leaky)
      .table.create(8)

      ! Table headings
      .table(1).set_heading("Fit")
      .table(1).set_subhead("Iter")
      .table(2).set_heading("chi2")
      .table(3).set_heading("R")
      .table(4).set_heading("R_w")
      .table(5).set_heading("Max.")
      .table(5).set_subhead("Shift")
      .table(5).set_sb3head("/esd")
      .table(6).set_heading("Max.")
      .table(6).set_subhead("Shift")
      .table(6).set_sb3head("param")
      .table(7).set_heading("No. of")
      .table(7).set_subhead("params")
      .table(8).set_heading("No. of")
      .table(8).set_subhead("eig's")
      .table(8).set_sb3head("near 0")

      ! Table widths (needs to be here because of label width)
      .table(1).set_width_from(LEAST_SQUARES_MAX_ITER) ! Iter
      .table(2).set_width_from(TEN**3)                 ! chi2
      .table(3).set_width_from(ONE)                    ! R
      .table(4).set_width_from(ONE)                    ! Rw
      .table(5).set_width_from(TEN*TEN)                ! Max shift/esd
   !  .table(6).set_width_from(labels)                 ! Max shift par
      .table(7).set_width(3)                           ! n_param
      .table(8).set_width(3)                           ! n_near_0

   end

   set_n_parameters(n) ::: private, leaky
   ! Set the number of parameters ".n_parameters" to "n"
   ! and ensure all parameter-related arrays are created
      n :: INT, IN

   ENSURE(n>0,"must be +ve")

      w :: INT

      ! Set number of parameters
      ! It is only done here ...
      .n_parameters = n

      ! Allocate arrays
      .X.create(n)
      .X0.create(n)
      .dX.create(n)
      .X_labels.create(n)

      .esd.create(n)
      .covariance_matrix.create(n,n)
      .covariance_matrix0.create(n,n)

      w=int(log10(real(n)))
      ! Table size
      .table(7).set_width(w+1)  ! n_param
      .table(8).set_width(w+1)  ! n_near_0

   end

   set_n_data(n) ::: private, leaky
   ! Set the number of data points ".n_data" to "n" and create all
   ! remaining data and parameter related arrays.
   ! NOTE: .n_parameters must have been set already
      n :: INT, IN

   ENSURE(.n_parameters>0,"n_parameters has not been set")
   ENSURE(n>0,"must be +ve")

      .n_data = n

      ! Allocate remaining arrays
      .Y.create(n)
      .Y0.create(n)
      .dY.create(n)
      .inv_sigma.create(n)

      .dYdX.create(n,.n_parameters)

   end


   set_X(v) ::: private
   ! Set the parameter vector ".X" to "v"
   ! This is only called through .initialize
      v :: VEC{REAL}, IN

   ENSURE(.n_parameters>0,"n_parameters has not been set")
   ENSURE( v.dim==.n_parameters,"wrong size, v")

      .X = v

   end

   set_X_labels(v) ::: private
   ! Set the parameter labels ".X_labels" to "v"
   ! This is only called through .initialize
      v :: VEC{STR}, IN

   ENSURE(.n_parameters>0,"n_parameters has not been set")
   ENSURE( v.dim==.n_parameters,"wrong size, v")

      .X_labels = v

   end

   set_Y0(Y0) ::: private
   ! Set the observed data ".Y0"
      Y0 :: VEC{REAL}, IN

   ENSURE(.n_parameters>0,"n_parameters has not been set")
   ENSURE(.n_data>0,"n_data has not been set")
   ENSURE(Y0.dim==.n_data,"wrong size, Y0")

      .Y0 = Y0

   end

   set_inv_sigma(sigma) ::: private
   ! Set the inverse-sigma's (weights) from the "sigma", the
   ! standard deviations in observations ".Y0"
      sigma :: VEC{REAL}, IN

   ENSURE(.n_parameters>0,"n_parameters has not been set")
   ENSURE(.n_data>0,"n_data has not been set")
   ENSURE( sigma.dim==.n_parameters,"wrong size, sigma")

      .inv_sigma = ONE/sigma

   end


!   set_chi2(chi2) ::: private
!   ! Set the ".chi2" and save old value in ".chi2_0"
!      val :: REAL, IN
!
!   ENSURE(.n_parameters>0,"n_parameters has not been set")
!   ENSURE(.n_data>0,"n_data has not been set")
!   ENSURE(chi2>0,"must be +ve")
!
!      .chi2_0 = .chi2
!      .chi2   = chi2
!
!   end

!   set_covariance_and_esd(inv,chi2) ::: private
!   ! Set the ".covariance" matrix to pseudo-inverse of the LHS of the
!   ! least-squares equations "inv" times "chi2", store previous
!   ! covariances, set ESD's to the diagonal covariances.
!      inv :: MAT{REAL}, IN
!      chi2 :: REAL, IN
!
!   ENSURE(.n_parameters>0,"n_parameters has not been set")
!   ENSURE(.n_data>0,"n_data has not been set")
!   ENSURE(chi2>0,"must be +ve")
!
!      ! Save previous covariance matrix
!      .covariance0 = .covariance
!
!      ! Set covarianvce
!      .covariance  = inv * chi2
!
!      ! Set the ESD's
!      .covariance.put_diagonal_to(.esd)
!      .esd = sqrt(.esd)
!
!   end


   set_display_corr_matrix(val) ::: get_from(OBJECT:set, VAL?=>BIN, ARG?=>.display_correlation_matrix)
   ! Generic set
   end

   set_display_near_0_evecs(val) ::: get_from(OBJECT:set, VAL?=>BIN, ARG?=>.display_near_0_eigenvectors)
   ! Generic set
   end

   set_max_iterations(val) ::: get_from(OBJECT:set, VAL?=>INT, ARG?=>.max_iterations)
   ! Generic set
   end

   set_max_shift_tol(val) ::: get_from(OBJECT:set, VAL?=>REAL, ARG?=>.max_shift_tol)
   ! Generic set
   end

   set_max_shift_on_esd_tol(val) ::: get_from(OBJECT:set, VAL?=>REAL, ARG?=>.max_shift_on_esd_tol)
   ! Generic set
   end

   set_min_iterations(val) ::: get_from(OBJECT:set, VAL?=>INT, ARG?=>.min_iterations)
   ! Generic set
   end

   set_min_correlation(val) ::: get_from(OBJECT:set, VAL?=>REAL, ARG?=>.min_correlation)
   ! Generic set
   end

   set_show_fit_output(val) ::: get_from(OBJECT:set, VAL?=>BIN, ARG?=>.show_fit_output)
   ! Generic set
   end

   set_tol_near_0(val) ::: get_from(OBJECT:set, VAL?=>REAL, ARG?=>.tol_near_0)
   ! Generic set
   end


!  ============
!  Read methods
!  ============

   read_keywords ::: get_from(OBJECT), recursive, leaky
   ! Read data from "stdin" using keyword style input.
      self :: PTR
   end

   process_keyword(keyword) ::: leaky
   ! Process command "keyword". Any required data needed by the "keyword" is
   ! inputted from "stdin".
      self :: PTR
      keyword :: STR

      word :: STR

      word = keyword
      word.to_lower_case

      select case (word)

         case ("}                             ")  ! exit read_loop

         case ("debug_off                     "); .read_debug_off
         case ("debug_on                      "); .read_debug_on
         case ("display_correlation_matrix=   "); .read_display_corr_matrix
         case ("display_near_0_eigenvectors=  "); .read_display_near_0_evecs

         case ("max_iterations=               "); .read_max_iterations
         case ("max_shift_on_esd_tol=         "); .read_max_shift_on_esd_tol
         case ("max_shift_tol=                "); .read_max_shift_tol
         case ("min_iterations=               "); .read_min_iterations
         case ("min_correlation=              "); .read_min_correlation

         case ("put                           "); .put
         case ("put_debug_list                "); .put_debug_list

         case ("redirect                      "); .redirect
         case ("revert                        "); .revert

         case ("show_fit_output=              "); .read_show_fit_output

         case ("tol_near_0=                   "); .read_tol_near_0

         case default;                       UNKNOWN(word)

      end

   end

   read_display_corr_matrix ::: private
   ! Read whether to display the correlation matrix.
      stdin.read(.display_correlation_matrix)
   end

   read_display_near_0_evecs ::: private
   ! Read whether to display the near 0 eigenvectros of the correlation matrix.
      stdin.read(.display_near_0_eigenvectors)
   end

   read_max_iterations ::: private
   ! Read the maximum number of iterations
      stdin.read(.max_iterations)
      ENSURE(.max_iterations>-1,"max_iterations must be non-negative")
      ENSURE(.max_iterations>.min_iterations,"max_iterations must be greater than min_iterations")
   end

   read_max_shift_tol ::: private
   ! Read the maximum allowed shift in a parameter
      stdin.read(.max_shift_tol)
      ENSURE(.max_shift_tol>ZERO,"must be +ve!")
   end

   read_max_shift_on_esd_tol ::: private
   ! Read the maximum allowed shift-on-esd ratio, for a parameter
      stdin.read(.max_shift_on_esd_tol)
      ENSURE(.max_shift_on_esd_tol>ZERO,"must be +ve!")
   end

   read_min_iterations ::: private
   ! Read the minimum number of iterations
      stdin.read(.min_iterations)
      ENSURE(.min_iterations>-1,"min_iterations must be non-negative")
      ENSURE(.max_iterations>.min_iterations,"min_iterations must be smaller than max_iterations")
   end

   read_min_correlation ::: private
   ! Read the minimum correlation between parameters before reporting
      stdin.read(.min_correlation)
      ENSURE(.min_correlation.is_in_range([ZERO,ONE]),"must be in range 0 to 1")
   end

   redirect ::: get_from(OBJECT), private, leaky
   ! Redirect input
   end

   revert ::: get_from(OBJECT), private, leaky
   ! Revert back to previous stdin file
   end

   read_show_fit_output ::: private
   ! Read wether to show the rejected reflections
      stdin.read(.show_fit_output)
   end

   read_tol_near_0 ::: private
   ! Read the tolerance for deciding on *near* zero eigenvalues in
   ! solving the normal equations.
      stdin.read(.tol_near_0)
      ENSURE(.tol_near_0>ZERO,"tol_near_0 must be positive")
   end

!  ==================
!  Fitting statistics
!  ==================

   the_chi2 result (res) ::: pure
   ! Return the chi2 between the predicted and observed structure
   ! factors. The sum of squares is divided by max(.dim-1,1)
      self :: IN
      res :: REAL

      z :: REAL
      i,n_eff :: INT

      res = ZERO

      do i = 1,.n_data
         z = .dY(i)*.inv_sigma(i)
         res = res + z*z
      end

      n_eff = max(.n_data-.n_parameters-.n_near_0,1)
      res   = res / n_eff

   end

   goodness_of_fit result (res) ::: pure
   ! Return the goodness-of-fit between the predicted and observed
   ! structure factors
      self :: IN
      res :: REAL
      res = sqrt(.chi2)
   end

   r_factor result (res) ::: pure
   ! Return the r factor between the predicted and observed structure
   ! factors
      self :: IN
      res :: REAL

      top,bot :: REAL
      i :: INT

      top = ZERO
      bot = ZERO

      do i = 1,.n_data
         top = top + abs(.Y(i) - .Y0(i))
         bot = bot + abs(.Y0(i))
      end

      res = top / bot

   end

   weighted_r_factor result (res) ::: pure
   ! Return the weighted r factor for the structure factors
      self :: IN
      res :: REAL

      top,bot :: REAL
      i :: INT

      top = ZERO
      bot = ZERO

      do i = 1,.Y.dim
         top = top + abs(.Y(i)-.Y0(i))*.inv_sigma(i)
         bot = bot + abs(.Y0(i))*.inv_sigma(i)
      end

      res = top / bot

   end



!  =============
!  Least-squares
!  =============

   initialize(X,Y0,sigma,X_labels)
   ! Initialise the least squares
      X            :: VEC{REAL}, IN
      Y0           :: VEC{REAL}, IN
      sigma        :: VEC{REAL}, IN
      X_labels     :: VEC{STR},  IN

      .set_n_parameters(X.dim)
      .set_n_data(Y0.dim)

      .set_X(X)
      .set_Y0(Y0)
      .set_inv_sigma(sigma)
      .set_X_labels(X_labels)

   end

   do_fit(put_Y_to, put_dYdX_to, set_X_to)
   ! Do a least-squares fit given *external* routines:
   ! . put_Y_to(.Y)       ... get observations in ".Y"
   ! . put_dYdX_to(.dYdX) ... get derivatives in ".dYdX"
   ! . set_X(.X)          ... set ".X" in the external program
   ! NOTE: You must use .initialize(X,Y0,sigma)

      interface
         put_Y_to(Y)
            Y :: VEC{REAL}, OUT
         end
      end

      interface
         put_dYdX_to(dYdX)
            dYdX :: MAT{REAL}, OUT
         end
      end

      interface
         set_X_to(X)
            X :: VEC{REAL}, IN
         end
      end

   ENSURE(.n_parameters>0,"n_parameters has not been set")
 
      ! Put iteration table header.
      .table.put_headings

      ! Least-squares loop
      do

         ! Update model observations and derivatives
         call put_Y_to(.Y)
         call put_dYdX_to(.dYdX)

         ! Solve for shifts .dX (leaky)
         .solve_normal_equations

         ! Set the shift information
         .update_shift_info

         ! Set values in external program
         call set_X_to(.X)

         ! Put the iteration results
         .put_table_body
 
         ! Finished?
         if (.fit_finished) exit
 
      end

      ! Table footer and final results
      .put_fit_results

      ! Put fit analysis plots
   !  .put_fit_analysis_plots

   end

   do_fit(put_Y_to, put_dYdX_to, clean_shifts, set_X_to)
   ! Do a least-squares fit given *external* routines:
   ! . put_Y_to(.Y)            ... put external observations in ".Y"
   ! . put_dYdX_to(.dYdX)      ... get external derivatives in ".dYdX"
   ! . clean_up(.dX)           ... do  external 'cleaning' on ".dX".
   ! . set_X_to(.X,.dX)        ... set ".X" & ".dX" in external program
   ! NOTE: This version has several external hooks compared to above.
   ! NOTE: You must use .initialize(X,Y0,sigma)

      interface
         put_Y_to(Y)
            Y :: VEC{REAL}, OUT
         end
      end

      interface
         put_dYdX_to(dYdX)
            dYdX :: MAT{REAL}, OUT
         end
      end

      interface
         clean_shifts(dX)
            dX :: VEC{REAL}, INOUT
         end
      end

      interface
         set_X_to(X,dX)
            X :: VEC{REAL}, IN
            dX :: VEC{REAL}, IN
         end
      end

   ENSURE(.n_parameters>0,"n_parameters has not been set")

      ! Put iteration table header.
      .table.put_headings

      ! Least-squares loop
      do

         ! Update model observations and derivatives
         call put_Y_to(.Y)
         call put_dYdX_to(.dYdX)

         ! Solve for shifts .dX (leaky)
         .solve_normal_equations

         ! Clean .dX if needed
         call clean_shifts(.dX)

         ! Set the shift information
         .update_shift_info

         ! Set values in external program
         call set_X_to(.X,.dX)

         ! Put the iteration results
         .put_table_body
 
         ! Finished?
         if (.fit_finished) exit
 
      end

      ! Table footer and final results
      .put_fit_results

      ! Put fit analysis plots
   !  .put_fit_analysis_plots

   end

   solve_normal_equations ::: leaky
   ! Given predicted observations ".g" and derivatives ".dYdX" 
   ! solve the normal equations to get the shifts ".dX" . Also set the
   ! ".covariances" and ".chi2".

      lhs :: MAT{REAL}*
      rhs,inv_sigma2 :: VEC{REAL}*
      n,i,j :: INT
      chi2 :: REAL
 
      ! Next iteration
      .iteration = .iteration + 1

      ! Constant
      n = .n_parameters
 
      ! Arrays
      lhs.create(n,n)
      rhs.create(n)
      inv_sigma2.create(n)

      ! Make the normal matrix
      inv_sigma2.create(n)
      inv_sigma2 = .inv_sigma*.inv_sigma
      do i = 1,n
      do j = 1,n
         lhs(i,j) = VEC{REAL}:sum(inv_sigma2*.dYdX(:,i)*.dYdX(:,j))
      end
      end
      inv_sigma2.destroy

      ! Set delta-Y
      .dY = .Y - .Y0

      ! Make the rhs
      do i = 1,n
         rhs(i) = VEC{REAL}:sum(.dY*.dYdX(:,i))
      end

      ! Save previous covariance matrix
      .covariance_matrix0 = .covariance_matrix

      ! Solve for the shifts ".dX" (leaky)
      lhs.solve_ill_linear_equations(rhs,.dX,.tol_near_0,.n_near_0,.covariance_matrix &
                                    ,.near_0_eigenvalues,.near_0_eigenvectors)

      ! Clean
      inv_sigma2.destroy
      rhs.destroy
      lhs.destroy

      ! Evaluate & set chi2
      chi2 = .the_chi2

      ! Set new covarianvce
      .covariance_matrix  = chi2 * .covariance_matrix

      ! Set new ESD's
      .covariance_matrix.put_diagonal_to(.esd)
      .esd = sqrt(.esd)

   end

   update_shift_info ::: leaky
   ! Given a possibly cleaned ".dX" set the new parameter vector ".X"
   ! ".chi2", ".covariances" and ".esd", and store the old
   ! information. Also get the maximum shift information, and rescale
   ! .dX if necessary.

      indmax,p :: INT
      val,fac,valmax :: REAL

      ! Get the maximum shift
      .max_shift = maxval(abs(.dX))

      ! Get the location of the maximum shift on esd
      indmax = 0
      valmax = ZERO
      do p = 1,.esd.dim

         val = .esd(p)

         ! Ignore symmetry zero's
         if (abs(val)<TOL(8)) cycle

         ! Shift on esd
         val = abs(.dX(p)/val)

         ! Set shift on esd if larger ...
         if (val<=valmax) cycle
         valmax = val
         indmax = p

      end

      ! Assign maximum index
      DIE_IF(indmax==0,"no maximum index found!")
      .max_shift_on_esd_ind = indmax
      .max_shift_on_esd     = valmax

      if (.max_shift>.max_shift_tol) then
         fac = .max_shift_tol/.max_shift
         .dX = fac * .dX
      end

      ! Store old parameters
      .X0 = .X

      ! Set the new parameters ".X"
      .X  = .X + .dX

   end
 
   fit_finished result (res)
   ! Return whether the LS has finished
      res :: BIN

      ! Converged?
      .converged = .max_shift_on_esd<.max_shift_on_esd_tol &
               AND .iteration>=.min_iterations

      ! chi2 inceased?
      .chi2_increased = .chi2>.chi2_0 AND .iteration>.min_iterations

      ! Roll back the parameters is chi2 increases
      if (.chi2_increased) then
         .X    = .X0
         .chi2 = .chi2_0
         .covariance_matrix = .covariance_matrix0
      end

      ! Too many fit iterations?
      .too_many_iterations = .iteration>.max_iterations

      ! Set finished
      res = .converged OR .chi2_increased OR .too_many_iterations

   end


   put_table_headings
   ! Put the fit table header
      if (NOT .show_fit_output) return
      .table.put_headings
   end

   put_table_body
   ! Print the current iterations results

      if (NOT .show_fit_output) return

      ! Set table body (leaky)
      .table(1).create_values([.iteration])
      .table(2).create_values([.chi2])
      .table(3).create_values([.r_factor])
      .table(4).create_values([.weighted_r_factor])
      .table(5).create_values([.max_shift_on_esd])
      .table(6).create_values([.max_shift_on_esd_par])
      .table(7).create_values([.n_parameters])
      .table(8).create_values([.n_near_0])

      ! Put out the body
      .table.put_body

      ! Clear thje columns for next time (UNleaky!)
      .table.clear_columns

   end

   put_fit_results
   ! Put the fit-iteration footer and fit results

      if (NOT .show_fit_output) return

      ! Table footer
      .table.put_footer

      ! Print how it finished
      if (.converged) then
         stdout.text("Least-squares converged.")
      else if (.chi2_increased) then
         stdout.text("Warning: fit stopped: chi2 has increased.")
         stdout.text("Warning: fit results are unreliable.")
      else if (.too_many_iterations)  then
         stdout.text("Warning: fit stopped: too many iterations.")
      end

   end

   put_near_0_eigenvectors
   ! Put the near zero (linearly dependent) parameter eigenvectors

      if (.near_0_eigenvectors.created) then
      if (.near_0_eigenvectors.dim>0) then

         stdout.flush
         stdout.text("Near 0 eigenvalues of the normal matrix:")
         stdout.put(.near_0_eigenvalues)
         stdout.flush
         stdout.text("Near 0 eigenvectors of the normal matrix:")
         stdout.put(.near_0_eigenvectors)

      end
      end

   end


!  ==============
!  Output methods
!  ==============


end
