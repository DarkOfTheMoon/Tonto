!===============================================================================
!
! MOLECULE.PLOT: An object representation of a molecule. 
!
! These are plot-controlling procedures. Most of the actual grids are
! made in .GRid .
!
! Copyright (C) Dylan Jayatilaka, Daniel Grimwood, 1996-2012
! Copyright (C) Dylan Jayatilaka 2012-
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: $
!===============================================================================

module MOLECULE.PLOT

   implicit none

#  undef  ENSURE
#  define ENSURE(X,Y)       ENSURE0(X,Y)

contains

!  ========
!  2D plots
!  ========

   plot ::: leaky
   ! Do one of the many kinds of plot calculations
   ENSURE(.plot_grid.created, "no grid")

      ! Set up
      .::set_up_for_plot(.plot_grid.plot_kind)

      ! Use unit cell as bbox if requested
      if (.plot_grid.use_unit_cell_as_bbox) then
         WARN("resetting plot axes, plot widths from unit cell")
         ENSURE(.crystal.created,"no crystal or unit cell for plot!")
         .plot_grid.set_bbox_from_unit_cell(.crystal.unit_cell)
      end

      ! See plot_grid parameters
      .plot_grid.put

      ! Do the plot
      .GRID:do_plot

   end

   plots ::: leaky
   ! Do one of the many kinds of plot calculations
   ENSURE(.plot_grid.created, "no grid")
   ENSURE(.plot_grid.plot_kinds.created, "no multiple plot_kinds!")

      i :: INT

      ! Loop over plots and do each one
      do i = 1,.plot_grid.plot_kinds.dim
         .plot_grid.set_plot_kind( .plot_grid.plot_kinds(i))
         .plot_grid.set_plot_units(.plot_grid.plot_kinds_units(i))
         .::plot
      end

      ! Reset to blank
      .plot_grid.set_plot_kind(" ")
      .plot_grid.set_plot_units(" ")

   end

!  ===============
!  Isosurface plot
!  ===============

   isosurface_plot ::: leaky
   ! Do one of the many kinds of isosurface plot calculations
      self :: PTR

   ENSURE(.isosurface.created,"no isosurface")

      ! Save self for selfless function calls
      .BASE:set_saved_self

      ! Set up
      .::set_up_for_plot(.isosurface.iso_kind)

      ! Do the plot
      .GRID:do_isosurface_plot

   end

   saved_isosurface_plot ::: leaky
   ! Do an isosurface plot using the .saved molecule information with
   ! the CURRENT .isosurface information.  
      self :: PTR

   ENSURE(.isosurface.created,"no isosurface")
   ENSURE(.saved.created,"no saved molecule")

      saved_isosurface :: ISOSURFACE*

      ! Set saved_self to be .saved molecule
      .saved.BASE:set_saved_self

      ! Set .saved.isosurface to be current .isosurface
      saved_isosurface  => .saved.isosurface 
      .saved.isosurface => .isosurface       

      ! Set up
      .saved.::set_up_for_plot(.isosurface.iso_kind)

      ! Do the plot
      .GRID:do_isosurface_plot

      ! Put back the saved isosurface the way it was
      .saved.isosurface => saved_isosurface

   end

!  ==============================
!  Plot property on an isosurface
!  ==============================

   plot_on_isosurface ::: leaky
   ! Plot one of the many kinds of density functions on an existing
   ! isosurface - useful for mapping properties on a surface.
      self :: PTR

   ENSURE(.isosurface.created,"no isosurface")
   ENSURE(.isosurface.surface_property/=" ","no isosurface surface_property specified")

      ! Save self for selfless function calls
      .BASE:set_saved_self

      ! Set up
      .::set_up_for_plot(.isosurface.surface_property)

      ! Do the plot
      .GRID:do_plot_property_on_isosurface

   end

   saved_plot_on_isosurface ::: leaky
   ! Plot one of the many kinds of density functions on an existing
   ! isosurface - for mapping properties on a surface - but using the
   ! .saved molecule information for the density functions which are
   ! evaluated and stored on the CURRENT .isosurface.
      self :: PTR

   ENSURE(.isosurface.created,"no isosurface")
   ENSURE(.isosurface.surface_property/=" ","no isosurface surface_property specified")
   ENSURE(.saved.created,"no saved molecule")

      saved_isosurface :: ISOSURFACE*

      ! Save self for selfless function calls
      .BASE:set_saved_self

      ! Set .saved.isosurface to be current .isosurface
      saved_isosurface  => .saved.isosurface 
      .saved.isosurface => .isosurface      

      ! Set up
      .saved.::set_up_for_plot(.isosurface.iso_kind)

      ! Do the plot
      .GRID:do_plot_property_on_isosurface

      ! Put back the saved isosurface the way it was
      .saved.isosurface => saved_isosurface

   end

!  ====================
!  Set-up info for plot
!  ====================

   set_up_for_plot(plot_kind) ::: leaky
   ! Do plot-specific initialization
      plot_kind :: STR, IN

      ! Make the becke grids & overlapping atoms
      .::set_becke_grid_for_plot(plot_kind)

      ! Set interpolators for stockholder or promolecule plots
      .::set_interpolators_for_plot(plot_kind)

      ! Set atom plot info for deformation densities
      .::set_ANOs_for_plot(plot_kind)

      ! Set up any required integrals in memory
      .::set_integrals_for_plot(plot_kind)

      ! Assign natural orbitals
      if (.natural_orbitals.destroyed) then
      if (.molecular_orbitals.created) then
         .BASE:assign_NOs_to_MOs
      end
      end

   end

   set_interpolators_for_plot(plot_kind) ::: private, leaky
   ! Set the interpolator info for all the atoms if the "plot_kind" is such
   ! that interpolation tables could be beneficial. This should be called just
   ! prior to doing the plot to take advantage of speed-ups.
      plot_kind :: STR, IN

      do_interpolator :: BIN

      do_interpolator = plot_kind=="stockholder_density" &
                     OR plot_kind=="stockholder_weight"  &
                     OR plot_kind=="promolecule_density"

      if (NOT do_interpolator) return

      ENSURE(.atom.created,"no atom list")

      ! Get interpolators. 
      select case (.atom(1).basis_kind)
         case ("slater")
            ENSURE(.slaterbasis.created,"no slater bases")
            .GRID:make_slater_interpolators
         case ("coppens")
            ENSURE(.coppensbasis.created,"no coppens bases")
            .GRID:make_coppens_interpolators
         case ("gaussian")
            ENSURE(.basis.created,"no gaussian bases")
            .SCF:make_ANO_data
      end

   end

   set_ANOs_for_plot(plot_kind) ::: private, leaky
   ! Set the ANO info for all the atoms if the "plot_kind" is such
   ! that the ANO data must be made.
      plot_kind :: STR, IN

      if (plot_kind(1:11)=="deformation" OR plot_kind(1:4)=="e_hf") then

         ! If we get here, the ANO information will be used
         .SCF:make_ANO_data

      else if (plot_kind(1:5)=="bond_") then

         .SCF:make_ANO_data

       ! ! If we get here, the spherically averaged atom information will be used
       ! .make_spherical_atoms

      else if (plot_kind=="hirshfeld_atom_grid") then

         ! should be in set_up becke grid?
         .SCF:make_Hirshfeld_inputs(skip_NOs=TRUE)

      end

   end

   set_becke_grid_for_plot(plot_kind) ::: private, leaky
   ! Set up the Becke grid info only for those plots which actually
   ! need it.
      plot_kind :: STR, IN

      do_it :: BIN

      do_it = FALSE

      select case (plot_kind)
         case("b_field                             "); do_it = FALSE
         case("b_l_field                           "); do_it = FALSE
         case("b_s_field                           "); do_it = FALSE
         case("bond_weight                         "); do_it = FALSE
         case("crystal_error_map                   "); do_it = FALSE
         case("current_density                     "); do_it = FALSE
         case("deformation_bond_density            "); do_it = TRUE
         case("deformation_density                 "); do_it = TRUE 
         case("deformation_dft_eff_potential       "); do_it = TRUE 
         case("deformation_dft_energy              "); do_it = TRUE 
         case("deformation_dft_xc_potential        "); do_it = TRUE 
         case("deformation_electric_potential      "); do_it = TRUE 
         case("deformation_g_kinetic_energy        "); do_it = TRUE 
         case("deformation_g_kirzhnits             "); do_it = TRUE 
         case("deformation_h_dft_energy            "); do_it = TRUE 
         case("deformation_h_from_virial           "); do_it = TRUE 
         case("deformation_h_kirzhnits             "); do_it = TRUE 
         case("deformation_k_kinetic_energy        "); do_it = TRUE 
         case("deformation_laplacian               "); do_it = TRUE 
         case("deformation_v_from_virial           "); do_it = TRUE 
         case("deformation_v_kirzhnits             "); do_it = TRUE 
         case("deformation_reduced_g_kinetic_energy"); do_it = TRUE 
         case("deformation_reduced_h_from_virial   "); do_it = TRUE 
         case("deformation_reduced_k_kinetic_energy"); do_it = TRUE 
         case("deformation_reduced_v_from_virial   "); do_it = TRUE 
         case("dft_eff_potential                   "); do_it = TRUE 
         case("dft_energy                          "); do_it = TRUE 
         case("dft_xc_potential                    "); do_it = TRUE 
         case("div_jp                              "); do_it = FALSE
         case("electric_potential                  "); do_it = FALSE
         case("electric_polarisation_density       "); do_it = TRUE
         case("electric_polarization_density       "); do_it = TRUE
         case("electron_density                    "); do_it = FALSE
         case("elf                                 "); do_it = FALSE
         case("e_hf_density_from_rho               "); do_it = FALSE
         case("eli_d                               "); do_it = FALSE
       ! case("energy_density_from_rho             "); do_it = TRUE 
         case("fermi_mobility                      "); do_it = FALSE
         case("g_kinetic_energy                    "); do_it = FALSE
         case("g_kirzhnits                         "); do_it = FALSE
         case("grad_rho_on_rho                     "); do_it = FALSE
         case("h_dft_energy                        "); do_it = FALSE
         case("h_kirzhnits                         "); do_it = FALSE
         case("h_from_virial                       "); do_it = FALSE
         case("hirshfeld_atom_grid                 "); do_it = FALSE
         case("hirshfeld_density                   "); do_it = FALSE
         case("hirshfeld_weight                    "); do_it = FALSE
         case("j                                   "); do_it = FALSE
         case("jd                                  "); do_it = FALSE
         case("jp                                  "); do_it = FALSE
         case("k_kinetic_energy                    "); do_it = FALSE
         case("laplacian                           "); do_it = FALSE
         case("local_ionisation_energy             "); do_it = FALSE
         case("local_virial_ratio                  "); do_it = FALSE
         case("negative_laplacian                  "); do_it = FALSE
         case("normalized_h_from_virial            "); do_it = FALSE
       ! case("orbital_current_density             "); do_it = FALSE
         case("orbital_density                     "); do_it = FALSE
         case("orbital                             "); do_it = FALSE
         case("oscillator_orbital                  "); do_it = FALSE
         case("promolecule_density                 "); do_it = FALSE
         case("reduced_g_kinetic_energy            "); do_it = TRUE 
         case("reduced_h_from_virial               "); do_it = TRUE 
         case("reduced_k_kinetic_energy            "); do_it = TRUE 
         case("reduced_v_from_virial               "); do_it = TRUE 
         case("solenoidal_jp                       "); do_it = FALSE
       ! case("spin_current_density                "); do_it = FALSE
         case("spin_density                        "); do_it = FALSE
         case("spherical_atom_density              "); do_it = FALSE
         case("stockholder_density                 "); do_it = FALSE
         case("stockholder_weight                  "); do_it = FALSE
         case("true_fermi_mobility                 "); do_it = FALSE
         case("tsirelson_elf                       "); do_it = FALSE
         case("v_kirzhnits                         "); do_it = FALSE
         case("v_from_virial                       "); do_it = FALSE
         case default;                UNKNOWN(.plot_grid.plot_kind)
      end

      if (do_it) .GRID:set_up_becke_grid

   end

   set_integrals_for_plot(plot_kind) ::: private, leaky
   ! Set the required integrals for the "plot_kind".
      plot_kind :: STR

      select case (plot_kind)
         case ("true_fermi_mobility_grid")
            .INTS:make_kinetic_energy_mx
            .INTS:make_nuclear_attraction_mx
      end

      select case (plot_kind)
         case ("jp    ", "div_jp" )
            .BASE:make_ao_density_matrix
            .INTS:make_overlap_matrix
            .BASE:make_restricted_complex_NOs
      end

      select case (plot_kind)
         case ("jp_irrotational", "jp_solendoidal")
            .BASE:make_ao_density_matrix
            ENSURE(.density_matrix.created("restricted_complex"), "no restricted complex density matrix")
      end


   end

end
