!---------------------------------------------------------------------------
!
!  MAT3{INT}: 3 dimensional integer matrices
!
! Copyright (C) Dylan Jayatilaka, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!---------------------------------------------------------------------------

module MAT3{INT}

   implicit none

contains

   create(dim1,dim2,dim3) ::: get_from(MAT3{INTRINSIC}), leaky
   ! Create the object with the desired bounds
   end

   create(lb1,ub1,lb2,ub2,lb3,ub3) ::: get_from(MAT3{INTRINSIC}), leaky
   ! Create the object with the desired bounds
   end

   create(bounds1,bounds2,bounds3) ::: get_from(MAT3{INTRINSIC}), leaky
   ! Create the object with the desired bounds
   end

   create(bounds) ::: get_from(MAT3{INTRINSIC}), leaky
   ! Create the object with the desired bounds
   end

   create_copy(c) ::: get_from(MAT3{INTRINSIC}), leaky
   ! Create a copy of matrix "c"
   end

   destroy ::: get_from(MAT3{INTRINSIC}), leaky
   ! Destroy the object
   end

   created result(res) ::: get_from(MAT3{INTRINSIC}), inlined_by_foo
   ! Returns true if self has been created
   end

   destroyed result(res) ::: get_from(MAT3{INTRINSIC}), inlined_by_foo
   ! Returns true if self has *not* been created
   end

   size result (res) ::: get_from(MAT3{INTRINSIC}), inlined_by_foo
   ! Return the size of the array
   end

   dim1 result (res) ::: get_from(MAT3{INTRINSIC}), inlined_by_foo
   ! Return the size of the 1st dimension
   end

   dim2 result (res) ::: get_from(MAT3{INTRINSIC}), inlined_by_foo
   ! Return the size of the 2nd dimension
   end

   dim3 result (res) ::: get_from(MAT3{INTRINSIC}), inlined_by_foo
   ! Return the size of the 2nd dimension
   end

   shape result (res) ::: get_from(MAT3{INTRINSIC})
   ! Return the size of the 2nd dimension
   end

   is_same_shape_as(b) result(res)  ::: get_from(MAT3{INTRINSIC})
   ! Returns TRUE if the matrix "b" has the same shape as self
   end

   set_to(b) ::: get_from(MAT3{INTRINSIC})
   ! Set "self" to "b"
   end

   set_to(b) ::: get_from(MAT3{INTRINSIC})
   ! Set "self" to vector "b" in standard order
   end

   make_index_of_components(components) ::: pure
   ! Returns the index matrix corresponding to the components.
   ! Each dimension of self is size(components,2).
     components :: MAT{INT}, IN
     self :: OUT
     ind,a,b,c :: INT
     do ind = 1,size(components,2)
       a = components(1,ind)
       b = components(2,ind)
       c = components(3,ind)
       self(a+1,b+1,c+1) = ind
     end
   end

   to_gaussian_xyz_indices(l_max)
   ! Make "self", which maps the three defining xyz powers of each cartesian
   ! gaussian, for all gaussians up to angular momnetum "l_max", back to its
   ! lexical index *within a shell of the same angular momentum* i.e. not the
   ! total lexical index. NOTE: "self" has lower bounds of 0, and so is passed
   ! in as a pointer.
     self :: PTR
     l_max :: INT, IN
   ENSURE(lbound(self,1)==0,"wrong lower bound")
   ENSURE(lbound(self,2)==0,"wrong lower bound")
   ENSURE(lbound(self,3)==0,"wrong lower bound")
   ENSURE(ubound(self,1)==l_max,"wrong upper bound")
   ENSURE(ubound(self,2)==l_max,"wrong upper bound")
   ENSURE(ubound(self,3)==l_max,"wrong upper bound")
     L,k,a,b,c :: INT
     do L = 0,l_max  ! Loop over all shells with momentum L
       k = 1         ! This is the local shell lexical index
                     ! Loop over powers a, b, c
       do a = L,floor((L+2)*THIRD),-1
         do b = min(L-a,a),floor((L-a+1)*HALF),-1
           c = L-a-b
           if (a==b AND b==c) then
             self(a,a,a) = k
             k = k+1
           else if (a>b AND b==c) then
             self(a,b,b) = k
             self(b,a,b) = k+1
             self(b,b,a) = k+2
             k = k+3
           else if (a==b AND b>c) then
             self(a,a,c) = k
             self(a,c,a) = k+1
             self(c,a,a) = k+2
             k = k+3
           else
             self(a,b,c) = k
             self(a,c,b) = k+1
             self(b,a,c) = k+2
             self(c,a,b) = k+3
             self(b,c,a) = k+4
             self(c,b,a) = k+5
             k = k+6
           end
         end
       end
     end
   end

end
