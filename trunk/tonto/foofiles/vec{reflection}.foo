!---------------------------------------------------------------------------
!
!  VEC{REFLECTION}: a vector of crystal reflection data
!
! Copyright (C) Daniel Grimwood, 2000
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!---------------------------------------------------------------------------

module VEC{REFLECTION}

   implicit none

   saved_self :: VEC{REFLECTION}*, private  DEFAULT_NULL

contains

!  ===========================
!  Create and Destroy Routines
!  ===========================

   create(dim) ::: get_from(VEC{OBJECT}), leaky
   ! Create space for object. This version does not nullify ptr parts.
   end

   destroy ::: get_from(VEC{OBJECT}), leaky
   ! Destroy space for object. This version does not destroy ptr parts
   end

   create_copy(vec) ::: get_from(VEC{OBJECT}), leaky
   ! Create a replica copy of "vec".
   end

   copy(vec) ::: get_from(VEC{OBJECT})
   ! Copy "vec".
   end

   created result (res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has been created
   end

   destroyed result (res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has *not* been created
   end

!  ============
!  Set routines
!  ============

   set_defaults ::: get_from(VEC{OBJECT}, leaky
   ! Set default values
   end

   set_h(h) ::: pure
   ! Set the h indices
      self :: INOUT
      h :: VEC{INT}, IN

      i :: INT

      do i = 1,.dim
         self(i).h = h(i)
      end

   end

   set_k(k) ::: pure
   ! Set the k indices
      self :: INOUT
      k :: VEC{INT}, IN

      i :: INT

      do i = 1,.dim
         self(i).k = k(i)
      end

   end

   set_l(l) ::: pure
   ! Set the l indices
      self :: INOUT
      l :: VEC{INT}, IN

      i :: INT

      do i = 1,.dim
         self(i).l = l(i)
      end

   end

   set_calc(v) ::: pure
   ! Set all the complex calculated structure factors
      self :: INOUT
      v :: VEC{CPX}, IN

      self(:).calc = v

   end

   set_pred(v) ::: pure
   ! Set all the predicted intensities.
      self :: INOUT
      v :: VEC{REAL}, IN

      self(:).pred = v

   end

   set_obs(v) ::: pure
   ! Set all the observed reflection data
      self :: INOUT
      v :: VEC{REAL}, IN

      self(:).obd = v

   end

   set_sigma(v) ::: pure
   ! Set all the experimental  errors
      self :: INOUT
      v :: VEC{REAL}, IN

      self(:).sigma = v

   end

   scale_obs(fac) ::: pure
   ! Scale all the experimental observations be "fac"
      self :: INOUT
      fac :: REAL, IN

      self(:).obs = self(:).obs * fac
   
   end

   scale_sigma(fac) ::: pure
   ! Scale all the experimental errors
      self :: INOUT
      fac :: REAL, IN

      self(:).sigma = self(:).sigma * fac

   end


!  ================
!  Enquiry Routines
!  ================

   n_refl result (res)
   ! The number of reflections
      self :: IN
      res :: INT
      res = size(self)
   end

   
   have_calc result (res) ::: pure
   ! Any non-zero (complex) calculated structure factors?
      self :: IN
      res :: BIN

      n :: INT

      res = FALSE

      do n = 1,.dim
         if (abs(self(n).calc) > TOL(10)) then
            res = TRUE
            exit
         end
      end

   end

   have_pred result (res) ::: pure
   ! Any non-zero predicted structure factors?
      self :: IN
      res :: BIN

      n :: INT

      res = FALSE

      do n = 1,.dim
         if (abs(self(n).pred) > TOL(10)) then
            res = TRUE
            exit
         end
      end

   end

   have_obs result (res) ::: pure
   ! Any non-zero observed structure factors
      self :: IN
      res :: BIN

      n :: INT

      res = FALSE

      do n = 1,.dim
         if (abs(self(n).obs) > TOL(10)) then
            res = TRUE
            exit
         end
      end

   end

   have_sigma result (res) ::: pure
   ! Any non-zero errors in the structure factors
      self :: IN
      res :: BIN

      n :: INT

      res = FALSE

      do n = 1,.dim
         if (abs(self(n).sigma) > TOL(10)) then
            res = TRUE
            exit
         end
      end

   end

   have_indices result (res) ::: pure
   ! Any non-zero Miller indices
      self :: IN
      res :: BIN

      n :: INT

      res = FALSE
      do n = 1,.dim
         if (self(n).h /= 0 OR self(n).k /= 0 OR self(n).l /= 0) then
            res = TRUE
            exit
         end
      end

   end

   hkl(n) result (res) ::: pure
   ! Return the miller indices of reflection n.
      self :: IN
      n :: INT, IN
      res :: VEC{INT}(3)
      res = [ self(n).h, self(n).k, self(n).l ]
   end

   miller_indices_for_reflection(n) result (res) ::: pure
   ! Return the Miller indices of reflection n.
      self :: IN
      n :: INT, IN
      res :: VEC{INT}(3)
      res = [ self(n).h, self(n).k, self(n).l ]
   end

   use_multiple_scale_factors result (res)
   ! Return TRUE if we are supposed to use multiple scale factors.
      res :: BIN
      res = any(self.group>0)
   end


!  ====================
!  Statistical Routines
!  ====================

   chi2 result (res) ::: pure
   ! Return the chi2 between the predicted and observed structure
   ! factors. The sum of squares is divided by max(.dim-1,1)
      self :: IN
      res :: REAL

   ENSURE(.have_pred, "no predicted structure factors")
   ENSURE(.have_obs,  "no experimental structure factors")
   ENSURE(.have_sigma,"no experimental sigma's")

      z :: REAL
      n :: INT

      res = ZERO

      if (NOT .have_obs) return

      do n = 1,.dim
         z = self(n).z_statistic
         res = res + z*z
      end

      res = res / max(.dim-1,1)

   end

   goodness_of_fit result (res) ::: pure
   ! Return the goodness-of-fit between the predicted and observed
   ! structure factors
      self :: IN
      res :: REAL
      res = sqrt(.chi2)
   end

   r_factor result (res) ::: pure
   ! Return the r factor between the predicted and observed structure
   ! factors
      self :: IN
      res :: REAL

   ENSURE(.have_pred,"no predicted structure factors")
   ENSURE(.have_obs, "no experimental structure factors")

      top,bot :: REAL
      n :: INT

      top = ZERO
      bot = ZERO

      do n=1,size(self)
         top = top + abs(self(n).pred - self(n).obs)
         bot = bot + abs(self(n).obs)
      end

      res = top / bot

   end

   r_sigma result (res) ::: pure
   ! The R_sigma(F) for the experimental structure factors.
   ! This is the sum-total-sigma on sum-total-of-observations.
      self :: IN
      res :: REAL

   ENSURE(.have_obs,  "no experimental structure factors")
   ENSURE(.have_sigma,"no experimental sigma's")

      top,bot :: REAL
      n :: INT

      top = ZERO
      bot = ZERO

      do n = 1,.dim
         top = top + abs(self(n).sigma)
         bot = bot + abs(self(n).obs)
      end

      res = top / bot

   end

   weighted_r_factor result (res) ::: pure
   ! Return the weighted r factor for the structure factors
      self :: IN
      res :: REAL

   ENSURE(.have_sigma,"no experimental sigma's")
   ENSURE(.have_pred, "no predicted structure factors")
   ENSURE(.have_obs,  "no experimental structure factors")

      top,bot,z,b :: REAL
      n :: INT

      top = ZERO
      bot = ZERO

      do n = 1,.dim

         z = self(n).z_statistic
         b = self(n).obs / self(n).sigma

         top = top + z*z
         bot = bot + b*b

      end

      res = sqrt(top/bot)

   end

   sigma2_eff result (res) ::: pure
   ! Return the effective (mean) value of delta^2 relative to sigma^2.
   ! Maybe useful for guessing starting lambda values for XCW?
      self :: IN
      res :: REAL
  
   ENSURE(.have_sigma,"no experimental sigma's")
   ENSURE(.have_obs,  "no experimental structure factors")
   ENSURE(.have_pred, "no predicted structure factors")
  
      top,bot,del,sig :: REAL
      r :: INT
  
      res = ZERO
  
      top = ZERO
      bot = ZERO
  
      do r = 1,.dim
  
         sig = self(r).sigma
         sig = sig*sig

         del = self(r).delta
         del = del*del
  
         top = top + del
         bot = bot + del/sig
  
      end
  
      res = top/bot
  
   end


!  =======================
!  List-based I/O Routines
!  =======================

   read_list_keywords ::: get_from(VEC{OBJECT}), recursive, leaky
   ! Read in and process list-based keywords from "stdin". List-based keywords
   ! are those that are intended to apply to each individual element of the list
   ! through a list of "keys" stored in the associated list-element type module.
   ! NOTE: this routine will create the list, if required.
   end

   process_list_keyword(keyword) ::: get_from(VEC{OBJECT}), leaky
   ! Process a list-type "keyword", common to all list-type objects.
   end

   read_data ::: get_from(VEC{OBJECT}), leaky
   ! Repeatedly process the "keys" to read in the data list. 
   ! Opening and closing braces are needed.
   end

   read_data_sans_braces ::: get_from(VEC{OBJECT}), leaky
   ! Repeatedly process the "keys" to read in the data list. 
   ! Opening and closing braces are not needed.
   end

   data_length result (length) ::: get_from(VEC{OBJECT})
   ! Read ahead in stdin to get the "length" of the data list, i.e. the number
   ! of data items in the list. The data must begin with the first data item,
   ! *not* a "{" symbol.  The order of data items comprising the list is given
   ! by keys defined in the associated list-element type module. The data list
   ! must be terminated by a "}" symbol.
   end

   read_altered_data ::: get_from(VEC{OBJECT}), leaky
   ! Read in a sublist of the complete list, and alter the data for that
   ! sublist.  The order of the data items in the sublist is given by the "keys"
   ! defined in the associated list-element type module.
   end

   read_append_data ::: get_from(VEC{OBJECT}), leaky
   ! Read in a set of data to append to an existing set.
   end

   process_keys ::: get_from(VEC{OBJECT}), leaky
   ! Process the "keys" on each element of the list.
   end

   process_keys_once ::: get_from(VEC{OBJECT})
   ! Process the "keys" just once on an anonymous object. This is useful if the
   ! "keys" set global variables in the list module (e.g. the default order of
   ! lists *within* the list data) as opposed to being keys pertaining to each
   ! element of the list.
   end

   keys_created result (res) ::: get_from(VEC{OBJECT})
   ! Return TRUE if the list-element keys are created.
   end

   set_keys(the_keys) ::: get_from(VEC{OBJECT})
   ! This is for setting the "keys" externally.
   end

   clear_keys ::: get_from(VEC{OBJECT}), leaky
   ! This is for destroying the "keys" externally.
   end

   read_keys ::: get_from(VEC{OBJECT}), leaky
   ! Read a new set of keys
   end

   redirect ::: get_from(OBJECT), leaky
   ! Redirect input
   end

   revert ::: get_from(OBJECT), leaky
   ! Revert back to previous stdin file
   end


!  ===========================
!  Non-list based I/O routines
!  ===========================

   read_keywords ::: get_from(VEC{OBJECT}), leaky
   ! Read in and process normal (non list-type) keywords from "stdin".
   end

   process_keyword(keyword) ::: leaky
   ! Process a normal (non list-type) "keyword".
      self :: PTR
      keyword :: STR
      word :: STR
      word = keyword
      word.to_lower_case
      select case (word)
       case("}") ! do nothing.
       case("add_random_error         "); .add_random_error
       case("put                      "); .put
       case("put_observed             "); .put_observed
       case("put_predicted            "); .put_predicted
       case("put_statistics           "); .put_statistics
       case("redirect                 "); .redirect
       case("revert                   "); .revert
       case("set_hkl_range=           "); .set_hkl_range
       case("simulate_new_obs         "); .simulate_new_obs   
       case default;     UNKNOWN(word)
      end
   end

   shrink(dim) ::: get_from(VEC{OBJECT}), leaky
   ! Shrink self to dimension dim.  Contents are retained.
   end

   expand(dim) ::: get_from(VEC{OBJECT}), leaky
   ! Expand the vector "self" to "dim". New slots are left undefined.
   end

   append(v) ::: get_from(VEC{OBJECT}), leaky
   ! Expands self and appends the contents of vector "v".
   end

   append(value) ::: get_from(VEC{OBJECT}), leaky
   ! Expands self by 1, and appends the single scalar "value" onto the end.
   end

   set_hkl_range ::: leaky
   ! Set a h,k,l range ... useful for structure factor calculations
   ! without having to set every reflection individually.
      self :: PTR
      hkl_range :: VEC{VEC_{INT}}*
      f1,f2,f3,l1,l2,l3,dim,h,k,l,i :: INT

      ! Read
      stdin.read_ptr(hkl_range)

      ! Sanity check
      DIE_IF(.created,"the reflections are already created")
      DIE_IF(hkl_range.dim/=3,"hkl range must have three ranges")
      DIE_IF(hkl_range(1).element.dim/=2,"hkl range 1 must have two limits")
      DIE_IF(hkl_range(2).element.dim/=2,"hkl range 2 must have two limits")
      DIE_IF(hkl_range(3).element.dim/=2,"hkl range 3 must have two limits")

      ! Get limits
      f1 = hkl_range(1).element(1)
      f2 = hkl_range(2).element(1)
      f3 = hkl_range(3).element(1)
      l1 = hkl_range(1).element(2)
      l2 = hkl_range(2).element(2)
      l3 = hkl_range(3).element(2)

      ! Create the array
      dim = (l1-f1+1)*(l2-f2+1)*(l3-f3+1)
      self.create(dim)
      stdout.show("h range =",[f1,l1])
      stdout.show("k range =",[f2,l2])
      stdout.show("l range =",[f3,l3])
      stdout.show("Total # of reflection =",dim)
      i = 0
      do h = f1,l1
      do k = f2,l2
      do l = f3,l3
        i = i + 1
        self(i).h = h
        self(i).k = k
        self(i).l = l
      end
      end
      end

      ! Clean
      hkl_range.destroy

   end


!  ===============
!  Output routines
!  ===============


   put
   ! Output all the factor info
      if (.use_multiple_scale_factors) then; .put_group_info
      else;                                  .put_nogrp_info
      end
   end

   put_group_data ::: privat
   ! Output the structure factor data with group index

      table :: VEC{TABLE_COLUMN}*
      h,k,l,g :: VEC{INT}*
      F_cr,F_ci,F_pred,F_exp,F_sigma,F_z :: VEC{REAL}*
      n_refl :: INT

      ! Constants
      n_refl = .dim

      ! Get data
      h.create(n_refl);       h       = .h
      k.create(n_refl);       k       = .k
      l.create(n_refl);       l       = .l
      g.create(n_refl);       g       = .group
      F_cr.create(n_refl);    F_cr    = RE(.F_calc)
      F_ci.create(n_refl);    F_ci    = IM(.F_calc)
      F_pred.create(n_refl);  F_pred  = .F_pred
      F_exp.create(n_refl);   F_exp   = .F_exp
      F_sigma.create(n_refl); F_sigma = .F_sigma
      F_z.create(n_refl);     F_z     = REFLECTION:F_z(self)

      ! Make table
      table.create(10)
       table(1).set_heading("h");        table(1).set_values(h)
       table(2).set_heading("k");        table(2).set_values(k)
       table(3).set_heading("l");        table(3).set_values(l)
       table(4).set_heading("Scale");    table(4).set_values(g)
       table(5).set_heading("Calc");     table(5).set_values(F_cr)
       table(6).set_heading("Calc");     table(6).set_values(F_ci)
       table(7).set_heading("Pred");     table(7).set_values(F_pred)
       table(8).set_heading("Obs.");     table(8).set_values(F_exp)
       table(9).set_heading("Sigma");    table(9).set_values(F_sigma)
      table(10).set_heading("Z stat");  table(10).set_values(F_z)
      table.put

      ! Subheadings
      table(4).set_subhead("Group")
      table(5).set_subhead("Real")
      table(6).set_subhead("Imag")

      ! Clean
      table.clear_columns
      table.destroy
      F_z.destroy
      F_sigma.destroy
      F_exp.destroy
      F_pred.destroy
      F_ci.destroy
      F_cr.destroy
      g.destroy
      l.destroy
      k.destroy
      h.destroy

   end

   put_nogrp_data ::: private
   ! Output the structure factor data, single scale factor group

      table :: VEC{TABLE_COLUMN}*
      h,k,l :: VEC{INT}*
      F_cr,F_ci,F_pred,F_exp,F_sigma,F_z :: VEC{REAL}*
      n_refl :: INT

      ! Constants
      n_refl = .dim

      ! Get data
      h.create(n_refl);       h       = .h
      k.create(n_refl);       k       = .k
      l.create(n_refl);       l       = .l
      F_cr.create(n_refl);    F_cr    = RE(.F_calc)
      F_ci.create(n_refl);    F_ci    = IM(.F_calc)
      F_pred.create(n_refl);  F_pred  = .F_pred
      F_exp.create(n_refl);   F_exp   = .F_exp
      F_sigma.create(n_refl); F_sigma = .F_sigma
      F_z.create(n_refl);     F_z     = REFLECTION:F_z(self)

      ! Make table
      table.create(9)
      table(1).set_heading("h");        table(1).set_values(h)
      table(2).set_heading("k");        table(2).set_values(k)
      table(3).set_heading("l");        table(3).set_values(l)
      table(4).set_heading("Calc");     table(4).set_values(F_cr)
      table(5).set_heading("Calc");     table(5).set_values(F_ci)
      table(6).set_heading("Pred");     table(6).set_values(F_pred)
      table(7).set_heading("Obs.");     table(7).set_values(F_exp)
      table(8).set_heading("Sigma");    table(8).set_values(F_sigma)
      table(9).set_heading("Z stat");   table(9).set_values(F_z)
      table.put

      ! Subheadings
      table(4).set_subhead("Real")
      table(5).set_subhead("Imag")

      ! Clean
      table.clear_columns
      table.destroy
      F_z.destroy
      F_sigma.destroy
      F_exp.destroy
      F_pred.destroy
      F_ci.destroy
      F_cr.destroy
      l.destroy
      k.destroy
      h.destroy

   end


   put_observed
   ! Output only the experimental structure factor data
      if (.use_multiple_scale_factors) then; .put_obs_group
      else;                                  .put_obs_nogrp
      end
   end

   put_obs_nogrp ::: private
   ! Output only the experimental structure factor data, where only
   ! one scale factor (scale group) is used.

      table :: VEC{TABLE_COLUMN}*
      h,k,l :: VEC{INT}*
      F_exp,F_sigma :: VEC{REAL}*
      n_refl :: INT

      ! Constants
      n_refl = .dim

      ! Get data
      h.create(n_refl);       h       = .h
      k.create(n_refl);       k       = .k
      l.create(n_refl);       l       = .l
      F_exp.create(n_refl);   F_exp   = .F_exp
      F_sigma.create(n_refl); F_sigma = .F_sigma

      ! Make table
      table.create(5)
      table(1).set_heading("h");       table(1).set_values(h)
      table(2).set_heading("k");       table(2).set_values(k)
      table(3).set_heading("l");       table(3).set_values(l)
      table(4).set_heading("Obs.");    table(4).set_values(F_exp)
      table(5).set_heading("Sigma");   table(5).set_values(F_sigma)
      table.put

      ! Clean
      table.clear_columns
      table.destroy
      F_sigma.destroy
      F_exp.destroy
      l.destroy
      k.destroy
      h.destroy

   end

   put_obs_group ::: private
   ! Output only the experimental structure factor data where multiple
   ! scale factors (scale groups) are used.

      table :: VEC{TABLE_COLUMN}*
      h,k,l,g :: VEC{INT}*
      F_exp,F_sigma :: VEC{REAL}*
      n_refl :: INT

      ! Constants
      n_refl = .dim

      ! Get data
      h.create(n_refl);       h       = .h
      k.create(n_refl);       k       = .k
      l.create(n_refl);       l       = .l
      g.create(n_refl);       g       = .group
      F_exp.create(n_refl);   F_exp   = .F_exp
      F_sigma.create(n_refl); F_sigma = .F_sigma

      ! Make table
      table.create(6)
      table(1).set_heading("h");       table(1).set_values(h)
      table(2).set_heading("k");       table(2).set_values(k)
      table(3).set_heading("l");       table(3).set_values(l)
      table(4).set_heading("Scale");   table(4).set_values(g)
      table(5).set_heading("Obs.");    table(5).set_values(F_exp)
      table(6).set_heading("Sigma");   table(6).set_values(F_sigma)
      table.put

      ! Subheadings
      table(4).set_subhead("Group")

      ! Clean
      table.clear_columns
      table.destroy
      F_sigma.destroy
      F_exp.destroy
      g.destroy
      l.destroy
      k.destroy
      h.destroy

   end


   put_predicted
   ! Output only the predicted structure factor data

      table :: VEC{TABLE_COLUMN}*
      h,k,l :: VEC{INT}*
      F_cr,F_ci,F_pred :: VEC{REAL}*
      n_refl :: INT

      ! Constants
      n_refl = .dim

      ! Get data
      h.create(n_refl);      h      = .h
      k.create(n_refl);      k      = .k
      l.create(n_refl);      l      = .l
      F_cr.create(n_refl);   F_cr   = RE(.F_calc)
      F_ci.create(n_refl);   F_ci   = IM(.F_calc)
      F_pred.create(n_refl); F_pred = .F_pred

      ! Make table
      table.create(6)
      table(1).set_heading("h");      table(1).set_values(h)
      table(2).set_heading("k");      table(2).set_values(k)
      table(3).set_heading("l");      table(3).set_values(l)
      table(4).set_heading("Calc");   table(4).set_values(F_cr)
      table(5).set_heading("Calc");   table(5).set_values(F_ci)
      table(6).set_heading("Pred");   table(6).set_values(F_pred)

      ! Subheadings
      table(4).set_subhead("Real")
      table(5).set_subhead("Imag")
      table.put

      ! Clean
      table.clear_columns
      table.destroy
      F_pred.destroy
      F_ci.destroy
      F_cr.destroy
      l.destroy
      k.destroy
      h.destroy

   end


   put_statistics(header,show_chi2)
   ! Output the structure factor statistics using "header".
      header :: STR, IN
      show_chi2 :: BIN, optional

   ENSURE(.have_obs, "No experimental data!")
   ENSURE(.have_pred,"No predicted structure factors!")

      chi2 :: REAL
      show :: BIN

      stdout.flush
      stdout.text("Statistics for "//trim(header)//":")
      stdout.flush
      stdout.show("R_sigma                        =", .r_sigma)
      stdout.show("R-factor                       =", .r_factor)
      stdout.show("Weighted R-factor, R_w         =", .weighted_r_factor)

      show = TRUE
      if (present(show_chi2)) show = show_chi2

      if (show) then
      chi2 = .chi2
      stdout.show("chi^2 (N_p=1)                  =", chi2)
      stdout.show("Goodness of fit (N_p=1)        =", sqrt(chi2))
      end

   end

   put_free_statistics(show_chi2)
   ! Output the "free" structure factor statistics 
   ! NOTE: it is up to you use the correct reflection vector!
   ! NOTE: it is up to you to supply the header (F, or F2?)
      show_chi2 :: BIN, optional

   ENSURE(.have_obs, "No experimental data!")
   ENSURE(.have_pred,"No predicted structure factors!")

      chi2 :: REAL
      show :: BIN

      stdout.show("Free R_sigma                 =", .F_r_sigma)
      stdout.show("Free R-factor                =", .F_r_factor)
      stdout.show("Free R_w                     =", .F_weighted_r_factor)

      show = TRUE
      if (present(show_chi2)) show = show_chi2

      if (show) then
      chi2 = .F_chi2
      stdout.show("Free chi^2 (N_p=1)           =", chi2)
      stdout.show("Free GOF (N_p=1)             =", sqrt(chi2))
      end

   end


!  ========
!  QQ plots
!  ========

   put_qq_plot
   ! Output a qq plot to the text file.
   ! It is a plot of the experimental quantile vs expected quantile.

      grid :: MAT{REAL}*

      grid.create(.n_refl,2)

      .make_qq_plot_grid(grid)

      stdout.flush
      stdout.text("Unlabelled QQ plot:")
      stdout.flush
      stdout.put(grid,by_row=TRUE)

      grid.destroy

   end

   put_labelled_qq_plot
   ! Output a qq plot to the text file.
   ! It is a plot of the experimental quantile vs expected quantile.

      grid :: MAT{REAL}*
      hkl :: MAT{INT}*
      n :: INT

      hkl.create(.n_refl,3)
      do n = 1,.dim
         hkl(n,:) = .indices(n)
      end

      grid.create(.n_refl,2)

      .make_qq_plot_grid(grid,hkl)

      stdout.flush
      stdout.text("Labelled QQ plot:")
      stdout.flush
      do n = 1,.dim
         stdout.put(grid(n,1))
         stdout.put(grid(n,2))
         stdout.put(hkl(n,1))
         stdout.put(hkl(n,2))
         stdout.put(hkl(n,3))
         stdout.flush
      end

      ! Clean
      grid.destroy
      hkl.destroy

   end

   make_qq_plot_grid(grid,hkl)
   ! Make the grid for the Q-Q plot, which is a plot of the deviations X-Y
   ! versus the expected deviations, assuming that the expected devaitions
   ! are normally distributed. grid(1,:) contains the expected deviation d0j,
   ! grid(2,:) contains actual deviation dj.
      self :: target
      grid :: MAT{REAL}, target
      hkl :: MAT{INT}, optional

   ENSURE(grid.dim1==.dim, "grid: wrong dim1")
   ENSURE(grid.dim2==2,    "grid: wrong dim2")

      d,e :: VEC{REAL}*
      ref :: REFLECTION*
      p :: REAL
      n_refl,i,j :: INT

      n_refl = .dim

      e => grid(:,1) ! theoretical z's
      d => grid(:,2) ! calculated z's

      do i = 1,n_refl
         ref => self(i)
         d(i) = ref.z_statistic * sign(ONE,real(ref.calc))
      end

      ! Sort array from lowest z to highest
      if (present(hkl)) then
         ENSURE(hkl.dim1==n_refl, "size of index array incorrect")
         ENSURE(hkl.dim2==3,      "size of index array incorrect")
         do i=1,n_refl-1
         do j=i+1,n_refl
            if (d(j) < d(i)) then
               d.swap_elements(i,j)
               hkl.swap_rows(i,j)
            end
         end
         end
      else
         d.sort
      end

      do j = 1,n_refl                          ! expected quantile, d0j
         p = (TWO*(n_refl-j)+ONE)/(TWO*n_refl) ! cumulative probability
         e(n_refl-j+1) = p.z_stat_from_probability
      end

   end

   simulate_new_obs
   ! Set the reflection data to be the experimental reflection data plus an
   ! error.  The errors are normally distributed, with the experimental errors
   ! being their standard deviations.

      n :: INT
      dF :: REAL

      stdout.flush
      stdout.text("Adding normally distributed random error to F_exp ...")

      do n = 1,.dim
         dF.to_random_normal ! dF has mean zero, standard deviation one
         self(n).obs = self(n).obs + dF*self(n).sigma
      end

   end

   add_random_error
   ! Set the reflection data to be the experimental reflection data plus an
   ! error.  The errors are normally distributed, with the experimental errors
   ! being their standard deviations multiplied by a scale factor which is read
   ! from stdin.

      n :: INT
      del,scale :: REAL

      stdout.flush
      stdout.text("Adding normally distributed random error to F_exp ...")

      ! Read
      stdin.read(scale)
      stdout.show("normal distribution scaled by ",scale)

      do n = 1,.dim

         ! del has mean zero, standard deviation one
         del.to_normal_deviate 

         del = del*scale

         self(n).obs = self(n).obs + dF*self(n).sigma

      end

   end

end
