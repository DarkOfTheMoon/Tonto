!---------------------------------------------------------------------------
!
! MAT{MAT_{INTRINSIC}}: Matrix of matrices
!
! Copyright (C) Dylan Jayatilaka, 2002
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id:$
!---------------------------------------------------------------------------

virtual module MAT{MAT_{INTRINSIC}}

   implicit none

contains

!  ==========
!  Allocation
!  ==========

   create(dim1,dim2) ::: leaky
   ! Create the object
      self :: PTR
      dim1,dim2 :: INT

      status :: INT

      nullify(self)

      allocate(self(dim1,dim2),STAT=status)


      ENSURE(status==0,"error in deallocating memory")
      status = status
      status = 0

      ADD_MEMORY(dim1*dim2*ELEMENT_TYPE_SIZE)

      .nullify_ptr_part

   end

   destroy ::: leaky
   ! Destroy the object
      self :: PTR

      status :: INT

      if (.destroyed) return

      .destroy_ptr_part

      DELETE_MEMORY(size(self)*ELEMENT_TYPE_SIZE)

      deallocate(self,stat=status)

      ENSURE(status==0,"error in deallocating memory")
      status = status
      status = 0

   end

   nullify_ptr_part
   ! Nullify the pointer parts of the object
      i,j :: INT
      do i = 1,.dim1
      do j = 1,.dim2
         nullify(self(i,j).element)
      end
      end
   end

   destroy_ptr_part ::: leaky
   ! Destroy the pointer parts of the object
      i,j :: INT
      do i = 1,.dim1
      do j = 1,.dim2
         self(i,j).element.destroy
      end
      end
   end

   created result (res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has been created
   end

   destroyed result (res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has *not* been created
   end

!  ============
!  Copy methods
!  ============

   create_copy(mx) ::: leaky, pure
   ! Create a copy of "mx"
      self :: PTR
      mx :: MAT{MAT_{INTRINSIC}}, IN

      .create(mx.dim1,mx.dim2,mx.dim3)
      .copy(mx)

   end

   copy(mx) ::: leaky, pure
   ! Make a copy of "mx"
      self :: OUT
      mx :: MAT{MAT_{INTRINSIC}}, IN

   ENSURE(.dim1==mx.dim1,"different 1st dimension")
   ENSURE(.dim2==mx.dim2,"different 2nd dimension")

      i,j :: INT

      .nullify_ptr_part

      do i = 1,mx.dim1
      do j = 1,mx.dim2

         if (mx(i,j).element.destroyed) cycle

         self(i,j).element.create_copy(mx(i,j).element)

      end
      end

   end

end
