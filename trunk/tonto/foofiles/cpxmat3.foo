! $Id$
!---------------------------------------------------------------------------
!
!  CMAT3: Complex 3 dimensional matrices
!
!  (c) dylan jayatilaka, 1998
!
!---------------------------------------------------------------------------
module CMAT3

   use ERROR
   use MM

   implicit none         

#include "macros"
#include "cmat3.int"

contains

   create(dim1,dim2,dim3)
   ! Create a cmat3 with the specified dimensions
      PTR :: self
      INT :: dim1,dim2,dim3
      nullify(self)
      allocate(self(dim1,dim2,dim3))
      std_mm.add(dim1*dim2*dim3*CDBL_SIZE)
   end
 
   create(lb1,ub1,lb2,ub2,lb3,ub3)
   ! Create a cmat3 with the specified bounds
      PTR :: self
      INT :: ub1,ub2,ub3,lb1,lb2,lb3
      nullify(self)
      allocate(self(lb1:ub1,lb2:ub2,lb3:ub3))
      std_mm.add((ub1-lb1+1)*(ub2-lb2+1)*(ub3-lb3+1)*CDBL_SIZE)
   end
 
   create(bounds1,bounds2,bounds3)
   ! Create a cmat3 with the specified bounds for each dimension
      PTR :: self
      IVEC(2) :: bounds1,bounds2,bounds3
      .create(bounds1(1),bounds1(2),bounds2(1),bounds2(2), &
             bounds3(1),bounds3(2))
   end

   create(bounds)
   ! Create a cmat3 with the specified bounds for all dimensions
      PTR :: self
      IMAT(3,2) :: bounds
      .create(bounds(1,1),bounds(1,2),bounds(2,1),bounds(2,2), &
            bounds(3,1),bounds(3,2))
   end

   destroy
   ! Destroy a cmat3
      PTR :: self
      if (.destroyed) return
      std_mm.delete(size(self)*CDBL_SIZE)
      deallocate(self)
   end

   created result(res)
   ! Returns true if self has been created
      PTR :: self
      BIN :: res
      res = associated(self)
   end

   destroyed result(res)
   ! Returns true if self has *not* been created
      PTR :: self
      BIN :: res
      res = NOT associated(self)
   end

   zero
   ! Set self to zero
      self = ZERO
   end

end
