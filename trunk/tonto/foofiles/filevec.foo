! $Id$
!---------------------------------------------------------------------------
!
!  FILEVEC: A vector of FILE's
!
!  (c) dylan jayatilaka, 1998
!
!---------------------------------------------------------------------------
module FILEVEC

   use TYPES
   use ERROR
   use MM
   use INT
   use OUTPUT
   use UNITNUMBER
   use FILE

   implicit none

#  include "macros"
#  include "filevec.int"

contains

   create(name,dim)
   ! Create a file vector with base-name "name" and dimension "dim"
      PTR :: self
      CHR(len=*) :: name
      INT :: dim
      INT :: i
      BIN :: used
      UNITNUMBER :: unitnumber
      nullify(self)
      allocate(self(dim))
      std_mm.add(dim*FILE_SIZE)
      do i = 1,dim
         self(i)%name = trim(name) // "," // i.to_str.trim
         self(i)%record = 1
         self(i)%io_status = 0
         unitnumber.get(self(i)%unit) ! get unique unit number
      end
   end

   create(name,lb,ub)
   ! Create a file vector with base-name "name" and dimension "dim"
      PTR :: self
      CHR(len=*) :: name
      INT :: lb,ub
      INT :: i
      BIN :: used
      UNITNUMBER :: unitnumber
      nullify(self)
      allocate(self(lb:ub))
      std_mm.add((ub-lb+1)*FILE_SIZE)
      do i = lb,ub
         self(i)%name = trim(name) // "," // i.to_str.trim
         self(i)%record = 1
         self(i)%io_status = 0
         unitnumber.get(self(i)%unit) ! get unique unit number
      end
   end

   destroy
   ! Destroy space for a file vector
      PTR :: self
      INT :: dim,lb,ub,i
      UNITNUMBER :: unitnumber
      if (.destroyed) return
      dim = size(self)
      lb = lbound(self,1)
      ub = ubound(self,1)
      do i = lb,ub
         unitnumber.free(self(i)%unit) ! free up unique unit number
      end
      deallocate(self)
      std_mm.delete(dim*FILE_SIZE)
   end

   created result(res)
   ! Returns true if self has been created
      PTR :: self
      BIN :: res
      res = associated(self)
   end

   destroyed result(res)
   ! Returns true if self has *not* been created
      PTR :: self
      BIN :: res
      res = NOT associated(self)
   end

end 
