! Testing numerical integration

program run_GAUSSIAN2

   implicit none

   g :: GAUSSIAN2 
   S,Bx,By,Bz :: MAT{REAL}*

   ! Create Tonto system
   TONTO_CREATE

   ! Open standard files
   stdout.create_stdout; stdout.open
   stderr.create_stderr; stderr.open
 
   ! Set gaussian data
   GAUSSIAN_DATA:set_indices(l_max=4)

   ! Define gaussian pair
   g.a.set_l(2)
   g.a.set_pos([TENTH,TENTH,TENTH])
   g.a.set_ex(ONE)
   g.b.set_l(2)
   g.b.set_pos([ZERO,ZERO,ZERO])
   g.b.set_ex(ONE)

   ! Output
   stdout.flush
   stdout.text("The gaussian pair ...")
   g.put 
   stdout.flush

   ! Make overlap integrals
   S.create(g.a.n_comp,g.b.n_comp)
   g.make_overlap_ints(S)

   ! Put overlap integrals
   stdout.flush
   stdout.text("Overlap integrals between the two gaussians:")
   stdout.flush
   stdout.put(S)

   ! Make magnetic field integrals
   Bx.create(g.a.n_comp,g.b.n_comp)
   By.create(g.a.n_comp,g.b.n_comp)
   Bz.create(g.a.n_comp,g.b.n_comp)
   g.make_magnetic_jp_ints(Bx,By,Bz,[ONE,ONE,ONE])

   ! Put magnetic field integrals
   stdout.flush
   stdout.text("Magnetic field current integrals Bi between")
   stdout.text("the two gaussian evaluated at (1,1,1) :")
   stdout.flush
   stdout.text("Bx:"); stdout.put(Bx)
   stdout.text("By:"); stdout.put(By)
   stdout.text("Bz:"); stdout.put(Bz)
 
   ! Make nuclear attraction integrals
   g.make_nuclear_attraction_ints(S,c=[ZERO,ZERO,ZERO])

   ! Put nuclear attraction integrals
   stdout.flush
   stdout.text("Nuclear attaction for the gaussian pair with")
   stdout.text("nucleus centered at (0,0,0) :")
   stdout.flush
   stdout.put(S)

   ! Clean
   GAUSSIAN_DATA:destroy_data
   Bz.destroy; By.destroy; Bx.destroy
   S.destroy

   ! Memory report
   TONTO_REPORT

   ! Destroy standard files
   TEXTFILE:destroy(stderr)
   TEXTFILE:destroy(stdout)

   ! Destroy Tonto system
   TONTO_DESTROY

end
