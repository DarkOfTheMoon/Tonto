! Testing numerical integration

program run_GAUSSIAN2

   implicit none

   g :: GAUSSIAN2           ! A GAUSSIAN2 object
   S :: MAT{REAL}*           ! A pointer to a real matrix
   F :: MAT3{CPX}*           ! A pointer to a real matrix
   k :: MAT{REAL}*           ! A real vector
   d :: DFTGRID*            ! A pointer to a DFT grid object
   b :: BECKE_GRID*    
 
   tonto.initialize         ! Tonto system accounting (memory, call stack)
   stdout.create_stdout     ! Create the "stdout" file
   stdout.open              ! Open it.
   tonto.set_error_output_file(stdout)

   stdout.flush
   stdout.text("First, define a gaussian pair ...")
   g.a.set(l=0,pos=[0.0d0,1.0d0,0.0d0],ex=0.02d0)
   g.b.set(l=1,pos=[0.0d0,1.0d0,2.0d0],ex=0.09d0) 
   g.put                    ! Output to "stdout"
   stdout.flush             ! Observe dot notation access to "g"
   stdout.show("The position of the first gaussian is ",g.a.pos)
   stdout.show("The exponent of the first gaussian is ",g.a.ex)
   stdout.show("The position of the 2nd   gaussian is ",g.b.pos)
   stdout.show("The exponent of the 2nd   gaussian is ",g.b.ex)

   stdout.flush
   stdout.text("Now make the fourier transform integrals between the")
   stdout.text("two gaussian functions :-")
   stdout.flush             ! Create space for answer, in array "S"
   k.create(2,3)
   F.create(2,g.a.n_comp,g.b.n_comp)
   k(1,:) = [1,0,0]
   k(2,:) = [0,1,0]
   g.make_ft(F,k)  
   stdout.put(F)

   stdout.flush
   stdout.text("Now Make the overlap integrals between the two")
   stdout.text("two gaussian functions :-")
   stdout.flush             ! Create space for answer, in array "S"
   S.create(g.a.n_comp,g.b.n_comp)
   g.make_overlap_ints(S)   ! Make the integrals
   stdout.put(S)            ! Output to "stdout"

 ! stdout.flush
 ! stdout.text("Change the precision of the output to 3 decimal")
 ! stdout.text("places, and a field width of 8 characters")
 ! stdout.set_real_precision(3)
 ! stdout.set_real_width(8) 

   stdout.flush
   stdout.text("Analytically evaluate the nuclear attaction")
   stdout.text("integrals for gaussian pair assuming the nucleus")
   stdout.text("of unit charge is at (0,1,0) :- ")
   stdout.flush
   g.make_nuclear_attraction_ints(S,c=[0.0d0,1.0d0,0.0d0])
   stdout.put(S)

   stdout.flush
   stdout.text("Numerically evaluate the previous integrals with")
   stdout.text("a default DFT grid :")
   stdout.flush
   d.create ! <<<<<<<<<<<<
   d.set_defaults
   d.gauss_chebyshev_alpha = ONE
   ! allowed L=9,11,13,15,17,19,23,25,27,29,35,41,47,53,59
   d.spherical_grid_order = 17
   d.radial_grid_order = 20
   d.set_grid_data
   d.put
   d.make_matrix_elements_of(DFTGRID:v010,g,S)
   stdout.put(S)

   stdout.flush
   stdout.text("Numerically evaluate the previous integrals with")
   stdout.text("a default BECKE_GRID :")
   stdout.flush
   b.create ! <<<<<<<<<<<<
   b.set_kind("mura_knowles")
   b.set_accuracy("medium")
 ! b.set_l_angular_grid(17)
 ! b.set_n_radial_points(20)
   b.set_grid_data
   b.reduce_core_angular_grid = FALSE
 ! b.reduce_H_angular_grid = FALSE
   b.scale_atomic_grids = FALSE
   b.partition_scaling_scheme = "none"
   b.put
   b.make_matrix_elements_of(DFTGRID:v010,g,S)
   stdout.put(S)
   b.put_atom_info
   b.put_grid

   tonto.report

end
