!-------------------------------------------------------------------------------
!
! GEMINAL_WAVEFUNCTION
!
! Copyright (C) Dylan Jayatilaka, 2003
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!
!-------------------------------------------------------------------------------

module GEMINAL_WAVEFUNCTION

   implicit none

   keys :: VEC{STR}*, private DEFAULT_NULL

   indices :: MAT{INT}(100,3), save
   ind :: INT, save

contains

!*******************************************************************************
!                             Create and Destroy Routines
!*******************************************************************************

   create(n_geminals,n_bf,use_hf_default) ::: leaky
   ! Create the geminals with "n_geminal" geminals, and each geminal having
   ! coeficients matrix of dimension "n_bf".
      self :: PTR
      n_geminals,n_bf :: INT
      use_hf_default :: BIN, optional
      hf_default :: BIN
      nullify(self)
      allocate(self)
      ADD_MEMORY(SELF_TYPE_SIZE)
      .nullify_ptr_part
      .set_defaults(n_geminals,n_bf,use_hf_default)
   end

   destroy ::: get_from(OBJECT), leaky
   ! Destroy an object
      self :: PTR
   end

   nullify_ptr_part
   ! Nullify the pointer parts of self
      nullify(.bra)
      nullify(.ket)
   end

   destroy_ptr_part  ::: leaky
   ! Destroy the pointer parts of self
      .bra.destroy
      .ket.destroy
   end

   create_copy(b) ::: leaky
   ! Create a copy of "b".
     b :: GEMINAL_WAVEFUNCTION, IN
     self :: PTR
     .create(b.n_geminals,b.n_bf)
     .copy(b)
   end

   copy(b) ::: leaky
   ! Copy a basis "b" to "self". Make sure pointer parts are first
   ! destroyed or nullified, as you want.
      b :: GEMINAL_WAVEFUNCTION, IN
      self = b
      if (b.bra.created) .bra.create_copy(b.bra)
      if (b.ket.created) .ket.create_copy(b.ket)
   end

   created result(res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has been created
      self :: PTR
      res :: BIN
   end

   destroyed result(res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has *not* been created
      self :: PTR
      res :: BIN
   end

   set_defaults(n_geminals,n_bf,use_hf_default) ::: leaky
   ! Create a default object.
     n_geminals,n_bf :: INT
     use_hf_default :: BIN, optional
     hf_default :: BIN
     i :: INT
     hf_default = FALSE
     if (present(use_hf_default)) hf_default = use_hf_default
     .n_geminals = n_geminals
     .n_bf = n_bf
     .bra.create(n_geminals) ! create bra and ket arrays
     .ket.create(n_geminals)
     .special_bra.create(n_geminals)
     .special_ket.create(n_geminals)
     do i = 1,n_geminals     ! create coeficient matrices
        .bra(i).element.create(n_bf,n_bf)
        .ket(i).element.create(n_bf,n_bf)
        .special_bra(i).element.create(2)
        .special_ket(i).element.create(2)
        .special_bra(i).element = ZERO
        .special_ket(i).element = ZERO
        if (hf_default) then
           .bra(i)[i,i] = ONE
           .ket(i)[i,i] = ONE
        else
           .bra(i).element = ZERO
           .ket(i).element = ZERO
        end
     end
   end

   set_hf_defaults(n_geminals,n_bf) ::: leaky
   ! Create a default object.
     n_geminals,n_bf :: INT
     i :: INT
     .set_defaults(n_geminals,n_bf)
     do i = 1,n_geminals     ! create HF coeficient matrices
        .bra(i)[i,i] = ONE
        .ket(i)[i,i] = ONE
     end
   end

   set(bra,ket,special_bra,special_ket) 
   ! Create a new object from the "bra" and "ket" states.
     bra,ket :: VEC{MAT_{REAL}}, target
     special_bra,special_ket :: VEC{VEC_{INT}}, target
     .bra => bra
     .ket => ket
     .special_bra => special_bra
     .special_ket => special_ket
   end

!  ************
!  I/O Routines
!  ************

   read_keywords ::: get_from(OBJECT), recursive, leaky
   ! Read data from "stdin" using keyword style input.
   end

   process_keyword(keyword) ::: leaky
   ! Process command "keyword". Any required data needed by the "keyword" is
   ! inputted from "stdin".
     keyword :: STR, IN
     word :: STR
     word = keyword
     word.to_lower_case
     select case (word)
       case ("-- Regular options --   ")
       case ("}                       "); ! exit surrounding loop
       case ("do_overlap              "); .do_overlap
       case ("junk=                   "); .read_junk
       case ("n_bf=                   "); .read_n_bf
       case ("put                     "); .put
       case ("units=                  "); .read_units
       ! These are only for making custom tables for the list type
       case ("-- Options for tables --")
       case  default ;      UNKNOWN(word)
     end
   end

   read_units ::: get_from(OBJECT)
   ! Read a string which describes the units to be used
   end

   read_junk ::: get_from(OBJECT)
   ! Read in a junk string, useful for ignoring a field
   end

   read_n_bf ::: leaky
   ! Read in a new value of ".n_bf", which must be smaller than the initial
   ! basis set size. Truncate the coefficient matrices.
   ENSURE(.bra.created,"no bra")
   ENSURE(.bra(1).element.created,"no bra elements")
   ENSURE(.ket.created,"no ket")
   ENSURE(.ket(1).element.created,"no ket elements")
      n_bf,i :: INT
      stdin.read(n_bf)
      ENSURE(n_bf<=.n_bf,"new size is not smaller")
      .n_bf = n_bf
      do i = 1,.n_geminals
         .bra(i).element.shrink(.n_bf,.n_bf)
         .ket(i).element.shrink(.n_bf,.n_bf)
      end
   end

!  ********************
!  Key related routines
!  ********************

   read_keys ::: get_from(OBJECT)
   ! Read the "keys".
   end

   process_keys ::: get_from(OBJECT), leaky
   ! Process each of the words in the "keys" list.
   end

   keys_created result (res) ::: get_from(OBJECT)
   ! Return TRUE if the list-element keys are created.
      res :: BIN
   end

   set_keys(the_keys) ::: get_from(OBJECT)
   ! This is for setting the "keys" externally.
     the_keys :: VEC{STR}
   end

   clear_keys ::: get_from(OBJECT)
   ! This is for destroying the "keys" externally.
   end

   put_table_footer ::: get_from(OBJECT)
   ! Output a table footer from the list of "keys". NOTE: not all keywords need
   ! contribute to the banner - any unrecognised keyword is skipped.
   end

   put_table_header
   ! Output a table header from the list of "keys". NOTE: not all keywords need
   ! contribute to the banner - any unrecognised keyword is skipped.
   ENSURE(keys.created,"no keys")
     word :: STR
     width,k :: INT
     width = .table_width
     if (width > 0) then
       stdout.dash(width=width)
       do k = 1,size(keys)
         word = keys(k)
         word.to_lower_case
         select case (word)
           case default; DIE("unknown option")
         end
         if (k==size(keys)) then
           stdout.flush ! In case they didn't write one.
           WARN("no flush keyword - you may later overrun the output buffer")
         end
       end
       stdout.dash(width=width)
     end
   end

   table_width result (res)
   ! Return the table width in characters, based on "keys".  Note that not all
   ! keywords need to contribute to the banner - if a keyword is not recognised,
   ! then it is skipped.
     res :: INT
   ENSURE(keys.created,"no keys")
     int_dash,real_dash,k :: INT
     word :: STR
     int_dash = 0
     real_dash = 0
     do k = 1,size(keys)
       word = keys(k)
       word.to_lower_case
       select case (word)
         case ("}                "); ! exit surrounding loop
         case ("put_configuration"); real_dash = real_dash + 1
         case ("put_label        "); int_dash = int_dash + 1
         case ("put_n_shells     "); int_dash = int_dash + 1
         case ("put_n_bf         "); int_dash = int_dash + 1
         case ("put_n_prim       "); int_dash = int_dash + 1
         case ("flush            "); exit
         case default
       end
     end
     res = int_dash * stdout.int_width + real_dash * stdout.real_width
   end

!  ***************
!  Inquiry methods
!  ***************

   same_as(b) result(res) 
   ! Return TRUE if the basis set "self" is the same as "b". Only the
   ! shell vector is compared to see if they are "really" the same.
      self :: IN
      b :: GEMINAL_WAVEFUNCTION, IN
      res :: BIN
      res = FALSE
   end

!  ***************
!  Integal methods
!  ***************

   do_overlap
   ! Evaluate the overlap integral
      res :: REAL
      res = .overlap
      stdout.show("The result is =",res)
   end

   overlap result (res)
   ! Evaluate the overlap integral
      res :: REAL
   ENSURE(.bra.dim==.ket.dim,"Bra and ket have different sizes!")
      i :: INT
      reorder :: VEC{INT}*
      indices = 0
      ind = 0
      reorder.create(.n_geminals)
      reorder = [ (i, i=1,.n_geminals) ]
      res = .overlap_for(reorder)
      reorder.destroy
   end

   overlap_for(order) result (res) ::: recursive
   ! Evaluate the overlap integral
      order :: VEC{INT}
      res :: REAL
   ENSURE(.bra.dim==.ket.dim,"self bra and ket have different sizes!")
      ii,jj,i,j,k,last,dim, bi1,bi2,bj1,bj2 :: INT
      fac,this :: REAL
      reorder :: VEC{INT}*
      dim = order.dim
      write(*,*) "dim =",dim
      res = ONE
      if (dim==0) then
         stdout.text("indices:")
         stdout.put(indices)
         return
      end
                  stdout.text("Entering routine ....")
                  stdout.text("special_bra:")
                  stdout.put(.special_bra)
                  stdout.text("special_ket:")
                  stdout.put(.special_ket)
      last = dim
      do ii = 1,dim
         i = order(ii)
      write(*,*) "i =",i
         ! The simple case 1
         if (.special_ket(i)[1]>0) then
            bi1 = .special_ket(i)[1]
            bi2 = .special_ket(i)[2]
            this = .bra(last)[bi1,bi2]
         else
            this = sum(.bra(last)[:,:]*.ket(i)[:,:])
         end
         if (NOT this.is_zero) then
      write(*,*) "again, dim =",dim
             reorder.create(dim-1)
             reorder(1:i-1)   = [ (j, j=1,i-1) ]
             reorder(i:dim-1) = [ (j, j=i+1,dim) ]
             ind = ind + 1
             indices(ind,1) = i
             indices(ind,2) = i
             indices(ind,3) = last
             res = res + .overlap_for(reorder) * this ! <<<<<<<<<<<<<<<<<<<<<<<
             reorder.destroy
             ind = ind - 1
             indices(ind,1) = 0
             indices(ind,2) = 0
             indices(ind,3) = 0
         end
         ! Case 2
         do jj = ii+1,dim
            j = order(jj)
            if (.special_ket(i)[1]>0 AND .special_ket(j)[1]>0) then
                  ! two cases?
                  stdout.text("Case 2, i special, j special")
                  reorder.create(dim-1)
                  reorder(1:i-1) = [ (k, k=1,i-1) ]
                  reorder(i:j-2) = [ (k, k=i+1,j-1) ]
                  reorder(j-1:dim-2) = [ (k, k=j+1,dim) ]
                  reorder(dim-1) = i ! This is not used, put to make .bra.dim=.ket.dim
   
                  this = .bra(last)[bi1,bj2]
                  .special_ket(reorder(dim-1))[1] = .special_ket(i)[1]
                  .special_ket(reorder(dim-1))[2] = .special_ket(j)[2]
         write(*,*) "again 4, dim =",dim
                  stdout.text("Child, AFter assignment ...")
                  stdout.show("i =",i)
                  stdout.show("j =",j)
                  stdout.show("bi1 =",bi1)
                  stdout.show("bj2 =",bj2)
                  stdout.text("reorder:")
                  stdout.put(reorder)
                  stdout.text("special_bra:")
                  stdout.put(.special_bra)
                  stdout.text("special_ket:")
                  stdout.put(.special_ket)
                  ind = ind + 1
                  indices(ind,1) = i
                  indices(ind,2) = j
                  indices(ind,3) = last
         write(*,*) "A. recursing here, dim =",dim
                  res = res - .overlap_for(reorder) * this ! <<<<<<<<<<<<<<<<<<<<<<<
         write(*,*) "returned from recursion, dim =",dim
                  ind = ind - 1
                  indices(ind,1) = 0
                  indices(ind,2) = 0
                  indices(ind,3) = 0
   
                  this = .bra(last)[bj1,bi2]
                  .special_ket(reorder(dim-1))[1] = .special_ket(j)[1]
                  .special_ket(reorder(dim-1))[1] = .special_ket(i)[2]
                  ind = ind + 1
                  indices(ind,1) = i
                  indices(ind,2) = j
                  indices(ind,3) = -last
         write(*,*) "B. recursing here, dim =",dim
                  res = res - .overlap_for(reorder) * this ! <<<<<<<<<<<<<<<<<<<<<<<
                  reorder.destroy
         write(*,*) "returned from recursion, dim =",dim
                  ind = ind - 1
                  indices(ind,1) = 0
                  indices(ind,2) = 0
                  indices(ind,3) = 0
                  .special_ket(reorder(dim-1))[1] = 0
                  .special_ket(reorder(dim-1))[2] = 0
            else if (.special_ket(i)[1]==0 AND .special_ket(j)[1]>0) then
                  stdout.text("Case 2, only j special")
               do bi1 = 1,.n_bf
               do bi2 = 1,.n_bf
                  ! two cases?
                  fac = .ket(i)[bi1,bi2]
   
         write(*,*) "again 1, dim =",dim
                  reorder.create(dim-1)
                  reorder(1:i-1) = [ (k, k=1,i-1) ]
                  reorder(i:j-2) = [ (k, k=i+1,j-1) ]
                  reorder(j-1:dim-2) = [ (k, k=j+1,dim) ]
                  reorder(dim-1) = i ! This is not used, put to make .bra.dim=.ket.dim
   
                  this = fac * .bra(last)[bi1,bj2]
                  .special_ket(reorder(dim-1))[1] = bi1
                  .special_ket(reorder(dim-1))[2] = .special_ket(j)[2] 
         write(*,*) "again 4, dim =",dim
                  stdout.text("Child, AFter assignment ...")
                  stdout.show("i =",i)
                  stdout.show("j =",j)
                  stdout.show("bi1 =",bi1)
                  stdout.show("bj2 =",bj2)
                  stdout.text("reorder:")
                  stdout.put(reorder)
                  ind = ind + 1
                  indices(ind,1) = i
                  indices(ind,2) = j
                  indices(ind,3) = last
         write(*,*) "A. recursing here, dim =",dim
                  res = res - .overlap_for(reorder) * this ! <<<<<<<<<<<<<<<<<<<<<<<
         write(*,*) "returned from recursion, dim =",dim
                  ind = ind - 1
                  indices(ind,1) = 0
                  indices(ind,2) = 0
                  indices(ind,3) = 0
   
                  this = fac * .bra(last)[bj1,bi2]
                  .special_ket(reorder(dim-1))[1] = .special_ket(j)[1] 
                  .special_ket(reorder(dim-1))[2] = bi2
                  ind = ind + 1
                  indices(ind,1) = i
                  indices(ind,2) = j
                  indices(ind,3) = -last
         write(*,*) "B. recursing here, dim =",dim
                  res = res - .overlap_for(reorder) * this ! <<<<<<<<<<<<<<<<<<<<<<<
                  reorder.destroy
         write(*,*) "returned from recursion, dim =",dim
                  ind = ind - 1
                  indices(ind,1) = 0
                  indices(ind,2) = 0
                  indices(ind,3) = 0
                  .special_ket(reorder(dim-1))[1] = 0
                  .special_ket(reorder(dim-1))[2] = 0
               end
               end
            else if (.special_ket(i)[1]==0 AND .special_ket(j)[1]==0) then
                  stdout.text("Case 2, NONE SPECIAL")
               do bi1 = 1,.n_bf
               do bi2 = 1,.n_bf
               do bj1 = 1,.n_bf
               do bj2 = 1,.n_bf
                  ! two cases?
                  fac = .ket(i)[bi1,bi2]*.ket(j)[bj1,bj2]
   
                  reorder.create(dim-1)
                  reorder(1:i-1) = [ (k, k=1,i-1) ]
                  reorder(i:j-2) = [ (k, k=i+1,j-1) ]
                  reorder(j-1:dim-2) = [ (k, k=j+1,dim) ]
                  reorder(dim-1) = i ! This is not used, put to make .bra.dim=.ket.dim
                  this = fac * .bra(last)[bi1,bj2]
                  stdout.show("i =",i)
                  stdout.show("j =",j)
                  stdout.show("bi1 =",bi1)
                  stdout.show("bj2 =",bj2)
                  stdout.text("reorder:")
                  stdout.put(reorder)
                  stdout.text("Before set ....")
                  stdout.text("special_bra:")
                  stdout.put(.special_bra)
                  stdout.text("special_ket:")
                  stdout.put(.special_ket)

                  .special_ket(reorder(dim-1))[1] = bi1
                  .special_ket(reorder(dim-1))[2] = bj2

                  stdout.text("After set ....")
                  stdout.text("special_bra:")
                  stdout.put(.special_bra)
                  stdout.text("special_ket:")
         write(*,*) "again 4, dim =",dim
                  stdout.text("Child, AFter assignment ...")
                  stdout.text("special_bra:")
                  stdout.put(.special_bra)
                  stdout.text("special_ket:")
                  stdout.put(.special_ket)
                  ind = ind + 1
                  indices(ind,1) = i
                  indices(ind,2) = j
                  indices(ind,3) = last
         write(*,*) "A. recursing here, dim =",dim
                  res = res - .overlap_for(reorder) * this ! <<<<<<<<<<<<<<<<<<<<<<<
         write(*,*) "returned from recursion, dim =",dim
                  ind = ind - 1
                  indices(ind,1) = 0
                  indices(ind,2) = 0
                  indices(ind,3) = 0
   
                  this = fac * .bra(last)[bj1,bi2]
                  .special_ket(reorder(dim-1))[1] = bj1
                  .special_ket(reorder(dim-1))[2] = bi2
                  ind = ind + 1
                  indices(ind,1) = i
                  indices(ind,2) = j
                  indices(ind,3) = -last
         write(*,*) "B. recursing here, dim =",dim
                  res = res - .overlap_for(reorder) * this ! <<<<<<<<<<<<<<<<<<<<<<<
                  reorder.destroy
         write(*,*) "returned from recursion, dim =",dim
                  ind = ind - 1
                  indices(ind,1) = 0
                  indices(ind,2) = 0
                  indices(ind,3) = 0
                  .special_ket(reorder(dim-1))[1] = 0
                  .special_ket(reorder(dim-1))[2] = 0
   
               end
               end
               end
               end
            end
         end
      end
   end

!  **************
!  Output methods
!  **************

   put
   ! Print out the object
      i :: INT
      stdout.text("GEMINAL_WAVEFUNCTION:")
      stdout.flush
      stdout.show("n_geminals =",.n_geminals)
      stdout.show("n_bf       =",.n_bf)
      stdout.flush
      stdout.text("Bra:")
      do i = 1,.n_geminals
         stdout.text("Special bra "//i.to_str.trim)
         stdout.put(.special_bra(i).element)
         stdout.text("Bra "//i.to_str.trim)
         stdout.put(.bra(i).element)
      end
      stdout.text("Ket:")
      do i = 1,.n_geminals
         stdout.text("Special ket "//i.to_str.trim)
         stdout.put(.special_ket(i).element)
         stdout.text("Ket "//i.to_str.trim)
         stdout.put(.ket(i).element)
      end
   end

end
