!-------------------------------------------------------------------------------
!
! ARCHIVE: For archiving tonto objects to disk
!
! A polymorphic file object which can store ascii or binary format.
! Archives with the string "ascii" somewhere in their name are assumed to be
! ascii files, otherwise they are binary files.
!
! An archive can't be used for input and output at the same time.
!
! Read and write routines are used to deal with entire single objects.
! The archive is closed after the requested IO operation.
!
! If the above behaviour is not what is needed, the archive can be opened
! for multiple object I/O in one archive (say, a list of integral blocks)
! and you can deal by hand with appropriate component of the archive.
!
! Copyright (C) Dylan Jayatilaka, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!-------------------------------------------------------------------------------

module ARCHIVE

   implicit none

#  undef ENSURE
#  ifndef NOGENERIC
#  define ENSURE(X,Y)       call ensure_(tonto,X,Y)
#  else
#  define ENSURE(X,Y)       call SYSTEM_ensure(tonto,X,Y)
#  endif

   interface read
      read_int, read_dbl
      read_vec, read_cvec
      read_mat, read_mat3, read_mat4
      read_cmat, read_cmat3, read_cmat4, read_cmat5
      read_vec_vec, read_mat_vec
      read_opvector
      read_opmatrix
   end

   interface write
      write_int, write_dbl
      write_vec, write_cvec
      write_mat, write_mat3, write_mat4
      write_cmat, write_cmat3, write_cmat4, write_cmat5
      write_vec_mat, write_mat_vec
      write_opvector
      write_opmatrix
   end

contains

   create(root_name,name,kind,format)
   ! Create an archive object with main name "root_name" and sub name "name".
   ! "kind" is used to identify components of OPMATRIX and OPVECTOR objects.
   ! "format" is used to identify file format (e.g. ascii). The default is
   ! binary.
      self :: PTR
      root_name,name :: STR(*), optional
      kind,format :: STR(*), optional
      nullify(self)
      allocate(self)
      ADD_MEMORY(ARCHIVE_SIZE)
      .nullify_ptr_part
      .set(root_name,name,kind,format)
   end

   copy(archive) ::: leaky
   ! Make a copy
     archive :: ARCHIVE
     self = archive
     .nullify_ptr_part
     if (archive.file.created) .file.create_copy(archive.file)
   end

   destroy
   ! Destroy an opmatrix object
      self :: PTR
      if ( .destroyed) return
      .destroy_ptr_part
      deallocate(self)
      DELETE_MEMORY(ARCHIVE_SIZE)
   end

   nullify_ptr_part
   ! Nullify the pointer parts of the opmatrix object
      nullify(.file)
      nullify(.textfile)
   end

   destroy_ptr_part
   ! Destroy the pointer parts of the opmatrix object
      .file.destroy
      .textfile.destroy
   end

!   created result(res)
!   ! Returns true if self has been created
!      self :: PTR
!      res :: BIN
!      res = associated(self)
!   end

!   destroyed result(res)
!   ! Returns true if self has not been created
!      self :: PTR
!      res :: BIN
!      res = NOT associated(self)
!   end

   set_defaults
   ! Set up a default archive object
      .root_name = "unknown"
      .name      = "unknown"
      .kind      = " " ! generic kind
      .format    = " " ! assume binary format
   end

   set(root_name,name,kind,format)
   ! Reset an archive to have main name "root_name", sub name "name"
   ! "kind" (if present) is used to identify components of OPMATRIX and OPVECTOR
   ! objects.
   ! "format" (if present) is used to identify file format (e.g. ascii). The
   ! default is binary.
   ! Otherwise use defaults.
      root_name,name :: STR(*), optional
      kind,format :: STR(*), optional
      .set_defaults
      if (present(root_name)) .root_name = root_name
      if (present(name))      .name      = name
      if (present(kind))      .kind      = kind
      if (present(format))    .format    = format
   end

   set_root_name(root_name)
   ! Set an archive to have sub name "name".
      root_name :: STR(*)
      .destroy_ptr_part
      .root_name = root_name
   end

   set_root(root_name)
   ! Set an archive to have sub name "name".
      root_name :: STR(*)
      .destroy_ptr_part
      .root_name = root_name
   end

   set_name(name)
   ! Set an archive to have sub name "name".
      name :: STR(*)
      .destroy_ptr_part
      .name = name
   end

   set_kind(kind)
   ! Set an archive to have kind "kind".
      kind :: STR(*)
      .destroy_ptr_part
      .kind = kind
   end

   set_format(format)
   ! Set an archive to have format "format".
      format :: STR(*)
      .destroy_ptr_part
      .format = format
   end

   file_name(kind) result(res)
   ! Return the archive file name from string ".root_name" by prepending the
   ! archive header ".name". If present ".kind" is also appended. If present,
   ! ".format" is also appended.
      kind :: STR(*), optional
      res,k :: STR
      res = trim(.root_name) // "." // .name
      k = .kind
      if (present(kind)) k = kind
      if (k/=" ")       res = trim(res) // "," // trim(k)
      if (.format/=" ") res = trim(res) // "," // .format
   end

   is_a_text_file result(res) ::: private
   ! Return true if the file is a text file
      res :: BIN
      res = .format.includes("ascii")
   end

   exists(kind) result(res)
   ! Return TRUE if the archive exists in some form on disk.
      kind :: STR(*), optional
      res :: BIN
      if (.is_a_text_file) then
         .textfile.create(trim(.file_name(kind)))
         res = .textfile.exists
         .textfile.destroy
      else
         .file.create(trim(.file_name(kind)))
         res = .file.exists
         .file.destroy
      end
   end

   open(for,buffered,type,kind) ::: leaky
   ! Open archive file
      for :: STR(*)
      type :: STR(*), optional
      buffered :: BIN, optional
      kind :: STR(*), optional
      if (.is_a_text_file) then
         .textfile.create(trim(.file_name(kind)))
         .textfile.open(for)
      else
         .file.create(trim(.file_name(kind)))
         .file.open(for,buffered,type)
      end
   end

   close ::: leaky
   ! Close *and* destroy the archive file part.
      if (.textfile.created) then
          .textfile.close
          .textfile.destroy
      end
      if (.file.created) then
          .file.close
          .file.destroy
      end
   end

   delete(kind)
   ! Delete archive file if it exists, *and* destroy the archive file part
      kind :: STR(*), optional
      if (.is_a_text_file) then
         .textfile.create(trim(.file_name(kind)))
         if (.textfile.exists) .textfile.delete
         .textfile.destroy
      else
         .file.create(trim(.file_name(kind)))
         if (.file.exists) .file.delete
         .file.destroy
      end
   end

   delete_all_kinds
   ! Delete all kinds of archive file, if they exists.
      .delete
      .delete("restricted")
      .delete("unrestricted")
      .delete("alpha")
      .delete("beta")
      .delete("general")
      .delete("restricted_complex")
      .delete("unrestricted_complex")
      .delete("alpha_complex")
      .delete("beta_complex")
      .delete("general_complex")
      .delete("complex_restricted")
      .delete("complex_unrestricted")
      .delete("complex_alpha")
      .delete("complex_beta")
      .delete("complex_general")
   end

!  ************************************
!  Read routines: read an entire object
!  ************************************

   read_int(item,kind)
   ! Read from the archive, vector "item".
      item :: INT
      kind :: STR(*), optional
      if (.is_a_text_file) then
         .textfile.create(trim(.file_name(kind)))
         ENSURE(.textfile.exists,"no text archive "// trim(.name))
         .textfile.open(for="read")
         .textfile.read(item)
         .textfile.close
         .textfile.destroy
      else
         .file.create(trim(.file_name(kind)))
         ENSURE(.file.exists,"no binary archive "// trim(.name))
         .file.open(for="read-only",buffered=TRUE,type="int")
         .file.read(item)
         .file.close
         .file.destroy
      end
   end

   read_dbl(item,kind)
   ! Read from the archive, vector "item".
      item :: REAL
      kind :: STR(*), optional
      if (.is_a_text_file) then
         .textfile.create(trim(.file_name(kind)))
         ENSURE(.textfile.exists,"no text archive "// trim(.name))
         .textfile.open(for="read")
         .textfile.read(item)
         .textfile.close
         .textfile.destroy
      else
         .file.create(trim(.file_name(kind)))
         ENSURE(.file.exists,"no binary archive "// trim(.name))
         .file.open(for="read-only",buffered=TRUE,type="dbl")
         .file.read(item)
         .file.close
         .file.destroy
      end
   end

   read_vec(item,kind)
   ! Read from the archive, vector "item".
      item :: REALVEC
      kind :: STR(*), optional
      if (.is_a_text_file) then
         .textfile.create(trim(.file_name(kind)))
         ENSURE(.textfile.exists,"no text archive "// trim(.name))
         .textfile.open(for="read")
         .textfile.read(item)
         .textfile.close
         .textfile.destroy
      else
         .file.create(trim(.file_name(kind)))
         ENSURE(.file.exists,"no binary archive "// trim(.name))
         .file.open(for="read-only",buffered=TRUE,type="dbl")
         .file.read(item)
         .file.close
         .file.destroy
      end
   end

   read_cvec(item,kind)
   ! Read from the archive, complex vector "item".
      item :: CPXVEC
      kind :: STR(*), optional
      if (.is_a_text_file) then
         .textfile.create(trim(.file_name(kind)))
         ENSURE(.textfile.exists,"no text archive "// trim(.name))
         .textfile.open(for="read")
         .textfile.read(item)
         .textfile.close
         .textfile.destroy
      else
         .file.create(trim(.file_name(kind)))
         ENSURE(.file.exists,"no binary archive "// trim(.name))
         .file.open(for="read-only",buffered=TRUE,type="cdbl")
         .file.read(item)
         .file.close
         .file.destroy
      end
   end

   read_mat(item,kind,order)
   ! Read from the archive, matrix "item". "order" is the input order for text
   ! files
      item :: REALMAT
      kind,order :: STR(*), optional
      if (.is_a_text_file) then
         .textfile.create(trim(.file_name(kind)))
         ENSURE(.textfile.exists,"no text archive "// trim(.textfile.name))
         .textfile.open(for="read")
         .textfile.read(item,order)
         .textfile.close
         .textfile.destroy
      else
         .file.create(trim(.file_name(kind)))
         ENSURE(.file.exists,"no binary archive "// trim(.file.name))
         .file.open(for="read-only",buffered=TRUE,type="dbl")
         .file.read(item)
         .file.close
         .file.destroy
      end
   end

   read_mat3(item,kind)
   ! Read from the archive, matrix "item". "order" is the input order for text
   ! files
      item :: REALMAT3
      kind :: STR(*), optional
      if (.is_a_text_file) then
         .textfile.create(trim(.file_name(kind)))
         ENSURE(.textfile.exists,"no text archive "// trim(.name))
         .textfile.open(for="read")
         .textfile.read(item)
         .textfile.close
         .textfile.destroy
      else
         .file.create(trim(.file_name(kind)))
         ENSURE(.file.exists,"no binary archive "// trim(.name))
         .file.open(for="read-only",buffered=TRUE,type="dbl")
         .file.read(item)
         .file.close
         .file.destroy
      end
   end

   read_mat4(item,kind)
   ! Read from the archive, matrix "item". "order" is the input order for text
   ! files
      item :: REALMAT4
      kind :: STR(*), optional
      if (.is_a_text_file) then
         .textfile.create(trim(.file_name(kind)))
         ENSURE(.textfile.exists,"no text archive "// trim(.name))
         .textfile.open(for="read")
         .textfile.read(item)
         .textfile.close
         .textfile.destroy
      else
         .file.create(trim(.file_name(kind)))
         ENSURE(.file.exists,"no binary archive "// trim(.name))
         .file.open(for="read-only",buffered=TRUE,type="dbl")
         .file.read(item)
         .file.close
         .file.destroy
      end
   end

   read_cmat(item,kind,order)
   ! Read from the archive, complex matrix "item". "order" is the input order
   ! for text files
      item :: CPXMAT
      kind,order :: STR(*), optional
      if (.is_a_text_file) then
         .textfile.create(trim(.file_name(kind)))
         ENSURE(.textfile.exists,"no text archive "// trim(.name))
         .textfile.open(for="read")
         .textfile.read(item,order)
         .textfile.close
         .textfile.destroy
      else
         .file.create(trim(.file_name(kind)))
         ENSURE(.file.exists,"no binary archive "// trim(.name))
         .file.open(for="read-only",buffered=TRUE,type="cdbl")
         .file.read(item)
         .file.close
         .file.destroy
      end
   end

   read_cmat3(item,kind)
   ! Read from the archive, matrix "item". "order" is the input order for text
   ! files
      item :: CPXMAT3
      kind :: STR(*), optional
      if (.is_a_text_file) then
         .textfile.create(trim(.file_name(kind)))
         ENSURE(.textfile.exists,"no text archive "// trim(.name))
         .textfile.open(for="read")
         .textfile.read(item)
         .textfile.close
         .textfile.destroy
      else
         .file.create(trim(.file_name(kind)))
         ENSURE(.file.exists,"no binary archive "// trim(.name))
         .file.open(for="read-only",buffered=TRUE,type="cdbl")
         .file.read(item)
         .file.close
         .file.destroy
      end
   end

   read_cmat4(item,kind)
   ! Read from the archive, matrix "item". "order" is the input order for text
   ! files
      item :: CPXMAT4
      kind :: STR(*), optional
      if (.is_a_text_file) then
         .textfile.create(trim(.file_name(kind)))
         ENSURE(.textfile.exists,"no text archive "// trim(.name))
         .textfile.open(for="read")
         .textfile.read(item)
         .textfile.close
         .textfile.destroy
      else
         .file.create(trim(.file_name(kind)))
         ENSURE(.file.exists,"no binary archive "// trim(.name))
         .file.open(for="read-only",buffered=TRUE,type="cdbl")
         .file.read(item)
         .file.close
         .file.destroy
      end
   end

   read_cmat5(item,kind)
   ! Read from the archive, matrix "item". "order" is the input order for text
   ! files
      item :: CPXMAT5
      kind :: STR(*), optional
      if (.is_a_text_file) then
         .textfile.create(trim(.file_name(kind)))
         ENSURE(.textfile.exists,"no text archive "// trim(.name))
         .textfile.open(for="read")
         .textfile.read(item)
         .textfile.close
         .textfile.destroy
      else
         .file.create(trim(.file_name(kind)))
         ENSURE(.file.exists,"no binary archive "// trim(.name))
         .file.open(for="read-only",buffered=TRUE,type="cdbl")
         .file.read(item)
         .file.close
         .file.destroy
      end
   end

   read_vec_vec(item1,item2)
   ! Read from the archive, vector "item1" and matrix "item2"
      item1 :: REALVEC
      item2 :: REALMAT
      if (.is_a_text_file) then
         .textfile.create(trim(.file_name))
         ENSURE(.textfile.exists,"no text archive "// trim(.file_name))
         .textfile.open(for="read")
         .textfile.read(item1)
         .textfile.read(item2)
         .textfile.close
         .textfile.destroy
      else
         .file.create(trim(.file_name))
         if (NOT .file.exists) &
            DIE("no binary archive "// trim(.file_name))
         .file.open(for="read-only",buffered=TRUE,type="dbl")
         .file.read(item1)
         .file.read(item2)
         .file.close
         .file.destroy
      end
   end

   read_mat_vec(item1,item2)
   ! Read from the archive, matrix "item1" and vector "item2"
      item1 :: REALMAT
      item2 :: REALVEC
      if (.is_a_text_file) then
         .textfile.create(trim(.file_name))
         ENSURE(.textfile.exists,"no text archive "// trim(.file_name))
         .textfile.open(for="read")
         .textfile.read(item1)
         .textfile.read(item2)
         .textfile.close
         .textfile.destroy
      else
         .file.create(trim(.file_name))
         if (NOT .file.exists) &
            DIE("no binary archive "// trim(.file_name))
         .file.open(for="read-only",buffered=TRUE,type="dbl")
         .file.read(item1)
         .file.read(item2)
         .file.close
         .file.destroy
      end
   end

   read_opvector(item,kind) ::: leaky
   ! Read from the archive operator vector "item". If present, "kind" is the
   ! kind of "item" to be read in.
      item :: OPVECTOR
      kind :: STR(*), optional
      itemkind :: STR
      if (present(kind) ) then;  itemkind = kind
      else if (.kind/=" ") then; itemkind = .kind
      else;                      itemkind = item.spinorbital_kind
      end
      select case (itemkind)
         case ("restricted")
            item.destroy("restricted")
            item.create("restricted")
            .read( item.restricted,kind="restricted")
         case ("unrestricted")
            item.destroy("unrestricted")
            item.create("unrestricted")
            .read( item.alpha,kind="alpha")
            .read( item.beta,kind="beta")
         case ("alpha")
            item.destroy("alpha")
            item.create("alpha")
            .read( item.alpha,kind="alpha")
         case ("beta")
            item.destroy("beta")
            item.create("beta")
            .read( item.beta,kind="beta")
         case ("general")
            item.destroy("general")
            item.create("general")
            .read( item.general,kind="general")
         case default
            DIE("unknown kind, "//trim(itemkind))
      end
!      if (.is_a_text_file) .write(item,itemkind)
   end

   read_opmatrix(item,kind,order) ::: leaky
   ! Read from the archive operator matrix "item". If present, "kind" is the
   ! kind of "item" to be read in. "order" indicated the input order for ascii
   ! files.
      item :: OPMATRIX
      kind,order :: STR(*), optional
      itemkind :: STR
      if (present(kind))   then; itemkind = kind
      else if (.kind/=" ") then; itemkind = .kind
      else;                      itemkind = item.spinorbital_kind
      end
      select case (itemkind)
         case ("restricted")
            item.destroy("restricted")
            item.create("restricted")
            .read( item.restricted,"restricted",order)
         case ("unrestricted")
            item.destroy("unrestricted")
            item.create("unrestricted")
            .read( item.alpha,"alpha",order)
            .read( item.beta,"beta",order)
         case ("alpha")
            item.destroy("alpha")
            item.create("alpha")
            .read( item.alpha,"alpha",order)
         case ("beta")
            item.destroy("beta")
            item.create("beta")
            .read( item.beta,"beta",order)
         case ("general")
            item.destroy("general")
            item.create("general")
            .read( item.general,"general",order)
         case ("restricted_complex","complex_restricted")
            item.destroy("restricted_complex")
            item.create("restricted_complex")
            .read( item.restricted_complex,"restricted_complex",order)
         case ("unrestricted_complex","complex_unrestricted")
            item.destroy("unrestricted_complex")
            item.create("unrestricted_complex")
            .read( item.alpha_complex,"alpha_complex",order)
            .read( item.beta_complex,"beta_complex",order)
         case ("alpha_complex","complex_alpha")
            item.destroy("alpha_complex")
            item.create("alpha_complex")
            .read( item.alpha_complex,"alpha_complex",order)
         case ("beta_complex","complex_beta")
            item.destroy("beta_complex")
            item.create("beta_complex")
            .read( item.beta_complex,"beta_complex",order)
         case ("general_complex","complex_general")
            item.destroy("general_complex")
            item.create("general_complex")
            .read( item.general_complex,"general_complex",order)
         case default
            DIE("unknown kind, "//trim(itemkind))
      end
!      if (.is_a_text_file) .write(item,kind,order)
   end

!  **************
!  Write routines
!  **************

   write_int(item,kind)
   ! Write to the archive, matrix "item".
      item :: INT
      kind :: STR(*), optional
      if (.is_a_text_file) then
         .textfile.create(trim(.file_name(kind)))
         .textfile.open(for="write")
         .textfile.set_use_labels(FALSE)
         .textfile.put(item)
         .textfile.close
         .textfile.destroy
      else
         .file.create(trim(.file_name(kind)))
         .file.open(for="write-only",buffered=TRUE,type="int")
         .file.write_buffered(item)
         .file.close
         .file.destroy
      end
   end

   write_dbl(item,kind)
   ! Write to the archive, matrix "item".
      item :: REAL
      kind :: STR(*), optional
      if (.is_a_text_file) then
         .textfile.create(trim(.file_name(kind)))
         .textfile.set_dbl_style("e")
         .textfile.open(for="write")
         .textfile.set_use_labels(FALSE)
         .textfile.put(item)
         .textfile.close
         .textfile.destroy
      else
         .file.create(trim(.file_name(kind)))
         .file.open(for="write-only",buffered=TRUE,type="dbl")
         .file.write_buffered(item)
         .file.close
         .file.destroy
      end
   end

   write_vec(item,kind,format)
   ! Write to the archive, vector "item". "format" is the output format wanted
   ! for text files
      item :: REALVEC
      kind,format :: STR(*), optional
      fmt :: STR
      if (.is_a_text_file) then
         .textfile.create(trim(.file_name(kind)))
         .textfile.set_dbl_style("e")
         .textfile.open(for="write")
         .textfile.set_use_labels(FALSE)
         fmt = "row"; if (present(format)) fmt = format
         .textfile.put(item,fmt)
         .textfile.close
         .textfile.destroy
      else
         .file.create(trim(.file_name(kind)))
         .file.open(for="write-only",buffered=TRUE,type="dbl")
         .file.write_buffered(item)
         .file.close
         .file.destroy
      end
   end

   write_cvec(item,kind,format)
   ! Write to the archive, complex vector "item". "format" is the output format
   ! wanted for text files
      item :: CPXVEC
      kind,format :: STR(*), optional
      fmt :: STR
      if (.is_a_text_file) then
         .textfile.create(trim(.file_name(kind)))
         .textfile.set_dbl_style("e")
         .textfile.open(for="write")
         .textfile.set_use_labels(FALSE)
         fmt = "row"; if (present(format)) fmt = format
         .textfile.put(item,fmt)
         .textfile.close
         .textfile.destroy
      else
         .file.create(trim(.file_name(kind)))
         .file.open(for="write-only",buffered=TRUE,type="cdbl")
         .file.write_buffered(item)
         .file.close
         .file.destroy
      end
   end

   write_mat(item,kind,order)
   ! Write to the archive, matrix "item". "order" is the output format wanted
   ! for text files
      item :: REALMAT
      kind,order :: STR(*), optional
      ord :: STR
      if (.is_a_text_file) then
         .textfile.create(trim(.file_name(kind)))
         .textfile.set_dbl_style("e")
         .textfile.open(for="write")
         .textfile.set_use_labels(FALSE)
         ord = "by_row"; if (present(order)) ord = order
         .textfile.put(item,ord)
         .textfile.close
         .textfile.destroy
      else
         .file.create(trim(.file_name(kind)))
         .file.open(for="write-only",buffered=TRUE,type="dbl")
         .file.write_buffered(item)
         .file.close
         .file.destroy
      end
   end

   write_mat3(item,kind)
   ! Write to the archive, matrix "item".
      item :: REALMAT3
      kind :: STR(*), optional
      if (.is_a_text_file) then
         .textfile.create(trim(.file_name(kind)))
         .textfile.set_dbl_style("e")
         .textfile.open(for="write")
         .textfile.set_use_labels(FALSE)
         .textfile.put(item)
         .textfile.close
         .textfile.destroy
      else
         .file.create(trim(.file_name(kind)))
         .file.open(for="write-only",buffered=TRUE,type="dbl")
         .file.write_buffered(item)
         .file.close
         .file.destroy
      end
   end

   write_mat4(item,kind)
   ! Write to the archive, matrix "item".
      item :: REALMAT4
      kind :: STR(*), optional
      if (.is_a_text_file) then
         .textfile.create(trim(.file_name(kind)))
         .textfile.set_dbl_style("e")
         .textfile.open(for="write")
         .textfile.set_use_labels(FALSE)
         .textfile.put(item)
         .textfile.close
         .textfile.destroy
      else
         .file.create(trim(.file_name(kind)))
         .file.open(for="write-only",buffered=TRUE,type="dbl")
         .file.write_buffered(item)
         .file.close
         .file.destroy
      end
   end

   write_cmat(item,kind,order)
   ! Write to the archive, complex matrix "item". "order" is the output format
   ! wanted for text files
      item :: CPXMAT
      kind,order :: STR(*), optional
      ord :: STR
      if (.is_a_text_file) then
         .textfile.create(trim(.file_name(kind)))
         .textfile.set_dbl_style("e")
         .textfile.open(for="write")
         .textfile.set_use_labels(FALSE)
         ord = "by_row"; if (present(order)) ord = order
         .textfile.put(item,ord)
         .textfile.close
         .textfile.destroy
      else
         .file.create(trim(.file_name(kind)))
         .file.open(for="write-only",buffered=TRUE,type="cdbl")
         .file.write_buffered(item)
         .file.close
         .file.destroy
      end
   end

   write_cmat3(item,kind)
   ! Write to the archive, complex matrix "item".
      item :: CPXMAT3
      kind :: STR(*), optional
      if (.is_a_text_file) then
         .textfile.create(trim(.file_name(kind)))
         .textfile.set_dbl_style("e")
         .textfile.open(for="write")
         .textfile.set_use_labels(FALSE)
         .textfile.put(item)
         .textfile.close
         .textfile.destroy
      else
         .file.create(trim(.file_name(kind)))
         .file.open(for="write-only",buffered=TRUE,type="cdbl")
         .file.write_buffered(item)
         .file.close
         .file.destroy
      end
   end

   write_cmat4(item,kind)
   ! Write to the archive, complex matrix "item".
      item :: CPXMAT4
      kind :: STR(*), optional
      if (.is_a_text_file) then
         .textfile.create(trim(.file_name(kind)))
         .textfile.set_dbl_style("e")
         .textfile.open(for="write")
         .textfile.set_use_labels(FALSE)
         .textfile.put(item)
         .textfile.close
         .textfile.destroy
      else
         .file.create(trim(.file_name(kind)))
         .file.open(for="write-only",buffered=TRUE,type="cdbl")
         .file.write_buffered(item)
         .file.close
         .file.destroy
      end
   end

   write_cmat5(item,kind)
   ! Write to the archive, complex matrix "item".
      item :: CPXMAT5
      kind :: STR(*), optional
      if (.is_a_text_file) then
         .textfile.create(trim(.file_name(kind)))
         .textfile.set_dbl_style("e")
         .textfile.open(for="write")
         .textfile.set_use_labels(FALSE)
         .textfile.put(item)
         .textfile.close
         .textfile.destroy
      else
         .file.create(trim(.file_name(kind)))
         .file.open(for="write-only",buffered=TRUE,type="cdbl")
         .file.write_buffered(item)
         .file.close
         .file.destroy
      end
   end

   write_vec_mat(item1,item2)
   ! Write to the archive, vector "item1" and matrix "item2".
      item1 :: REALVEC
      item2 :: REALMAT
      if (.is_a_text_file) then
         .textfile.create(trim(.file_name))
         .textfile.set_dbl_style("e")
         .textfile.open(for="write")
         .textfile.set_use_labels(FALSE)
         .textfile.put(item1)
         .textfile.put(item2)
         .textfile.close
         .textfile.destroy
      else
         .file.create(trim(.file_name))
         .file.open(for="write-only",buffered=TRUE,type="dbl")
         .file.write_buffered(item1)
         .file.write_buffered(item2)
         .file.close
         .file.destroy
      end
   end

   write_mat_vec(item1,item2)
   ! Write to the archive, matrix "item1" and vector "item2".
      item1 :: REALMAT
      item2 :: REALVEC
      if (.is_a_text_file) then
         .textfile.create(trim(.file_name))
         .textfile.set_dbl_style("e")
         .textfile.open(for="write")
         .textfile.set_use_labels(FALSE)
         .textfile.put(item1)
         .textfile.put(item2)
         .textfile.close
         .textfile.destroy
      else
         .file.create(trim(.file_name))
         .file.open(for="write-only",buffered=TRUE,type="dbl")
         .file.write_buffered(item1)
         .file.write_buffered(item2)
         .file.close
         .file.destroy
      end
   end

   write_opvector(item,kind,order)
   ! Write to the archive operator vector "item". "order" indicated the output
   ! order for ascii files.
      item :: OPVECTOR
      kind,order :: STR(*), optional
      itemkind :: STR
      if (present(kind)) then; itemkind = kind
      else;                    itemkind = item.spinorbital_kind
      end
      select case (itemkind)
         case ("restricted  "); .write( item.restricted,"restricted",order)
         case ("unrestricted"); .write( item.alpha,"alpha",order)
                                .write( item.beta,"beta",order)
         case ("alpha       "); .write( item.alpha,"alpha",order)
         case ("beta        "); .write( item.beta,"beta",order)
         case ("general     "); .write( item.general,"general",order)
         case default;          UNKNOWN(itemkind)
      end
   end

   write_opmatrix(item,kind,order)
   ! Write to the archive operator vector "item". "order" indicates the output
   ! order for ascii files.
      item :: OPMATRIX
      kind,order :: STR(*), optional
      itemkind :: STR
      if (present(kind)) then; itemkind = kind
      else;                    itemkind = item.spinorbital_kind
      end
      select case (itemkind)
         case ("restricted");           .write(item.restricted,"restricted",order)
         case ("unrestricted");         .write(item.alpha,"alpha",order)
                                        .write(item.beta,"beta",order)
         case ("alpha");                .write(item.alpha,"alpha",order)
         case ("beta");                 .write(item.beta,"beta",order)
         case ("general");              .write(item.general,"general",order)
         case ("restricted_complex");   .write(item.restricted_complex,"restricted_complex",order)
         case ("unrestricted_complex"); .write(item.alpha_complex,"alpha_complex",order)
                                        .write(item.beta_complex,"beta_complex",order)
         case ("alpha_complex");        .write(item.alpha_complex,"alpha_complex",order)
         case ("beta_complex");         .write(item.beta_complex,"beta_complex",order)
         case ("general_complex");      .write(item.general_complex,"general_complex",order)
         case default;                  DIE("unknown kind, "//trim(itemkind))
      end
   end

!  **********************
!  Write gnuplot routines
!  **********************

   write_gnuplot(density,n_x,n_y,n_z)
   ! Write a "density" vector corresponding to a grid with dimensions "n_x",
   ! "n_y", "n_z" in gnuplot format (suitable for an splot).
      density :: REALVEC
      n_x,n_y,n_z :: INT
      n,x,y,z :: INT
   ENSURE(.is_a_text_file,"must open a ascii file")
      .open(for="writing")
      .textfile.set_dbl_style("e")
      .textfile.set_dbl_width(30)
      .textfile.set_dbl_precision(15)
      n = 1
      do z = 1,n_z
         if (n_z>1) then
            .textfile.put(" z = ")
            .textfile.put(z)
            .textfile.flush
         end
         do y = 1,n_y
         do x = 1,n_x
            .textfile.put(density(n))
            .textfile.flush
            n = n+1
         end
         .textfile.flush
         end
      end
      .close
   end

   write_gnuplot(j,n_x,n_y,n_z,norm,normalise)
   ! Write a current density vector "j" corresponding to a grid with dimensions
   ! "n_x", "n_y", "n_z" in gnuplot format (suitable for an splot).
   ! If "norm" is present and TRUE write the norm of the vector field
   ! If "normalise" is present and TRUE write the normalised of the vector field
       j :: REALMAT
      n_x,n_y,n_z :: INT
      norm,normalise :: BIN, optional
      n,x,y,z :: INT
      write_norm,write_normalised :: BIN
       v :: REALVEC(3)
   ENSURE(.is_a_text_file,"must open a ascii file")
      .open(for="writing")
      .textfile.set_dbl_style("e")
      .textfile.set_dbl_width(30)
      .textfile.set_dbl_precision(15)
      write_norm = FALSE; if (present(norm)) write_norm = norm
      write_normalised = FALSE; if (present(normalise)) write_normalised = normalise
      n = 1
      do z = 1,n_z
         if (n_z>1) then
            .textfile.put(" z = ")
            .textfile.put(z)
            .textfile.flush
         end
         do y = 1,n_y
         do x = 1,n_x
            v = j(n,:)
            if (write_norm) then
               .textfile.put( v.norm)
            else
               if (write_normalised) v.normalise
               .textfile.put(v(1))
               .textfile.put(v(2))
               .textfile.put(v(3))
            end
            .textfile.flush
            n = n+1
         end
         .textfile.flush
         end
      end
      .close
   end

end
