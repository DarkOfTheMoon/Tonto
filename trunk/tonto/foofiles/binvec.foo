!---------------------------------------------------------------------------
!
! BINVEC : Boolean vector operations ...
!
! $Id$
!
!---------------------------------------------------------------------------
module BINVEC

  use TYPES
  use SYSTEM

  implicit none         

# include "macros"
# include "binvec.int"
   
contains

  create(dim)
  ! Create a binvec
    PTR :: self
    INT, IN :: dim
    nullify(self)
    allocate(self(dim))
    ADD_MEM(dim*BIN_SIZE)
  end

  create(lb,ub)
  ! Create a binvec with lower bound "lb" and upper bound "ub"
    PTR :: self
    INT, IN :: lb,ub
    nullify(self)
    allocate(self(lb:ub))
    ADD_MEM((ub-lb+1)*BIN_SIZE)
  end

  create(bounds)
  ! Create a binvec with  given by the elements of "bounds"
    PTR :: self
    IVEC(2), IN :: bounds
    .create(bounds(1),bounds(2))
  end

  destroy
  ! Destroy a binvec
    PTR :: self
    if (.destroyed) return
    DELETE_MEM(size(self)*BIN_SIZE)
    deallocate(self)
  end

  created result(res)
  ! Returns true if self has been created
    PTR :: self
    BIN :: res
    res = associated(self)
  end

  destroyed result(res)
  ! Returns true if self has *not* been created
    PTR :: self
    BIN :: res
    res = NOT associated(self)
  end
   
  n_true result(res)
  ! Returns the number of true items in self.
    INT :: res,n
    res = 0
    do n = 1, size(self)
      if (self(n)) res = res + 1
    end
  end

  n_false result(res)
  ! Returns the number of false items in self.
    INT :: res
    res = size(self) - .n_true
  end

end
