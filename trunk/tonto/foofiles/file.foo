!---------------------------------------------------------------------------
!
!  FILE : Unformatted sequential advancing I/O, for fast mass data storage
!
!  NOTE: If ascii files are required consider using TEXTFILE.
!
!  A file is referred to only by a STR name. Unit numbers are not required.
!  Creation of a file object does not lead to creation of the actual file
!  on the computer, it merely creates the label for the file.
!  The actual file may already exist. If it does not exist, then an
!  FILE_open command will bring it into existence. Otherwise, FILE_open
!  will open the existing file. Closing a file does not delete the actual
!  file unless specifically requested.
!
!  When reading or writing an object to the file, it is assumed that
!  each object occupied one abstract "record". After a recor5d is written,
!  it may not be overwritten without destroying all data objects in the
!  following records. It is recommended that multiple data objects which
!  are logically related be stored in different files with appropriate names
!  for each file which indicate the relationship of the data objects
!  within them.
!
!  Strings are regarded as type STR for purposes of output to the file.
!
!  If the read or write statements give a segmentation fault for large
!  arrays or matrices, try increasing your stack size.
!
! Copyright (C) Dylan Jayatilaka, 1997
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!---------------------------------------------------------------------------

module FILE

   implicit none

contains

!  *****************************
!  File creation type operations
!  *****************************

   create(name) ::: leaky
   ! Create a file-label object. Does not open the file.  Sets the filename if
   ! present.
      self :: PTR
      name :: STR, optional
      unit :: UNIT_NUMBER
      nullify(self)
      allocate(self)
      ADD_MEMORY(SELF_TYPE_SIZE)
      .nullify_ptr_part
      .set_defaults
      if (present(name)) then
        .name = name
        unit.get(.unit)
      end
   end

   destroy ::: leaky
   ! Destroy a file-label object
      self :: PTR
      unit :: UNIT_NUMBER
      if (.destroyed) return
      if (.is_open AND .unit_used) .close
      unit.free(.unit)
      .destroy_ptr_part
      DELETE_MEMORY(SELF_TYPE_SIZE)
      deallocate(self)
   end

   nullify_ptr_part
   ! Nullify the pointer parts
      nullify( .real_buffer )
      nullify( .int_buffer )
      nullify( .cpx_buffer )
   end

   destroy_ptr_part ::: leaky
   ! Destroy pointer parts
      .real_buffer.destroy
      .int_buffer.destroy
      .cpx_buffer.destroy
   end

   create_copy(f) ::: leaky
   ! Create a copy a file "f"
      self :: PTR
       f :: FILE
      .create
      .copy(f)
   end

   copy(f) ::: leaky
   ! Copy a file "f"
      f :: FILE
      self = f
      .nullify_ptr_part
      if (f.int_buffer.created) &
         .int_buffer.create_copy(f.int_buffer)
      if (f.real_buffer.created) &
         .real_buffer.create_copy(f.real_buffer)
      if (f.cpx_buffer.created) &
         .cpx_buffer.create_copy(f.cpx_buffer)
   end

   set_defaults
   ! Set up defaults
      .record = 1
      .io_status = 0
      .file_status = "unknown"
      .action      = "readwrite"
      .buffered    = FALSE
      .real_buffer_pos = 1
      .int_buffer_pos = 1
      .cpx_buffer_pos = 1
   end

   open(for,buffered,type) ::: leaky
   ! Open the file. The file object must already be created.
   ! If present, "for" indicated whether the file is "read_write", "read-only"
   ! or "write-only"
   ! If present, "buffered" indicated whether the file is to be buffered, and
   ! the "type" of the buffer must also be specified as "real" or "int"
     for :: STR, optional
     buffered :: BIN,    optional
     type :: STR, optional
     type1 :: STR
     if (present(for)) then
        select case (for)
           case("readwrite ","read-write") ;              .action = "readwrite"
           case("read      ","reading   ","read-only ") ; .action = "read"
           case("write     ","writing   ","write-only") ; .action = "write"
           case default; UNKNOWN(for)
        end
     end
     .file_status = "new"
     if (.exists) .file_status = "old"
     if (IO_IS_ALLOWED) then
       open( unit   = .unit,       &
           file   = .name,         &
           status = .file_status,  &
           access = "sequential",  &
           form   = "unformatted", & ! <---------
           action = .action,       &
           iostat = .io_status)
     end
     ENSURE(.io_status==0,"error opening "//trim(.file_status)//" file "//.name)
     if (present(buffered)) .buffered = buffered
     if (.buffered) then
        ENSURE(present(type),"type of buffer must be specified")
        ENSURE(.action/="readwrite","buffer must be either read-only or write-only")
        type1 = type
        type1.to_lower_case
        select case (type1)
           case("real")
             .real_buffer.create(FILE_BUFFER_LENGTH)
             if (.action == "read") .get_real_buffer
           case("int")
             .int_buffer.create(FILE_BUFFER_LENGTH)
             if (.action == "read") .get_int_buffer
           case("cpx")
             .cpx_buffer.create(FILE_BUFFER_LENGTH)
             if (.action == "read") .get_cpx_buffer
           case default
             DIE("unknown buffer type, "//trim(type))
        end
     end
   end

   close ::: leaky
   ! Close the file
     WARN_IF(NOT .is_open,"file is not open")
     if (.action=="write") then
       if (.real_buffer_pos > 1) .flush_real_buffer
       if (.int_buffer_pos > 1) .flush_int_buffer
       if (.cpx_buffer_pos > 1) .flush_cpx_buffer
     end
     .destroy_ptr_part
     if (IO_IS_ALLOWED) then
       close(unit=.unit,iostat=.io_status)
     end
     ENSURE(.io_status==0,"error closing"//trim(.file_status)//" file "//.name)
   end

   close_and_delete ::: leaky
   ! Close the file and delete it from the file system
     WARN_IF(NOT .is_open,"file is not open")
     if (.action=="write") then
       if (.real_buffer_pos > 1) .flush_real_buffer
       if (.int_buffer_pos > 1) .flush_int_buffer
       if (.cpx_buffer_pos > 1) .flush_cpx_buffer
     end
     .destroy_ptr_part
     if (IO_IS_ALLOWED) then
      close(unit=.unit,status="delete",iostat=.io_status)
     end
     ENSURE(.io_status==0,"error closing and deleting"//trim(.file_status)//" file "//.name)
   end

   delete
   ! Delete the file from the file system
      if (NOT .is_open) .open
      .close_and_delete
   end

!  **************************
!  Data input type operations
!  **************************

   read(value) ::: template
   ! Read a "value" from the file.
     value :: VALUE_TYPE
     if (.buffered) then
       .read_buffered(value)
     else
       if (IO_IS_ALLOWED) then
         read(unit=.unit,iostat=.io_status) value
       end
       ENSURE(.io_status==0,"read error, error="// trim(.io_status.to_str))
       .record = .record + 1
     end
   end

   read(value) ::: get_from(FILE, VALUE_TYPE=>STR, .read_buffered(value)=>DIE("unavailable"))
   ! Read a "value" from the file.
   end

   read(value) ::: get_from(FILE, VALUE_TYPE=>BIN, .read_buffered(value)=>DIE("unavailable"))
   ! Read a "value" from the file.
   end

   read(value) ::: get_from(FILE, VALUE_TYPE=>INT)
   ! Read a "value" from the file.
   end

   read(value) ::: get_from(FILE, VALUE_TYPE=>REAL)
   ! Read a "value" from the file.
   end

   read(value) ::: get_from(FILE, VALUE_TYPE=>CPX)
   ! Read a "value" from the file.
   end

   read(values) ::: template
   ! Read a series of "values" from the file.
     values :: VALUES_TYPE
     if (.buffered) then
       .read_buffered(values)
     else
       if (IO_IS_ALLOWED) read(unit=.unit,iostat=.io_status) values
       ENSURE(.io_status==0,"read error, error="// trim(.io_status.to_str))
       PARALLEL_BROADCAST(values,0)
       .record = .record + 1
     end
   end

   read(values) ::: get_from(FILE, VALUES_TYPE=>VEC{STR}, .read_buffered(values)=>DIE("unavailable"))
   ! Read a series of "values" from the file.
   end

   read(values) ::: get_from(FILE, VALUES_TYPE=>VEC{BIN}, .read_buffered(values)=>DIE("unavailable"))
   ! Read a series of "values" from the file.
   end

   read(values) ::: get_from(FILE, VALUES_TYPE=>VEC{INT})
   ! Read a series of "values" from the file.
   end

   read(values) ::: get_from(FILE, VALUES_TYPE=>VEC{REAL})
   ! Read a series of "values" from the file.
   end

   read(values) ::: get_from(FILE, VALUES_TYPE=>VEC{CPX})
   ! Read a series of "values" from the file.
   end

   read(values) ::: get_from(FILE, VALUES_TYPE=>MAT{STR}, .read_buffered(values)=>DIE("unavailable"))
   ! Read a series of "values" from the file.
   end

   read(values) ::: get_from(FILE, VALUES_TYPE=>MAT{BIN}, .read_buffered(values)=>DIE("unavailable"))
   ! Read a series of "values" from the file.
   end

   read(values) ::: get_from(FILE, VALUES_TYPE=>MAT{INT})
   ! Read a series of "values" from the file.
   end

   read(values) ::: get_from(FILE, VALUES_TYPE=>MAT{REAL})
   ! Read a series of "values" from the file.
   end

   read(values) ::: get_from(FILE, VALUES_TYPE=>MAT{CPX})
   ! Read a series of "values" from the file.
   end

!   read(values) ::: get_from(FILE, VALUES_TYPE=>MAT3{STR}, .read_buffered(values)=>DIE("unavailable"))
!   ! Read a series of "values" from the file.
!   end

   read(values) ::: get_from(FILE, VALUES_TYPE=>MAT3{BIN}, .read_buffered(values)=>DIE("unavailable"))
   ! Read a series of "values" from the file.
   end

   read(values) ::: get_from(FILE, VALUES_TYPE=>MAT3{INT})
   ! Read a series of "values" from the file.
   end

   read(values) ::: get_from(FILE, VALUES_TYPE=>MAT3{REAL})
   ! Read a series of "values" from the file.
   end

   read(values) ::: get_from(FILE, VALUES_TYPE=>MAT3{CPX})
   ! Read a series of "values" from the file.
   end

!   read(values) ::: get_from(FILE, VALUES_TYPE=>MAT4{STR})
!   ! Read a series of "values" from the file.
!   end

!   read(values) ::: get_from(FILE, VALUES_TYPE=>MAT4{BIN})
!   ! Read a series of "values" from the file.
!   end

   read(values) ::: get_from(FILE, VALUES_TYPE=>MAT4{INT})
   ! Read a series of "values" from the file.
   end

   read(values) ::: get_from(FILE, VALUES_TYPE=>MAT4{REAL})
   ! Read a series of "values" from the file.
   end

   read(values) ::: get_from(FILE, VALUES_TYPE=>MAT4{CPX})
   ! Read a series of "values" from the file.
   end

!   read(values) ::: get_from(FILE, VALUES_TYPE=>MAT5{STR})
!   ! Read a series of "values" from the file.
!   end

!   read(values) ::: get_from(FILE, VALUES_TYPE=>MAT5{BIN})
!   ! Read a series of "values" from the file.
!   end

!   read(values) ::: get_from(FILE, VALUES_TYPE=>MAT5{INT})
!   ! Read a series of "values" from the file.
!   end

   read(values) ::: get_from(FILE, VALUES_TYPE=>MAT5{REAL})
   ! Read a series of "values" from the file.
   end

   read(values) ::: get_from(FILE, VALUES_TYPE=>MAT5{CPX})
   ! Read a series of "values" from the file.
   end

!  ********************
!  Data output routines
!  ********************

   write(value) ::: template
   ! Write the "value" to the file.
      value :: VALUE_TYPE, IN
      if (.buffered) then
         .write_buffered(value)
      else
        if (IO_IS_ALLOWED) then
          write(unit=.unit,iostat=.io_status) value
        end
        ENSURE(.io_status==0,"write error, error="// trim(.io_status.to_str))
        .record = .record + 1
      end
   end

   write(value) ::: get_from(FILE, VALUE_TYPE=>STR, .write_buffered(value)=>DIE("unavailable"))
   ! Write the "value" to the file.
   end

   write(value) ::: get_from(FILE, VALUE_TYPE=>BIN, .write_buffered(value)=>DIE("unavailable"))
   ! Write the "value" to the file.
   end

   write(value) ::: get_from(FILE, VALUE_TYPE=>INT)
   ! Write the "value" to the file.
   end

   write(value) ::: get_from(FILE, VALUE_TYPE=>REAL)
   ! Write the "value" to the file.
   end

   write(value) ::: get_from(FILE, VALUE_TYPE=>CPX)
   ! Write the "value" to the file.
   end

   write(values) ::: template
   ! Write the "values" to the file.
      values :: VALUES_TYPE, IN
      if (.buffered) then
         .write_buffered(values)
      else
        if (IO_IS_ALLOWED) then
          write(unit=.unit,iostat=.io_status) values
        end
        ENSURE(.io_status==0,"write error, error="// trim(.io_status.to_str))
        .record = .record + 1
      end
   end

   write(values) ::: get_from(FILE, VALUES_TYPE=>VEC{STR}, .write_buffered(values)=>DIE("unavailable"))
   ! Write the "values" to the file.
   end

   write(values) ::: get_from(FILE, VALUES_TYPE=>VEC{BIN}, .write_buffered(values)=>DIE("unavailable"))
   ! Write the "values" to the file.
   end

   write(values) ::: get_from(FILE, VALUES_TYPE=>VEC{INT})
   ! Write the "values" to the file.
   end

   write(values) ::: get_from(FILE, VALUES_TYPE=>VEC{REAL})
   ! Write the "values" to the file.
   end

   write(values) ::: get_from(FILE, VALUES_TYPE=>VEC{CPX})
   ! Write the "values" to the file.
   end

   write(values) ::: get_from(FILE, VALUES_TYPE=>MAT{STR}, .write_buffered(values)=>DIE("unavailable"))
   ! Write the "values" to the file.
   end

   write(values) ::: get_from(FILE, VALUES_TYPE=>MAT{BIN}, .write_buffered(values)=>DIE("unavailable"))
   ! Write the "values" to the file.
   end

   write(values) ::: get_from(FILE, VALUES_TYPE=>MAT{INT})
   ! Write the "values" to the file.
   end

   write(values) ::: get_from(FILE, VALUES_TYPE=>MAT{REAL})
   ! Write the "values" to the file.
   end

   write(values) ::: get_from(FILE, VALUES_TYPE=>MAT{CPX})
   ! Write the "values" to the file.
   end

!   write(values) ::: get_from(FILE, VALUES_TYPE=>MAT3{STR}, .write_buffered(values)=>DIE("unavailable"))
!   ! Write the "values" to the file.
!   end

   write(values) ::: get_from(FILE, VALUES_TYPE=>MAT3{BIN}, .write_buffered(values)=>DIE("unavailable"))
   ! Write the "values" to the file.
   end

   write(values) ::: get_from(FILE, VALUES_TYPE=>MAT3{INT})
   ! Write the "values" to the file.
   end

   write(values) ::: get_from(FILE, VALUES_TYPE=>MAT3{REAL})
   ! Write the "values" to the file.
   end

   write(values) ::: get_from(FILE, VALUES_TYPE=>MAT3{CPX})
   ! Write the "values" to the file.
   end

!   write(values) ::: get_from(FILE, VALUES_TYPE=>MAT4{STR})
!   ! Write the "values" to the file.
!   end

!   write(values) ::: get_from(FILE, VALUES_TYPE=>MAT4{BIN})
!   ! Write the "values" to the file.
!   end

   write(values) ::: get_from(FILE, VALUES_TYPE=>MAT4{INT})
   ! Write the "values" to the file.
   end

   write(values) ::: get_from(FILE, VALUES_TYPE=>MAT4{REAL})
   ! Write the "values" to the file.
   end

   write(values) ::: get_from(FILE, VALUES_TYPE=>MAT4{CPX})
   ! Write the "values" to the file.
   end

!   write(values) ::: get_from(FILE, VALUES_TYPE=>MAT5{STR})
!   ! Write the "values" to the file.
!   end

!   write(values) ::: get_from(FILE, VALUES_TYPE=>MAT5{BIN})
!   ! Write the "values" to the file.
!   end

!   write(values) ::: get_from(FILE, VALUES_TYPE=>MAT5{INT})
!   ! Write the "values" to the file.
!   end

   write(values) ::: get_from(FILE, VALUES_TYPE=>MAT5{REAL})
   ! Write the "values" to the file.
   end

   write(values) ::: get_from(FILE, VALUES_TYPE=>MAT5{CPX})
   ! Write the "values" to the file.
   end

! ****************************************************************
! Buffered routines: currenly only available for INT, REAL and CPX
! ****************************************************************

   read_buffered(value) ::: template
   ! Reads the "value" from the buffer, and reads buffer from disk when empty.
     value :: VALUE, OUT
     ENSURE(BBUF.created,"buffer not created")
     if (POS>FILE_BUFFER_LENGTH) GET
     value = BBUF(POS)
     POS = POS + 1
   end

   read_buffered(value) ::: get_from(FILE, VALUE=>INT, BBUF=>.int_buffer, POS=>.int_buffer_pos, GET=>.get_int_buffer)
   ! Reads the "value" from the buffer, and reads buffer from disk when empty.
   end

   read_buffered(value) ::: get_from(FILE, VALUE=>REAL, BBUF=>.real_buffer, POS=>.real_buffer_pos, GET=>.get_real_buffer)
   ! Reads the "value" from the buffer, and reads buffer from disk when empty.
   end

   read_buffered(value) ::: get_from(FILE, VALUE=>CPX, BBUF=>.cpx_buffer, POS=>.cpx_buffer_pos, GET=>.get_cpx_buffer)
   ! Reads the "value" from the buffer, and reads buffer from disk when empty.
   end

   write_buffered(value) ::: template
   ! Writes the "value" to the buffer, and writes buffer to disk when full.
     value :: VALUE, IN
     ENSURE(BBUF.created,"buffer not created")
     BBUF(POS) = value
     POS = POS + 1
     if (POS>FILE_BUFFER_LENGTH) FLUSH
   end

   write_buffered(value) ::: get_from(FILE, VALUE=>INT, BBUF=>.int_buffer, POS=>.int_buffer_pos, FLUSH=>.flush_int_buffer)
   ! Writes the "value" to the buffer, and writes buffer to disk when full.
   end

   write_buffered(value) ::: get_from(FILE, VALUE=>REAL, BBUF=>.real_buffer, POS=>.real_buffer_pos, FLUSH=>.flush_real_buffer)
   ! Writes the "value" to the buffer, and writes buffer to disk when full.
   end

   write_buffered(value) ::: get_from(FILE, VALUE=>CPX, BBUF=>.cpx_buffer, POS=>.cpx_buffer_pos, FLUSH=>.flush_cpx_buffer)
   ! Writes the "value" to the buffer, and writes buffer to disk when full.
   end


   read_buffered(values) ::: template
   ! Reads the "values" from the buffer, and reads buffer from disk when empty.
     values :: VALUES, OUT
     ENSURE(BBUF.created,"buffer not created")
     length,pos,buffer_top,values_top,get_length :: INT
     length = size(values)
     pos = 1
     do
       if (POS>FILE_BUFFER_LENGTH) GET
       get_length = min(FILE_BUFFER_LENGTH - POS + 1,length - pos + 1)
       buffer_top = POS + get_length - 1
       values_top = pos + get_length - 1
       values(pos:values_top) = BBUF(POS :buffer_top)
       POS = buffer_top + 1
       pos = values_top + 1
       if (pos>length) exit
     end
   end

   read_buffered(values) ::: get_from(FILE, VALUES=>VEC{INT}, BBUF=>.int_buffer, POS=>.int_buffer_pos, GET=>.get_int_buffer)
   ! Reads the "values" from the buffer, and reads buffer from disk when empty.
   end

   read_buffered(values) ::: get_from(FILE, VALUES=>VEC{REAL}, BBUF=>.real_buffer, POS=>.real_buffer_pos, GET=>.get_real_buffer)
   ! Reads the "values" from the buffer, and reads buffer from disk when empty.
   end

   read_buffered(values) ::: get_from(FILE, VALUES=>VEC{CPX}, BBUF=>.cpx_buffer, POS=>.cpx_buffer_pos, GET=>.get_cpx_buffer)
   ! Reads the "values" from the buffer, and reads buffer from disk when empty.
   end


   write_buffered(values) ::: template
   ! Writes the "values" to the buffer, and writes buffer to disk when full.
     values :: VALUES, IN
     ENSURE(BBUF.created,"buffer not created")
     length,pos,buffer_top,values_top,put_length :: INT
     length = size(values)
     pos = 1
     do
       put_length = min(FILE_BUFFER_LENGTH - POS + 1,length - pos + 1)
       buffer_top = POS + put_length - 1
       values_top = pos + put_length - 1
       BBUF(POS: buffer_top) = values(pos:values_top)
       POS = buffer_top + 1
       pos = values_top + 1
       if (POS>FILE_BUFFER_LENGTH) FLUSH
       if (pos>length) exit
     end
   end

   write_buffered(values) ::: get_from(FILE, VALUES=>VEC{INT}, BBUF=>.int_buffer, POS=>.int_buffer_pos, FLUSH=>.flush_int_buffer)
   ! Writes the "values" to the buffer, and writes buffer to disk when full.
   end

   write_buffered(values) ::: get_from(FILE, VALUES=>VEC{REAL}, BBUF=>.real_buffer, POS=>.real_buffer_pos, FLUSH=>.flush_real_buffer)
   ! Writes the "values" to the buffer, and writes buffer to disk when full.
   end

   write_buffered(values) ::: get_from(FILE, VALUES=>VEC{CPX}, BBUF=>.cpx_buffer, POS=>.cpx_buffer_pos, FLUSH=>.flush_cpx_buffer)
   ! Writes the "values" to the buffer, and writes buffer to disk when full.
   end


   write_buffered(values) ::: template
   ! Writes the multidimensional "values" to the buffer, writes buffer to disk when full.
     values :: VALUES, IN
     .write_buffered(reshape(values,[size(values)]))
   end

   write_buffered(values) ::: get_from(FILE, VALUES=>MAT{INT})
   ! Writes the multidimensional "values" to the buffer, writes buffer to disk when full.
   end

   write_buffered(values) ::: get_from(FILE, VALUES=>MAT{REAL})
   ! Writes the multidimensional "values" to the buffer, writes buffer to disk when full.
   end

   write_buffered(values) ::: get_from(FILE, VALUES=>MAT{CPX})
   ! Writes the multidimensional "values" to the buffer, writes buffer to disk when full.
   end

   write_buffered(values) ::: get_from(FILE, VALUES=>MAT3{INT})
   ! Writes the multidimensional "values" to the buffer, writes buffer to disk when full.
   end

   write_buffered(values) ::: get_from(FILE, VALUES=>MAT3{REAL})
   ! Writes the multidimensional "values" to the buffer, writes buffer to disk when full.
   end

   write_buffered(values) ::: get_from(FILE, VALUES=>MAT3{CPX})
   ! Writes the multidimensional "values" to the buffer, writes buffer to disk when full.
   end

   write_buffered(values) ::: get_from(FILE, VALUES=>MAT4{INT})
   ! Writes the multidimensional "values" to the buffer, writes buffer to disk when full.
   end

   write_buffered(values) ::: get_from(FILE, VALUES=>MAT4{REAL})
   ! Writes the multidimensional "values" to the buffer, writes buffer to disk when full.
   end

   write_buffered(values) ::: get_from(FILE, VALUES=>MAT4{CPX})
   ! Writes the multidimensional "values" to the buffer, writes buffer to disk when full.
   end

!   write_buffered(values) ::: get_from(FILE, VALUES=>MAT5{INT})
!   ! Writes the multidimensional "values" to the buffer, writes buffer to disk when full.
!   end

   write_buffered(values) ::: get_from(FILE, VALUES=>MAT5{REAL})
   ! Writes the multidimensional "values" to the buffer, writes buffer to disk when full.
   end

   write_buffered(values) ::: get_from(FILE, VALUES=>MAT5{CPX})
   ! Writes the multidimensional "values" to the buffer, writes buffer to disk when full.
   end


   read_buffered(values) ::: template
   ! Reads the multidimensional "values" from the buffer.
     values :: ARR{VALUE}, OUT
     tmp :: VEC{VALUE}*
     tmp.create(values.dim)
     .read_buffered(tmp)
     values = reshape(tmp,shape(values))
     tmp.destroy
   end

   read_buffered(values) ::: get_from(FILE, ARR{VALUE}=>MAT{INT})
   ! Reads the multidimensional "values" from the buffer.
   end

   read_buffered(values) ::: get_from(FILE, ARR{VALUE}=>MAT{REAL})
   ! Reads the multidimensional "values" from the buffer.
   end

   read_buffered(values) ::: get_from(FILE, ARR{VALUE}=>MAT{CPX})
   ! Reads the multidimensional "values" from the buffer.
   end

   read_buffered(values) ::: get_from(FILE, ARR{VALUE}=>MAT3{INT})
   ! Reads the multidimensional "values" from the buffer.
   end

   read_buffered(values) ::: get_from(FILE, ARR{VALUE}=>MAT3{REAL})
   ! Reads the multidimensional "values" from the buffer.
   end

   read_buffered(values) ::: get_from(FILE, ARR{VALUE}=>MAT3{CPX})
   ! Reads the multidimensional "values" from the buffer.
   end

   read_buffered(values) ::: get_from(FILE, ARR{VALUE}=>MAT4{INT})
   ! Reads the multidimensional "values" from the buffer.
   end

   read_buffered(values) ::: get_from(FILE, ARR{VALUE}=>MAT4{REAL})
   ! Reads the multidimensional "values" from the buffer.
   end

   read_buffered(values) ::: get_from(FILE, ARR{VALUE}=>MAT4{CPX})
   ! Reads the multidimensional "values" from the buffer.
   end

!   read_buffered(values) ::: get_from(FILE, ARR{VALUE}=>MAT5{INT})
!   ! Reads the multidimensional "values" from the buffer.
!   end

   read_buffered(values) ::: get_from(FILE, ARR{VALUE}=>MAT5{REAL})
   ! Reads the multidimensional "values" from the buffer.
   end

   read_buffered(values) ::: get_from(FILE, ARR{VALUE}=>MAT5{CPX})
   ! Reads the multidimensional "values" from the buffer.
   end


   flush_real_buffer
   ! Writes the real_buffer to disk, and positions the pointer at the start of
   ! the buffer.
     ENSURE(.real_buffer.created, "buffer not created")
     if (IO_IS_ALLOWED)  write(unit=.unit,iostat=.io_status) .real_buffer
     ENSURE(.io_status==0,"write error, error="// trim(.io_status.to_str))
     .record = .record + 1
     .real_buffer_pos = 1
   end

   flush_int_buffer
   ! Writes the int_buffer to disk, and positions the pointer at the start of
   ! the buffer.
     ENSURE(.int_buffer.created, "buffer not created")
     if (IO_IS_ALLOWED)  write(unit=.unit,iostat=.io_status) .int_buffer
     ENSURE(.io_status==0,"write error, error="// trim(.io_status.to_str))
     .record = .record + 1
     .int_buffer_pos = 1
   end

   flush_cpx_buffer
   ! Writes the cpx_buffer to disk, and positions the pointer at the start of
   ! the buffer.
     ENSURE(.cpx_buffer.created, "buffer not created")
     if (IO_IS_ALLOWED) write(unit=.unit,iostat=.io_status) .cpx_buffer
     ENSURE(.io_status==0,"write error, error="// trim(.io_status.to_str))
     .record = .record + 1
     .cpx_buffer_pos = 1
   end

   get_real_buffer
   ! Reads the real_buffer from disk, and positions the pointer at the start of
   ! the buffer.
     ENSURE(.real_buffer.created, "buffer not created")
     if (IO_IS_ALLOWED)  read(unit=.unit,iostat=.io_status) .real_buffer
     ENSURE(.io_status==0,"read error, error="// trim(.io_status.to_str))
     PARALLEL_BROADCAST(.real_buffer,0)
     .record = .record + 1
     .real_buffer_pos = 1
   end

   get_int_buffer
   ! Reads the int_buffer from disk, and positions the pointer at the start of
   ! the buffer.
     ENSURE(.int_buffer.created, "buffer not created")
     if (IO_IS_ALLOWED)  read(unit=.unit,iostat=.io_status) .int_buffer
     ENSURE(.io_status==0,"read error, error="// trim(.io_status.to_str))
     PARALLEL_BROADCAST(.int_buffer,0)
     .record = .record + 1
     .int_buffer_pos = 1
   end

   get_cpx_buffer
   ! Reads the cpx_buffer from disk, and positions the pointer at the start of
   ! the buffer.
     ENSURE(.cpx_buffer.created, "buffer not created")
     if (IO_IS_ALLOWED) read(unit=.unit,iostat=.io_status) .cpx_buffer
     ENSURE(.io_status==0,"read error, error="// trim(.io_status.to_str))
     PARALLEL_BROADCAST(.cpx_buffer,0)
     .record = .record + 1
     .cpx_buffer_pos = 1
   end

!  **********************************
!  File repositioning type operations
!  **********************************

   rewind
   ! Rewind the file
     if (IO_IS_ALLOWED) then
        rewind(unit=.unit,iostat=.io_status)
     end
     ENSURE(.io_status==0,"rewind error, error="// trim(.io_status.to_str))
     .record = 1
   end

   backspace
   ! Backspace the file one record of the file. Backspacing before record 1 has
   ! no effect.
     if (IO_IS_ALLOWED) then
        backspace(unit=.unit,iostat=.io_status)
     end
     ENSURE(.io_status==0,"backspace error, error="// trim(.io_status.to_str))
     .record = max(1,.record-1)
   end

   skip
   ! Skip over the next record of the file. An error is generated if at the end
   ! of the file
     if (IO_IS_ALLOWED)  read(unit=.unit,iostat=.io_status)
     ENSURE(.io_status==0,"read error, error="// trim(.io_status.to_str))
     .record = .record + 1
   end

   move_to_end
   ! Move to the end of the file, say for adding more data
      do
        if (IO_IS_ALLOWED)  read(unit=.unit,iostat=.io_status)
        PARALLEL_BROADCAST(.io_status,0)
        if (.io_status/=0) exit
        .record = .record + 1
      end
   end

   move_to_position(pos)
   ! Move to a particular record position in the file
      pos :: INT
      .move_to_record(pos)
   end

   move_to_record(rec)
   ! Move to a particular record position in the file
      rec :: INT
   ENSURE(rec>=1,"can't move to non-positive record")
      if (rec<.position) then
         do
            .backspace
            if (.position==rec) exit
         end
      else if (rec>.position) then
         do
            .skip
            if (.position==rec) exit
         end
      end
   end

!  ***************
!  Inquiry methods
!  ***************

   exists(name) result(res)
   ! Returns true if the file exists on the file system.  If present, "name" is
   ! used, otherwise .name is used.
      res :: BIN
      name :: STR, IN, optional
      if (present(name)) then
        if (IO_IS_ALLOWED) inquire(file=name,exist=res)
      else
        if (IO_IS_ALLOWED) inquire(file=.name,exist=res)
      end
      PARALLEL_BROADCAST(res,0)
   end

   is_open result(res)
   ! Returns true if the file has been opened
      res :: BIN
      ! inquire(unit=.unit,opened=res)
      if (IO_IS_ALLOWED)  inquire(file=.name,opened=res)
      PARALLEL_BROADCAST(res,0)
   end

   unit_used result(res)
   ! Returns true if the file unit is in use
      res :: BIN
      if (IO_IS_ALLOWED)  inquire(unit=.unit,opened=res)
      PARALLEL_BROADCAST(res,0)
   end

   created result(res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has been created
      self :: PTR
      res :: BIN
   end

   destroyed result(res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has *not* been created
      self :: PTR
      res :: BIN
   end

   position result(res)
   ! Return record position of the file
      res :: INT
      res = .record
   end

   is_for_reading result(res)
   ! Return whether the file is opened for reading.
     res :: BIN
     reading :: STR(5)
     if (IO_IS_ALLOWED)  inquire(unit=.unit,read=reading)
     PARALLEL_BROADCAST(reading,0)
     if (reading=="YES") then; res = TRUE
     else;                     res = FALSE
     end
   end

!   is_real_buffered result(res)
!   ! Returns true if the file is using real buffering
!      res :: BIN
!      res = associated(.real_buffer)
!   end

!   is_int_buffered result(res)
!   ! Returns true if the file is using INT buffering
!      res :: BIN
!      res = associated(.int_buffer)
!   end

end
