!---------------------------------------------------------------------------
!
! MAT4{INTRINSIC}: 
!
! This is a virtual module, for 4 dimensional matrices of INTRINSIC type.
!
! Copyright (C) Dylan Jayatilaka, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!---------------------------------------------------------------------------

virtual module MAT4{INTRINSIC}

   implicit none

contains

   create(dim1,dim2,dim3,dim4) ::: leaky
   ! Create the object with the desired bounds
      self :: PTR
      dim1,dim2,dim3,dim4 :: INT, IN
      status :: INT
      nullify(self)
      allocate(self(dim1,dim2,dim3,dim4),STAT=status)
      DIE_IF(status/=0,"error in allocating memory")
      ADD_MEMORY(dim1*dim2*dim3*dim4*ELEMENT_TYPE_SIZE)
   end

   create(bounds) ::: leaky
   ! Create a 4-d array with all upper "bounds" specified
     self :: PTR
     bounds :: VEC{INT}(4), IN
     .create(bounds(1),bounds(2),bounds(3),bounds(4))
   end

   create(lb1,ub1,lb2,ub2,lb3,ub3,lb4,ub4) ::: leaky
   ! Create the object with the desired bounds
      self :: PTR
      lb1,lb2,lb3,ub1,ub2,ub3,lb4,ub4 :: INT, IN
      status :: INT
      nullify(self)
      allocate(self(lb1:ub1,lb2:ub2,lb3:ub3,lb4:ub4),STAT=status)
      DIE_IF(status/=0,"error in allocating memory")
      ADD_MEMORY((ub1-lb1+1)*(ub2-lb2+1)*(ub3-lb3+1)*(ub4-lb4+1)*ELEMENT_TYPE_SIZE)
   end

   create(bounds1,bounds2,bounds3,bounds4) ::: leaky
   ! Create the object with the desired bounds
      self :: PTR
      bounds1,bounds2,bounds3,bounds4 :: VEC{INT}(2)
      .create(bounds1(1),bounds1(2), &
              bounds2(1),bounds2(2), &
              bounds3(1),bounds3(2), &
              bounds4(1),bounds4(2))
   end

   create(bounds) ::: leaky
   ! Create the object with the desired bounds
      self :: PTR
      bounds :: MAT{INT}(4,2)
      .create(bounds(1,1),bounds(1,2), &
              bounds(2,1),bounds(2,2), &
              bounds(3,1),bounds(3,2), &
              bounds(4,1),bounds(4,2))
   end

   create_copy(c) ::: leaky
   ! Create a copy of matrix "c"
      self :: PTR
      c :: MAT4{INTRINSIC}
      .create(lbound(c,1),ubound(c,1), &
              lbound(c,2),ubound(c,2), &
              lbound(c,3),ubound(c,3), &
              lbound(c,4),ubound(c,4)  )
      self = c
   end

   destroy ::: leaky
   ! Destroy the object
      self :: PTR
      if (.destroyed) return
      DELETE_MEMORY(size(self)*ELEMENT_TYPE_SIZE)
      deallocate(self)
   end

   created result (res) ::: inlined_by_foo
   ! Returns true if self has been created
      self :: PTR
      res :: BIN
      result = associated(self)
   end

   destroyed result (res) ::: inlined_by_foo
   ! Returns true if self has *not* been created
      self :: PTR
      res :: BIN
      result = NOT associated(self)
   end

   size result (res) ::: inlined_by_foo
   ! Return the size of the array
      res :: INT
      res = size(self)
   end

   dim1 result (res) ::: inlined_by_foo
   ! Return the size of the 1st dimension
      res :: INT
      res = size(self,1)
   end

   dim2 result (res) ::: inlined_by_foo
   ! Return the size of the 2nd dimension
      res :: INT
      res = size(self,2)
   end

   dim3 result (res) ::: inlined_by_foo
   ! Return the size of the 3rd dimension
      res :: INT
      res = size(self,3)
   end

   dim4 result (res) ::: inlined_by_foo
   ! Return the size of the 4th dimension
      res :: INT
      res = size(self,4)
   end

   shape result (res)
   ! Return the shape of the matrix
      res :: VEC{INT}(4)
      res = [size(self,1),size(self,2),size(self,3),size(self,4)]
   end

   is_same_shape_as(b) result (res) 
   ! Returns TRUE if the matrix "b" has the same shape as self
      self :: IN
      b :: MAT4{INTRINSIC}, IN
      res :: BIN
      res = .dim1==b.dim1 AND .dim2==b.dim2 AND .dim3==b.dim3 AND .dim4==b.dim4
   end

   set_to(b)
   ! Set "self" to "b"
      b :: MAT4{INTRINSIC}
   ENSURE(.is_same_shape_as(b),"different shapes")
      self = b
   end

   set_to(b)
   ! Set "self" to vector "b" in standard order
      b :: VEC{INTRINSIC}
   ENSURE(size(self)==size(b),"different sizes")
      self = reshape(b,[.dim1,.dim2,.dim3,.dim4])
   end

end
