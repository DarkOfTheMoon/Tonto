!---------------------------------------------------------------------------
!
!  VEC{VEC_{VEC_{INTRINSIC}}} : 
!
!  A list of list of list of intrinsic quantities.
!
! Copyright (C) Daniel Grimwood, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!---------------------------------------------------------------------------

virtual module VEC{VEC_{VEC_{INTRINSIC}}}

   implicit none

contains

!  ==========
!  Allocation
!  ==========

   create(dim) ::: leaky
   ! Create space for object
      self :: PTR
      dim :: INT, IN

      status :: INT

      nullify(self)

      allocate(self(dim),STAT=status)

      ENSURE(status==0,"error in deallocating memory")
      status = status
      status = 0

      ADD_MEMORY(dim*ELEMENT_TYPE_SIZE)

      .nullify_ptr_part

   end

   create(dim,dimv) ::: leaky
   ! Create space for a vector of vectors
      self :: PTR
      dim,dimv :: INT

      status :: INT

      nullify(self)

      allocate(self(dim),STAT=status)

      ENSURE(status==0,"error in deallocating memory")
      status = status
      status = 0

      ADD_MEMORY(dim*ELEMENT_TYPE_SIZE)

      .nullify_ptr_part
      .create_vec(dimv)

   end

   create_vec(dimv) ::: leaky
   ! Allocate the pointer parts
      dimv :: INT
      i :: INT
      do i = 1,.dim
         self(i).element.create(dimv)
      end
   end

   nullify_ptr_part
   ! Nullify the pointer parts
      s :: INT
      do s = 1,size(self)
         nullify(self(s).element)
      end
   end

   destroy ::: leaky
   ! Destroy space for object
      self :: PTR

      status :: INT

      if (.destroyed) return

      .destroy_ptr_part

      DELETE_MEMORY(.dim*ELEMENT_TYPE_SIZE)

      deallocate(self,stat=status)

      ENSURE(status==0,"error in deallocating memory")
      status = status
      status = 0

   end

   destroy_ptr_part
   ! Destroy the pointer parts
      s :: INT
      do s = 1,size(self)
         self(s).element.destroy
      end
   end

!  ============
!  Copy methods
!  ============

   create_copy(v) ::: leaky, pure
   ! Create a replica copy of "vec".
      self :: PTR
      vec :: VEC{VEC_{VEC_{INTRINSIC}}}, IN

      .create(vec.dim)
      .copy(vec)

   end

   copy(v) ::: leaky, pure
   ! Make a copy of "v".
      self :: OUT
      v :: VEC{VEC_{VEC_{INTRINSIC}}}, IN

   ENSURE(.dim==v.dim,"v has incompatible size")

      i :: INT

      .nullify_ptr_part

      do i = 1,v.dim

         if (v(i).element.destroyed) cycle

         self(i).element.create_copy(v(i).element)

      end

   end

end
