!---------------------------------------------------------------------------
!
!  VEC{VEC_{VEC_{INTRINSIC}}} : 
!
!  A list of list of list of intrinsic quantities.
!
! Copyright (C) Daniel Grimwood, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!---------------------------------------------------------------------------

virtual module VEC{VEC_{VEC_{INTRINSIC}}}

   implicit none

contains

   create(dim) ::: leaky
   ! Create space for object
      self :: PTR
      dim :: INT, IN
      status :: INT
      nullify(self)
      allocate(self(dim),STAT=status)
      DIE_IF(status/=0,"error in allocating memory")
      ADD_MEMORY(dim*ELEMENT_TYPE_SIZE)
      .nullify_ptr_part
   end

   nullify_ptr_part
   ! Nullify the pointer parts
      s :: INT
      do s = 1,size(self)
         nullify(self(s).element)
      end
   end

   destroy ::: leaky
   ! Destroy space for object
      self :: PTR
      if (.destroyed) return
      .destroy_ptr_part
      DELETE_MEMORY(.dim*ELEMENT_TYPE_SIZE)
      deallocate(self)
   end

   destroy_ptr_part
   ! Destroy the pointer parts
      s :: INT
      do s = 1,size(self)
         self(s).element.destroy
      end
   end

   create_copy(vec) ::: leaky
   ! Create a replica copy of "vec".
      vec :: VEC{VEC_{VEC_{INTRINSIC}}}, IN
      self :: PTR
      .create(vec.dim)
      .copy(vec)
   end

   copy(v) ::: leaky
   ! Make a copy of "v".
      v :: VEC{VEC_{VEC_{INTRINSIC}}}
   ENSURE(.dim==v.dim,"v has incompatible size")
      i :: INT
      .nullify_ptr_part
      do i = 1,v.dim
         if (v(i).element.destroyed) cycle
         self(i).element.create_copy(v(i).element)
      end
   end

end
