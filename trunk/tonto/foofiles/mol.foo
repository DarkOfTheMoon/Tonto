! $Id$
!-------------------------------------------------------------------------------
!
! MOL: An object representation of a molecule.
!
!-------------------------------------------------------------------------------
module MOL

   use TYPES
   use ERROR
   use MM
   use STR
   use INPUT
   use OUTPUT
   use TIME
   use XTAL
   use MOL_COMMON
   use MOL_INTEGRALS
   use MOL_XTAL
   use MOL_IO
   use MOL_SCF
   use MOL_PLOT

   implicit none         

#  include "macros"
#  include "mol.int"

contains

   main
   ! Main molecule run-loop; creates a file "mol.in" from which the molecule
   ! object can "read(in)" information.
      PTR :: self
      .create
      .read
      .destroy
   end

  read [leaky]
  ! Read in the molecule data from input file "in"
     STR :: word
     TIME :: timer
     .in.create("mol.in");   .in.open           ! Set up the IO files and timers
     .out.create("mol.out"); .out.open
     std_output => .out
     std_error.set_put_file(.out)
     timer.start
     std_time.start
     .out.text( std_time.start_time )
     .in.read(word); word.to_lower_case         ! First keyword must be "name"
     ENSURE(word=="name","first keywrord must be name")
     .in.read( .name)
     read_loop : do                             ! Loop over other keywords
        .in.read(word); word.to_lower_case
        .out.flush
        .out.text("keyword found --> " // word.trim)
        select case (word)
           case("end");                           exit read_loop
           case("multiplicity");                  .read_multiplicity
           case("charge");                        .in.read( .charge)
           case("b_field");                       .in.read(.B_field)
           case("e_field");                       .in.read(.E_field)
           case("atoms");                         .read_atoms
           case("basis_sets");                    .read_basis_sets
           case("basis_labels");                  .read_basis_labels
           case("thermal_tensors");               .read_thermal_tensors
           case("thermal_smearing_model");        .read_thermal_smearing_model
           case("optimise_thermal_parameters");   .in.read( .optimise_thermals )
           case("xtal");                          .read_xtal
           case("pointgroup");                    .read_pointgroup
           case("plotgrid");                      .read_dftgrid
           case("plot");                          .plot
           case("dftgrid");                       .read_dftgrid
           case("roby_population_analysis");      .roby_population_analysis
           case("dylans_population_analysis");    .dylans_population_analysis
           case("scfdata");                       .read_scfdata
           case("scf");                           .scf
           case("delete_integrals");              .delete_integrals
           case("make_atom_guess");               .make_atom_guess
           case("make_atom_density");             .make_atom_density
           case("make_fock_guess");               .make_fock_guess
           case("make_scf_density_matrix");       .make_scf_density_matrix
           case("make_ao_density_matrix");        .make_ao_density_matrix
           case("make_ao_sz_density_matrix");     .make_ao_sz_density_matrix
           case("assign_natural_orbitals");       .assign_natural_orbitals
           case("make_natural_orbitals");         .make_natural_orbitals
           case("make_structure_factors");        .make_structure_factors
           case("make_sz_structure_factors");     .make_sz_structure_factors
           case("make_pnd_scalar_magnetic_sf");   .make_PND_scalar_magnetic_sf
           case("make_mulliken_matrix");          .make_mulliken_matrix
           case("make_irrotational_jp_grid");     .make_irrotational_jp_grid
           case("make_vib_averaged_rho_grid");    .make_vib_averaged_rho_grid
           case("make_fermi_mobility_grid");      .make_fermi_mobility_grid
           case("read_archive");                  .read_archive
           case("read_ascii_archive");            .read_ascii_archive
           case("convert_cadpac_ft_ints");        .convert_cadpac_ft_ints
           case("read_g94_checkpoint_file");      .read_g94_checkpoint_file
           case("write_wfn_file");                .write_wfn_file
           case("read_partition_data");           .read_partition_data
           case("write_ascii_archive");           .write_ascii_archive
           case("put");                           .put
           case("put_grid");                      .put_grid
           case("put_pointgroup");                .put_pointgroup
           case("put_xtal");                      .put_xtal
           case("put_molecular_orbitals");        .put_molecular_orbitals
           case("put_mos_and_energies");          .put_mos_and_energies
           case("put_density_matrix");            .put_density_matrix
           case("put_fock_matrix");               .put_fock_matrix
           case("put_pnd_sf");                    .put_PND_sf
           case("put_scf_energy_in_mo_pairs");    .put_scf_energy_in_mo_pairs
           case("start_timer");                   timer.start
           case("put_time_taken");                .out.text( timer.time_taken )
           case("put_current_time");              .out.text( timer.current_time )
           case("put_total_time");                .out.text( std_time.elapsed_time )
           case("scale_fc");                      .xtal.scale_Fc
           case("put_f_calc");                    .xtal.put_F_calc(.out)
           case("put_cluster_operations");        .put_cluster_operations
           case("put_cluster_input");             .put_cluster_input
           case("test");                          .integrate_density_numerically
           case default;  DIE("unknown directive, " // word.trim)
        end
     end do read_loop
     .out.flush
     .out.text( std_time.time_taken("job "//'"'// .name.trim //'"') )
     std_mm.report(.out)
  end

end 
