#
# This is the platform-specific compiler option file
# --------------------------------------------------

MPIEXEC = mpiexec -n 4
 
# This file is included into the Makefile, so if you edit this file
# Tonto will rebuild from the start.

#
# Compiler switches
# ------------------

FOPTNS   = $(FFAST)
# Choose the overall type of executable wanted
# . Choose $(FFAST), $(FDEBUG) or $(FPROF). See below for descriptions. 
# . Can also have multiple choices e.g $(FAST) $(FPROF)
# . If you use only $(FFAST) or $(FDEBUG) the executables will be
#   stored in the fast/ or debug/ subdirectories, allowing builds of
#   these two types to be simultaneously resident. Otherwise builds go
#   in the custom/ folder.

FFLAGS   = -I$(srcdir) -I$(moddir) -J$(moddir) -I/usr/include/mpich2 -Wall
# Set other globally applicable compiler options.
# . -J=$(moddir) : tell where module files are located
# . -Wall        : turn on all warnings
# . -static      : no shared libraries

FFAST = -Ofast -fno-sign-zero
# Compiler options to produce fast code. 

FDEBUG   = -g 
# Compiler options to produce debugging code.
# On linux type:
# gdbtui -d tonto/GNU-gfortran-on-LINUX/f95files tonto/GNU-gfortran-on-LINUX/tonto.exe

FPROF    = 
# Compiler options to produce profiling code. 
# On linux after running the job and producing "gmon.out" type
# "gprof -l -b gmon.prof | less" to analyse the time profile.

# FOUTOBJ = -c -o
# Compiler option for making object files

# FOUTEXE = -o
# Compiler option for producing named executables

# FCOLON = 
# FCOLON = :
# The separator character to use between compiler options (default: unset)

#
# File suffixes and prefered file names
# -------------------------------------

FSUFFIX = F95
# The compiler-preferred Fortran file extension

# PROGSUFFIX = exe
# The preferred file extension for executables

# MODSUFFIX = mod
# The Fortran module file extension produced by the compiler

# MODCASE = -uc
# If the compiler outputs module files that have the head part of the
# file name in uppercase rather than lowercase, use this

# OBJSUFFIX = o
# The file extension for object files

# PROGSUFFIX = exe
# Option to specify the file extension for the executable 

# MPIEXEC = mpiexec -n 2
# Option to specify how to run MPI parallel jobs for testing

#
# Options to control Fortran produced from Foo code
# -------------------------------------------------

DEFS = -DMPI -DUSE_ERROR_MANAGEMENT -DNO_GENERIC_NAMES -DFLUSH
# Specify switches that control Fortran produced from Foo code.
# These switches are defined in the foofiles/macros file.
# More than one option from the list below can be specified:
# -DFLUSH
# -DUSE_ERROR_MANAGEMENT
# -DUSE_PRECONDITIONS
# -DUSE_CALL_STACK_MANAGEMENT
# -DMPI
# -DNO_GENERIC_NAMES
# -DNO_MOD_ONLY
# -DUSE_TIME_PROFILING
# -DLANGUAGE_FORTRAN_90
# -DBROKEN_TYPE_INITIALIZATION
# -DNO_TONTO_SYSTEM_CALLS
# -DNO_CASE_OPTIONS
# -DESSL

#
# Library related options
# -----------------------

# LIBSUFFIX = a
# The file extension for library files

# MKLIB = ar -ru
# Command for making libraries

LIBS = -L$(objdir) -lmpich
#LIBS = -L$(objdir) -L/opt/acml4.1.0/ifort32/lib -lacml
