#
# This is the platform-specific compiler option file
# --------------------------------------------------
 
# This file is included into the Makefile, so if you edit this file
# Tonto will rebuild from the start.

# Options with default values are commented out. You can uncomment and
# change them. If you are unsure, keep the defaults i.e. change only
# the uncommented options.

#
# Compiler switches
# ------------------

FOPTNS = $(FDEBUG)
# Choose the overall type of executable wanted.
# . Choose $(FFAST), $(FDEBUG) or $(FPROF). See below for descriptions. 
# . Can also have multiple choices e.g $(FAST) $(FPROF)
# . If you use only $(FFAST) or $(FDEBUG) the executables will be
#   stored in the fast/ or debug/ subdirectories, allowing builds of
#   these two types to be simultaneously resident. Otherwise builds go
#   in the custom/ folder.

FFLAGS = -fmod=$(moddir)
# Set other globally applicable compiler options.
# . -fmod=$(moddir) : tell where module files are located
# . -Wall           : turn on all warnings
# . -std=f95        : turn on f95 compliance checking

FFAST = -O3
# Compiler options to produce fast code. 

FPROF = 
# Compiler options to produce profiling code.

FDEBUG   = -g -fbounds-check -ftrace=full -freal=nan -Wall
# Compiler options to produce debugging code.
# If using this, do not use -std=f95. It breaks the loc function,
# Vittorio Zecca recommends these runtime swiches to be placed 
# in the .bashrc always
#export G95_FPU_OVERFLOW=Y
#export G95_FPU_ZERODIV=Y
#export G95_FPU_INVALID=Y
#export G95_MEM_INIT=nan 

# FOUTOBJ = -c -o
# Compiler option for making object files

# FOUTEXE = -o
# Compiler option for producing named executables

# FCOLON = 
# FCOLON = :
# The separator character to use between compiler options (default: unset)

#
# File suffixes and prefered file names
# -------------------------------------

# FSUFFIX = f90
# The compiler-preferred Fortran file extension

# PROGSUFFIX = exe
# The preferred file extension for executables

# MODSUFFIX = mod
# The Fortran module file extension produced by the compiler

# MODCASE = -uc
# If the compiler outputs module files that have the head part of the
# file name in uppercase rather than lowercase, use this

# OBJSUFFIX = o
# The file extension for object files

# PROGSUFFIX = exe
# Option to specify the file extension for the executable 

#
# Options to control Fortran produced from Foo code
# -------------------------------------------------

DEFS = -DUSE_ERROR_MANAGEMENT -DNO_MOD_ONLY -DFLUSH -DNO_ERF
# Specify switches that control Fortran produced from Foo code.
# These switches are defined in the foofiles/macros file.
# More than one option from the list below can be specified:
# -DFLUSH
# -DUSE_ERROR_MANAGEMENT
# -DUSE_PRECONDITIONS
# -DUSE_CALL_STACK_MANAGEMENT
# -DMPI
# -DNO_GENERIC_NAMES
# -DNO_MOD_ONLY
# -DUSE_TIME_PROFILING
# -DLANGUAGE_FORTRAN_90
# -DBROKEN_TYPE_INITIALIZATION
# -DNO_TONTO_SYSTEM_CALLS
# -DNO_CASE_OPTIONS
# -DESSL

#
# Library related options
# -----------------------

# LIBSUFFIX = a
# The file extension for library files

# MKLIB = ar -ru
# Command for making libraries

LIBS = -L$(objdir) 
# Specifies the library paths to search (-L) and the LAPACK/BLAS libraries, 
# or their equivalent. Note: if using ESSL libraries, add the -DESSL
# switch to to DEFS above

