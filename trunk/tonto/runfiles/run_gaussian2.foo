! Testing numerical integration

program run_GAUSSIAN2

   implicit none

   g :: GAUSSIAN2 
   S :: MAT{REAL}*
   Bx,By,Bz :: MAT{REAL}*
   M,M1,M2 :: MAT4{REAL}*
   pos :: VEC{REAL}(3)

   ! Create Tonto system
   TONTO_CREATE

   ! Open standard files
   stdout.create_stdout; stdout.open
   stderr.create_stderr; stderr.open
 
   ! Set gaussian data
   GAUSSIAN_DATA:set_indices(l_max=4)

   ! Define gaussian pair
   pos = [1.28823d0,  1.28823d0,  1.34258d0]
   pos = pos * BOHR_PER_ANGSTROM
   g.a.set_l(2)
   g.a.set_position(pos)
   g.a.set_exponent(0.6190d0)
   g.b.set_l(2)
   g.b.set_position(pos)
   g.b.set_exponent(0.6190d0)

   ! Output settings
   stdout.set_real_style("f")
   stdout.set_real_width(20)
   stdout.set_real_precision(12)

   ! Output
   stdout.flush
   stdout.text("The gaussian pair ...")
   g.put 
   stdout.flush

   ! Make overlap integrals
   S.create(g.a.n_comp,g.b.n_comp)
   g.make_overlap_ints(S)

   ! Put overlap integrals
   stdout.flush
   stdout.text("Overlap integrals between the two gaussians:")
   stdout.flush
   stdout.put(S)

   ! Make magnetic field integrals
   Bx.create(g.a.n_comp,g.b.n_comp)
   By.create(g.a.n_comp,g.b.n_comp)
   Bz.create(g.a.n_comp,g.b.n_comp)
   g.make_magnetic_jp_ints(Bx,By,Bz,[0.1d0,0.2d0,0.3d0])

   ! Put magnetic field integrals
   stdout.flush
   stdout.text("Magnetic field current integrals Bi between")
   stdout.text("the two gaussian evaluated at (1,1,1) :")
   stdout.flush
   stdout.text("Bx:"); stdout.put(Bx)
   stdout.text("By:"); stdout.put(By)
   stdout.text("Bz:"); stdout.put(Bz)

   ! Make magnetic field spin integrals
   M.create(g.a.n_comp,g.b.n_comp,3,3)
   g.make_magnetic_S_ints(M,[ONE,ONE,ONE])
 
   ! Put nuclear attraction integrals
   stdout.flush
   stdout.text("Magnetic field spin integrals")
   stdout.text("Mxx:"); stdout.put(M(:,:,1,1))
   stdout.text("Mxy:"); stdout.put(M(:,:,1,2))
   stdout.text("Mxz:"); stdout.put(M(:,:,1,3))
   stdout.text("Myx:"); stdout.put(M(:,:,2,1))
   stdout.text("Myy:"); stdout.put(M(:,:,2,2))
   stdout.text("Myz:"); stdout.put(M(:,:,2,2))
   stdout.text("Mzx:"); stdout.put(M(:,:,3,1))
   stdout.text("Mzy:"); stdout.put(M(:,:,3,2))
   stdout.text("Mzz:"); stdout.put(M(:,:,3,3))

   ! Define gaussian pair
   g.a.set_l(2)
   g.a.set_position([TENTH,TENTH,TENTH])
   g.a.set_exponent(ONE)
   g.b.set_l(2)
   g.b.set_position([ZERO,ZERO,ZERO])
   g.b.set_exponent(ONE)

   ! Make magnetic field spin integrals
   M1.create(g.a.n_comp,g.b.n_comp,3,3)
   g.make_magnetic_S_ints(M1,[ONE,ONE,ONE])

   ! Define gaussian pair
   g.b.set_l(2)
   g.b.set_position([TENTH,TENTH,TENTH])
   g.b.set_exponent(ONE)
   g.a.set_l(2)
   g.a.set_position([ZERO,ZERO,ZERO])
   g.a.set_exponent(ONE)

   ! Make magnetic field spin integrals
   M2.create(g.b.n_comp,g.a.n_comp,3,3)
   g.make_magnetic_S_ints(M2,[ONE,ONE,ONE])

   stdout.flush
   stdout.text("Magnetic field spin integrals")
   stdout.text("Mxx:"); stdout.put(transpose(M2(:,:,1,1))-M1(:,:,1,1))
   stdout.text("Mxy:"); stdout.put(transpose(M2(:,:,1,2))-M1(:,:,1,2))
   stdout.text("Mxz:"); stdout.put(transpose(M2(:,:,1,3))-M1(:,:,1,3))
   stdout.text("Myx:"); stdout.put(transpose(M2(:,:,2,1))-M1(:,:,2,1))
   stdout.text("Myy:"); stdout.put(transpose(M2(:,:,2,2))-M1(:,:,2,2))
   stdout.text("Myz:"); stdout.put(transpose(M2(:,:,2,3))-M1(:,:,2,3))
   stdout.text("Mzx:"); stdout.put(transpose(M2(:,:,3,1))-M1(:,:,3,1))
   stdout.text("Mzy:"); stdout.put(transpose(M2(:,:,3,2))-M1(:,:,3,2))
   stdout.text("Mzz:"); stdout.put(transpose(M2(:,:,3,3))-M1(:,:,3,3))

   ! Clean
   GAUSSIAN_DATA:destroy_data
   M2.destroy
   M1.destroy
   M.destroy
   Bz.destroy; By.destroy; Bx.destroy
   S.destroy

   ! Memory report
   TONTO_REPORT

   ! Destroy standard files
   TEXTFILE:destroy(stderr)
   TEXTFILE:destroy(stdout)

   ! Destroy Tonto system
   TONTO_DESTROY

end
