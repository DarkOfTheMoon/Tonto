! Copyright (C) Dylan Jayatilaka, 1999
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: run_molecule.foo 3136 2007-09-12 04:51:22Z dylan_ $

program run_GAUSSIAN_DATA

   implicit none


   mat :: VEC{MAT_{REAL}}*
   norm :: VEC{REAL}*
   l_max,l,first,last :: INT
   n,i :: INT
   fac :: REAL

   TONTO_CREATE

   std_time.start_timing
!  stdin.create_stdin;   stdin.open
   stdout.create_stdout; stdout.open
   stderr.create_stderr; stderr.open

 ! TONTO_SET_STDERR(stdout)

   stdout.set_int_width(3)
   stdout.set_real_width(6)
   stdout.set_precision(2)

   stdout.flush
   stdout.text("Creating cartesian-spherical matrices")

   l_max = 6
   GAUSSIAN_DATA:set_indices(l_max)
 
   mat => GAUSSIAN_DATA::spherical_harmonics_for
   norm => GAUSSIAN_DATA::normalising_factors
 
   stdout.flush
   stdout.text("Here are the spherical harmonic conversion matrices:")
   do l = 0,l_max
      stdout.flush
      stdout.show("l = ",l)
      stdout.flush
      first = GAUSSIAN_DATA::n_comp_up_to(l-1)
      last  = GAUSSIAN_DATA::n_comp_up_to(l)
      do n = 1,GAUSSIAN_DATA::n_comp(l)
         stdout.put(n)
         stdout.put(GAUSSIAN_DATA::px(first+n))
         stdout.put(GAUSSIAN_DATA::py(first+n))
         stdout.put(GAUSSIAN_DATA::pz(first+n))
         do i = -l,l
         fac = sqrt(TWO)
         if (i==0) fac=ONE
         stdout.put(mat(l)[n,i]/(fac*norm(first+n)))
         end
         stdout.flush
      end
   end
 
   stdout.flush
   stdout.text("Here the normalizing factor:")
   do l = 0,l_max
      stdout.flush
      stdout.show("l = ",l)
      stdout.flush
      first = GAUSSIAN_DATA::n_comp_up_to(l-1) + 1
      last  = GAUSSIAN_DATA::n_comp_up_to(l)
      stdout.put(norm(first:last),"by_column")
   end


   TONTO_REPORT

   TEXTFILE:destroy(stderr)
   TEXTFILE:destroy(stdout)
!  TEXTFILE:destroy(stdin)

   TONTO_DESTROY

end
