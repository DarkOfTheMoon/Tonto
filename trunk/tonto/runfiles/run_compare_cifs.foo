! Copyright (C) Dylan Jayatilaka, 1999
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: run_compare_cifs $

program run_COMPARE_CIFS

   implicit none

   command_line :: COMMAND_LINE*
   refcif,cmpcif,head,label :: STR
   ref,cmp :: MOLECULE*
   refat,cmpat :: ATOM*
   n_atom,a :: INT

   ! Create Tonto system object
   ! Initialise MPI parallel stuff too.
   TONTO_CREATE

   ! Initialise standard I/O files.
   std_time.start_timing

   stderr.create_stderr; stderr.open
   stdout.create_stdout

   ! Initialize miscellaneous ...
   GAUSSIAN_DATA:set_indices(GAUSSIAN_DATA_L_MAX)

   ! Get the command line
   command_line.create
   command_line.process_options
   DIE_IF(NOT command_line.has_arguments,"Usage: run_compare_cifs -ref <reference-cif> <compared-cif>")
   DIE_IF(NOT command_line.n_args==1    ,"Usage: run_compare_cifs -ref <reference-cif> <compared-cif>")
   DIE_IF(NOT command_line.has_options  ,"Usage: run_compare_cifs -ref <reference-cif> <compared-cif>")
   DIE_IF(NOT command_line.n_options==1 ,"Usage: run_compare_cifs -ref <reference-cif> <compared-cif>")
   DIE_IF(command_line.option(1)/="ref" ,"Usage: run_compare_cifs -ref <reference-cif> <compared-cif>")

   ! Get options
   cmpcif = command_line.arg(1)
   refcif = command_line.option_value(1)
   head   = cmpcif.filename_head

   ! Clean command line
   command_line.destroy

   ! Create the molecules and process the CIFs
   ref.BASE:create
   cmp.BASE:create

   ref.cif.create
   cmp.cif.create

   ref.cif.set_file_name(refcif) 
   cmp.cif.set_file_name(cmpcif) 

   ref.CE:process_CIF
   cmp.CE:process_CIF

   ! Sanity checks
   DIE_IF(ref.n_atom/=cmp.n_atom,"different no. of atoms in each CIF")
   DIE_IF(ref.atom(:).atomic_number.same_as(/=cmp.atom(:).atomic_number),"atom order is different in each CIF")

   ! Write the heavy atom data files
   n_atom = ref.n_atom

   ! Script banner
   stdout.flush
   stdout.text("# ============")
   stdout.text("# Compare CIFs")
   stdout.text("# ============")
   stdout.flush
   stdout.text("# This program compares CIF geometries and ADPs and produces")
   stdout.text("# this gnuplot command file suitable for plotting.")
   stdout.flush
   stdout.show("# CIF file to compare   = ",cmpcif)
   stdout.show("# CIF file reference    = ",refcif)

   ! Heavy atom positions

   stdout.redirect(trim(head)//".heavy_atoms.xyz_data")

   do a = 1,n_atom

      refat => ref.atom(a)
      cmpat => ref.atom(a)

      if (refat.atomic_number<=1) cycle

      label = refat.label

      stdout.put(trim(label)//":x")
      stdout.put(refat.position(1))
      stdout.put(refat.position_error(1))
      stdout.put(cmpat.position(1))
      stdout.put(cmpat.position_error(1))
      stdout.flush

      stdout.put(trim(label)//":y")
      stdout.put(refat.position(2))
      stdout.put(refat.position_error(2))
      stdout.put(cmpat.position(2))
      stdout.put(cmpat.position_error(2))
      stdout.flush

      stdout.put(trim(label)//":z")
      stdout.put(refat.position(3))
      stdout.put(refat.position_error(3))
      stdout.put(cmpat.position(3))
      stdout.put(cmpat.position_error(3))
      stdout.flush

   end

   stdout.revert

   ! H atom positions

   stdout.redirect(trim(head)//".h_atoms.xyz_data")

   do a = 1,n_atom

      refat => ref.atom(a)
      cmpat => ref.atom(a)

      if (refat.atomic_number>1) cycle

      label = refat.label

      stdout.put(trim(label)//":x")
      stdout.put(refat.position(1))
      stdout.put(refat.position_error(1))
      stdout.put(cmpat.position(1))
      stdout.put(cmpat.position_error(1))
      stdout.flush

      stdout.put(trim(label)//":y")
      stdout.put(refat.position(2))
      stdout.put(refat.position_error(2))
      stdout.put(cmpat.position(2))
      stdout.put(cmpat.position_error(2))
      stdout.flush

      stdout.put(trim(label)//":z")
      stdout.put(refat.position(3))
      stdout.put(refat.position_error(3))
      stdout.put(cmpat.position(3))
      stdout.put(cmpat.position_error(3))
      stdout.flush

   end

   ! Heavy atom ADPs

   stdout.redirect(trim(head)//".heavy_atoms.adp_data")

   do a = 1,n_atom

      refat => ref.atom(a)
      cmpat => ref.atom(a)

      if (refat.atomic_number<=1) cycle

      label = refat.label

      stdout.put(trim(label)//":Uxx")
      stdout.put(refat.pADP_vector(4))
      stdout.put(refat.pADP_error(4))
      stdout.put(cmpat.pADP_vector(4))
      stdout.put(cmpat.pADP_error(4))
      stdout.flush

      stdout.put(trim(label)//":Uyy")
      stdout.put(refat.pADP_vector(5))
      stdout.put(refat.pADP_error(5))
      stdout.put(cmpat.pADP_vector(5))
      stdout.put(cmpat.pADP_error(5))
      stdout.flush

      stdout.put(trim(label)//":Uzz")
      stdout.put(refat.pADP_vector(6))
      stdout.put(refat.pADP_error(6))
      stdout.put(cmpat.pADP_vector(6))
      stdout.put(cmpat.pADP_error(6))
      stdout.flush

      stdout.put(trim(label)//":Uxy")
      stdout.put(refat.pADP_vector(7))
      stdout.put(refat.pADP_error(7))
      stdout.put(cmpat.pADP_vector(7))
      stdout.put(cmpat.pADP_error(7))
      stdout.flush

      stdout.put(trim(label)//":Uxz")
      stdout.put(refat.pADP_vector(8))
      stdout.put(refat.pADP_error(8))
      stdout.put(cmpat.pADP_vector(8))
      stdout.put(cmpat.pADP_error(8))
      stdout.flush

      stdout.put(trim(label)//":Uyz")
      stdout.put(refat.pADP_vector(9))
      stdout.put(refat.pADP_error(9))
      stdout.put(cmpat.pADP_vector(9))
      stdout.put(cmpat.pADP_error(9))
      stdout.flush

   end

   stdout.revert

   ! Hydrogen atom ADPs

   stdout.redirect(trim(head)//".h_atoms.adp_data")

   do a = 1,n_atom

      refat => ref.atom(a)
      cmpat => ref.atom(a)

      if (refat.atomic_number>1) cycle

      label = refat.label

      stdout.put(trim(label)//":Uxx")
      stdout.put(refat.pADP_vector(4))
      stdout.put(refat.pADP_error(4))
      stdout.put(cmpat.pADP_vector(4))
      stdout.put(cmpat.pADP_error(4))
      stdout.flush

      stdout.put(trim(label)//":Uyy")
      stdout.put(refat.pADP_vector(5))
      stdout.put(refat.pADP_error(5))
      stdout.put(cmpat.pADP_vector(5))
      stdout.put(cmpat.pADP_error(5))
      stdout.flush

      stdout.put(trim(label)//":Uzz")
      stdout.put(refat.pADP_vector(6))
      stdout.put(refat.pADP_error(6))
      stdout.put(cmpat.pADP_vector(6))
      stdout.put(cmpat.pADP_error(6))
      stdout.flush

      stdout.put(trim(label)//":Uxy")
      stdout.put(refat.pADP_vector(7))
      stdout.put(refat.pADP_error(7))
      stdout.put(cmpat.pADP_vector(7))
      stdout.put(cmpat.pADP_error(7))
      stdout.flush

      stdout.put(trim(label)//":Uxz")
      stdout.put(refat.pADP_vector(8))
      stdout.put(refat.pADP_error(8))
      stdout.put(cmpat.pADP_vector(8))
      stdout.put(cmpat.pADP_error(8))
      stdout.flush

      stdout.put(trim(label)//":Uyz")
      stdout.put(refat.pADP_vector(9))
      stdout.put(refat.pADP_error(9))
      stdout.put(cmpat.pADP_vector(9))
      stdout.put(cmpat.pADP_error(9))
      stdout.flush

   end

   stdout.revert

   ! Clean-up
   cmp.BASE:destroy
   ref.BASE:destroy

   ! Memory report
   TONTO_REPORT

   ! Clean-up files
   TEXTFILE:destroy(stderr)
   TEXTFILE:destroy(stdout)

   ! Clean-up tonto system
   TONTO_DESTROY

end
