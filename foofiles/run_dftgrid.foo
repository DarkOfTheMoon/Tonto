program run_dftgrid
! $Id$

   use TYPES
   use SYSTEM
   use MAT
   use INPUT
   use OUTPUT
   use ATOMVEC
   use DFTGRID

#  include "macros"
#define CHECK

   implicit none

     DFTGRID* :: g
     ATOMVEC* :: atom
     INPUT* :: in
     OUTPUT* :: out

     DBL :: f
     external f

     DBL :: integral
     DBL :: alph, beta
     DBL :: pf, pff, ab1, dx, dy, dz, dxyz2, dxyz, argf, ab2, ab3, ab4
        DBL :: rax, ray, raz, ra2, ga 
        DBL :: rbx, rby, rbz, rb2, gb

     ! Get atoms
     in.create("Input")
     in.open
     atom.read(in)

     ! Output
     out.create("Output")
     out.open
   
     g.create 
     g.read(in)
     g.put(out)
   
   
     integral = g.integrate(f,atom)

         ! FUNCTION PARAMETERS
         ! ATOM A = 1
         alph = FIVE
         rax = 1 ! atoms(1)%pos(1)
         ray = 0 ! atoms(1)%pos(2)
         raz = 0 ! atoms(1)%pos(3)
         ! ATOM B = 2
         beta = EIGHT
         rbx = -1 ! atoms(2)%pos(1)
         rby = 0 ! atoms(2)%pos(2)
         rbz = 0 ! atoms(2)%pos(3)

     dx = rax - rbx
     dy = ray - rby
     dz = raz - rbz
     dxyz2 = dx*dx + dy*dy + dz*dz
     dxyz  = sqrt(dxyz2)
     
     print "(a)", "(exp(-alph*ra2) + exp(-beta*rb2))^2:"
     print "(a, f10.5)", "RAB = ", dxyz
     print "(a, 2f10.5)", "alpha, beta = ", alph, beta
     print "(a, d25.15)", "numerical integral = ", integral

     pf = sqrt(PI/(TWO*alph))
     pff = pf*pf*pf
     ab1 = pff

     pf = sqrt(PI/(alph + beta))
     pff = pf*pf*pf
     argf = alph*beta/(alph + beta)
     ab2 = pff*exp(-argf*dxyz2)
     
     ab3 = ab2
    
     pf = sqrt(PI/(TWO*beta))
     pff = pf*pf*pf
     ab4 = pff

     print "(a, d25.15)", "analytical integral = ", ab1 + ab2 + ab3 + ab4
     print "(a, d25.15)", "diff = ", abs(ab1 + ab2 + ab3 + ab4 - integral)
     print "(a, f25.15)", "log10(diff) = ", log10(abs(ab1 + ab2 + ab3 + ab4 - integral))

end
