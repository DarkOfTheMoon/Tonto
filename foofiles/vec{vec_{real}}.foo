!---------------------------------------------------------------------------
!
!  VEC{VEC_{REAL}} : a matrix where each column is a different length
!
! Copyright (C) Daniel Grimwood, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!---------------------------------------------------------------------------

module VEC{VEC_{REAL}}

   implicit none

contains

   create(dim) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky
   ! Create space for object
      self :: PTR
      dim :: INT, IN
   end

   create(dim,dimv) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky
   ! Create space for a vector of vectors
   end

   create(dim,bounds) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky
   ! Create space for a vector of vectors
   end

   create_vec(dimv) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky
   ! Allocate the pointer parts
   end

   create_vec(bounds) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky
   ! Allocate the pointer parts
   end

   destroy ::: get_from(VEC{VEC_{INTRINSIC}}), leaky
   ! Destroy space for object
      self :: PTR
   end

   nullify_ptr_part ::: get_from(VEC{VEC_{INTRINSIC}})
   ! Nullify the pointer parts
   end

   destroy_ptr_part ::: get_from(VEC{VEC_{INTRINSIC}}), leaky
   ! Destroy the pointer parts
   end

   created result (res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has been created
      self :: PTR
      res :: BIN
   end

   destroyed result (res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has *not* been created
      self :: PTR
      res :: BIN
   end

   create_copy(vec) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky
   ! Create a replica copy of "vec".
   end

   copy(v) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky
   ! Make a copy of "v".
   end

   shrink(dim) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky
   ! Shrinks self to dimension "dim". Contents are retained.
   end

   expand(dim) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky
   ! Expands self to dimension "dim". Contents are retained.
   ! NOTE: pointer assignment is used to retain contents.
   ! NOTE: Elements which are added are nullified.
   end

   append(v) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky
   ! Expands self to the required dimension, and append the contents
   ! of encapsulated vector "v". 
   end

   append(value) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky
   ! Expands self to the required dimension, and append the single
   ! "value" onto the end of self.
   end

   join(list) result (res) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky
   ! Join together (i.e. concatenate) the vectors in self whose indices are
   ! listed in "list".
   end

   make_R_multipoles(qc,qs,charges,points,l_max) ::: selfless, leaky
   ! Make the scaled regular solid harmonic multipole moments "qc" and "qs" for
   ! a given set of "charges" located at a set of "points", up to a maximum
   ! angular momentum "l_max".  Reference: the book by Helgaker, Olsen, and
   ! Simons, p. 414. NOTE: "qc" and "qs" are created.
      qc,qs :: VEC{VEC_{REAL}}*
      charges :: VEC{REAL}, target
      points :: MAT{REAL}, target
      l_max :: INT
   ENSURE(charges.dim==points.dim1,"inconsistent charges and points arrays")
   ENSURE(points.dim2==3,"wrong 2nd dimension, points arrays")
   ENSURE(l_max>=0,"l_max must be non-negative")
      Rc,Rs :: VEC{VEC_{VEC_{REAL}}}*
      L,M :: INT
      qc.create(0,l_max)
      qs.create(0,l_max)
      VEC{REAL}:make_R_harmonics(Rc,Rs,points,l_max)
      do L = 0,l_max
         qc(L).element.create(0,L)
         qs(L).element.create(0,L)
         do M = 0,L
            qc(L).element(M) = sum(charges * Rc(L).element(M).element)
            qs(L).element(M) = sum(charges * Rs(L).element(M).element)
         end
      end
      do L = 0,l_max
         do M = -L,L
            deallocate(Rs(L)[M].element)
            deallocate(Rc(L)[M].element)
         end
         deallocate(Rs(L).element)
         deallocate(Rc(L).element)
      end
      deallocate(Rs)
      deallocate(Rc)
   end

end
