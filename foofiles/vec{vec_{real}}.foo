!---------------------------------------------------------------------------
!
!  VEC{VEC_{REAL}} : a matrix where each column is a different length
!
! Copyright (C) Daniel Grimwood, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!---------------------------------------------------------------------------

module VEC{VEC_{REAL}}

   implicit none

contains

   create(dim) ::: get_from(VEC{OBJECT}), leaky
   ! Create space for object
      self :: PTR
      dim :: INT
   end

   create(lb,ub) ::: get_from(VEC{OBJECT}), leaky
   ! Create the vector with lower bound "lb", upper bound "ub"
      self :: PTR
      lb,ub :: INT, IN
   end

   destroy ::: get_from(VEC{OBJECT}), leaky
   ! Destroy space for object
      self :: PTR
   end

   nullify_ptr_part
   ! Nullify the pointer part of the vecvec
       s :: INT
      do s = 1,size(self)
         nullify( self(s).element)
      end
   end

   destroy_ptr_part
   ! Destroy the pointer part of the vecvec
       s :: INT
      do s = 1,size(self)
         self(s).element.destroy
      end
   end

!   created result(res)
!   ! Returns true if self has been created
!      self :: PTR
!      res :: BIN
!      res = associated(self)
!   end

!   destroyed result(res)
!   ! Returns true if self has *not* been created
!      self :: PTR
!      res :: BIN
!      res = NOT associated(self)
!   end

   create_copy(vec) ::: get_from(VEC{OBJECT}), leaky
   ! Create a replica copy of "vec".
      vec :: VEC{VEC_{REAL}}, IN
      self :: PTR
   end

   copy(v) ::: leaky
   ! Make a copy of "v".
      v :: VEC{VEC_{REAL}}
   ENSURE(.dim==v.dim,"v has incompatible size")
      i :: INT
      do i = 1,v.dim
         self(i).element.create_copy(v(i).element)
      end
   end

   make_R_multipoles(qc,qs,charges,points,l_max) ::: selfless, leaky
   ! Make the scaled regular solid harmonic multipole moments "qc" and "qs" for
   ! a given set of "charges" located at a set of "points", up to a maximum
   ! angular momentum "l_max".  Reference: the book by Helgaker, Olsen, and
   ! Simons, p. 414. NOTE: "qc" and "qs" are created.
      qc,qs :: VEC{VEC_{REAL}}*
      charges :: VEC{REAL}, target
      points :: MAT{REAL}, target
      l_max :: INT
   ENSURE(charges.dim==points.dim1,"inconsistent charges and points arrays")
   ENSURE(points.dim2==3,"wrong 2nd dimension, points arrays")
   ENSURE(l_max>=0,"l_max must be non-negative")
      Rc,Rs :: VEC{VEC_{VEC_{REAL}}}*
      L,M :: INT
      qc.create(0,l_max)
      qs.create(0,l_max)
      VEC{REAL}:make_R_harmonics(Rc,Rs,points,l_max)
      do L = 0,l_max
         n_comp = L.n_comp
         qc(L).element.create(0,L)
         qs(L).element.create(0,L)
         do M = 0,L
            qc(L).element(M) = sum(charges * Rc(L).element(M).element)
            qs(L).element(M) = sum(charges * Rs(L).element(M).element)
         end
      end
      Rs.destroy; Rc.destroy
   end

end
