!---------------------------------------------------------------------------
!
!  SHELLVEC: A vector of gaussian SHELL data
!
! Copyright (C) Dylan Jayatilaka, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!---------------------------------------------------------------------------

module SHELLVEC

   implicit none

contains

!  ******************
!  Allocation methods
!  ******************

   create(dim)
   ! Create space for object
      self :: PTR
      dim :: INT
      nullify(self)
      allocate(self(dim))
      ADD_MEMORY(dim*SHELL_SIZE)
      .nullify_ptr_part
   end

   destroy ::: get_from(VEC), leaky
   ! Destroy space for object
      self :: PTR
   end

   nullify_ptr_part ::: get_from(VEC)
   ! Nullify the pointer parts of self
   end

   destroy_ptr_part ::: get_from(VEC), leaky
   ! Destroy the pointer parts of self
   end

!   created result(res)
!   ! Returns true if self has been created
!      self :: PTR
!      res :: BIN
!      res = associated(self)
!   end

!   destroyed result(res)
!   ! Returns true if self has *not* been created
!      self :: PTR
!      res :: BIN
!      res = NOT associated(self)
!   end

   create_copy(vec) ::: get_from(VEC)
   ! Create a replica copy of "vec".
      vec :: SELF_TYPE, IN
      self :: PTR
   end

   copy(vec) ::: get_from(VEC), leaky
   ! Copy "vec".
      vec :: SELF_TYPE, IN
   end

! ***********************
! List-based I/O Routines
! ***********************

   read_list_keywords ::: get_from(VEC), recursive, leaky
   ! Read in and process list-based keywords from "stdin". List-based keywords
   ! are those that are intended to apply to each individual element of the list
   ! through a list of "keys" stored in the associated list-element type module.
   ! NOTE: this routine will create the list, if required.
     self :: PTR
   end

   process_list_keyword(keyword) ::: get_from(VEC), leaky
   ! Process a list-type "keyword", common to all list-type objects.
     self :: PTR
     keyword :: STR(*), IN
   end

   read_data(ignore_braces) ::: get_from(VEC), leaky
   ! Process the keywords list to read data or commands. If "ignore_braces" is
   ! present then the opening and closing braces, which are normally required,
   ! are ignored.
     self :: PTR
     ignore_braces :: BIN, optional
   end

   data_length result (length) ::: get_from(VEC)
   ! Read ahead in stdin to get the "length" of the data list, i.e. the number
   ! of data items in the list. The data must begin with the first data item,
   ! *not* a "{" symbol.  The order of data items comprising the list is given
   ! by keys defined in the associated list-element type module. The data list
   ! must be terminated by a "}" symbol.
     self :: PTR
     length :: INT
   end

   read_altered_data ::: get_from(VEC), leaky
   ! Read in a sublist of the complete list, and alter the data for that
   ! sublist.  The order of the data items in the sublist is given by the "keys"
   ! defined in the associated list-element type module.
     self :: PTR
   end

   process_keys ::: get_from(VEC), leaky
   ! Process the "keys" on each element of the list.
     self :: PTR
   end

   keys_created result (res) ::: get_from(VEC)
   ! Return TRUE if the list-element keys are created.
      self :: PTR
      res :: BIN
   end

   set_keys(the_keys) ::: get_from(VEC)
   ! This is for setting the "keys" externally.
     self :: PTR
     the_keys :: STRVEC(len=*,:)
   end

   clear_keys ::: get_from(VEC)
   ! This is for destroying the "keys" externally.
     self :: PTR
   end

   read_keys ::: get_from(VEC)
   ! Read a new set of keys
      self :: PTR
   end

   put_keys_table ::: get_from(VEC)
   ! Output a generic table based on the "keys"
     self :: PTR
   end

   put_table_header ::: get_from(VEC)
   ! Put out a table header based on "keys"
      self :: PTR
   end

   put_table_footer ::: get_from(VEC)
   ! Put out a table footer based on "keys"
      self :: PTR
   end

   redirect ::: get_from(OBJECT), leaky
   ! Redirect input
     self :: PTR
   end

   revert ::: get_from(OBJECT), leaky
   ! Revert back to previous stdin file
     self :: PTR
   end

! ***************************
! Non-list based I/O routines
! ***************************

   read_keywords ::: leaky
   ! Read in and process normal (non list-type) keywords from "stdin".
     self :: PTR
     word :: STR
     ENSURE(stdin.next_item=="{","expecting open bracket symbol, {")
     stdin.read(word)
     do                 ! Loop over input keywords
       stdin.read(word)
       word.to_lower_case
       if (word=="}")      exit
       if (stdin.reverted) exit
       .process_keyword(word)
     end
   end

   process_keyword(keyword) ::: leaky
   ! Process a normal (non list-type) "keyword".
     self :: PTR
     keyword :: STR
     word :: STR
     word = keyword
     word.to_lower_case
     select case (word)
       case("}") ! do nothing.
       case("put         "); .put
       case("redirect    "); .redirect
       case("revert      "); .revert
       case default;       UNKNOWN(word)
     end
   end

!*******************************************************************************

   maximum_l_value result(res)
   ! Return the maximum l value in the shell vector
      res :: INT
      n :: INT
      res = 0
      do n = 1,size(self)
         res = max(res,self(n).l)
      end
   end

   same_as(sh) result(same)
   ! Return TRUE if the shell vector set "self" is the same as "sh".
      sh :: SHELLVEC
      same :: BIN
       i :: INT
      if (.n_shell /= sh.n_shell) then; same = FALSE; return
      end
      same = TRUE
      do i = 1,.n_shell
         same = same AND self(i).same_as(sh(i))
         if (NOT same) exit
      end
   end

   n_shell result (res)
   ! Return the size of the shell vector
      res :: INT
      res = size(self)
   end

   unnormalise
   ! Take the normalisation factors out of the primitives, assuming
   ! that the contraction coeff's refer to normalised basis functions
       i :: INT
      do i= 1,.n_shell
         self(i).unnormalise
      end
   end

   renormalise
   ! Put back in the normalisation factors of the primitives, assuming
   ! that the contraction coeff's refer to unnormalised basis functions
       i :: INT
      do i= 1,.n_shell
         self(i).renormalise
      end
   end

   put
   ! Put the shellvec information to "stdout"
      i :: INT
      stdout.flush
      stdout.show("No. of shells   = ",.n_shell)
      stdout.show("Maximum l value = ",.maximum_l_value)
      stdout.flush
      stdout.text("Shell list:")
      do i = 1,.n_shell
         self(i).put
      end
   end

end
