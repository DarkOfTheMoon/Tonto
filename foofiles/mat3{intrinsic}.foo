!---------------------------------------------------------------------------
!
! MAT3{INTRINSIC}: 
!
! This is a virtual module, for 3 dimensional matrices of INTRINSIC type.
!
! Copyright (C) Dylan Jayatilaka, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!---------------------------------------------------------------------------

virtual module MAT3{INTRINSIC}

   implicit none

contains

   create(dim1,dim2,dim3) ::: leaky
   ! Create the object with the desired bounds
      self :: PTR
      dim1,dim2,dim3 :: INT, IN
      nullify(self)
      allocate(self(dim1,dim2,dim3))
      ADD_MEMORY(dim1*dim2*dim3*ELEMENT_TYPE_SIZE)
   end

   create(dim) ::: leaky
   ! Create the object with the desired dimensions "dim"
      self :: PTR
      dim :: VEC{INT}(3)
      .create(dim(1),dim(2),dim(3))
   end

   create(lb1,ub1,lb2,ub2,lb3,ub3) ::: leaky
   ! Create the object with the desired bounds
      self :: PTR
      lb1,lb2,lb3,ub1,ub2,ub3 :: INT, IN
      nullify(self)
      allocate(self(lb1:ub1,lb2:ub2,lb3:ub3))
      ADD_MEMORY((ub1-lb1+1)*(ub2-lb2+1)*(ub3-lb3+1)*ELEMENT_TYPE_SIZE)
   end

   create(bounds1,bounds2,bounds3) ::: leaky
   ! Create the object with the desired bounds
      self :: PTR
      bounds1,bounds2,bounds3 :: VEC{INT}(2)
      .create(bounds1(1),bounds1(2),bounds2(1),bounds2(2),bounds3(1),bounds3(2))
   end

   create(bounds) ::: leaky
   ! Create the object with the desired bounds
      self :: PTR
      bounds :: MAT{INT}(3,2)
      .create(bounds(1,1),bounds(1,2), &
              bounds(2,1),bounds(2,2), &
              bounds(3,1),bounds(3,2))
   end

   create_copy(c) ::: leaky
   ! Create a copy of matrix "c"
      self :: PTR
      c :: MAT3{INTRINSIC}
      .create(lbound(c,1),ubound(c,1), &
              lbound(c,2),ubound(c,2), &
              lbound(c,3),ubound(c,3)  )
      self = c
   end

   destroy ::: leaky
   ! Destroy the object
      self :: PTR
      if (.destroyed) return
      DELETE_MEMORY(size(self)*ELEMENT_TYPE_SIZE)
      deallocate(self)
   end

   created result(res) ::: inlined_by_foo
   ! Returns true if self has been created
      self :: PTR
      res :: BIN
      result = associated(self)
   end

   destroyed result(res) ::: inlined_by_foo
   ! Returns true if self has *not* been created
      self :: PTR
      res :: BIN
      result = NOT associated(self)
   end

   size result (res) ::: inlined_by_foo
   ! Return the size of the array
      res :: INT
      res = size(self)
   end

   dim1 result (res) ::: inlined_by_foo
   ! Return the size of the 1st dimension
      res :: INT
      res = size(self,1)
   end

   dim2 result (res) ::: inlined_by_foo
   ! Return the size of the 2nd dimension
      res :: INT
      res = size(self,2)
   end

   dim3 result (res) ::: inlined_by_foo
   ! Return the size of the 2nd dimension
      res :: INT
      res = size(self,3)
   end

   shape result (res)
   ! Return the size of the 2nd dimension
      res :: VEC{INT}(3)
      res = [size(self,1),size(self,2),size(self,3)]
   end

   is_same_shape_as(b) result(res) 
   ! Returns TRUE if the matrix "b" has the same shape as self
      self :: IN
      b :: MAT3{INTRINSIC}, IN
      res :: BIN
      res = .dim1==b.dim1 AND .dim2==b.dim2 AND .dim3==b.dim3
   end

   is_cube result(res) 
   ! Returns TRUE if self is a cube
      self :: IN
      res :: BIN
      res = .dim1==.dim2 AND .dim1==.dim3
   end

   set_to(b)
   ! Set "self" to "b"
      b :: MAT3{INTRINSIC}
   ENSURE(.is_same_shape_as(b),"different shapes")
      self = b
   end

   set_to(b)
   ! Set "self" to vector "b" in standard order
      b :: VEC{INTRINSIC}
   ENSURE(size(self)==size(b),"different sizes")
      self = reshape(b,[.dim1,.dim2,.dim3])
   end

   set_to_reverse_of(b)
   ! Set "self" to the reverse of vector "b" i.e. the standard order is
   ! reversed.
      b :: MAT3{INTRINSIC}
   ENSURE(.dim1==b.dim3,"incompatible sizes")
   ENSURE(.dim2==b.dim2,"incompatible sizes")
   ENSURE(.dim3==b.dim1,"incompatible sizes")
      i,j,k :: INT
      do k = 1,.dim3
      do j = 1,.dim2
      do i = 1,.dim1
         self(i,j,k) = b(k,j,i)
      end
      end
      end
   end

   change_basis_using(V)
   ! Change the basis of "self" using vectors "V"; self = self ... V
      V :: MAT{INTRINSIC}, IN
   ENSURE( .is_cube,"Non-cube matrix")
   ENSURE(V.is_square,"Non-square matrix")
   ENSURE(.dim1==V.dim1,"wrong shapes")
      i,j :: INT
      do i = 1,.dim3
         self(:,:,i).change_basis_using(V)
      end
      do i = 1,.dim3
      do j = 1,.dim3
         self(i,j,:) = matmul(self(i,j,:),V)
      end
      end
   end

   change_basis_to(new,V)
   ! Change the basis of "self" using vectors "V", and place the result in
   ! "new".  new = self ... V
      self :: IN
      new :: MAT3{INTRINSIC}, OUT
      V :: MAT{INTRINSIC}, IN
   ENSURE(   .is_cube,"Non-cube matrix")
   ENSURE(new.is_cube,"Non-square matrix")
   ENSURE(V.dim1==   .dim1,"wrong shapes")
   ENSURE(V.dim2==new.dim1,"wrong shapes")
      i,j :: INT
      do i = 1,.dim3
         self(:,:,i).change_basis_to(new(:,:,i),V)
      end
      do i = 1,.dim3
      do j = 1,.dim3
         new(i,j,:) = matmul(self(i,j,:),V)
      end
      end
   end

end
