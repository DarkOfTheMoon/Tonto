!-------------------------------------------------------------------------------
!
! CLUSTER:
!
! An object to store information pertaining to a cluster of atoms or molecules
! formed from an underlying crystal structure.
!
! Note: an associated crystal and atom list should be supplied. It is intended
! that these will come from the molecule which generates the cluster (perhaps a
! cluster should contain a molecule?). These entities are not destroyed when the
! cluster is destroyed.
!
! Copyright (C) Dylan Jayatilaka, 2002
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!-------------------------------------------------------------------------------

module CLUSTER

   implicit none

contains

   create
   ! Create the object
     self :: PTR
     nullify(self)
     allocate(self)
     ADD_MEMORY(CLUSTER_SIZE)
     .nullify_ptr_part
   end

   create(crystal,cell_atom)
   ! Create the object
     self :: PTR
     crystal :: CRYSTAL*
     cell_atom :: ATOMVEC*
     .create
     .set_defaults(crystal,cell_atom)
   end

   create_copy(object) ::: get_from(OBJECT), leaky
   ! Create a copy of object
     object :: SELF_TYPE
     self :: PTR
   end

   copy(cluster) ::: leaky
   ! Copy the contents of "cluster" to self. NOTE: ensure you destroy all the
   ! parts you need to before calling this.
      cluster :: CLUSTER, IN
      self = cluster
      if (cluster.geometry.created) &
         .geometry.create_copy(cluster.geometry)
      if (cluster.crystal.created) &
         .crystal.create_copy(cluster.crystal)
      if (cluster.cell_atom.created) &
         .cell_atom.create_copy(cluster.cell_atom)
      if (cluster.fragment_geometry.created) &
         .fragment_geometry.create_copy(cluster.fragment_geometry)
      if (cluster.cell_geometry.created) &
         .cell_geometry.create_copy(cluster.cell_geometry)
      if (cluster.symop.created) &
         .symop.create_copy(cluster.symop)
      if (cluster.symop_for_atom.created) &
         .symop_for_atom.create_copy(cluster.symop_for_atom)
      if (cluster.parent_for_atom.created) &
         .parent_for_atom.create_copy(cluster.parent_for_atom)
      if (cluster.atom_for_cell_atom.created) &
         .atom_for_cell_atom.create_copy(cluster.atom_for_cell_atom)
      if (cluster.minimum_distance_to_atom.created) &
         .minimum_distance_to_atom.create_copy(cluster.minimum_distance_to_atom)
      if (cluster.closest_fragment_atom_to_atom.created) &
         .closest_fragment_atom_to_atom.create_copy(cluster.closest_fragment_atom_to_atom)
      if (cluster.is_fragment_atom.created) &
         .is_fragment_atom.create_copy(cluster.is_fragment_atom)
      if (cluster.partition_factor.created) &
         .partition_factor.create_copy(cluster.partition_factor)
   end

   destroy
   ! Destroy the object
      self :: PTR
      if (.destroyed) return
      .destroy_ptr_part
      deallocate(self)
      DELETE_MEMORY(CLUSTER_SIZE)
   end

   nullify_ptr_part
   ! Nullify the pointer parts
      nullify(.crystal)
      nullify(.cell_atom)
      nullify(.symop)
      nullify(.fragment_geometry)
      nullify(.geometry)
      nullify(.cell_geometry)
      nullify(.symop_for_atom)
      nullify(.parent_for_atom)
      nullify(.atom_for_cell_atom)
      nullify(.minimum_distance_to_atom)
      nullify(.closest_fragment_atom_to_atom)
      nullify(.is_fragment_atom)
      nullify(.partition_factor)
   end

   destroy_ptr_part
   ! Destroy the pointer parts
      .crystal.destroy   
      if (.cell_atom.created) then
         .cell_atom.nullify_basis_part
         .cell_atom.nullify_coppensbasis_part
         .cell_atom.destroy
      end
      .destroy_cell_geom_ptr_part
      .destroy_cluster_info_ptr_part
      .partition_factor.destroy
   end

   destroy_cluster_info_ptr_part
   ! Destroy the non-symop informational ptr parts. These incclude the actual
   ! .geometry of the cluster as wellas information relating to the .symop's
   ! used to generate the cluster.
      .symop.destroy
      .geometry.destroy
      .symop_for_atom.destroy
      .parent_for_atom.destroy
      .atom_for_cell_atom.destroy
      .minimum_distance_to_atom.destroy
      .closest_fragment_atom_to_atom.destroy
      .is_fragment_atom.destroy
   end

   destroy_cell_geom_ptr_part
   ! Destroy cell and fragment geometry pointer parts. These are the geometrical
   ! coordinates used to generate the cluster.
      .cell_geometry.destroy
      .fragment_geometry.destroy
   end

!   created result(res)
!   ! Returns true if self has been created
!      self :: PTR
!      res :: BIN
!      res = associated(self)
!   end

!   destroyed result(res)
!   ! Returns true if self has *not* been created
!      self :: PTR
!      res :: BIN
!      res = NOT associated(self)
!   end

   set_defaults(crystal,cell_atom) ::: leaky
   ! Set up defaults. NOTE: the number of "cell_atoms" must match the second
   ! dimension of "crystal.asymmetric_unit_geometry" if both are present.
   ! Furthermore, it is assumed that the kinds of "cell_atoms" match those
   ! positions in the asymmetric unit. Usually both of these entities will be
   ! obtained from a single read from a CIF file.
     crystal :: CRYSTAL*
     cell_atom :: ATOMVEC*
     i :: INT
     ENSURE(cell_atom.created,"no cell_atom data")
     ENSURE(crystal.created,"no crystal created!")
     ENSURE(crystal.fragment_geometry.created,"no crystal fragment_geometry created")
     ENSURE(crystal.asymmetric_unit_geometry.created,"no crystal asymmetric_unit_geometry created")
     ENSURE(crystal.asymmetric_unit_geometry.dim2==cell_atom.dim,"inconsistent # of atoms in cell_atom")
     nullify(.cell_atom)
     nullify(.crystal)
     .destroy_ptr_part
     .add_criteria    = CLUSTER_ADD_CRITERIA
     .radius          = CLUSTER_RADIUS
     .defragment      = CLUSTER_DEFRAGMENT
     .info_made       = FALSE
     .cell_atom.create_copy(cell_atom)
     .crystal.create_copy(crystal)
     .set_crystal_defaults(crystal)
   end

   set_crystal_defaults(crystal) ::: leaky
   ! Set up the "crystal" defaults. The .fragment_geometry and .cell_geometry
   ! come from "crystal".
      crystal :: CRYSTAL*
      ENSURE(crystal.created,"no crystal created!")
      ENSURE(crystal.fragment_geometry.created,"no crystal fragment_geometry created")
      ENSURE(crystal.asymmetric_unit_geometry.created,"no crystal asymmetric_unit_geometry created")
      .destroy_cluster_info_ptr_part
      .n_symop = 0
      .n_atoms = 0
      .set_cell_defaults(crystal.asymmetric_unit_geometry)
      .set_fragment_defaults(crystal.fragment_geometry)
   end

   set_cell_defaults(cell_geometry) ::: leaky
   ! Set up the crystal asymmetric unit cell defaults.
      cell_geometry :: REALMAT*
      ENSURE(cell_geometry.created,"no cell_geometry created")
      .cell_geometry.destroy
      .cell_geometry.create_copy(cell_geometry)
      .n_cell_atoms = cell_geometry.dim2
   end

   set_fragment_defaults(fragment_geometry) ::: leaky
   ! Set only the "fragment_geometry" related information.
      fragment_geometry :: REALMAT*
      ENSURE(fragment_geometry.created,"no fragment_geometry created")
      .fragment_geometry.destroy
      .fragment_geometry.create_copy(fragment_geometry)
      .n_fragment_atoms = fragment_geometry.dim2
      .fragment_width   = fragment_geometry.max_abs_column_difference
      .fragment_offset  = fragment_geometry.mean_column_vector
   end

!  *************
!  Input methods
!  *************

   read_keywords ::: get_from(OBJECT), recursive, leaky
   ! Read data from "stdin" using keyword style input.
   end

   process_keyword(keyword) ::: leaky
   ! Process command "keyword". Any required data needed by the "keyword" is
   ! inputted from "stdin".
      keyword :: STR(*)
      word :: STR
      word = keyword
      word.to_lower_case
      select case (word)
         case ("}                     ")  ! exit case
         case ("add_criteria=         "); .read_add_criteria
         case ("defragment=           "); .read_defragment
         case ("fragment_geometry=    "); .read_fragment_geometry
         case ("crystal_fragment=     "); .read_crystal_fragment
         case ("make_info             "); .make_info
         case ("partition_factors=    "); .read_partition_factors
         case ("put                   "); .put
         case ("put_tonto_input       "); .put_tonto_input
         case ("radius=               "); .read_radius
         case ("units=                "); .read_units
         case default;     UNKNOWN(word)
      end
   end

   read_units ::: get_from(OBJECT)
   ! Read a string which describes the units to be used
   end

   read_junk ::: get_from(OBJECT)
   ! Read in a junk string, useful for ignoring a field
   end

   read_add_criteria
   ! Read the add criteria, whether to add atoms by whole clusters within a
   ! certain radius of the starting fragment, or by individual atoms within a
   ! certain distance of the starting fragment.
      stdin.read(.add_criteria)
      select case (.add_criteria)
        case("within_radius         ")
        case("unit_cell             ")
        case("fragment              ")
        case("unit_cell_and_fragment")
         case default;   UNKNOWN(.add_criteria)
      end
   end

   read_defragment
   ! Read whether to defragment the cluster at the boundaries.
      stdin.read(.defragment)
    ! if (NOT .defragment AND .add_criteria=="unit_cell") then
    !    WARN("defragment= must be set TRUE when add_criteria= unit_cell")
    ! end
   end

   read_radius
   ! Read the radius of the cluster
      stdin.read(.radius)
   end

   read_partition_factors ::: leaky
   ! Read the partition factors to be used. Note that the length of this array
   ! must correspond to the number of atoms in the generated cluster in order to
   ! be used. This cannot be checked at this point in the code.
      stdin.read_ptr(.partition_factor)
   end

   read_fragment_geometry ::: leaky
   ! Read in the fragment geometry, in fractional coordinate units.
   ! NOTE: to define the Hirshfeld surface, all fragment atom positions must
   ! correspond to the positions of actual atoms in the crystal lattice.
      tmp :: REALVEC*
      ENSURE(.crystal.created,"no crystal defined")
      stdin.read_ptr(tmp)
      ENSURE(mod(tmp.dim,3)==0,"# of elements not divisible by 3")
      .n_fragment_atoms = tmp.dim/3
      .fragment_geometry.destroy
      .fragment_geometry.create(3,.n_fragment_atoms)
      .fragment_geometry = reshape(tmp,[3,.n_fragment_atoms])
      .crystal.change_geometry_to_crystal(.fragment_geometry)
      tmp.destroy
   end

   read_crystal_fragment ::: leaky
   ! Read in the crystal fragment geometry, in fractional coordinate units.
   ! NOTE: to define the Hirshfeld surface, all fragment atom positions must
   ! correspond to the positions of actual atoms in the crystal lattice.
      tmp :: REALVEC*
      stdin.read_ptr(tmp)
      ENSURE(mod(tmp.dim,3)==0,"# of elements not divisible by 3")
      .n_fragment_atoms = tmp.dim/3
      .fragment_geometry.destroy
      .fragment_geometry.create(3,.n_fragment_atoms)
      .fragment_geometry = reshape(tmp,[3,.n_fragment_atoms])
      tmp.destroy
   end

!  ***************************
!  Cluster generation routines
!  ***************************

   make_info ::: leaky
   ! Make all the cluster information from an arbitrary .fragment_geometry.
   ! NOTE: .set_defaults must be called before this.
      new_fragment :: REALMAT*
      add_criteria :: STR
      i,n_atoms :: INT
      ENSURE(.crystal.created,"no crystal")
      ENSURE(.crystal.cluster_symop.created,"no crystal cluster symops")
      ENSURE(.fragment_geometry.created,"no fragment geometry")
      if (.info_made) return
      .initialise_info_arrays
      .make_symop_list_and_geometry
      .shrink_info_arrays
      .find_fragment_atoms
      .info_made = TRUE
   end

   initialise_info_arrays ::: private, leaky
   ! Initialise all informational arrays ready for a cluster .geometry
   ! generation from a general .fragment_geometry. 
     n_max :: INT
     .destroy_cluster_info_ptr_part
     ! Initial maximum size for symop info arrays
     .n_atoms = 0
     .n_symop = 0
     n_max = 10
     .symop.create(4,n_max)
     .atom_for_cell_atom.create(.n_cell_atoms,n_max)
     .atom_for_cell_atom = 0
     ! Initial maximum size for geometry info arrays
     n_max = 10*.n_cell_atoms 
     .geometry.create(3,n_max);      .geometry = 0
     .symop_for_atom.create(n_max);  .symop_for_atom = 0
     .parent_for_atom.create(n_max); .parent_for_atom = 0
     .minimum_distance_to_atom.create(n_max)
     .closest_fragment_atom_to_atom.create(n_max)
   end

   shrink_info_arrays ::: private, leaky
   ! Shrink the informational arrays to save space.
     .symop.shrink_columns(.n_symop) 
     .atom_for_cell_atom.shrink_columns(.n_symop) 
     .geometry.shrink_columns(.n_atoms) 
     .symop_for_atom.shrink(.n_atoms)
     .parent_for_atom.shrink(.n_atoms)
     .minimum_distance_to_atom.shrink(.n_atoms)
     .closest_fragment_atom_to_atom.shrink(.n_atoms)
   end

   make_symop_list_and_geometry ::: leaky, private
   ! Make the list of symops which transform a .cell_geometry within a certain
   ! .radius of .fragment_geometry. Also make the geometry of the cluster and
   ! other informational arrays relating to the cluster. NOTE:
   ! .fragment_geometry is shifted to the origin by an offset before any cluster
   ! generating operations are done.
     symop :: INTVEC(4)
     pos,cell,hkl,fragment_width :: REALVEC(3)
     direct_cell_matrix :: REALMAT(3,3)
     atom_pair :: ATOMVEC(2)
     old_geom,new_geom,big_cluster :: REALMAT*
     hkl_op,symop_list :: INTMAT*
     cell_atom_for :: INTVEC*
     this_atom_added :: BINVEC*
     cell_length,max_dist,fragment_length,cell_a,cell_b,cell_c :: REAL
     i,n,h,h1,k,k1,l,l1,s,cell_atom,first,last :: INT
     h_max,k_max,l_max,n_cells,n_cell_atoms,max_n_atoms :: INT
     n_trial_atoms,this_atom,this_parent :: INT
     start_with_fragment,tmpbin :: BIN
     ENSURE(.crystal.created,"no crystal")
     ENSURE(.crystal.cluster_symop.created,"no crystal cluster symops")
     ENSURE(.fragment_geometry.created,"no fragment geometry")
     ENSURE(.cell_geometry.created,"no cell geometry")
     ENSURE(.crystal.unit_cell_geometry.created,"need the unit cell in the crystal")
     ! The fragment is shifted by "offset" to the origin
     .fragment_geometry = .fragment_geometry &
                        - spread(.fragment_offset,2,.n_fragment_atoms)
     ! The maximum cell distances to search for cluster atoms
     cell_length = maxval(.crystal.unit_cell_length)
     fragment_width = .crystal.cartesian_fragment_width
     fragment_length = sqrt(dot_product(fragment_width,fragment_width))
     start_with_fragment = FALSE
     select case (.add_criteria)   ! .maximum_cell_axis_distances
       case("within_radius         "); max_dist = .radius + fragment_length
!       case("unit_cell             "); max_dist = cell_length
       case("unit_cell             "); max_dist = ZERO
       case("fragment              "); max_dist = fragment_length
                                       start_with_fragment = TRUE
       case("unit_cell_and_fragment"); max_dist = fragment_length
                                       start_with_fragment = TRUE
       case default;                   UNKNOWN(.add_criteria)       
     end
!     max_dist = max_dist + cell_length

     old_geom => .crystal.unit_cell_geometry
     cell_a = .crystal.unit_cell_length(1)
     cell_b = .crystal.unit_cell_length(2)
     cell_c = .crystal.unit_cell_length(3)
     h_max = ceiling(max_dist / cell_a)+1
     k_max = ceiling(max_dist / cell_b)+1
     l_max = ceiling(max_dist / cell_c)+1
     n_cells = (2*h_max+1) * (2*k_max+1) * (2*l_max+1)
     n_cell_atoms = size(.crystal.unit_cell_geometry,2)
     max_n_atoms = n_cell_atoms*n_cells+.n_fragment_atoms
     n_trial_atoms = 0

     ! The loop structure creates a cube of unit cells around the origin.  A
     ! sphere is better than a cube, but requires a little more programming.
     big_cluster.create(3,max_n_atoms)
     big_cluster = ZERO
     symop_list.create(4,max_n_atoms)
     cell_atom_for.create(max_n_atoms)

     if (.defragment) then
       this_atom_added.create(max_n_atoms)
       this_atom_added = FALSE
     end

     ! Loop over all lattice vectors consistent with max_dist. 
     ! Loop order is [0,0,0], [0,0,-1], [0,0,1], [0,0,-2], [0,0,2], [0,-1,0] etc.
     first = 1 ! Index of current atom.
     last  = n_cell_atoms
     do h1 = 0,2*h_max
       if (mod(h1,2)==0) then; h = h1 / 2
       else;                   h = - (h1 + 1) / 2
       end
       k_max = ceiling((max_dist-abs(h)*cell_a) / cell_b)+1
       do k1 = 0,2*k_max
         if (mod(k1,2)==0) then; k = k1 / 2
         else;                   k = - (k1 + 1) / 2
         end
         k_max = ceiling((max_dist-abs(h)*cell_a-abs(k)*cell_b) / cell_c)+1
         do l1 = 0,2*l_max
           if (mod(l1,2)==0) then; l = l1 / 2
           else;                   l = - (l1 + 1) / 2
           end
           ! hkl is the displacement to shift the atoms.
           hkl = real((/h,k,l/),kind=REAL_KIND)
           ! The unit cell atom corresponding to this atom.
           cell_atom = 1
           do i=first,last
             n_trial_atoms = n_trial_atoms + 1
             big_cluster(:,i) = old_geom(:,cell_atom) + hkl
             symop_list(:,i) = (/.crystal.symop_for_unit_cell_atom(cell_atom),h,k,l/)
             cell_atom_for(i) = .crystal.fragment_atom_for(cell_atom)
             cell_atom = cell_atom + 1
           end
           first = first + n_cell_atoms
           last  = last  + n_cell_atoms 
         end
       end
     end

     ! We may want to force the fragment to be part of the outputted cluster.
     if (start_with_fragment) then
       do i = 1, .n_fragment_atoms
         n_trial_atoms = n_trial_atoms + 1
         pos = .fragment_geometry(:,i)
         tmpbin = big_cluster.has_column(pos,col=n)
         ENSURE(tmpbin,"position of fragment atom not found in large cluster")
         symop = symop_list(:,n)
         .add_new_atom(pos,symop,cell_atom_for(n))
         if (.defragment) this_atom_added(n) = TRUE
       end
     end

     ! We've got the big cluster, now extract the atoms we want.
     do i=1,n_trial_atoms
       ! The seitz operation and hkl vector the atom was translated by.
       symop = symop_list(:,i)
       pos = big_cluster(:,i)
       if (.is_new_atom(pos,symop)) then
         .add_new_atom(pos,symop,cell_atom_for(i))
         if (.defragment) this_atom_added(i) = TRUE
       end
     end

     ! Add in bonded atoms if appropriate.
     if (.defragment) then
       direct_cell_matrix = .crystal.direct_cell_matrix
       this_atom = 0
       do n=1,n_trial_atoms ! worst case is to add one atom at a time.

         this_atom = this_atom + 1
         if (this_atom > .n_atoms) exit

         this_parent = .parent_for_atom(this_atom)
         atom_pair(1) = .cell_atom(this_parent)
         atom_pair(1).pos = matmul(direct_cell_matrix,.geometry(:,this_atom))

         do i=1,n_trial_atoms
           if (this_atom_added(i)) cycle
           atom_pair(2) = .cell_atom(cell_atom_for(i))
           pos = big_cluster(:,i)
           atom_pair(2).pos = matmul(direct_cell_matrix,pos)
           if (atom_pair.bonded(1,2)) then
             this_atom_added(i) = TRUE
             symop = symop_list(:,i)
             .add_new_atom(pos,symop,cell_atom_for(i))
           end
         end
       end
       this_atom_added.destroy
     end

     cell_atom_for.destroy
     symop_list.destroy
     big_cluster.destroy
   end

   is_new_atom(pos,symop) result (res)
   ! Return TRUE only if "pos" array is to be added to .geometry.
     pos :: REALVEC(3), IN
     symop :: INTVEC(4)
     res :: BIN
     i :: INT
     res = FALSE
     if (NOT .geometry(:,1:.n_atoms).has_column(pos)) then
       select case (.add_criteria)
         ! Add only those atoms proximate to the fragment
         case("within_radius         ")
                 res = .minimum_distance_to(pos)<=.radius
         ! Add only those atoms in the first unit cell
         case("unit_cell             ")
                 res = .is_in_unit_cell(pos)
         ! Add only those atoms in the initial fragment
         case("fragment              ")
                 res = .minimum_distance_to(pos)<= TOL(10)
         ! Add only those atoms in the first unit cell or initial fragment
         case("unit_cell_and_fragment")
                 res = .minimum_distance_to(pos)<= TOL(10) OR .is_in_unit_cell(pos)
         ! Add only those atoms bonded to the existing cluster
         case default;    UNKNOWN(.add_criteria)
       end
     end
   end

   add_new_atom(pos,symop,cell_atom) ::: leaky, private
   ! Add a new atom with position "pos" into the cluster ".geometry" array, and
   ! update all the related information. "symop" is the symmetry operation that
   ! generated "pos". "cell_atom" is the index of the atom in the asymmetric
   ! unit cell fragment which is symmetrically equivalent to this atom with
   ! position "pos".
   ! NOTE: this routine should only be called if .any_new_atoms_in(pos) is TRUE.
     pos :: REALVEC(3)
     symop :: INTVEC(4)
     cell_atom :: INT
     new :: REALVEC(3)
     q,i,j,n,closest,n_col,parent :: INT
     add_atom,symop_added :: BIN
     dist :: REAL
     if (.geometry(:,1:.n_atoms).has_column(pos,eps=TOL(2))) return
     symop_added = .symop.has_column(symop,col=q) ! get symop index "q" if there
     if (NOT symop_added) then    ! Add symop to .symop table if reqd.
        n_col = .symop.dim2 
        if ((.n_symop+1)>n_col) then ! Expand .symop table if reqd.
           .symop.expand_columns(2*n_col)
           .atom_for_cell_atom.expand_columns(2*n_col)
        end
        q = .n_symop + 1
        .n_symop = q
        .symop(:,q) = symop
        symop_added = TRUE
     end
     n_col = .geometry.dim2
     if ((.n_atoms+1)>n_col) then ! Expand info arrays if reqd.
        .geometry.expand_columns(2*n_col)
        .symop_for_atom.expand(2*n_col)
        .parent_for_atom.expand(2*n_col)
        .minimum_distance_to_atom.expand(2*n_col)
        .closest_fragment_atom_to_atom.expand(2*n_col)
     end
     n = .n_atoms + 1
     .geometry(:,n) = pos
     .symop_for_atom(n) = q
     .parent_for_atom(n) = cell_atom
     .atom_for_cell_atom(cell_atom,q) = n
     dist = .minimum_distance_to(pos,closest)
     .minimum_distance_to_atom(n) = dist
     .closest_fragment_atom_to_atom(n) = closest
     .n_atoms = n
   end

   is_bonded_to(pos,p) result (res) ::: private
   ! Return TRUE only if the atom with position "pos" and parent atom index "p"
   ! is bonded to one of the cluster atoms with positions in .geometry,
   ! according to a Bragg-Slater bond-distance criteria.
     pos :: REALVEC(3), IN
     p :: INT, IN
     res :: BIN
     a,pa :: INT
     atom_pair :: ATOMVEC(2)
     ENSURE(.geometry.created,"no .geometry")
     ENSURE(.n_atoms>0,"no atoms in .geometry")
     ENSURE(.cell_atom.created,"no .cell_atom")
     ENSURE(.crystal.created,"no .cell_atom")
     res = FALSE
     do a = 1,.n_atoms
        pa = .parent_for_atom(a)
        atom_pair(1) = .cell_atom(pa)
        atom_pair(2) = .cell_atom(p)
        atom_pair(1).pos = .geometry(:,a)
        atom_pair(2).pos = pos
        atom_pair.axis_system = "crystal"
        atom_pair.convert_from_crystal(.crystal)
        res = atom_pair.bonded(1,2)
        if (res) exit
     end
   end

   is_in_unit_cell(pos) result (res) ::: private
   ! Return TRUE only if the atom with position "pos" is in the first unit cell.
     pos :: REALVEC(3)
     res :: BIN
     res = &
        pos(1)>=ZERO AND pos(1)<=ONE AND &
        pos(2)>=ZERO AND pos(2)<=ONE AND &
        pos(3)>=ZERO AND pos(3)<=ONE 
   end

   is_near_origin(pos) result (res) ::: private
   ! Return TRUE only if the atom with position "pos" is near the origin i.e. if
   ! corrdinates all have absolute value less than one.
     pos :: REALVEC(3)
     res :: BIN
     res = &
        abs(pos(1))<=ONE AND &
        abs(pos(2))<=ONE AND &
        abs(pos(3))<=ONE 
   end

   find_fragment_atoms ::: leaky, private
   ! Find the fragment atoms in the .geometry of the cluster.
     new,frag :: REALVEC(3)
     i,j,ind :: INT
     found :: BIN
     ENSURE(.n_atoms>0,"there are no atoms in the cluster!")
     .is_fragment_atom.create(.n_atoms)
     .is_fragment_atom = FALSE
     do j = 1,.n_fragment_atoms ! loop over fragment atoms
        frag = .fragment_geometry(:,j)
        found = FALSE

        do i = 1,.n_atoms
           new = .geometry(:,i) ! cluster atom position
           if (new.same_as(frag,0.005d0)) then
              found = TRUE
              .is_fragment_atom(i) = TRUE
              exit
           end
        end
!        if (NOT found) then
!           DIE("fragment atom "//trim(j.to_str)//" not found")
!        end
     end
   end

!  *******************
!  Cluster information
!  *******************

   maximum_cell_axis_distance result (res)
   ! Return the maximum distance that can be travelled along any single crystal
   ! axis direction in order that the minimum distance from the transformed
   ! fragment and the original fragment is less than the cluster radius.
     res :: REAL
     ENSURE(.crystal.created,"no crystal")
     res = .radius + dot_product(.crystal.fragment_width,.crystal.unit_cell_length)
   end

   maximum_cell_axis_distances result (res)
   ! Return the maximum distance that can be travelled along any single crstal
   ! axis direction in order that the minimum distance from the transformed
   ! fragment and the original fragment is less than the cluster radius.
     res :: REALVEC(3)
     width :: REALVEC(3)
     ENSURE(.crystal.created,"no crystal")
     width = .crystal.fragment_width
     res = .radius + 4*width*.crystal.unit_cell_length
   end

   minimum_distance_to(pos) result (res)
   ! Return the minimum atom separation between the .fragment_geometry
   ! and another geometry "pos" given in crystal axis coordinates.
     pos :: REALMAT
     res :: REAL
     i :: INT
     ENSURE(pos.dim2>0,"no atom positions")
     res = .minimum_distance_to(pos(:,1))
     do i = 2,pos.dim2
        res = min(.minimum_distance_to(pos(:,i)),res)
     end
   end

   minimum_distance_to(pos,closest_atom) result (res)
   ! Return the minimum atom separation between the .fragment_geometry
   ! and a position "pos" given in crystal axis coordinates. If present,
   ! "closest_atom" is set to the index of the atom (i.e. column) of
   ! .fragment_geometry whose position is closest to "pos".
     pos :: REALVEC(3)
     closest_atom :: INT, optional
     res :: REAL
     diff :: REALMAT*
     norms :: REALVEC*
     ENSURE(.fragment_geometry.created,"no fragment geometry")
     ENSURE(.crystal.created,"no crystal data")
     diff.create(3,.n_fragment_atoms)
     norms.create(.n_fragment_atoms)
     diff = .fragment_geometry - spread(pos,2,.n_fragment_atoms)
     .crystal.change_geometry_from_crystal(diff)  ! Put in cartesians.
     diff.get_column_norms(norms)
     res = minval(norms)
     if (present(closest_atom)) closest_atom = minval(minloc(norms))
     norms.destroy
     diff.destroy
   end

   cartesian_geometry result (res) ::: leaky
   ! Return the cartesian geometry for the cluster
     res :: REALMAT*
     ENSURE(.fragment_geometry.created,"no fragment geometry")
     ENSURE(.crystal.created,"no crystal data")
     res.create(3,.n_atoms)
     .crystal.change_geometry_from_crystal(.geometry)
   end

   cluster_width result(res)
   ! Return the width "res" of the cluster in each of the 3 axis directions.
   ! NOTE: using crystal axis system.
      res :: REALVEC(3)
      ENSURE(.geometry.created,"no fragment geometry")
      res = .geometry.max_abs_column_difference
   end

   fragment_atom result (res) ::: leaky
   ! Set up defaults
     res :: ATOMVEC(.n_fragment_atoms)
     a,n,p :: INT
     ENSURE(.n_fragment_atoms>0,"no fragment atoms")
     ENSURE(.is_fragment_atom.created,"no fragment atoms")
     ENSURE(.crystal.created,"no crystal info")
     n = 0
     do a = 1,.n_atoms
         if (NOT .is_fragment_atom(a)) cycle
         n = n + 1
         p = .parent_for_atom(a)
         res(n) = .cell_atom(p)
         res(n).pos = .geometry(:,a)
         res(n).axis_system = "crystal"
     end
     res.convert_from_crystal(.crystal)
   end

   fragment_atom_indices result (res) 
   ! Return the indices of the fragment atoms in the cluster.
     res :: INTVEC(.n_fragment_atoms)
     a,n :: INT
     ENSURE(.n_fragment_atoms>0,"no fragment atoms")
     ENSURE(.is_fragment_atom.created,"no fragment atoms")
     n = 0
     do a = 1,.n_atoms
         if (NOT .is_fragment_atom(a)) cycle
         n = n + 1
         res(n) = a
     end
   end

   nonfragment_atom_indices result (res) 
   ! Return the indices of the nonfragment atoms in the cluster.
     res :: INTVEC(.n_atoms-.n_fragment_atoms)
     a,n :: INT
     ENSURE(.n_atoms>.n_fragment_atoms,"no nonfragment atoms")
     ENSURE(.is_fragment_atom.created,"no fragment atoms")
     n = 0
     do a = 1,.n_atoms
         if (.is_fragment_atom(a)) cycle
         n = n + 1
         res(n) = a
     end
   end

!  ****************************************
!  Cluster transformations on matrices, etc
!  ****************************************

   make_partition_factors(matrix) ::: leaky
   ! Make the partition factors from the cluster-fragment mapping information.
     matrix :: REALMAT
     n_atom,a1,a2,f1,l1,f2,l2 :: INT
     first_basis_fn_for_atom,last_basis_fn_for_atom :: INTVEC*
     factor :: REAL
     ENSURE(.cell_atom.created, "no atom data")
     .cell_atom.make_atom_basis_fn_limits(first_basis_fn_for_atom,last_basis_fn_for_atom)
     n_atom = .cell_atom.n_atom
     do a1 = 1,n_atom
       f1 = first_basis_fn_for_atom(a1)
       l1 = last_basis_fn_for_atom(a1)
       do a2 = 1,n_atom
         f2 = first_basis_fn_for_atom(a2)
         l2 = last_basis_fn_for_atom(a2)
         ! Mulliken partitioning
         factor = (.partition_factor(a1)+.partition_factor(a2))/TWO
         matrix(f1:l1,f2:l2) = factor * matrix(f1:l1,f2:l2)
       end
     end
     last_basis_fn_for_atom.destroy
     first_basis_fn_for_atom.destroy
   end

   partition_density(matrix) ::: leaky
   ! Applies atomic partition factors to the density matrix, useful for zeroing
   ! out certain atoms.
     matrix :: REALMAT
     n_atom,a1,a2,f1,l1,f2,l2 :: INT
     first_basis_fn_for_atom,last_basis_fn_for_atom :: INTVEC*
     factor :: REAL
     ENSURE(.cell_atom.created, "no atom data")
     .cell_atom.make_atom_basis_fn_limits(first_basis_fn_for_atom,last_basis_fn_for_atom)
     n_atom = .cell_atom.n_atom
     do a1 = 1,n_atom
       f1 = first_basis_fn_for_atom(a1)
       l1 = last_basis_fn_for_atom(a1)
       do a2 = 1,n_atom
         f2 = first_basis_fn_for_atom(a2)
         l2 = last_basis_fn_for_atom(a2)
         ! Mulliken partitioning
         factor = (.partition_factor(a1)+.partition_factor(a2))/TWO
         matrix(f1:l1,f2:l2) = factor * matrix(f1:l1,f2:l2)
       end
     end
     last_basis_fn_for_atom.destroy
     first_basis_fn_for_atom.destroy
   end

   create_atom_list(atom) ::: leaky
   ! Make a new atom list for the cluster
   ! NOTE: basis sets are pointer copied!
     atom :: ATOMVEC*
     a,p :: INT
     ENSURE(.fragment_geometry.created, "no crystal fragment geometry")
     ENSURE(.crystal.created, "no crystal data")
     ENSURE(.cell_atom.created, "no atom data")
     ENSURE(.n_atoms>0,"no atoms in cluster")
     atom.create(.n_atoms)
     do a = 1,.n_atoms
        p = .parent_for_atom(a)            ! only one parent will do
        atom(a).copy(.cell_atom(p))        ! make copy, but .basis is a ptr copy
        atom(a).pos = .geometry(:,a)       ! crystal axis system
        atom(a).axis_system = "crystal"
     end
     atom.resolve_axis_system(.crystal)    ! change pos to cartesian
   end

   make_density_matrix(P,D,atom)
   ! Make a cluster density matrix "P" from a fragment density matrix "D", given
   ! a new cluster "atom" list (see routine create_atom_list).
     P,D :: REALMAT
     atom :: ATOMVEC
     ptr :: REALMAT3*
     tr :: REALMAT3VEC*
     tr1,tr2,pc, W :: REALMAT*
     f1,l1,s1,n1,m1,a1,c1,f2,l2,s2,n2,m2,a2,c2 :: INT
     n_shell, q,s,f3,l3,f4,l4 :: INT
     atom_for_shell, first,last, first_fn,last_fn :: INTVEC*
     ENSURE(.crystal.created, "no crystal data")
     ENSURE(.cell_atom.created, "no atom data")
     ENSURE(.cell_atom.bases_are_all_labeled,"unlabelled bases!")
     ENSURE(D.is_square AND D.dim1==.cell_atom.n_bf,"D wrong shape")
     ENSURE(P.is_square AND P.dim1==atom.n_bf,"P wrong shape")
     ENSURE(.partition_factor.created,"no partition factors")
     n_shell = .cell_atom.n_shell
     atom_for_shell => .cell_atom.atom_for_shell
     .cell_atom.make_atom_basis_fn_limits(first,last)
      atom.make_atom_basis_fn_limits(first_fn,last_fn)
     ptr => .crystal.transposed_xyz_seitz_matrices ! transposes here
     ptr.transpose_12
     tr.make_gaussian_xyz_matrices(ptr)
     ptr.destroy
     pc => .atom_pair_parent_count
     do q = 1,.n_symop
       s = .symop(1,q)
       ! Transform each shell pair by symop "s"
       do s1 = 1,n_shell
         f1 = first(s1); l1 = last(s1); n1 = (l1-f1+1)
         a1 = atom_for_shell(s1)
         c1 = .atom_for_cell_atom(a1,q) ! cluster atom index
         f3 = first_fn(c1); l3 = last_fn(c1)
         m1 = n1.inverse_triangle_number - 1
         tr1  => tr(m1).element(:,:,s)
         ! Transform 1st index of density matrix
         W.create(n1,n2)
         W = matmul(tr1,D(f1:l1,f2:l2))
         do s2 = 1, n_shell
           f2 = first(s2); l2 = last(s2); n2 = (l2-f2+2)
           a2 = atom_for_shell(s2)
           c2 = .atom_for_cell_atom(a2,q) ! cluster atom index
           f4 = first_fn(c2); l4 = last_fn(c2)
           m2 = n2.inverse_triangle_number - 1
           ! Transform 2nd index of density matrix
           tr2  => tr(m2).element(:,:,s)
           P(f3:l3,f4:l4) = P(f3:l3,f4:l4) &
                          + matmul(W,transpose(tr2))/pc(c1,c2)
         end
         W.destroy
       end
     end
     pc.destroy
     last_fn.destroy; first_fn.destroy
     last.destroy; first.destroy
     tr.destroy
     atom_for_shell.destroy
   end

   atom_pair_parent_count result(n2) ::: leaky
   ! Make the atom pair parent count, i.e. the number of times n2(i,j) a
   ! particular atom pair (i,j) is *generated from* a fragment atom pair (i',j')
   ! by the symmerty operations whose indices are stored in .symop. We divide
   ! by this factor to ensure that the pair effectively appears as being
   ! generated once, as an average of all the symmetry operations.  This is
   ! quite similar to the n2 factor in the Dacre-Elder-Dupuis-King symmetry
   ! method. For insight see:
   ! P.D. Dacre, CPL (1970) 7, 47
   ! M. Elder, IJQC (1973) 7, 75
   ! M. Dupuis and H.F> King, IJQC (1977) 11, 613
     n2 :: REALMAT*
     s1,a1,c1,s2,a2,c2 :: INT
     n_shell,q :: INT
     atom_for_shell :: INTVEC*
     ENSURE(.cell_atom.created, "no atom data")
     ENSURE(.atom_for_cell_atom.created, "no atom_for_fragment_atom data")
     n2.create(.n_atoms,.n_atoms)
     n_shell = .cell_atom.n_shell
     atom_for_shell => .cell_atom.atom_for_shell
     do q = 1,.n_symop
       ! Transform each shell pair by symop "s"
       do s1 = 1,n_shell
         a1 = atom_for_shell(s1)
         c1 = .atom_for_cell_atom(a1,q)   ! cluster atom index
         do s2 = 1, n_shell
           a2 = atom_for_shell(s2)
           c2 = .atom_for_cell_atom(a2,q) ! cluster atom index
           n2(c1,c2) = n2(c1,c2) + 1
         end
       end
     end
     atom_for_shell.destroy
   end

!  **************
!  Output methods
!  **************

   put
   ! Put the list of vertices for the object
      a,i,q :: INT
      ENSURE(.info_made,"call make_info first")
      stdout.flush
      stdout.text("Cluster information:")
      stdout.flush
      stdout.show("Radius                  =",.radius)
      stdout.show("Add criteria            =",.add_criteria)
      stdout.show("No. of atoms            =",.n_atoms)
      stdout.show("No. of fragment atoms   =",.n_fragment_atoms)
      stdout.show("No. of symops           =",.n_symop)
      stdout.show("Fragment width          =",.fragment_width)
      stdout.show("Cartesian width         =",.crystal.cartesian_fragment_width)
      stdout.show("Fragment offset         =",.fragment_offset)
      .put_cluster_table(order_atoms_by="symop")
      .put_cluster_table(order_atoms_by="atom_distance")
   end

   put_cluster_table(order_atoms_by)
   ! Put the cluster information table
      order_atoms_by :: STR(*), optional
      order :: STR
      b,a,i,q :: INT
      dist :: REAL
      list :: INTVEC*
      ENSURE(.info_made,"call make_info first")
      order = "symop"
      if (present(order_atoms_by)) order = order_atoms_by
      list.create(.n_atoms)
      if (order=="symop") then
         list = [(a,a=1,.n_atoms)]
      else if (order=="atom_distance") then
         .minimum_distance_to_atom.quick_sort(list)
      else
         DIE("unknown ordering, "//trim(order))
      end
      stdout.flush
      stdout.text("Cluster geometry (crystal axis system):")
      stdout.flush
      stdout.text("Cluster atoms are ordered by "//trim(order))
      stdout.flush
      stdout.dash(int_fields=4,real_fields=4,width=12)
      stdout.put("Atom",int_width=TRUE)
      stdout.tab(real_fields=3)
      stdout.put("Closest",int_width=TRUE)
      stdout.put("Minimum")
      stdout.put("Parent",int_width=TRUE)
      stdout.put("Parent",int_width=TRUE)
      stdout.put("Symop",width=12)
      stdout.flush
      stdout.put("#",int_width=TRUE)
      stdout.put("x")
      stdout.put("y")
      stdout.put("z")
      stdout.put("atom",int_width=TRUE)
      stdout.put("distance")
      stdout.put("atom",int_width=TRUE)
      stdout.put("symop",int_width=TRUE)
      stdout.put("s",width=3)
      stdout.put("h",width=3)
      stdout.put("k",width=3)
      stdout.put("l",width=3)
      stdout.flush
      stdout.dash(int_fields=4,real_fields=4,width=12)
      stdout.flush
      do b = 1,.n_atoms
         a = list(b)
         stdout.put(a)
         stdout.put(.geometry(1,a))
         stdout.put(.geometry(2,a))
         stdout.put(.geometry(3,a))
         stdout.put(.closest_fragment_atom_to_atom(a))
         dist = .minimum_distance_to_atom(a)
         if (dist<0) then; stdout.put("n/a")
         else;             stdout.put(dist)
         end
       ! do i = 1,size(.parent_for_atom(a).element)
       !    if (i>1) &
       !    stdout.tab(int_fields=4,real_fields=4)
            stdout.put(.parent_for_atom(a))
            q = .symop_for_atom(a)
            stdout.put(q)
            stdout.put(.symop(1,q),width=3)
            stdout.put(.symop(2,q),width=3)
            stdout.put(.symop(3,q),width=3)
            stdout.put(.symop(4,q),width=3)
            stdout.flush
       ! end
      end
      stdout.dash(int_fields=4,real_fields=4,width=12)
      list.destroy
   end

   put_tonto_input
   ! Outputs the tonto input file for the cluster, given additionally the list
   ! of atoms which was used to generate the fragment_geometry in crystal.
   ! (See routine make_reduced_group_data).
      seitz :: REALMAT3*
      therm :: REALMAT(3,3)
      a,p,s :: INT
      ENSURE(.info_made,"call make_info first")
      ENSURE(.cell_atom.created,"no atom data")
      ENSURE(.crystal.created,"no crystal data")
      ENSURE(.parent_for_atom.created,"no parent atoms")
      ENSURE(.symop_for_atom.created,"no symops for atoms")
      stdout.text("   atoms= {")
      stdout.flush
      stdout.text("      keys= { label= ")
      stdout.text('              "{ axis_system= crystal }" pos=')
      stdout.text("              basis_label=")
      stdout.text('              "{ units= angstrom^2 }" thermal_tensor= }')
      stdout.flush
      stdout.text("      data= {")
      seitz => .crystal.transposed_xyz_seitz_matrices ! transposed !
      do a = 1,.n_atoms
         p = .parent_for_atom(a)
         s = .symop_for_atom(a)
         stdout.put(.cell_atom(p).label.trim,int_width=TRUE)
         stdout.put(.geometry(1,a))
         stdout.put(.geometry(2,a))
         stdout.put(.geometry(3,a))
         stdout.put(.cell_atom(p).basis.label.trim)
         therm = .cell_atom(p).thermal_tensor
         therm.change_basis(seitz(:,:,s))
         therm.convert_to("angstrom^2")
         therm.change_basis(.crystal.reciprocal_U_cell_matrix)
         stdout.put(therm(1,1))
         stdout.put(therm(2,2))
         stdout.put(therm(3,3))
         stdout.put(therm(1,2))
         stdout.put(therm(1,3))
         stdout.put(therm(2,3))
         stdout.flush
      end
      seitz.destroy
      stdout.text("      }")
      stdout.text("   }")
      stdout.flush
   end

   put_hirshview(label)
   ! Outputs some information for the Hirshview program: the list of atoms in
   ! the cluster, their positions, and whether they are part of the generating
   ! fragment or not.
      label :: STR
      word :: STR
      n,p :: INT
      geometry :: REALMAT*
      ENSURE(.info_made,"call make_info first")
      ENSURE(.geometry.created,"no cluster geometry")
      ENSURE(.crystal.created,"no crystal data")
      ENSURE(.cell_atom.created,"no atom data")
      ENSURE(.parent_for_atom.created,"no parent atoms")
      ENSURE(.is_fragment_atom.created,"no is_fragment_atom array")
      geometry.create_copy(.geometry)
      .crystal.change_geometry_from_crystal(geometry)
      stdout.flush
      stdout.text("begin atoms " // label.trim)
      do n = 1,.n_atoms
         p = .parent_for_atom(n)
         stdout.put(.cell_atom(p).chemical_symbol)
         stdout.put(geometry(1,n))
         stdout.put(geometry(2,n))
         stdout.put(geometry(3,n))
         if (.is_fragment_atom(n)) stdout.put_text(" IN")
         stdout.flush
      end
      stdout.text("end atoms")
      geometry.destroy
   end

end
