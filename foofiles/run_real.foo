program run_dbl

! $Id$

  use TYPES
  use DBL
  use SYSTEM

#  include "macros"

  implicit none
  
  DBL :: val,x,y
  DBL :: a,b,c,fa,fb,fc,fx
  INT :: kept,n
  BIN :: done
  MAT* :: previous
! DBL :: y0; common/dbl_test2/y0

!  x = 2.58
!  n=0
!  do
!    n=n+1
!    y = (x-0.5)*(x-0.5) +2
!    x.minimise_bisect(y,previous,kept,0.00001d0,ONE,done)
!    if (n>=15) exit
!    if (done) exit
!  end
!  write(*,*) n,x,y

   test_arg1 = 2.0
   a = 1.8
   b = 1.5
   c = 1.3
   test0.find_initial_bracket(a,b,c,fa,fb,fc)
   write(*,*) a,b,c,fa,fb,fc
   test0.minimise_brent(a,b,c,x,fx,0.00001d0)
   write(*,*) x,fx

   test_arg1 = 1.0
   a = 1.8
   b = 1.5
   c = 1.3
   test0.find_initial_bracket(a,b,c,fa,fb,fc)
   write(*,*) a,b,c,fa,fb,fc
   test0.minimise_brent(a,b,c,x,fx,0.00001d0)
   write(*,*) x,fx

   tonto.report

   val = arcsin.integrate_adaptive_trapezoid(0.0d0,0.5d0,TOL(8))
   print *, "val =", val

   tonto.report

   val = arcsin.integrate_adaptive_simpson(0.0d0,0.5d0,TOL(8))
   print *, "val =", val

   tonto.report

 ! write(*,*)
 ! write(*,'(2a20)') "cumulative P","Z"
 ! x = 0.999d0
 ! y = x.z_from_p
 ! write(*,'(2f20.13)') x,y
 ! x = 0.9d0
 ! y = x.z_from_p
 ! write(*,'(2f20.13)') x,y
 ! x = 0.75d0
 ! y = x.z_from_p
 ! write(*,'(2f20.13)') x,y
 ! x = 0.5d0
 ! y = x.z_from_p
 ! write(*,'(2f20.13)') x,y
 ! x = 0.25d0
 ! y = x.z_from_p
 ! write(*,'(2f20.13)') x,y
 ! x = 0.1d0
 ! y = x.z_from_p
 ! write(*,'(2f20.13)') x,y

   tonto.report

end 
