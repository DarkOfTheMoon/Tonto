! $Id$
!---------------------------------------------------------------------------
!  IMAT4: 4 dimensional integer matrices
!  (c) dylan jayatilaka, 1998
!---------------------------------------------------------------------------
module IMAT4

   use SYSTEM

   implicit none         

#include "macros"
#include "imat4.int"

contains

   create(dim1,dim2,dim3,dim4)
   ! Create an imat4 object with the specified dimensions
      PTR :: self
      INT, IN :: dim1,dim2,dim3,dim4
      allocate(self(dim1,dim2,dim3,dim4))
      ADD_MEM(dim1*dim2*dim3*dim4*INT_SIZE)
   end

   create(lb1,ub1,lb2,ub2,lb3,ub3,lb4,ub4)
   ! Create an imat4 object with the specified bounds
      PTR :: self
      INT, IN :: lb1,lb2,lb3,lb4,ub1,ub2,ub3,ub4
      allocate(self(lb1:ub1,lb2:ub2,lb3:ub3,lb4:ub4))
      ADD_MEM((ub1-lb1+1)*(ub2-lb2+1)*(ub3-lb3+1)*(ub4-lb4+1)*INT_SIZE)
   end

   create(bounds1,bounds2,bounds3,bounds4)
   ! Create an imat4 object with the specified bounds for each dimension
      PTR :: self
      IVEC(2), IN :: bounds1,bounds2,bounds3,bounds4
      .create(bounds1(1),bounds1(2),bounds2(1),bounds2(2),bounds3(1),bounds3(2), &
         bounds4(1),bounds4(2))
   end

   destroy
   ! Destroy the imat4 object
      PTR :: self
      if (.destroyed) return
      DELETE_MEM(size(self)*INT_SIZE)
      deallocate(self)
   end

   created result(res)
   ! Returns true if self has been created
      PTR :: self
      BIN :: res
      res = associated(self)
   end

   destroyed result(res)
   ! Returns true if self has *not* been created
      PTR :: self
      BIN :: res
      res = NOT associated(self)
   end

end
