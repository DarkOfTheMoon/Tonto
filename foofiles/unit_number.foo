!---------------------------------------------------------------------------
!
! UNIT_NUMBER:  Keeps a list of the unit numbers used for I/O.
!
! Whenever you use a new unit, use "get" to get a unique number for it.
! When finished with the unit, use "free" so that the number becomes
! available for later use.
!
! The numbers start at UNIT_NUMBER_STARTING_UNIT, not one.
!
! Copyright (C) Daniel Grimwood, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!
!---------------------------------------------------------------------------

module UNIT_NUMBER

   implicit none

   used_unit_list :: VEC{INT}*, private DEFAULT_NULL

contains

   get(unit) ::: leaky
   ! Returns the next unused unit number, and updates the used_unit_list.
     unit :: INT, OUT
     old :: VEC{INT}*
     length :: INT
     if (NOT associated(used_unit_list)) then
        allocate(used_unit_list(1))
        unit = UNIT_NUMBER_STARTING_UNIT
        used_unit_list(1) = unit
     else
        length = size(used_unit_list)
        unit = UNIT_NUMBER_STARTING_UNIT-1
        do ! find the smallest unused unit number
           unit = unit + 1
           if (any(used_unit_list==unit)) then; cycle
           else; exit
           end
        end
        ! expand the array by one.
        old => used_unit_list
        nullify(used_unit_list)
        allocate(used_unit_list(length+1))
        used_unit_list(1:length) = old
        used_unit_list(length+1) = unit
        deallocate(old)
     end
   end

   free(unit) ::: leaky
   ! Removes the "unit" number from the used_unit_list.
   ! If there is no "unit" nothing is done ...
     unit :: INT, IN
     old :: VEC{INT}*
     length,position,i :: INT
     if (unit<UNIT_NUMBER_STARTING_UNIT) return
     if (NOT associated(used_unit_list)) return
     length = size(used_unit_list)
     position = 0           ! Find the position of the unit in the list
     do i = 1,length
        if (unit/=used_unit_list(i)) cycle
        position = i
        exit
     end
     if (position==0) then  ! Make sure the position exists
        WARN("Tried to free unit unsuccesfully")
        return
     end
     if (length==1) then    ! Delete if it is the last unit
        deallocate(used_unit_list)
     else                   ! Shrink if it is not the last
        do i = position,length-1
           used_unit_list(i) = used_unit_list(i+1)
        end
        ! shrink the array by one.
        old => used_unit_list
        nullify(used_unit_list)
        allocate(used_unit_list(length-1))
        used_unit_list = old(1:length-1)
        deallocate(old)
     end
   end

   flush_buffer
   ! Flush the buffer if need be.
     TONTO_FLUSH_BUFFER(.unit)
   end

end
