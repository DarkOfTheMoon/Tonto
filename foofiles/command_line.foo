!---------------------------------------------------------------------------
!
! COMMAND_LINE: Object for processing the command line. The command
! line is separated into separate items comprising unix-style options,
! their arguments, and items (which is the whole command line).
!
! Copyright (C) Dylan Jayatilaka, 2012
!
! ===
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: command_line.foo $
!---------------------------------------------------------------------------

module COMMAND_LINE

   implicit none

contains

! =================
! Memory allocation
! =================

   create ::: get_from(OBJECT), leaky
   ! Create an object
   end

   destroy ::: get_from(OBJECT), leaky
   ! Destroy an object
   end

   created result (res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has been created
      self :: PTR
      res :: BIN
   end

   destroyed result (res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has *not* been created
      self :: PTR
      res :: BIN
   end

   nullify_ptr_part
   ! Nullify the pointer parts of self
      nullify(.item)
      nullify(.option)
      nullify(.option_value)
      nullify(.arg)
   end

   destroy_ptr_part ::: leaky
   ! Destroy the pointer parts of self
      .item.destroy
      .option.destroy
      .option_value.destroy
      .arg.destroy
   end

   create_copy(object) ::: get_from(OBJECT)
   ! Create a copy of object
   end

   copy(object) ::: leaky
   ! Copy the "object"
      object :: COMMAND_LINE

      self = object

      .nullify_ptr_part

      if (object.item.created)         .item.create_copy(object.item)
      if (object.option.created)       .option.create_copy(object.option)
      if (object.option_value.created) .option_value.create_copy(object.option_value)
      if (object.arg.created)          .arg.create_copy(object.arg)

   end

! ===========
! Set methods
! ===========

   set_defaults 
   ! Set up the default settings

      .command   = "?"
      .n_items   = 0 
      .n_options = 0 
      .n_args    = 0 

   end

   process_options
   ! Process unix-style options on the command line

      value,opt :: STR
      i,length :: INT

      ! Defaults

      ! Get the command line arguments
      call get_command_argument(0,value)
      if (value==" ") value = "?"
      .command = value

      ! Loop over command line & process

      i = 0

      do 

         i = i + 1
 
         call get_command_argument(i,value,length)
 
         if (length==0) exit
 
         ! Add to item list
         .item.append(value)
 
         ! Is it an option? 
         if (value(1:1)=="-") then
 
            ! Add it to list
            opt = value
            .option.append(trim(value(2:)))
            .n_options = .n_options + 1
 
            ! Get option value
            i = i + 1
            call get_command_argument(i,value,length)
            DIE_IF(length==0,"no option argument for option "//trim(opt))
            .option_value.append(value)
 
         else
 
            ! Add command line argument
            .arg.append(value)
            .n_args = .n_args + 1
 
         end

      end

      .n_items = i - 1

   end

! ===============
! Inquiry methods
! ===============

   has_items result (res) ::: pure
   ! Return TRUE if there are items on the command line
   ! WARNING: do not confuse this with arguments.
      self :: IN
      res :: BIN
      res = .n_items>0
   end

   has_arguments result (res) ::: pure
   ! Return TRUE if there are *non-optional* arguments ...
      self :: IN
      res :: BIN
      res = .n_args>0
   end

   has_options result (res) ::: pure
   ! Return TRUE if there are any options ...
      self :: IN
      res :: BIN
      res = .n_options>0
   end

   has_option(opt) result (res) ::: pure
   ! Return TRUE if the command line has *specific* option "opt"
      self :: IN
      opt :: STR, IN
      res :: BIN

      if (.option.destroyed) then; res = FALSE
      else;                        res = any(.option==opt)
      end

   end

   value_for_option(opt) result (res) ::: pure
   ! Return the (string) value for option "opt"
      self :: IN
      opt :: STR, IN
      res :: STR

   ENSURE(.option.created,"no options given")

      i :: INT

      do i = 1,.option.dim

         if (.option(i)==opt) then
            res = .option_value(i)
            exit
         end

      end

   end

! ===
! Put
! ===

   put
   ! Put out the command line info

      stdout.flush
      stdout.text("=================")
      stdout.text("Command line info")
      stdout.text("=================")
   
      stdout.flush
      stdout.show("Command (program) name        =",.command)
      stdout.show("No. of items on command line  =",.n_items)
      stdout.show("No. of unix-style options     =",.n_options)
      stdout.show("No. of non-optional arguments =",.n_args)
   
      if (.n_items>0) then
      stdout.flush
      stdout.text("Items: ")
      stdout.put(.item,by_column=TRUE,left=TRUE)
   
      if (.n_options>0) then
      stdout.flush
      stdout.text("Options: ")
      stdout.put(.option,by_column=TRUE,left=TRUE)
      end
   
      if (.n_options>0) then
      stdout.flush
      stdout.text("Option values: ")
      stdout.put(.option_value,by_column=TRUE,left=TRUE)
      end
   
      if (.n_args>0) then
      stdout.flush
      stdout.text("Arguments: ")
      stdout.put(.arg,by_column=TRUE,left=TRUE)
      end
   
      end

   end

end
