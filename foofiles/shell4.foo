!-------------------------------------------------------------------------------
!
! SHELL4 : Group of 4 contracted gaussian SHELL1's, used mainly for integrals
! (c) Daniel Grimwood, March 1998
!
! Electron repulsion integrals from Lindh, Ryu and Liu,
! J. Chem. Phys 95(8) 5889-5897.
!
! $Id$
!-------------------------------------------------------------------------------

module SHELL4

  use TYPES
  use SYSTEM
  use INT
  use VEC
  use IVEC
  use IMAT
  use IMAT3
  use MAT
  use MAT3
  use MAT4
  use OUTPUT
  use SHELL1
  use SHELL2
  use RYS
  use GAUSSIAN4

  implicit none         

#include "macros"
#include "shell4.int"

! type shell4_type
!   SHELL1 :: a
!   SHELL1 :: b
!   SHELL1 :: c
!   SHELL1 :: d
! end

contains

  create
  ! Create a shell4 object, but no its component shells.
    PTR :: self
    nullify(self)
    allocate(self)
    ADD_MEM(SHELL4_SIZE)
    .nullify_ptr_part
  end

  create(shell_a,shell_b,shell_c,shell_d)
  ! Create a shell4 object from copies of shell1s.
    PTR :: self
    SHELL1, IN :: shell_a,shell_b,shell_c,shell_d
    .create
    .copy(shell_a,shell_b,shell_c,shell_d)
  end

  create(shell_a,shell_b,shell_c,shell_d,pos_a,pos_b,pos_c,pos_d)
  ! Create a shell4 object from copies of shells and their positions.
    PTR :: self
    SHELL, IN :: shell_a,shell_b,shell_c,shell_d
    VEC(3), IN :: pos_a,pos_b,pos_c,pos_d
    .create
    .copy(shell_a,shell_b,shell_c,shell_d,pos_a,pos_b,pos_c,pos_d)
  end

  destroy
  ! Destroy a shell4 object.
    PTR :: self
    if (associated(self)) then
      .destroy_ptr_part
      DELETE_MEM(SHELL4_SIZE)
      deallocate(self)
    end
  end

  created result(res)
  ! Returns true if self has been created
    PTR :: self
    BIN :: res
    res = associated(self)
  end

  destroyed result(res)
  ! Returns true if self has *not* been created
    PTR :: self
    BIN :: res
    res = NOT associated(self)
  end

  nullify_ptr_part
  ! Nullify the pointer parts of self
    .a.nullify_ptr_part
    .b.nullify_ptr_part
    .c.nullify_ptr_part
    .d.nullify_ptr_part
  end

  destroy_ptr_part
  ! Destroy the pointer parts of self
    .a.destroy_ptr_part
    .b.destroy_ptr_part
    .c.destroy_ptr_part
    .d.destroy_ptr_part
  end

  put(out)
  ! Put the shell4 information to file "out"
    OUTPUT :: out
    out.put("Shell a:",flush=1)
    .a.put(out)
    out.put("Shell b:",flush=1)
    .b.put(out)
    out.put("Shell c:",flush=1)
    .c.put(out)
    out.put("Shell d:",flush=1)
    .d.put(out)
    out.flush
  end

  copy(shell_a,shell_b,shell_c,shell_d) [leaky]
  ! Copy the shell4 using from shell1 objects
    SHELL1, IN :: shell_a,shell_b,shell_c,shell_d
    .a.copy(shell_a)
    .b.copy(shell_b)
    .c.copy(shell_c)
    .d.copy(shell_d)
  end

  copy(shell_a,shell_b,shell_c,shell_d,pos_a,pos_b,pos_c,pos_d) [leaky]
  ! Set the shell4 using shell objects and positions
    SHELL, IN :: shell_a,shell_b,shell_c,shell_d
    VEC, IN :: pos_a,pos_b,pos_c,pos_d
    .a.copy(shell_a,pos_a)
    .b.copy(shell_b,pos_b)
    .c.copy(shell_c,pos_c)
    .d.copy(shell_d,pos_d)
  end

  set(shell_a,shell_b,shell_c,shell_d)
  ! Set the shell4 using from shell1 objects
    SHELL1, IN :: shell_a,shell_b,shell_c,shell_d
    .a.set(shell_a)
    .b.set(shell_b)
    .c.set(shell_c)
    .d.set(shell_d)
  end

  set(shell_a,shell_b,shell_c,shell_d,pos_a,pos_b,pos_c,pos_d)
  ! Set the shell4 using shell objects and positions
    SHELL, IN :: shell_a,shell_b,shell_c,shell_d
    VEC, IN :: pos_a,pos_b,pos_c,pos_d
    .a.set(shell_a,pos_a)
    .b.set(shell_b,pos_b)
    .c.set(shell_c,pos_c)
    .d.set(shell_d,pos_d)
  end

  unnormalize
  ! Unnormalize each shell in this shell quartet
    .a.unnormalize
    .b.unnormalize
    .c.unnormalize
    .d.unnormalize
  end

  skip_ERI result (res)
  ! Whether the ERI block will be less than a cutoff value.
    BIN :: res
    VEC(3) :: AB,CD
    DBL :: factor,r2ab,r2cd,ex_a,ex_b,ex_c,ex_d,k_ab,k_cd,cc_a,cc_b,cc_c
    INT :: a,b,c,d
    DBL :: ex_a_r2ab, ex_c_r2cd
    AB = .a%pos - .b%pos
    CD = .c%pos - .d%pos
    r2ab=dot_product(AB,AB)
    r2cd=dot_product(CD,CD)
    res = TRUE
    do a = 1, .a%n_cc
      ex_a = .a%ex(a)
      cc_a = .a%cc(a)
      ex_a_r2ab = ex_a * r2ab
      do b = 1, .b%n_cc
        ex_b = .b%ex(b)
        cc_b = .b%cc(b) * cc_a
        k_ab = sign(ex_a_r2ab * ex_b / (ex_a + ex_b),-1.0d0)
        do c = 1, .c%n_cc
          ex_c = .c%ex(c)
          cc_c = .c%cc(c) * cc_b
          ex_c_r2cd = ex_c * r2cd
          do d = 1, .d%n_cc
            ex_d = .d%ex(d)
            k_cd = sign(ex_c_r2cd * ex_d / (ex_c + ex_d),-1.0d0)
            factor = abs(exp(k_ab + k_cd) * cc_c * .d%cc(d))
            if (factor > SHELL4_ERI_CUTOFF) then
              res = FALSE
              return
            end
          end
        end
      end
    end
  end

!  **********************
!  CADPAC-style integrals
!  **********************

   make_ERI_ints(I)
   ! Make the ERI integral matrix, using Gauss-Hermite quadrature, like in
   ! CADPAC.
   ! This is not expected to be as efficient as Daniel's code, below!
   ! But probably much easier to understand.
      MAT4 :: I
      MAT4, PTR :: II
      GAUSSIAN4 :: G
      INT :: a,b,c,d
      I = ZERO
      II.create(.a%n_comp,.b%n_comp,.c%n_comp,.d%n_comp)
      G%l_a   = .a%l;   G%l_b   = .b%l;   G%l_c   = .c%l;   G%l_d   = .d%l
      G%pos_a = .a%pos; G%pos_b = .b%pos; G%pos_c = .c%pos; G%pos_d = .d%pos
      do a = 1,.a%n_cc
      do b = 1,.b%n_cc
      do c = 1,.c%n_cc
      do d = 1,.d%n_cc
         G%ex_a = .a%ex(a)
         G%ex_b = .b%ex(b)
         G%ex_c = .c%ex(c)
         G%ex_d = .d%ex(d)
         G.make_ERI_ints(II)
         I = I + II*.a%cc(a)*.b%cc(b)*.c%cc(c)*.d%cc(d)
      end
      end
      end
      end
      II.destroy
      .to_normalize(I)
   end

   make_spin_orbit_ints(Sx,Sy,Sz,Ox,Oy,Oz)
   ! Make the spin same orbit integrals, "Sx", ... , and the
   ! spin other orbit integrals "Ox", ... , using 
   ! Gauss-Hermite quadrature. Probably not the best implementation.
      MAT4 :: Sx,Sy,Sz,Ox,Oy,Oz
      MAT4, PTR :: SSx,SSy,SSz,OOx,OOy,OOz
      GAUSSIAN4 :: G
      INT :: a,b,c,d,na,nb,nc,nd
      DBL :: cc
      Sx = ZERO; Sy = ZERO; Sz = ZERO
      Ox = ZERO; Oy = ZERO; Oz = ZERO
      na = .a%n_comp; nb = .b%n_comp; nc =.c%n_comp; nd =.d%n_comp
      SSx.create(na,nb,nc,nd); SSy.create(na,nb,nc,nd); SSz.create(na,nb,nc,nd)
      OOx.create(na,nb,nc,nd); OOy.create(na,nb,nc,nd); OOz.create(na,nb,nc,nd)
      G%l_a   = .a%l;   G%l_b   = .b%l;   G%l_c   = .c%l;   G%l_d   = .d%l
      G%pos_a = .a%pos; G%pos_b = .b%pos; G%pos_c = .c%pos; G%pos_d = .d%pos
      do a = 1,.a%n_cc
      do b = 1,.b%n_cc
      do c = 1,.c%n_cc
      do d = 1,.d%n_cc
         G%ex_a = .a%ex(a)
         G%ex_b = .b%ex(b)
         G%ex_c = .c%ex(c)
         G%ex_d = .d%ex(d)
         G.make_spin_orbit_ints(SSx,SSy,SSz,OOx,OOy,OOz)
         cc = .a%cc(a)*.b%cc(b)*.c%cc(c)*.d%cc(d)
         Sx = Sx + SSx*cc; Sy = Sy + SSy*cc; Sz = Sz + SSz*cc
         Ox = Ox + OOx*cc; Oy = Oy + OOy*cc; Oz = Oz + OOz*cc
      end 
      end
      end
      end
      OOz.destroy; OOy.destroy; OOx.destroy
      SSz.destroy; SSy.destroy; SSx.destroy
      .to_normalize(Sx); .to_normalize(Sy); .to_normalize(Sz)
      .to_normalize(Ox); .to_normalize(Oy); .to_normalize(Oz)
   end

   make_spin_spin_dipole_ints(Dxx,Dyy,Dzz,Dxy,Dxz,Dyz)
   ! Make the spin spin magnetic dipole integrals, "Dij"
   ! using Gauss-Hermite quadrature. For sure, not the 
   ! best implementation, but where else will you get em', eh?
      MAT4 :: Dxx,Dyy,Dzz,Dxy,Dxz,Dyz
      MAT4, PTR :: Mxx,Myy,Mzz,Mxy,Mxz,Myz
      GAUSSIAN4 :: G
      INT :: a,b,c,d,na,nb,nc,nd
      DBL :: cc
      Dxx = ZERO; Dyy = ZERO; Dzz = ZERO
      Dxy = ZERO; Dxz = ZERO; Dyz = ZERO
      na = .a%n_comp; nb = .b%n_comp; nc =.c%n_comp; nd =.d%n_comp
      Mxx.create(na,nb,nc,nd); Myy.create(na,nb,nc,nd); Mzz.create(na,nb,nc,nd)
      Mxy.create(na,nb,nc,nd); Mxz.create(na,nb,nc,nd); Myz.create(na,nb,nc,nd)
      G%l_a   = .a%l;   G%l_b   = .b%l;   G%l_c   = .c%l;   G%l_d   = .d%l
      G%pos_a = .a%pos; G%pos_b = .b%pos; G%pos_c = .c%pos; G%pos_d = .d%pos
      do a = 1,.a%n_cc
      do b = 1,.b%n_cc
      do c = 1,.c%n_cc
      do d = 1,.d%n_cc
         G%ex_a = .a%ex(a)
         G%ex_b = .b%ex(b)
         G%ex_c = .c%ex(c)
         G%ex_d = .d%ex(d)
         G.make_spin_spin_dipole_ints(Mxx,Myy,Mzz,Mxy,Mxz,Myz)
         cc = .a%cc(a)*.b%cc(b)*.c%cc(c)*.d%cc(d)
         Dxx = Dxx + Mxx*cc; Dyy = Dyy + Myy*cc; Dzz = Dzz + Mzz*cc
         Dxy = Dxy + Mxy*cc; Dxz = Dxz + Mxz*cc; Dyz = Dyz + Myz*cc
      end 
      end
      end
      end
      Myz.destroy; Mxz.destroy; Mxy.destroy
      Mzz.destroy; Myy.destroy; Mxx.destroy
      .to_normalize(Dxx); .to_normalize(Dyy); .to_normalize(Dzz)
      .to_normalize(Dxy); .to_normalize(Dxz); .to_normalize(Dyz)
   end

!  ****************************
!  Roland Lindh-style integrals
!  ****************************

  get_eri(abcd)
  ! The main routine to produce the block (ab|cd)
  ! (uses the transfer equation to make (ab|cd) from (es|fs))
  ! The routines are now all specialised, they will break if you use the wrong
  ! one.  Best to just use this main routine.
    IN :: self
    MAT4, INOUT :: abcd
    MAT3, PTR :: escd
    MAT, PTR :: esfs
    VEC, PTR :: ssfs,esss
    SHELL2, PTR :: sh
    INT :: n_e,n_f,eub,fub

    n_e = .a%l + .b%l
    n_f = .c%l + .d%l

    if (n_e==0 AND n_f==0) then
      .make_ssss_eri(abcd)
    else
      nullify(esfs)
      nullify(escd)
      if (n_e==0) then
        if (n_f==1) then
          ssfs.create(3)
          .make_ssps(ssfs)
          if (.c%l == 1) abcd(1,1,:,1) = ssfs
          if (.d%l == 1) abcd(1,1,1,:) = ssfs ! really an else statement.
          ssfs.destroy
        else
          fub = n_f.n_comp_sum - (max(.c%l,.d%l)-1).n_comp_sum
          ssfs.create(fub)
          .make_ssfs(ssfs)
          sh.create(.c,.d)
          sh.transfer(ssfs,abcd(1,1,:,:))
          sh.destroy
          ssfs.destroy
        end
      else if (n_f==0) then
        if (n_e==1) then
          esss.create(3)
          .make_psss(esss)
          if (.a%l == 1) abcd(:,1,1,1) = esss
          if (.b%l == 1) abcd(1,:,1,1) = esss
          esss.destroy
        else
          eub = n_e.n_comp_sum - (max(.a%l,.b%l)-1).n_comp_sum
          esss.create(eub)
          .make_esss(esss)
          sh.create(.a,.b)
          sh.transfer(esss,abcd(:,:,1,1))
          sh.destroy
          ssfs.destroy
        end
      else
        eub = n_e.n_comp_sum - (max(.a%l,.b%l)-1).n_comp_sum
        fub = n_f.n_comp_sum - (max(.c%l,.d%l)-1).n_comp_sum
        esfs.create(eub,fub)
        .make_esfs(esfs)
        escd.create(eub, .c%n_comp, .d%n_comp)
        .transfer(esfs,escd)
        .transfer(escd,abcd)
        escd.destroy
        esfs.destroy
      end
      .to_normalize(abcd)
    end
  end

  make_esfs(esfs)
  ! Creates the initial (es|fs) integrals, summed over the primitives
    IN :: self
    MAT, INOUT:: esfs
    MAT3, PTR :: esfsadd
    MAT4, PTR :: Ix,Iy,Iz
    RYS, PTR :: rysa
    VEC(3) :: P,Q,PAi,QCi,QPi,ara,crc,AB,CD,C_tmp,A_tmp
    DBL :: QP2,a,b,c,d,zeta,kab,eta,kcd,xx,r2ab,r2cd
    INT :: ag,bg,cg,dg,nroots,eub,fub,dim1,dim2,i,n_cc,n_e,n_f
    DBL :: norma,normb,normc,zinvi,rhoi,einvi,norm
    IVEC, PTR :: e_x,e_y,e_z,f_x,f_y,f_z
    VEC, PTR :: rho,zinv,einv
    MAT, PTR :: weights,roots,PA,QC,QP

    n_cc = .a%n_cc * .b%n_cc * .c%n_cc * .d%n_cc
    n_e = .a%l + .b%l
    n_f = .c%l + .d%l
    eub = n_e.n_comp_sum - (max(.a%l,.b%l)-1).n_comp_sum
    fub = n_f.n_comp_sum - (max(.c%l,.d%l)-1).n_comp_sum

    dim1 = n_e + 1
    dim2 = n_f + 1
    nroots = (dim1+dim2)/2

    AB = .a%pos - .b%pos
    CD = .c%pos - .d%pos
    r2ab=dot_product(AB,AB)
    r2cd=dot_product(CD,CD)
    if (.a%l > .b%l) then
      A_tmp = .a%pos
    else
      A_tmp = .b%pos
    end
    if (.c%l > .d%l) then
      C_tmp = .c%pos
    else
      C_tmp = .d%pos
    end

    weights.create(n_cc,nroots)
    roots.create(n_cc,nroots)
    rho.create(n_cc)
    zinv.create(n_cc)
    einv.create(n_cc)
    PA.create(3,n_cc)
    QC.create(3,n_cc)
    QP.create(3,n_cc)

    rysa.create(nroots)
    i = 1
    do ag = 1, .a%n_cc
      a     = .a%ex(ag) 
      norma = TWOPI5ON2 * .a%cc(ag)
      ara   = a* .a%pos
      do bg = 1, .b%n_cc
        b       = .b%ex(bg)
        zeta    = a + b
        zinvi   = ONE / zeta
        kab     = sqrt(zinvi) * zinvi * exp(-a * b * r2ab * zinvi)
        normb   = norma * .b%cc(bg) * kab
        P       = (ara + b* .b%pos) * zinvi
        PAi     = P - A_tmp
        do cg = 1, .c%n_cc
          normc = normb * .c%cc(cg)
          c     = .c%ex(cg)
          crc   = c* .c%pos
          do dg = 1, .d%n_cc
            d     = .d%ex(dg)
            eta   = c + d
            einvi = ONE / eta
            kcd   = exp(-c * d * r2cd * einvi)
            Q     = (crc + d * .d%pos) * einvi
            QCi   = Q - C_tmp
            QPi   = Q - P
            QP2   = dot_product(QPi,QPi)
            rhoi  = zeta * eta / (zeta + eta)
            xx    = rhoi * QP2
            rysa.get_weights(xx)
            norm  = normc* .d%cc(dg)*sqrt(rhoi*einvi)*einvi*kcd
            weights(i,:) = rysa%w * norm
            roots(i,:) = rysa%r
            rho(i)  = rhoi
            einv(i) = einvi
            zinv(i) = zinvi
            PA(:,i) = PAi
            QC(:,i) = QCi
            QP(:,i) = QPi
            i = i + 1
          end
        end
      end
    end
    rysa.destroy

    Ix.create(n_cc,nroots,dim1,dim2)
    Iy.create(n_cc,nroots,dim1,dim2)
    Iz.create(n_cc,nroots,dim1,dim2)
    .form_2d_ints(Ix,Iy,Iz,nroots,roots,rho,zinv,einv,PA,QC,QP,n_cc)
    .form_esfs(Ix,Iy,Iz,weights,esfs,eub,fub,nroots,dim1,dim2,n_cc)
    Iz.destroy
    Iy.destroy
    Ix.destroy

    QP.destroy
    QC.destroy
    PA.destroy
    einv.destroy
    zinv.destroy
    rho.destroy
    roots.destroy
    weights.destroy
  end

  form_2d_ints(Ix,Iy,Iz,nroots,t2,rho,zinv,einv,PA,QC,QP,n_cc)
  ! Forms the two dimentional integrals
    IN :: self
    MAT4, target, OUT :: Ix,Iy,Iz
    INT, IN :: nroots,n_cc
    MAT :: t2,PA,QC,QP
    VEC, IN :: rho,zinv,einv
    MAT(n_cc,nroots) :: ce,cf,bb,ce1
    MAT, PTR :: Ix12,Iy12,Iz12,Ix21,Iy21,Iz21,Ix22,Iy22,Iz22
    MAT, PTR :: Ixa,Ixb,Ixc,Ixd,Iya,Iyb,Iyc,Iyd,Iza,Izb,Izc,Izd ! temp matrices
    MAT, PTR :: Ixe,Iye,Ize,Ixf,Iyf,Izf
    INT :: e,f,e1,f1,fp1,ep1,n_e,n_f,i,n
    DBL :: tmp,tmp2,tmp3
    
    n_e = .a%l + .b%l
    n_f = .c%l + .d%l
    Ix(:,:,1,1) = ONE
    Iy(:,:,1,1) = ONE
    Iz(:,:,1,1) = ONE

    select case (n_f)
      case (0)
        select case (n_e)
          case (0)                         ! n_f = 0, n_e = 0
          case (1)                         ! n_f = 0, n_e = 1
            Ix21 => Ix(:,:,2,1)
            Iy21 => Iy(:,:,2,1)
            Iz21 => Iz(:,:,2,1)
            do n=1,nroots
              do i=1,n_cc
                tmp = t2(i,n) * zinv(i) * rho(i)
                Ix21(i,n) = PA(1,i) + tmp * QP(1,i)
                Iy21(i,n) = PA(2,i) + tmp * QP(2,i)
                Iz21(i,n) = PA(3,i) + tmp * QP(3,i)
              end
            end
          case default                     ! n_f = 0, n_e = *
            Ix21 => Ix(:,:,2,1)
            Iy21 => Iy(:,:,2,1)
            Iz21 => Iz(:,:,2,1)
            do n=1,nroots
              do i=1,n_cc
                tmp = t2(i,n) * zinv(i) * rho(i)
                ce(i,n) = (ONE - tmp) * HALF * zinv(i)
                Ix21(i,n) = PA(1,i) + tmp * QP(1,i)
                Iy21(i,n) = PA(2,i) + tmp * QP(2,i)
                Iz21(i,n) = PA(3,i) + tmp * QP(3,i)
              end
            end
            do e = 2, n_e
              e1  = e - 1
              ep1 = e + 1
              Ixa => Ix(:,:,ep1,1); Iya => Iy(:,:,ep1,1); Iza => Iz(:,:,ep1,1)
              Ixb => Ix(:,:,e,1);   Iyb => Iy(:,:,e,1);   Izb => Iz(:,:,e,1)
              Ixc => Ix(:,:,e1,1);  Iyc => Iy(:,:,e1,1);  Izc => Iz(:,:,e1,1)
              do n=1,nroots
                do i=1,n_cc
                  tmp = e1 * ce(i,n)
                  Ixa(i,n) = Ix21(i,n) * Ixb(i,n) + tmp * Ixc(i,n)
                  Iya(i,n) = Iy21(i,n) * Iyb(i,n) + tmp * Iyc(i,n)
                  Iza(i,n) = Iz21(i,n) * Izb(i,n) + tmp * Izc(i,n)
                end
              end
            end
        end
      case (1)
        select case (n_e)
          case (0)                         ! n_f = 1, n_e = 0
            Ix12 => Ix(:,:,1,2); Iy12 => Iy(:,:,1,2); Iz12 => Iz(:,:,1,2)
            do n=1,nroots
              do i=1,n_cc
                tmp = t2(i,n) * rho(i) * einv(i)
                Ix12(i,n) = QC(1,i) - tmp * QP(1,i)
                Iy12(i,n) = QC(2,i) - tmp * QP(2,i)
                Iz12(i,n) = QC(3,i) - tmp * QP(3,i)
              end
            end
          case (1)                         ! n_f = 1, n_e = 1
            Ix12 => Ix(:,:,1,2); Iy12 => Iy(:,:,1,2); Iz12 => Iz(:,:,1,2)
            Ix21 => Ix(:,:,2,1); Iy21 => Iy(:,:,2,1); Iz21 => Iz(:,:,2,1)
            Ix22 => Ix(:,:,2,2); Iy22 => Iy(:,:,2,2); Iz22 => Iz(:,:,2,2)
            do n=1,nroots
              do i=1,n_cc
                tmp  = t2(i,n) * rho(i) * zinv(i)
                tmp3 = t2(i,n) * rho(i) * einv(i)
                tmp2 = tmp * HALF * einv(i)
                Ix12(i,n) = QC(1,i) - tmp3 * QP(1,i)
                Iy12(i,n) = QC(2,i) - tmp3 * QP(2,i)
                Iz12(i,n) = QC(3,i) - tmp3 * QP(3,i)
                Ix21(i,n) = PA(1,i) + tmp * QP(1,i)
                Iy21(i,n) = PA(2,i) + tmp * QP(2,i)
                Iz21(i,n) = PA(3,i) + tmp * QP(3,i)
                Ix22(i,n) = Ix12(i,n) * Ix21(i,n) + tmp2
                Iy22(i,n) = Iy12(i,n) * Iy21(i,n) + tmp2
                Iz22(i,n) = Iz12(i,n) * Iz21(i,n) + tmp2
              end
            end
          case default                     ! n_f = 1, n_e = *
            Ix12 => Ix(:,:,1,2); Iy12 => Iy(:,:,1,2); Iz12 => Iz(:,:,1,2)
            Ix21 => Ix(:,:,2,1); Iy21 => Iy(:,:,2,1); Iz21 => Iz(:,:,2,1)
            Ix22 => Ix(:,:,2,2); Iy22 => Iy(:,:,2,2); Iz22 => Iz(:,:,2,2)
            do n=1,nroots
              do i=1,n_cc
                tmp  = t2(i,n) * rho(i) * zinv(i)
                tmp3 = t2(i,n) * rho(i) * einv(i)
                tmp2 = tmp * HALF * einv(i)
                ce(i,n) = (ONE - tmp) * HALF * zinv(i)
                bb(i,n) = tmp2
                Ix12(i,n) = QC(1,i) - tmp3 * QP(1,i)
                Iy12(i,n) = QC(2,i) - tmp3 * QP(2,i)
                Iz12(i,n) = QC(3,i) - tmp3 * QP(3,i)
                Ix21(i,n) = PA(1,i) + tmp * QP(1,i)
                Iy21(i,n) = PA(2,i) + tmp * QP(2,i)
                Iz21(i,n) = PA(3,i) + tmp * QP(3,i)
                Ix22(i,n) = Ix12(i,n) * Ix21(i,n) + tmp2
                Iy22(i,n) = Iy12(i,n) * Iy21(i,n) + tmp2
                Iz22(i,n) = Iz12(i,n) * Iz21(i,n) + tmp2
              end
            end
            do e = 2, n_e
              e1  =e - 1
              ep1 =e + 1
              Ixa => Ix(:,:,ep1,1); Iya => Iy(:,:,ep1,1); Iza => Iz(:,:,ep1,1)
              Ixb => Ix(:,:,e,1);   Iyb => Iy(:,:,e,1);   Izb => Iz(:,:,e,1)
              Ixc => Ix(:,:,e1,1);  Iyc => Iy(:,:,e1,1);  Izc => Iz(:,:,e1,1)
              do n=1,nroots
                do i=1,n_cc
                  tmp = e1 * ce(i,n)
                  ce1(i,n) = tmp
                  Ixa(i,n) = Ix21(i,n) * Ixb(i,n) + tmp * Ixc(i,n)
                  Iya(i,n) = Iy21(i,n) * Iyb(i,n) + tmp * Iyc(i,n)
                  Iza(i,n) = Iz21(i,n) * Izb(i,n) + tmp * Izc(i,n)
                end
              end
              do f1=1, n_f
                f = f1 + 1
                Ixa => Ix(:,:,ep1,f); Iya => Iy(:,:,ep1,f); Iza => Iz(:,:,ep1,f)
                Ixb => Ix(:,:,e,f);   Iyb => Iy(:,:,e,f);   Izb => Iz(:,:,e,f)
                Ixc => Ix(:,:,e1,f);  Iyc => Iy(:,:,e1,f);  Izc => Iz(:,:,e1,f)
                Ixd => Ix(:,:,e,f1);  Iyd => Iy(:,:,e,f1);  Izd => Iz(:,:,e,f1)
                do n=1,nroots
                  do i=1,n_cc
                    tmp = ce1(i,n)
                    tmp2 = f1*bb(i,n)
                    Ixa(i,n) = Ix21(i,n)*Ixb(i,n) + tmp*Ixc(i,n) + tmp2*Ixd(i,n)
                    Iya(i,n) = Iy21(i,n)*Iyb(i,n) + tmp*Iyc(i,n) + tmp2*Iyd(i,n)
                    Iza(i,n) = Iz21(i,n)*Izb(i,n) + tmp*Izc(i,n) + tmp2*Izd(i,n)
                  end
                end
              end
            end
        end
      case default
        select case (n_e)
          case (0)                         ! n_f = *, n_e = 0
            Ix12 => Ix(:,:,1,2); Iy12 => Iy(:,:,1,2); Iz12 => Iz(:,:,1,2)
            do n=1,nroots
              do i=1,n_cc
                tmp3 = t2(i,n) * rho(i) * einv(i)
                Ix12(i,n) = QC(1,i) - tmp3 * QP(1,i)
                Iy12(i,n) = QC(2,i) - tmp3 * QP(2,i)
                Iz12(i,n) = QC(3,i) - tmp3 * QP(3,i)
                cf(i,n) = (ONE - tmp3) * HALF * einv(i)
              end
            end
            do f = 2,n_f
              f1  = f - 1
              fp1 = f + 1
              Ixa => Ix(:,:,1,fp1); Iya => Iy(:,:,1,fp1); Iza => Iz(:,:,1,fp1)
              Ixb => Ix(:,:,1,f);   Iyb => Iy(:,:,1,f);   Izb => Iz(:,:,1,f)
              Ixc => Ix(:,:,1,f1);  Iyc => Iy(:,:,1,f1);  Izc => Iz(:,:,1,f1)
              do n=1,nroots
                do i=1,n_cc
                  tmp = f1*cf(i,n)
                  Ixa(i,n) = Ix12(i,n) * Ixb(i,n) + tmp * Ixc(i,n)
                  Iya(i,n) = Iy12(i,n) * Iyb(i,n) + tmp * Iyc(i,n)
                  Iza(i,n) = Iz12(i,n) * Izb(i,n) + tmp * Izc(i,n)
                end
              end
            end
          case (1)                         ! n_f = *, n_e = 1
            Ix12 => Ix(:,:,1,2); Iy12 => Iy(:,:,1,2); Iz12 => Iz(:,:,1,2)
            Ix21 => Ix(:,:,2,1); Iy21 => Iy(:,:,2,1); Iz21 => Iz(:,:,2,1)
            Ix22 => Ix(:,:,2,2); Iy22 => Iy(:,:,2,2); Iz22 => Iz(:,:,2,2)
            do n=1,nroots
              do i=1,n_cc
                tmp  = t2(i,n) * rho(i) * zinv(i)
                tmp3 = t2(i,n) * rho(i) * einv(i)
                tmp2 = tmp * HALF * einv(i)
                cf(i,n) = (ONE - tmp3) * HALF * einv(i)
                bb(i,n) = tmp2
                Ix12(i,n) = QC(1,i) - tmp3 * QP(1,i)
                Iy12(i,n) = QC(2,i) - tmp3 * QP(2,i)
                Iz12(i,n) = QC(3,i) - tmp3 * QP(3,i)
                Ix21(i,n) = PA(1,i) + tmp * QP(1,i)
                Iy21(i,n) = PA(2,i) + tmp * QP(2,i)
                Iz21(i,n) = PA(3,i) + tmp * QP(3,i)
                Ix22(i,n) = Ix12(i,n) * Ix21(i,n) + tmp2
                Iy22(i,n) = Iy12(i,n) * Iy21(i,n) + tmp2
                Iz22(i,n) = Iz12(i,n) * Iz21(i,n) + tmp2
              end
            end
            do f=2,n_f
              f1  = f - 1
              fp1 = f + 1
              Ixa => Ix(:,:,2,fp1); Iya => Iy(:,:,2,fp1); Iza => Iz(:,:,2,fp1)
              Ixb => Ix(:,:,2,f);   Iyb => Iy(:,:,2,f);   Izb => Iz(:,:,2,f)
              Ixc => Ix(:,:,2,f1);  Iyc => Iy(:,:,2,f1);  Izc => Iz(:,:,2,f1)
              Ixd => Ix(:,:,1,fp1); Iyd => Iy(:,:,1,fp1); Izd => Iz(:,:,1,fp1)
              Ixe => Ix(:,:,1,f);   Iye => Iy(:,:,1,f);   Ize => Iz(:,:,1,f)
              Ixf => Ix(:,:,1,f1);  Iyf => Iy(:,:,1,f1);  Izf => Iz(:,:,1,f1)
              do i=1,n_cc
                do n=1,nroots
                  tmp = f1 * cf(i,n)
                  tmp2 = bb(i,n)
                  Ixd(i,n) = Ix12(i,n) * Ixe(i,n) + tmp * Ixf(i,n)
                  Iyd(i,n) = Iy12(i,n) * Iye(i,n) + tmp * Iyf(i,n)
                  Izd(i,n) = Iz12(i,n) * Ize(i,n) + tmp * Izf(i,n)
                  Ixa(i,n) = Ix12(i,n)*Ixb(i,n) + tmp*Ixc(i,n) + tmp2*Ixe(i,n)
                  Iya(i,n) = Iy12(i,n)*Iyb(i,n) + tmp*Iyc(i,n) + tmp2*Iye(i,n)
                  Iza(i,n) = Iz12(i,n)*Izb(i,n) + tmp*Izc(i,n) + tmp2*Ize(i,n)
                end
              end
            end
          case default                     ! n_f = *, n_e = *
            Ix12 => Ix(:,:,1,2); Iy12 => Iy(:,:,1,2); Iz12 => Iz(:,:,1,2)
            Ix21 => Ix(:,:,2,1); Iy21 => Iy(:,:,2,1); Iz21 => Iz(:,:,2,1)
            Ix22 => Ix(:,:,2,2); Iy22 => Iy(:,:,2,2); Iz22 => Iz(:,:,2,2)
            do n=1,nroots
              do i=1,n_cc
                tmp =  t2(i,n) * rho(i) * zinv(i)
                tmp3 = t2(i,n) * rho(i) * einv(i)
                tmp2 = tmp * HALF * einv(i)
                cf(i,n) = (ONE - tmp3) * HALF * einv(i)
                ce(i,n) = (ONE - tmp)  * HALF * zinv(i)
                bb(i,n) = tmp2
                Ix12(i,n) = QC(1,i) - tmp3 * QP(1,i)
                Iy12(i,n) = QC(2,i) - tmp3 * QP(2,i)
                Iz12(i,n) = QC(3,i) - tmp3 * QP(3,i)
                Ix21(i,n) = PA(1,i) + tmp * QP(1,i)
                Iy21(i,n) = PA(2,i) + tmp * QP(2,i)
                Iz21(i,n) = PA(3,i) + tmp * QP(3,i)
                Ix22(i,n) = Ix12(i,n) * Ix21(i,n) + tmp2
                Iy22(i,n) = Iy12(i,n) * Iy21(i,n) + tmp2
                Iz22(i,n) = Iz12(i,n) * Iz21(i,n) + tmp2
              end
            end
            do f = 2,n_f
              f1  = f - 1
              fp1 = f + 1
              Ixa => Ix(:,:,1,fp1); Iya => Iy(:,:,1,fp1); Iza => Iz(:,:,1,fp1)
              Ixb => Ix(:,:,1,f);   Iyb => Iy(:,:,1,f);   Izb => Iz(:,:,1,f)
              Ixc => Ix(:,:,1,f1);  Iyc => Iy(:,:,1,f1);  Izc => Iz(:,:,1,f1)
              do n=1,nroots
                do i=1,n_cc
                  tmp = f1*cf(i,n)
                  Ixa(i,n) = Ix12(i,n) * Ixb(i,n) + tmp * Ixc(i,n)
                  Iya(i,n) = Iy12(i,n) * Iyb(i,n) + tmp * Iyc(i,n)
                  Iza(i,n) = Iz12(i,n) * Izb(i,n) + tmp * Izc(i,n)
                end
              end
            end
            do e = 2, n_e
              e1  = e - 1
              ep1 = e + 1
              Ixa => Ix(:,:,ep1,1); Iya => Iy(:,:,ep1,1); Iza => Iz(:,:,ep1,1)
              Ixb => Ix(:,:,e,1);   Iyb => Iy(:,:,e,1);   Izb => Iz(:,:,e,1)
              Ixc => Ix(:,:,e1,1);  Iyc => Iy(:,:,e1,1);  Izc => Iz(:,:,e1,1)
              do n=1,nroots
                do i=1,n_cc
                  tmp = e1 * ce(i,n)
                  Ixa(i,n) = Ix21(i,n) * Ixb(i,n) + tmp * Ixc(i,n)
                  Iya(i,n) = Iy21(i,n) * Iyb(i,n) + tmp * Iyc(i,n)
                  Iza(i,n) = Iz21(i,n) * Izb(i,n) + tmp * Izc(i,n)
                end
              end
            end
            do f=2,n_f
              f1  = f - 1
              fp1 = f + 1
              Ixa => Ix(:,:,2,fp1); Iya => Iy(:,:,2,fp1); Iza => Iz(:,:,2,fp1)
              Ixb => Ix(:,:,2,f);   Iyb => Iy(:,:,2,f);   Izb => Iz(:,:,2,f)
              Ixc => Ix(:,:,2,f1);  Iyc => Iy(:,:,2,f1);  Izc => Iz(:,:,2,f1)
              Ixd => Ix(:,:,1,f);   Iyd => Iy(:,:,1,f);   Izd => Iz(:,:,1,f)
              do n=1,nroots
                do i=1,n_cc
                  tmp = f1 * cf(i,n)
                  tmp2 = bb(i,n)
                  Ixa(i,n) = Ix12(i,n)*Ixb(i,n) + tmp*Ixc(i,n) + tmp2*Ixd(i,n)
                  Iya(i,n) = Iy12(i,n)*Iyb(i,n) + tmp*Iyc(i,n) + tmp2*Iyd(i,n)
                  Iza(i,n) = Iz12(i,n)*Izb(i,n) + tmp*Izc(i,n) + tmp2*Izd(i,n)
                end
              end
            end
            do e = 2, n_e
              e1  =e - 1
              ep1 =e + 1
              ce1 =e1 * ce
              do f1=1, n_f
                f = f1 + 1
                Ixa => Ix(:,:,ep1,f); Iya => Iy(:,:,ep1,f); Iza => Iz(:,:,ep1,f)
                Ixb => Ix(:,:,e,f);   Iyb => Iy(:,:,e,f);   Izb => Iz(:,:,e,f)
                Ixc => Ix(:,:,e1,f);  Iyc => Iy(:,:,e1,f);  Izc => Iz(:,:,e1,f)
                Ixd => Ix(:,:,e,f1);  Iyd => Iy(:,:,e,f1);  Izd => Iz(:,:,e,f1)
                do n=1,nroots
                  do i=1,n_cc
                    tmp = ce1(i,n)
                    tmp2 = f1*bb(i,n)
                    Ixa(i,n) = Ix21(i,n)*Ixb(i,n) + tmp*Ixc(i,n) + tmp2*Ixd(i,n)
                    Iya(i,n) = Iy21(i,n)*Iyb(i,n) + tmp*Iyc(i,n) + tmp2*Iyd(i,n)
                    Iza(i,n) = Iz21(i,n)*Izb(i,n) + tmp*Izc(i,n) + tmp2*Izd(i,n)
                  end
                end
              end
            end
        end
    end
  end

  form_esfs(Ix,Iy,Iz,W,esfs,eub,fub,nroots,dime,dimf,n_cc)
  ! Forms (es|fs) from the two dimensional integrals for a single
  ! set of primitives
    IN :: self
    MAT4, target :: Ix,Iy,Iz
    MAT, INOUT :: W
    MAT, OUT :: esfs
    INT, IN :: eub,fub,nroots,dime,dimf,n_cc
    IVEC, PTR :: e_x,e_y,e_z,f_x,f_y,f_z
    IMAT, PTR :: e_powers,f_powers
    MAT, PTR :: Ixef,Iyef,Izef,Ieeff
    INT :: e,f,ub1,ub2,n,i,n_e,n_f,zf,yf,ze,ye,dime1,dimf1
    DBL :: temp
    MAT4, PTR :: Iff
    DBL, dimension(:,:,:,:,:,:), PTR :: Iyzyz

    e_powers.create(eub,3)
    f_powers.create(fub,3)
    n_e = .a%l + .b%l
    n_f = .c%l + .d%l
    e_x => e_powers(:,1); e_y => e_powers(:,2); e_z => e_powers(:,3)
    f_x => f_powers(:,1); f_y => f_powers(:,2); f_z => f_powers(:,3)
    max(.a%l,.b%l).make_gaussian_xyz_indices(e_x,e_y,e_z,n_e)
    max(.c%l,.d%l).make_gaussian_xyz_indices(f_x,f_y,f_z,n_f)

    if (n_e > 2 AND n_f > 2) then
      ! Apply the reduced multiplication scheme to merge the Iy and Iz 2d
      ! integrals into a single matrix (upper triangle).
      ! Also merge the weights.
      allocate(Iyzyz(n_cc,nroots,dime,dime,dimf,dimf))
      dime1=dime+1
      dimf1=dimf+1
      do zf=1,dimf
        do yf=1,dimf1-zf
          Iff => Iyzyz(:,:,:,:,yf,zf)
          do ze=1,dime
            do ye=1,dime1-ze
              Iff(:,:,ye,ze) = W(:,:) * Iy(:,:,ye,yf) * Iz(:,:,ze,zf)
            end
          end
        end
      end
      ! Now add in the Ix 2d integrals and sum over nroots
      do f=1,fub
        do e=1,eub
          Ixef => Ix(:,:,e_x(e),f_x(f))
          Ieeff => Iyzyz(:,:,e_y(e),e_z(e),f_y(f),f_z(f))
          temp = ZERO
          do i=1,n_cc
            temp = temp + sum(Ixef(i,:) * Ieeff(i,:))
          end
          esfs(e,f) = temp
        end
      end
      deallocate(Iyzyz)
    else
      ! This version does not use the reduced multiplication scheme.
      do f=1,dimf
        do e=1,dime
          Izef => Iz(:,:,e,f)
          do n=1,nroots
            Izef(:,n) = Izef(:,n) * W(:,n)
          end
        end
      end
      do f=1,fub
        do e=1,eub
          Ixef => Ix(:,:,e_x(e),f_x(f))
          Iyef => Iy(:,:,e_y(e),f_y(f))
          Izef => Iz(:,:,e_z(e),f_z(f))
          temp = ZERO
          do i=1,n_cc
            temp = temp + sum(Ixef(i,:) * Iyef(i,:) * Izef(i,:))
          end
          esfs(e,f) = temp
        end
      end
    end
    f_powers.destroy
    e_powers.destroy
  end

  make_esss(esss)
  ! Creates the initial (es|ss) integrals, summed over the primitives.
  ! Don't use this if .a%l + .b%l + .c%l + .d%l < 2.  Use the special routines.
    IN :: self
    VEC, OUT:: esss
    VEC, PTR :: esssadd
    MAT, PTR :: Ix,Iy,Iz
    MAT3, PTR :: Iyz
    RYS, PTR :: rysa
    VEC(3) :: P,Q,PA,QP,ara,crc,AB,CD,A_tmp,C_tmp
    DBL :: QP2,a,b,c,d,zeta,zinv,kab,eta,einv,kcd,rho,xx,r2ab,r2cd
    INT :: ag,bg,cg,dg,n_e,nroots,eub,maxl,dim,minl
    DBL :: norma,normb,normc,norm
    IMAT, PTR :: e_powers
    IVEC, PTR :: x,y,z

    n_e = .a%l + .b%l
    maxl = max(.a%l,.b%l)
    minl = min(.a%l,.b%l)
    dim = n_e+1
    eub = n_e.n_comp_sum - (maxl-1).n_comp_sum

    nroots = (n_e + 2) / 2
    rysa.create(nroots)
    Ix.create(nroots,dim)
    Iy.create(nroots,dim)
    Iz.create(nroots,dim)
    Iyz.create(nroots,dim,dim)
    esssadd.create(eub)

    e_powers.create(eub,3)
    x => e_powers(:,1); y => e_powers(:,2); z => e_powers(:,3)
    maxl.make_gaussian_xyz_indices(x,y,z,n_e)

    AB   = .a%pos - .b%pos
    CD   = .c%pos - .d%pos
    r2ab = dot_product(AB,AB)
    r2cd = dot_product(CD,CD)
    if (.a%l > .b%l) then
      A_tmp = .a%pos
    else
      A_tmp = .b%pos
    end

    esss = ZERO
    do ag = 1, .a%n_cc
      a     = .a%ex(ag)
      norma = TWOPI5ON2 * .a%cc(ag)
      ara   = a * .a%pos
      do bg = 1, .b%n_cc
        b     = .b%ex(bg)
        zeta  = a + b
        zinv  = ONE / zeta
        kab   = sqrt(zinv) * zinv * exp(-a * b * r2ab * zinv)
        normb = norma * .b%cc(bg) * kab
        P     = (ara + b * .b%pos) * zinv
        PA    = P - A_tmp
        do cg = 1, .c%n_cc
          normc = normb * .c%cc(cg)
          c     = .c%ex(cg)
          crc   = c * .c%pos
          do dg = 1, .d%n_cc
            d    = .d%ex(dg)
            eta  = c + d
            einv = ONE / eta
            kcd  = exp(-c * d * r2cd * einv)
            Q    = (crc + d * .d%pos) * einv
            QP   = Q - P
            QP2  = dot_product(QP,QP)
            rho  = zeta * eta / (zeta + eta)
            norm = normc * .d%cc(dg) * sqrt(rho*einv) * kcd * einv
            xx   = rho*QP2
            rysa.get_weights(xx)
            rysa%w = rysa%w * norm
            .form_2d_ints_0(Ix,Iy,Iz,nroots,rysa%r,rho,zinv,PA,-QP,n_e)
            .form_esfs_0(Ix,Iy,Iz,Iyz,rysa%w,esssadd,x,y,z,dim,eub,nroots,minl)
            esss = esss + esssadd
          end
        end
      end
    end
    e_powers.destroy
    esssadd.destroy
    Iyz.destroy
    Iz.destroy
    Iy.destroy
    Ix.destroy
    rysa.destroy
  end

  make_ssfs(ssfs)
  ! Creates the (ss|fs) integrals, summed over the primitives.
  ! Don't use this if .a%l + .b%l + .c%l + .d%l < 2.  Use the special routines.
    IN :: self
    VEC, OUT:: ssfs
    VEC, PTR :: ssfsadd
    MAT, PTR :: Ix,Iy,Iz
    MAT3, PTR :: Iyz
    RYS, PTR :: rysa
    VEC(3) :: P,Q,QC,QP,ara,crc,AB,CD,A_tmp,C_tmp
    DBL :: QP2,a,b,c,d,zeta,zinv,kab,eta,einv,kcd,rho,xx,r2ab,r2cd
    INT :: ag,bg,cg,dg,n_f,nroots,fub,maxl,dim,minl
    DBL :: norma,normb,normc,norm
    IMAT, PTR :: f_powers
    IVEC, PTR :: x,y,z

    n_f = .c%l + .d%l
    maxl = max(.c%l,.d%l)
    minl = min(.c%l,.d%l)
    dim = n_f+1
    fub = n_f.n_comp_sum - (maxl-1).n_comp_sum

    nroots = (n_f+2)/2
    rysa.create(nroots)
    Ix.create(nroots,dim)
    Iy.create(nroots,dim)
    Iz.create(nroots,dim)
    Iyz.create(nroots,dim,dim)
    ssfsadd.create(fub)

    f_powers.create(fub,3)
    x => f_powers(:,1); y => f_powers(:,2); z => f_powers(:,3)
    maxl.make_gaussian_xyz_indices(x,y,z,n_f)

    AB = .a%pos - .b%pos
    CD = .c%pos - .d%pos
    r2ab=dot_product(AB,AB)
    r2cd=dot_product(CD,CD)
    if (.c%l > .d%l) then
      C_tmp = .c%pos
    else
      C_tmp = .d%pos
    end

    ssfs=ZERO
    do ag = 1, .a%n_cc
      a     = .a%ex(ag) 
      norma = TWOPI5ON2 * .a%cc(ag)
      ara   = a * .a%pos
      do bg = 1, .b%n_cc
        b     = .b%ex(bg)
        zeta  = a + b
        zinv  = ONE / zeta
        kab   = sqrt(zinv) * zinv * exp(-a * b * r2ab * zinv)
        normb = norma * .b%cc(bg) * kab
        P     = (ara + b * .b%pos) * zinv
        do cg = 1, .c%n_cc
          normc = normb * .c%cc(cg)
          c     = .c%ex(cg)
          crc   = c * .c%pos
          do dg = 1, .d%n_cc
            d    = .d%ex(dg)
            eta  = c + d
            einv = ONE / eta
            kcd  = exp(-c * d * r2cd * einv)
            Q    = (crc + d * .d%pos) * einv
            QC   = Q - C_tmp
            QP   = Q - P
            QP2  = dot_product(QP,QP)
            rho  = zeta * eta / (zeta + eta)
            norm = normc * .d%cc(dg) * sqrt(rho*einv) * kcd * einv
            xx   = rho * QP2
            rysa.get_weights(xx)
            rysa%w = rysa%w * norm
            .form_2d_ints_0(Ix,Iy,Iz,nroots,rysa%r,rho,einv,QC,QP,n_f)
            .form_esfs_0(Ix,Iy,Iz,Iyz,rysa%w,ssfsadd,x,y,z,dim,fub,nroots,minl)
            ssfs = ssfs + ssfsadd
          end
        end
      end
    end
    f_powers.destroy
    ssfsadd.destroy
    Iyz.destroy
    Iz.destroy
    Iy.destroy
    Ix.destroy
    rysa.destroy
  end

  form_2d_ints_0(Ix,Iy,Iz,nroots,t2,rho,einv,QC,QP,n_f)
  ! Forms the two dimentional integrals, where e = 0 or f = 0.
  ! Don't use this if .a%l + .b%l + .c%l + .d%l < 2.  Use the special routines.
    IN :: self
    MAT, target, OUT :: Ix,Iy,Iz
    VEC, IN :: t2
    DBL, IN :: rho,einv
    INT, IN :: n_f,nroots
    VEC(3), IN :: QC,QP
    VEC(nroots) :: c
    DBL :: ret,cf1,tmp,tmp2
    INT :: f,f1,fp1,n
    VEC, PTR :: Ix2,Iy2,Iz2

    tmp  = rho*einv
    tmp2 = HALF*einv
    Ix2 => Ix(:,2); Iy2 => Iy(:,2); Iz2 => Iz(:,2)
    do n=1,nroots
      ret     = t2(n) * tmp
      Ix(n,1) = ONE
      Iy(n,1) = ONE
      Iz(n,1) = ONE
      Ix2(n) = QC(1) - ret * QP(1)
      Iy2(n) = QC(2) - ret * QP(2)
      Iz2(n) = QC(3) - ret * QP(3)
      c(n) = (ONE - ret) * tmp2
    end
    do f = 2, n_f
      f1  = f - 1
      fp1 = f + 1
      do n=1, nroots
        cf1 = f1 * c(n)
        Ix(n,fp1) = Ix2(n) * Ix(n,f) + cf1 * Ix(n,f1)
        Iy(n,fp1) = Iy2(n) * Iy(n,f) + cf1 * Iy(n,f1)
        Iz(n,fp1) = Iz2(n) * Iz(n,f) + cf1 * Iz(n,f1)
      end
    end
  end

  form_esfs_0(Ix,Iy,Iz,Iyz,weights,esfsadd,fx,fy,fz,dim,fub,nroots,minl)
  ! Forms (es|fs) from the two dimensional integrals for a single
  ! set of primitives, where e = 0 or f = 0.
    IN :: self
    MAT, IN :: Ix,Iz
    MAT, PTR :: Iy
    MAT3, INOUT :: Iyz
    VEC, IN :: weights
    VEC, OUT :: esfsadd
    IVEC, IN :: fx,fy,fz
    INT, IN :: dim,fub,nroots,minl
    INT :: f,y,z,n,dim1
    DBL :: w,Iz_w

    ! Apply the reduced multiplication scheme to merge the Iy and Iz 2d
    ! integrals into a single matrix (upper triangle).  Also merge the weights.
    if (minl > 2) then
      dim1 = dim+1
      do n=1,nroots
        w = weights(n)
        do z=1,dim
          Iz_w = Iz(n,z) * w
          do y=1,dim1-z
            Iyz(n,y,z) = Iz_w*Iy(n,y)
          end
        end
      end
      do f=1,fub
        esfsadd(f)=sum(Ix(:,fx(f)) * Iyz(:,fy(f),fz(f)))
      end
    else
      do f=1,dim
        Iy(:,f) = Iy(:,f) * weights(:)
      end
      do f=1,fub
        esfsadd(f)=sum(Ix(:,fx(f)) * Iy(:,fy(f)) * Iz(:,fz(f)))
      end
    end
  end

  make_psss(psss)
  ! Creates the initial (ps|ss) or (sp|ss) integrals, summed over the
  ! primitives.
    IN :: self
    VEC, OUT:: psss
    RYS, PTR :: rysa
    VEC(3) :: P,Q,PA,QP,ara,crc,AB,CD,A_tmp,C_tmp,psssadd
    DBL :: QP2,a,b,c,d,zeta,zinv,kab,eta,einv,kcd,rho,xx,r2ab,r2cd
    INT :: ag,bg,cg,dg
    DBL :: norma,normb,normc,norm,rho_zinv,rzt,Ix,Iy,Iz

    rysa.create(1)

    AB   = .a%pos - .b%pos
    CD   = .c%pos - .d%pos
    r2ab = dot_product(AB,AB)
    r2cd = dot_product(CD,CD)
    if (.a%l > .b%l) then
      A_tmp = .a%pos
    else
      A_tmp = .b%pos
    end

    psss = ZERO
    do ag = 1, .a%n_cc
      a     = .a%ex(ag)
      norma = TWOPI5ON2 * .a%cc(ag)
      ara   = a * .a%pos
      do bg = 1, .b%n_cc
        b     = .b%ex(bg)
        zeta  = a + b
        zinv  = ONE / zeta
        kab   = sqrt(zinv) * zinv * exp(-a * b * r2ab * zinv)
        normb = norma * .b%cc(bg) * kab
        P     = (ara + b * .b%pos) * zinv
        PA    = P - A_tmp
        do cg = 1, .c%n_cc
          normc = normb * .c%cc(cg)
          c     = .c%ex(cg)
          crc   = c * .c%pos
          do dg = 1, .d%n_cc
            d    = .d%ex(dg)
            eta  = c + d
            einv = ONE / eta
            kcd  = exp(-c * d * r2cd * einv)
            Q    = (crc + d * .d%pos) * einv
            QP   = Q - P
            QP2  = dot_product(QP,QP)
            rho  = zeta * eta / (zeta + eta)
            norm = normc * .d%cc(dg) * sqrt(rho*einv) * kcd * einv
            xx   = rho*QP2
            rysa.get_weights(xx)
            rho_zinv = rho*zinv
            rzt = rysa%r(1) * rho_zinv
            Ix  = PA(1) + rzt * QP(1)
            Iy  = PA(2) + rzt * QP(2)
            Iz  = PA(3) + rzt * QP(3)
            psssadd(1) = Ix * rysa%w(1)
            psssadd(2) = Iy * rysa%w(1)
            psssadd(3) = Iz * rysa%w(1)
            psss = psss + norm * psssadd
          end
        end
      end
    end
    rysa.destroy
  end

  make_ssps(ssps)
  ! Creates the (ss|ps) or (ss|sp) integrals, summed over the primitives.
    IN :: self
    VEC, OUT:: ssps
    RYS, PTR :: rysa
    VEC(3) :: P,Q,QC,QP,ara,crc,AB,CD,A_tmp,C_tmp,sspsadd
    DBL :: QP2,a,b,c,d,zeta,zinv,kab,eta,einv,kcd,rho,xx,r2ab,r2cd
    INT :: ag,bg,cg,dg
    DBL :: norma,normb,normc,norm,ret,rho_einv,Ix,Iy,Iz

    rysa.create(1)

    AB = .a%pos - .b%pos
    CD = .c%pos - .d%pos
    r2ab=dot_product(AB,AB)
    r2cd=dot_product(CD,CD)
    if (.c%l > .d%l) then
      C_tmp = .c%pos
    else
      C_tmp = .d%pos
    end

    ssps=ZERO
    do ag = 1, .a%n_cc
      a     = .a%ex(ag) 
      norma = TWOPI5ON2 * .a%cc(ag)
      ara   = a * .a%pos
      do bg = 1, .b%n_cc
        b     = .b%ex(bg)
        zeta  = a + b
        zinv  = ONE / zeta
        kab   = sqrt(zinv) * zinv * exp(-a * b * r2ab * zinv)
        normb = norma * .b%cc(bg) * kab
        P     = (ara + b * .b%pos) * zinv
        do cg = 1, .c%n_cc
          normc = normb * .c%cc(cg)
          c     = .c%ex(cg)
          crc   = c * .c%pos
          do dg = 1, .d%n_cc
            d    = .d%ex(dg)
            eta  = c + d
            einv = ONE / eta
            kcd  = exp(-c * d * r2cd * einv)
            Q    = (crc + d * .d%pos) * einv
            QC   = Q - C_tmp
            QP   = Q - P
            QP2  = dot_product(QP,QP)
            rho  = zeta * eta / (zeta + eta)
            norm = normc * .d%cc(dg) * sqrt(rho*einv) * kcd * einv
            xx   = rho * QP2
            rysa.get_weights(xx)
            rho_einv = rho*einv
            ret = rysa%r(1) * rho_einv
            Ix  = QC(1) - ret * QP(1)
            Iy  = QC(2) - ret * QP(2)
            Iz  = QC(3) - ret * QP(3)
            sspsadd(1) = Ix * rysa%w(1)
            sspsadd(2) = Iy * rysa%w(1)
            sspsadd(3) = Iz * rysa%w(1)
            ssps = ssps + norm * sspsadd
          end
        end
      end
    end
    rysa.destroy
  end

  make_ssss_eri(ssss)
  ! Creates the (ss|ss) integrals, summed over the primitives.
    IN :: self
    MAT4, OUT:: ssss
    RYS, PTR :: rysa
    VEC(3) :: P,Q,QP,ara,crc,AB,CD
    DBL :: QP2,a,b,c,d,zeta,zinv,kab,eta,einv,kcd,rho,xx,r2ab,r2cd
    INT :: ag,bg,cg,dg
    DBL :: norma,normb,normc,norm
    DBL :: ssssadd

    rysa.create(1)

    ssssadd = ZERO
    AB   = .a%pos - .b%pos
    CD   = .c%pos - .d%pos
    r2ab = dot_product(AB,AB)
    r2cd = dot_product(CD,CD)

    do ag = 1, .a%n_cc
      a     = .a%ex(ag) 
      norma = TWOPI5ON2 * .a%cc(ag)
      ara   = a * .a%pos
      do bg = 1, .b%n_cc
        b     = .b%ex(bg)
        zeta  = a + b
        zinv  = ONE / zeta
        kab   = sqrt(zinv) * zinv * exp(-a * b * r2ab * zinv)
        normb = norma * .b%cc(bg) * kab
        P     = (ara + b * .b%pos) * zinv
        do cg = 1, .c%n_cc
          normc = normb * .c%cc(cg)
          c     = .c%ex(cg)
          crc   = c * .c%pos
          do dg = 1, .d%n_cc
            d    = .d%ex(dg)
            eta  = c + d
            einv = ONE / eta
            kcd  = exp(-c * d * r2cd * einv)
            Q    = (crc + d * .d%pos) * einv
            QP   = Q - P
            QP2  = dot_product(QP,QP)
            rho  = zeta * eta / (zeta + eta)
            norm = normc * .d%cc(dg) * sqrt(rho*einv) * kcd * einv
            xx   = rho*QP2
            rysa.get_weights(xx)
            ssssadd = ssssadd + norm * rysa%w(1)
          end
        end
      end
    end
    rysa.destroy
    ssss(1,1,1,1)=ssssadd
  end

  transfer(esfs,escd) [pure]
  ! Applies the transfer equation to (es|fs) to give (es|cd)
    IN :: self
    MAT, IN :: esfs
    MAT3, OUT :: escd
    if (.c%l > .d%l) then
      .transfer_l_c_highest(esfs,escd)
    else
      .transfer_l_d_highest(esfs,escd)
    end
  end

  transfer(escd,abcd) [pure]
  ! Applies the transfer equation to (es|cd) to give (ab|cd)
    IN :: self
    MAT3, IN :: escd
    MAT4, OUT :: abcd
    if (.a%l > .b%l) then
      .transfer_l_a_highest(escd,abcd)
    else
      .transfer_l_b_highest(escd,abcd)
    end
  end

  transfer_l_c_highest(esfs,escd) [pure]
  ! Applies the transfer equation to (es|fs) to give (es|cd)
    IN :: self
    MAT, IN :: esfs
    MAT3, OUT :: escd
    MAT3, PTR :: int_new,int_old
    IMAT, allocatable :: momenta
    IMAT3, allocatable :: index
    IVEC(3) :: d_momenta,c_momenta
    VEC(3) :: CD
    INT :: c,d,ld,ld1_n_comp_sum,ld2_n_comp_sum,c1,d1,cub,dub
    INT :: z,n_f,fadd,e,eub,tmp
    DBL :: CDi

    select case (.d%l)
      case (0)
        escd(:,:,1)=esfs

      case (1)
        fadd = (.c%l-1).n_comp_sum
        eub = (.a%l+.b%l).n_comp_sum - (max(.a%l,.b%l)-1).n_comp_sum
        CD   = .c%pos - .d%pos
        n_f  = .c%l + .d%l
        cub  = (n_f-1).n_comp_sum - fadd

        allocate(momenta(3, n_f.n_comp_sum))
        tmp=0; tmp.make_gaussian_xyz_powers(momenta,n_f)
        allocate(index(0:n_f,0:n_f,0:n_f))
        index.make_index_of_components(momenta)

        do d = 1, 3
          z   = momenta(:,d+1).first_nonzero_component
          CDi = CD(z)
          do c = 1, cub
            c_momenta    = momenta(:,c+fadd)
            c_momenta(z) = c_momenta(z) + 1
            c1 = index(c_momenta(1),c_momenta(2),c_momenta(3)) - fadd
            do e = 1, eub
              escd(e,c,d) = esfs(e,c1) + CDi * esfs(e,c)
            end
          end
        end
        deallocate(momenta)
        deallocate(index)

      case default
        fadd = (.c%l-1).n_comp_sum
        eub = (.a%l+.b%l).n_comp_sum - (max(.a%l,.b%l)-1).n_comp_sum
        CD   = .c%pos - .d%pos
        n_f  = .c%l + .d%l
        cub  = (n_f-1).n_comp_sum - fadd

        allocate(momenta(3, n_f.n_comp_sum))
        tmp=0; tmp.make_gaussian_xyz_powers(momenta,n_f)
        allocate(index(0:n_f,0:n_f,0:n_f))
        index.make_index_of_components(momenta)

        nullify(int_new)
        allocate(int_new(eub,cub,3))
        do d=1,3
          z=momenta(:,d+1).first_nonzero_component
          CDi=CD(z)
          do c=1,cub
            c_momenta=momenta(:,c+fadd)
            c_momenta(z)=c_momenta(z)+1
            c1=index(c_momenta(1),c_momenta(2),c_momenta(3))-fadd
            do e=1,eub
              int_new(e,c,d)=esfs(e,c1)+CDi*esfs(e,c)
            end
          end
        end
        do ld=2, .d%l - 1
          ld1_n_comp_sum = (ld-1).n_comp_sum
          ld2_n_comp_sum = (ld-2).n_comp_sum
          dub            = ld.n_comp
          cub            = (n_f-ld).n_comp_sum - fadd
          int_old=>int_new
          nullify(int_new)
          allocate(int_new(eub,cub,dub))
          do d=1,dub
            d_momenta=momenta(:,d+ld1_n_comp_sum)
            z=d_momenta.first_nonzero_component
            d_momenta(z)=d_momenta(z)-1
            d1=index(d_momenta(1),d_momenta(2),d_momenta(3))-ld2_n_comp_sum
            CDi=CD(z)
            do c=1,cub
              c_momenta=momenta(:,c+fadd)
              c_momenta(z)=c_momenta(z)+1
              c1=index(c_momenta(1),c_momenta(2),c_momenta(3))-fadd
              do e=1,eub
                int_new(e,c,d)=int_old(e,c1,d1)+CDi*int_old(e,c,d1)
              end
            end
          end
          deallocate(int_old)
        end

        ld1_n_comp_sum = (.d%l-1).n_comp_sum
        ld2_n_comp_sum = (.d%l-2).n_comp_sum
        dub            = .d%n_comp
        cub            = .c%n_comp
        int_old=>int_new
        do d=1,dub
          d_momenta=momenta(:,d+ld1_n_comp_sum)
          z=d_momenta.first_nonzero_component
          d_momenta(z)=d_momenta(z)-1
          d1=index(d_momenta(1),d_momenta(2),d_momenta(3))-ld2_n_comp_sum
          CDi=CD(z)
          do c=1,cub
            c_momenta=momenta(:,c+fadd)
            c_momenta(z)=c_momenta(z)+1
            c1=index(c_momenta(1),c_momenta(2),c_momenta(3))-fadd
            do e=1,eub
              escd(e,c,d)=int_old(e,c1,d1)+CDi*int_old(e,c,d1)
            end
          end
        end
        deallocate(int_old)
        deallocate(momenta)
        deallocate(index)
    end
  end

  transfer_l_d_highest(esfs,escd) [pure]
  ! Applies the transfer equation to (es|fs) to give (es|cd)
    IN :: self
    MAT, IN :: esfs
    MAT3, OUT :: escd
    MAT3, PTR :: int_new,int_old
    IMAT, allocatable :: momenta
    IMAT3, allocatable :: index
    IVEC(3) :: d_momenta,c_momenta
    VEC(3) :: CD
    INT :: c,d,lc,lc1_n_comp_sum,lc2_n_comp_sum,c1,d1,cub,dub
    INT :: z,n_f,fadd,e,eub,tmp
    DBL :: DCi

    select case (.c%l)
      case (0)
        escd(:,1,:)=esfs

      case (1)
        fadd = (.d%l-1).n_comp_sum
        eub = (.a%l+.b%l).n_comp_sum - (max(.a%l,.b%l)-1).n_comp_sum
        CD   = .c%pos - .d%pos
        n_f  = .c%l + .d%l
        dub  = (n_f-1).n_comp_sum - fadd

        allocate(momenta(3, n_f.n_comp_sum))
        tmp=0; tmp.make_gaussian_xyz_powers(momenta,n_f)
        allocate(index(0:n_f,0:n_f,0:n_f))
        index.make_index_of_components(momenta)

        do c=1,3
          z=momenta(:,c+1).first_nonzero_component
          DCi=-CD(z)
          do d=1,dub
            d_momenta=momenta(:,d+fadd)
            d_momenta(z)=d_momenta(z)+1
            d1=index(d_momenta(1),d_momenta(2),d_momenta(3))-fadd
            do e=1,eub
              escd(e,c,d)=esfs(e,d1)+DCi*esfs(e,d)
            end
          end
        end
        deallocate(momenta)
        deallocate(index)

      case default
        fadd = (.d%l-1).n_comp_sum
        eub = (.a%l+.b%l).n_comp_sum - (max(.a%l,.b%l)-1).n_comp_sum
        CD   = .c%pos - .d%pos
        n_f  = .c%l + .d%l
        dub  = (n_f-1).n_comp_sum - fadd

        allocate(momenta(3, n_f.n_comp_sum))
        tmp=0; tmp.make_gaussian_xyz_powers(momenta,n_f)
        allocate(index(0:n_f,0:n_f,0:n_f))
        index.make_index_of_components(momenta)

        nullify(int_new)
        allocate(int_new(eub,3,dub))
        do c=1,3
          z=momenta(:,c+1).first_nonzero_component
          DCi=-CD(z)
          do d=1,dub
            d_momenta=momenta(:,d+fadd)
            d_momenta(z)=d_momenta(z)+1
            d1=index(d_momenta(1),d_momenta(2),d_momenta(3))-fadd
            do e=1,eub
              int_new(e,c,d)=esfs(e,d1)+DCi*esfs(e,d)
            end
          end
        end
        do lc=2, .c%l - 1
          lc1_n_comp_sum = (lc-1).n_comp_sum
          lc2_n_comp_sum = (lc-2).n_comp_sum
          cub            = lc.n_comp
          dub            = (n_f-lc).n_comp_sum - fadd
          int_old=>int_new
          nullify(int_new)
          allocate(int_new(eub,cub,dub))
          do c=1,cub
            c_momenta=momenta(:,c+lc1_n_comp_sum)
            z=c_momenta.first_nonzero_component
            c_momenta(z)=c_momenta(z)-1
            c1=index(c_momenta(1),c_momenta(2),c_momenta(3))-lc2_n_comp_sum
            DCi=-CD(z)
            do d=1,dub
              d_momenta=momenta(:,d+fadd)
              d_momenta(z)=d_momenta(z)+1
              d1=index(d_momenta(1),d_momenta(2),d_momenta(3))-fadd
              do e=1,eub
                int_new(e,c,d)=int_old(e,c1,d1)+DCi*int_old(e,c1,d)
              end
            end
          end
          deallocate(int_old)
        end
        lc1_n_comp_sum = (.c%l-1).n_comp_sum
        lc2_n_comp_sum = (.c%l-2).n_comp_sum
        cub            = .c%n_comp
        dub            = .d%n_comp
        int_old=>int_new
        do c=1,cub
          c_momenta=momenta(:,c+lc1_n_comp_sum)
          z=c_momenta.first_nonzero_component
          c_momenta(z)=c_momenta(z)-1
          c1=index(c_momenta(1),c_momenta(2),c_momenta(3))-lc2_n_comp_sum
          DCi=-CD(z)
          do d=1,dub
            d_momenta=momenta(:,d+fadd)
            d_momenta(z)=d_momenta(z)+1
            d1=index(d_momenta(1),d_momenta(2),d_momenta(3))-fadd
            do e=1,eub
              escd(e,c,d)=int_old(e,c1,d1)+DCi*int_old(e,c1,d)
            end
          end
        end
        deallocate(int_old)
        deallocate(momenta)
        deallocate(index)
    end
  end

  transfer_l_a_highest(escd,abcd) [pure]
  ! Applies the transfer equation to (es|cd) to give (ab|cd)
    IN :: self
    MAT3, IN :: escd
    MAT4, OUT :: abcd
    MAT4, PTR :: int_new,int_old
    IMAT, allocatable :: momenta
    IMAT3, allocatable :: index
    IVEC(3) :: a_momenta,b_momenta
    VEC(3) :: AB
    INT :: a1,b1,lb1_n_comp_sum,lb2_n_comp_sum,a,b,c,d,lb,aub,bub
    INT :: z,n_e,eadd,cub,dub,tmp
    DBL :: ABi

    select case (.b%l)
      case (0)
        abcd(:,1,:,:)=escd

      case (1)
        eadd = (.a%l-1).n_comp_sum
        AB   = .a%pos - .b%pos
        n_e  = .a%l + .b%l
        aub  = (n_e-1).n_comp_sum - eadd
        cub  = .c%n_comp
        dub  = .d%n_comp

        allocate(momenta(3, n_e.n_comp_sum))
        tmp=0; tmp.make_gaussian_xyz_powers(momenta,n_e)
        allocate(index(0:n_e,0:n_e,0:n_e))
        index.make_index_of_components(momenta)

        do b=1,3
          z=momenta(:,b+1).first_nonzero_component
          ABi=AB(z)
          do a=1,aub
            a_momenta=momenta(:,a+eadd)
            a_momenta(z)=a_momenta(z)+1
            a1=index(a_momenta(1),a_momenta(2),a_momenta(3))-eadd
            forall (c=1:cub, d=1:dub)
              abcd(a,b,c,d)=escd(a1,c,d) + ABi * escd(a,c,d)
            end
          end
        end
        deallocate(momenta)
        deallocate(index)

      case default
        eadd = (.a%l-1).n_comp_sum
        AB   = .a%pos - .b%pos
        n_e  = .a%l + .b%l
        aub  = (n_e-1).n_comp_sum - eadd
        bub  = .b%n_comp
        cub  = .c%n_comp
        dub  = .d%n_comp

        allocate(momenta(3, n_e.n_comp_sum))
        tmp=0; tmp.make_gaussian_xyz_powers(momenta,n_e)
        allocate(index(0:n_e,0:n_e,0:n_e))
        index.make_index_of_components(momenta)

        nullify(int_new)
        allocate(int_new(aub,bub,cub,dub))
        do b=1,3
          z=momenta(:,b+1).first_nonzero_component
          ABi=AB(z)
          do a=1,aub
            a_momenta=momenta(:,a+eadd)
            a_momenta(z)=a_momenta(z)+1
            a1=index(a_momenta(1),a_momenta(2),a_momenta(3))-eadd
            forall (c=1:cub, d=1:dub)
              int_new(a,b,c,d)=escd(a1,c,d) + ABi * escd(a,c,d)
            end
          end
        end

        do lb=2, .b%l - 1
          lb1_n_comp_sum = (lb-1).n_comp_sum
          lb2_n_comp_sum = (lb-2).n_comp_sum
          bub            = lb.n_comp
          aub            = (n_e-lb).n_comp_sum - eadd
          int_old=>int_new
          nullify(int_new)
          allocate(int_new(aub,bub,cub,dub))
          do b=1,bub
            b_momenta=momenta(:,b+lb1_n_comp_sum)
            z=b_momenta.first_nonzero_component
            b_momenta(z)=b_momenta(z)-1
            b1=index(b_momenta(1),b_momenta(2),b_momenta(3))-lb2_n_comp_sum
            ABi=AB(z)
            do a=1,aub
              a_momenta=momenta(:,a+eadd)
              a_momenta(z)=a_momenta(z)+1
              a1=index(a_momenta(1),a_momenta(2),a_momenta(3))-eadd
              forall (c=1:cub, d=1:dub)
                int_new(a,b,c,d)=int_old(a1,b1,c,d) + ABi * int_old(a,b1,c,d)
              end
            end
          end
          deallocate(int_old)
        end
        lb1_n_comp_sum = (.b%l-1).n_comp_sum
        lb2_n_comp_sum = (.b%l-2).n_comp_sum
        bub            = .b%n_comp
        aub            = .a%n_comp
        int_old=>int_new
        do b=1,bub
          b_momenta=momenta(:,b+lb1_n_comp_sum)
          z=b_momenta.first_nonzero_component
          b_momenta(z)=b_momenta(z)-1
          b1=index(b_momenta(1),b_momenta(2),b_momenta(3))-lb2_n_comp_sum
          ABi=AB(z)
          do a=1,aub
            a_momenta=momenta(:,a+eadd)
            a_momenta(z)=a_momenta(z)+1
            a1=index(a_momenta(1),a_momenta(2),a_momenta(3))-eadd
            forall (c=1:cub, d=1:dub)
              abcd(a,b,c,d)=int_old(a1,b1,c,d) + ABi * int_old(a,b1,c,d)
            end
          end
        end
        deallocate(int_old)
        deallocate(momenta)
        deallocate(index)
    end
  end

  transfer_l_b_highest(escd,abcd) [pure]
  ! Applies the transfer equation to (es|cd) to give (ab|cd)
    IN :: self
    MAT3, IN :: escd
    MAT4, OUT :: abcd
    MAT4, PTR :: int_new,int_old
    IMAT, allocatable :: momenta
    IMAT3, allocatable :: index
    IVEC(3) :: a_momenta,b_momenta
    VEC(3) :: AB
    INT :: a1,b1,la1_n_comp_sum,la2_n_comp_sum,a,b,c,d,la,aub,bub
    INT :: z,n_e,eadd,cub,dub,tmp
    DBL :: BAi

    select case (.a%l)
      case (0)
        abcd(1,:,:,:)=escd

      case (1)
        eadd = (.b%l-1).n_comp_sum
        AB   = .a%pos - .b%pos
        n_e  = .a%l + .b%l
        bub  = (n_e-1).n_comp_sum - eadd
        cub  = .c%n_comp
        dub  = .d%n_comp

        allocate(momenta(3, n_e.n_comp_sum))
        tmp=0; tmp.make_gaussian_xyz_powers(momenta,n_e)
        allocate(index(0:n_e,0:n_e,0:n_e))
        index.make_index_of_components(momenta)

        do a=1,3
          z=momenta(:,a+1).first_nonzero_component
          BAi=-AB(z)
          do b=1,bub
            b_momenta=momenta(:,b+eadd)
            b_momenta(z)=b_momenta(z)+1
            b1=index(b_momenta(1),b_momenta(2),b_momenta(3))-eadd
            forall (c=1:cub, d=1:dub)
              abcd(a,b,c,d)=escd(b1,c,d) + BAi * escd(b,c,d)
            end
          end
        end
        deallocate(momenta)
        deallocate(index)

      case default
        eadd = (.b%l-1).n_comp_sum
        AB   = .a%pos - .b%pos
        n_e  = .a%l + .b%l
        bub  = (n_e-1).n_comp_sum - eadd
        aub  = .a%n_comp
        cub  = .c%n_comp
        dub  = .d%n_comp

        allocate(momenta(3, n_e.n_comp_sum))
        tmp=0; tmp.make_gaussian_xyz_powers(momenta,n_e)
        allocate(index(0:n_e,0:n_e,0:n_e))
        index.make_index_of_components(momenta)

        nullify(int_new)
        allocate(int_new(aub,bub,cub,dub))
        do a=1,3
          z=momenta(:,a+1).first_nonzero_component
          BAi=-AB(z)
          do b=1,bub
            b_momenta=momenta(:,b+eadd)
            b_momenta(z)=b_momenta(z)+1
            b1=index(b_momenta(1),b_momenta(2),b_momenta(3))-eadd
            forall (c=1:cub, d=1:dub)
              int_new(a,b,c,d)=escd(b1,c,d) + BAi * escd(b,c,d)
            end
          end
        end

        do la=2, .a%l - 1
          la1_n_comp_sum = (la-1).n_comp_sum
          la2_n_comp_sum = (la-2).n_comp_sum
          aub            = la.n_comp
          bub            = (n_e-la).n_comp_sum - eadd
          int_old=>int_new
          nullify(int_new)
          allocate(int_new(aub,bub,cub,dub))
          do a=1,aub
            a_momenta=momenta(:,a+la1_n_comp_sum)
            z=a_momenta.first_nonzero_component
            a_momenta(z)=a_momenta(z)-1
            a1=index(a_momenta(1),a_momenta(2),a_momenta(3))-la2_n_comp_sum
            BAi=-AB(z)
            do b=1,bub
              b_momenta=momenta(:,b+eadd)
              b_momenta(z)=b_momenta(z)+1
              b1=index(b_momenta(1),b_momenta(2),b_momenta(3))-eadd
              forall (c=1:cub, d=1:dub)
                int_new(a,b,c,d)=int_old(a1,b1,c,d) + BAi * int_old(a1,b,c,d)
              end
            end
          end
          deallocate(int_old)
        end
        la1_n_comp_sum = (.a%l-1).n_comp_sum
        la2_n_comp_sum = (.a%l-2).n_comp_sum
        aub            = .a%n_comp
        bub            = .b%n_comp
        int_old=>int_new
        do a=1,aub
          a_momenta=momenta(:,a+la1_n_comp_sum)
          z=a_momenta.first_nonzero_component
          a_momenta(z)=a_momenta(z)-1
          a1=index(a_momenta(1),a_momenta(2),a_momenta(3))-la2_n_comp_sum
          BAi=-AB(z)
          do b=1,bub
            b_momenta=momenta(:,b+eadd)
            b_momenta(z)=b_momenta(z)+1
            b1=index(b_momenta(1),b_momenta(2),b_momenta(3))-eadd
            forall (c=1:cub, d=1:dub)
              abcd(a,b,c,d)=int_old(a1,b1,c,d) + BAi * int_old(a1,b,c,d)
            end
          end
        end
        deallocate(int_old)
        deallocate(momenta)
        deallocate(index)
    end
  end

  to_normalize(abcd)
  ! Multiply the matrix by the orbital normalization coefficients
  ! for the orbitals a, b, c and d.
    IN :: self
    MAT4, target :: abcd
    VEC, PTR :: anorm,bnorm,cnorm,dnorm
    INT :: aub,bub,cub,dub,a,b,c,d
    DBL :: normb,normc,normd

    if (.a%l + .b%l == 0) then
      if (.c%l + .d%l /= 0) then       ! ss|cd only loop over c and d.
        cub = .c%n_comp
        dub = .d%n_comp
        cnorm.create(cub);   cnorm.normalizing_factors( .c%l )
        dnorm.create(dub);   dnorm.normalizing_factors( .d%l )
        do d=1,dub
          normd=dnorm(d)
          do c=1,cub
            abcd(1,1,c,d)=abcd(1,1,c,d)*normd*cnorm(c)
          end
        end
        cnorm.destroy; dnorm.destroy
      end
    else if (.c%l + .d%l == 0) then    ! ab|ss only loop over a and b.
      aub = .a%n_comp
      bub = .b%n_comp
      anorm.create(aub);   anorm.normalizing_factors( .a%l )
      bnorm.create(bub);   bnorm.normalizing_factors( .b%l )
      do b=1,bub
        normb=bnorm(b)
        do a=1,aub
          abcd(a,b,1,1)=abcd(a,b,1,1)*normb*anorm(a)
        end
      end
      anorm.destroy; bnorm.destroy
    else
      aub=.a%n_comp                !    The general normalization routine.
      bub=.b%n_comp
      cub=.c%n_comp
      dub=.d%n_comp
      anorm.create(aub);   anorm.normalizing_factors( .a%l )
      bnorm.create(bub);   bnorm.normalizing_factors( .b%l )
      cnorm.create(cub);   cnorm.normalizing_factors( .c%l )
      dnorm.create(dub);   dnorm.normalizing_factors( .d%l )
      do d=1,dub
        normd=dnorm(d)
        do c=1,cub
          normc=normd*cnorm(c)
          do b=1,bub
            normb=normc*bnorm(b)
            do a=1,aub
              abcd(a,b,c,d)=abcd(a,b,c,d)*normb*anorm(a)
            end
          end
        end
      end
      anorm.destroy; bnorm.destroy; cnorm.destroy; dnorm.destroy
    end
  end

end
