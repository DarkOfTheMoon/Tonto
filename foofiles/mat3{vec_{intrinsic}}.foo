!---------------------------------------------------------------------------
!
! MAT3{VEC_{INTRINSIC}} : 
!
! A 3-D matrix where each element is a vector of (possibly) a different length
!
! Copyright (C) Dylan Jayatilaka, 2002
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id:$
!---------------------------------------------------------------------------

virtual module MAT3{VEC_{INTRINSIC}}

   implicit none

contains

   create(dim1,dim2,dim3) ::: leaky
   ! Create object with desired dimensions, ".element" part nullfied.
      self :: PTR
      dim1,dim2,dim3 :: INT
      status :: INT
      nullify(self)
      allocate(self(dim1,dim2,dim3),STAT=status)
      DIE_IF(status/=0,"error in allocating memory")
      ADD_MEMORY(dim1*dim2*dim3*ELEMENT_TYPE_SIZE)
      .nullify_ptr_part
   end

   create(dim) ::: leaky
   ! Create the object with the desired dimensions "dim"
      self :: PTR
      dim :: VEC{INT}(3)
      .create(dim(1),dim(2),dim(3))
   end

   create(dim1,dim2,dim3,dimv) ::: leaky
   ! Create object with desired dimensions, ".element" part size "dimv".
      self :: PTR
      dim1,dim2,dim3,dimv :: INT
      status :: INT
      nullify(self)
      allocate(self(dim1,dim2,dim3),STAT=status)
      DIE_IF(status/=0,"error in allocating memory")
      ADD_MEMORY(dim1*dim2*dim3*ELEMENT_TYPE_SIZE)
      .create_vec(dimv)
   end

   create(dim1,dim2,dim3,dimv) ::: leaky
   ! Create object with desired dimensions, ".element" part with bounds "dimv".
      self :: PTR
      dim1,dim2,dim3 :: INT
      dimv :: VEC{INT}(2)
      status :: INT
      nullify(self)
      allocate(self(dim1,dim2,dim3),STAT=status)
      DIE_IF(status/=0,"error in allocating memory")
      ADD_MEMORY(dim1*dim2*dim3*ELEMENT_TYPE_SIZE)
      .create_vec(dimv)
   end

   create(dim,dimv) ::: leaky
   ! Create object with desired dimensions, ".element" part size "dimv".
      self :: PTR
      dim  :: VEC{INT}(3)
      dimv :: INT
      .create(dim(1),dim(2),dim(3),dimv)
   end

   create(dim,dimv) ::: leaky
   ! Create object with desired dimensions, ".element" part with bounds "dimv".
      self :: PTR
      dim  :: VEC{INT}(3)
      dimv :: VEC{INT}(2)
      .create(dim(1),dim(2),dim(3),dimv)
   end

   create_vec(dimv) ::: leaky
   ! Allocate only the the ".element" pointer parts with size "dimv".
      dimv :: INT
      i,j,k :: INT
      do i = 1,.dim1
      do j = 1,.dim2
      do k = 1,.dim3
         self(i,j,k).element.create(dimv)
      end
      end
      end
   end

   create_vec(dimv) ::: leaky
   ! Allocate only the ".element" pointer parts with bounds "dimv".
      dimv :: VEC{INT}(2)
      i,j,k :: INT
      do i = 1,.dim1
      do j = 1,.dim2
      do k = 1,.dim3
         self(i,j,k).element.create(dimv)
      end
      end
      end
   end

   create_copy(v) ::: leaky
   ! Create a copy of "v"
      self :: PTR
      v :: MAT3{VEC_{INTRINSIC}}
      .create(v.dim1,v.dim2,v.dim3)
      .copy(v)
   end

   copy(v) ::: leaky
   ! Make a copy of "v"
      v :: MAT3{VEC_{INTRINSIC}}
      i,j,k :: INT
      .nullify_ptr_part
      do i = 1,v.dim1
      do j = 1,v.dim2
      do k = 1,v.dim3
         if (v(i,j,k).element.destroyed) cycle
         self(i,j,k).element.create_copy(v(i,j,k).element)
      end
      end
      end
   end

   destroy ::: leaky
   ! Destroy the object
      self :: PTR
      if (.destroyed) return
      .destroy_ptr_part
      DELETE_MEMORY(size(self)*ELEMENT_TYPE_SIZE)
      deallocate(self)
   end

   nullify_ptr_part
   ! Nullify the "element" pointer parts
      i,j,k :: INT
      do i = 1,.dim1
      do j = 1,.dim2
      do k = 1,.dim3
         nullify(self(i,j,k).element)
      end
      end
      end
   end

   destroy_ptr_part
   ! Destroy the ".element" pointer parts of an ivecvec
      self :: PTR
      i,j,k :: INT
      do i = 1,.dim1
      do j = 1,.dim2
      do k = 1,.dim3
         self(i,j,k).element.destroy
      end
      end
      end
   end

   created result (res) ::: inlined_by_foo
   ! Returns true if self has been created
      self :: PTR
      res :: BIN
      res = associated(self)
   end

   destroyed result (res) ::: inlined_by_foo
   ! Returns true if self has *not* been created
      self :: PTR
      res :: BIN
      res = NOT associated(self)
   end

   set_to(v)
   ! Set self to "v". Up to you to make sure they are compatible!
      self :: INOUT
      v :: MAT3{VEC_{INTRINSIC}}, IN
      i,j,k :: INT
      do i = 1,v.dim1
      do j = 1,v.dim2
      do k = 1,v.dim3
         self(i,j,k).element.set_to(v(i,j,k).element)
      end
      end
      end
   end

   zero
   ! Zero all elements
      self :: INOUT
      i,j,k :: INT
      do i = 1,.dim1
      do j = 1,.dim2
      do k = 1,.dim3
         self(i,j,k).element = 0
      end
      end
      end
   end

   size result (res) ::: get_from(MAT3{INTRINSIC}), inlined_by_foo
   ! Return the size of the array
      res :: INT
   end

   dim1 result (res) ::: get_from(MAT3{INTRINSIC})
   ! Return the size of the 1st dimension
      res :: INT
   end

   dim2 result (res) ::: get_from(MAT3{INTRINSIC})
   ! Return the size of the 2nd dimension
      res :: INT
   end

   dim3 result (res) ::: get_from(MAT3{INTRINSIC})
   ! Return the size of the 2nd dimension
      res :: INT
   end

   shape result (res) ::: get_from(MAT3{INTRINSIC})
   ! Return the size of the 2nd dimension
      res :: VEC{INT}(3)
   end

   is_same_shape_as(b) result(res) ::: get_from(MAT3{INTRINSIC})
   ! Returns TRUE if the matrix "b" has the same shape as self
      self :: IN
      b :: MAT3{VEC_{INT}}, IN
      res :: BIN
   end

end
