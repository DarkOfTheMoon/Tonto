! Copyright (C) Birger Dittrich, Dylan Jayatilaka, 2006
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: $

program run_PDBCONVERT

   implicit none

   cif :: CIF*
   atom :: VEC{ATOM}*
   crystal :: CRYSTAL*
   pdbfile :: TEXTFILE*
   file_name,data_block_name :: STR


   ! Create Tonto system variables
   TONTO_CREATE

   ! Create stdin (read from command line)
   stdin.create_stdin

   ! Create "stdout" file (it really is a file)
   stdout.create_stdout
   stdout.open

   ! Read the CIF file name and data block to process
   stdin.read(file_name)
   stdin.read(data_block_name)

   ! Create a CIF in the molecule "m"
   cif.create
   cif.set_file_name(file_name)
   cif.set_data_block_name(data_block_name)

   cif.open
   cif.find_data_block(data_block_name)

   ! Read the atoms from the CIF
   nullify(atom)
   atom.read_CIF(cif)

   if (atom.has_disorder) then
      WARN_IF(atom.has_disorder,"DISORDERED ASYMMETRIC CELL MAY BE PRUNED")
      WARN_IF(atom.has_disorder,"SOME ATOM INFORMATION MAY BE LOST")
   end

   ! Create the crystal; it shouldn't really exist beforehand
   nullify(crystal)
   crystal.create

   ! Read in the crystal from the CIF
   crystal.read_CIF(cif,skip_atoms=TRUE)

   ! Change atom positions to cartesian
   atom.resolve_axis_system(crystal.unit_cell)

   ! Analyse the fragment symmetry information
   crystal.make_fragment_data(atom)

   ! Write out the stdout.pdb file
   pdbfile.create("stdout.pdb")
   pdbfile.open(for="write")
   pdbfile.text("HEADER: TONTO generated PDB file")
   crystal.put_pdb(pdbfile)
   atom.put_pdb(pdbfile)
   pdbfile.close
   pdbfile.destroy

   ! Clean up
   crystal.destroy
   atom.destroy

   ! Do memory reporting
   TONTO_REPORT

   ! Delete stdin stdout
   stdout.destroy
   stdin.destroy

   ! Delete Tonto system variables
   TONTO_DESTROY

end
