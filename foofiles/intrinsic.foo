!---------------------------------------------------------------------------
!
! INTRINSIC: Generic intrinsic operations ...
!
! Copyright (C) Dylan Jayatilaka, 2011
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: intrinsic.foo $
!---------------------------------------------------------------------------

virtual module INTRINSIC

   implicit none

contains

! ====================
! Numerical operations
! ====================

   to_sum_of(v) ::: pure
   ! Set "self" to the sum of elements in vector "v"
      self :: OUT
      v :: VEC{INTRINSIC}, IN

      i :: INT
      
      self = 0
      do i = 1,v.dim
         self = self + v(i)
      end

   end

   to_sum_of(mx) ::: pure
   ! Set "self" to the sum of elements in matrix "mx"
      self :: OUT
      mx :: MAT{INTRINSIC}, IN

      i,j :: INT
      
      self = 0
      do j = 1,mx.dim2
      do i = 1,mx.dim1
         self = self + mx(i,j)
      end
      end

   end

! =============
! String widths
! =============
   
   str_length result (res) ::: pure
   ! Returns the minimal string length.
   ! Note: for non-real and non-complex only
      self :: IN
      res :: INT 

      string :: STR

      string = " "
      write(string,fmt=FMT) self
      res = len_trim(adjustl(string))

   end 
   
   str_length result (res) ::: pure
   ! Returns the minimal string length.
   ! Note: for real and complex only
      self :: IN
      res :: INT 

      string :: STR

      string = " "
      write(string,fmt=FMT) self
      res = len_trim(adjustl(string))

      if (real(self)<ZERO) res = res + 1

   end 

! =================
! String conversion
! =================

   to_str result (string) ::: pure
   ! Change self to a string of minimal length
      self :: IN
      string :: STR(len=.str_length)

      tmpcpy :: STR

      ! Write self to STR into "tmpcpy"
      tmpcpy = " "
      write(tmpcpy,fmt=FMT) self

      ! Transfer "tmpcpy" to the "string" with correct length
      write(string,fmt="(a)") trim(adjustl(tmpcpy))

   end

   to_str(format,left_justify) result (string) ::: pure
   ! Change self to a "string" using the specified fortran "format".
      self :: IN
      format :: STR, IN
      left_justify :: BIN, IN, optional
      string :: STR

      leftify :: BIN

      ! Use the given format
      string = " "
      write(string,fmt="("//trim(format)//")") self

      ! Left justify
      leftify = TRUE
      if (present(left_justify)) leftify = left_justify
      if (leftify) string = adjustl(string)

   end

   to_str(width,left_justify) result (string) ::: pure
   ! Change self to a string with specified "width".
      self :: IN
      width :: INT, IN
      left_justify :: BIN, IN, optional
      string :: STR(len=width)

      leftify :: BIN
      wid,fmt :: STR

      ! Write width as a string, in "wid"
      write(wid,fmt="(a)") width

      ! Write the format "fmt" from "wid"
      write(fmt,fmt="(a)") "(" // "STYLE" // trim(wid) // ")"

      ! Use the format "fmt" to get the result
      string = " "
      write(string,fmt=fmt) self

      ! Left justify
      leftify = TRUE
      if (present(left_justify)) leftify = left_justify
      if (leftify) string = adjustl(string)

   end

   to_str(style,width,precision,left_justify) result (string) ::: pure
   ! Change self to a string with specified "style", "width" and
   ! "precision" as defined in the fortran standard 
      self :: IN
      style :: STR, IN
      width,precision :: INT, IN
      left_justify :: BIN, IN, optional
      string :: STR(len=NN*width)

      leftify :: BIN
      wid,pre,fmt :: STR

      ! Write width/style/precision as a strings
      write(wid,fmt=*) width;     wid = adjustl(wid)
      write(pre,fmt=*) precision; pre = adjustl(pre)

      ! Write the format "fmt" (factor 2 for cpx)
      write(fmt,fmt="(a)") "(2"//trim(style)//trim(wid)//"."//trim(pre)//")"

      ! Use the "fmt" to get the result
      string = " "
      write(string,fmt=trim(fmt)) self

      ! Left justify
      leftify = TRUE
      if (present(left_justify)) leftify = left_justify
      if (leftify) string = adjustl(string)

   end

end
