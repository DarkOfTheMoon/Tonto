!-------------------------------------------------------------------------------
!
! COPPENSBASIS: For a Coppens style fitted relativistic atomic orbital basis.
!
! Copyright (C) Dylan Jayatilaka, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!
!-------------------------------------------------------------------------------

module COPPENSBASIS

   implicit none

#  undef ENSURE
#  ifndef NOGENERIC
#  define ENSURE(X,Y)       call ensure_(tonto,X,Y)
#  else
#  define ENSURE(X,Y)       call SYSTEM_ensure(tonto,X,Y)
#  endif

   keys DEFAULT_NULL :: STRVEC*, private

contains

!****************************
! Create and Destroy Routines
!****************************

   create ::: get_from(OBJECT), leaky
   ! Create an object
      self :: PTR
   end

   destroy ::: get_from(OBJECT), leaky
   ! Destroy an object
      self :: PTR
   end

   nullify_ptr_part
   ! Nullify the pointer parts of self
      nullify(.orbital)
   end

   destroy_ptr_part
   ! Destroy the pointer parts of self
      .orbital.destroy
   end

!   created result(res) ::: pure
!   ! Returns true if self has been created
!      self :: PTR
!      res :: BIN
!      res = associated(self)
!   end

!   destroyed result(res) ::: pure
!   ! Returns true if self has *not* been created
!      self :: PTR
!      res :: BIN
!      res = NOT associated(self)
!   end

   create_copy(b) ::: leaky
   ! Create a copy of the basis "b".
     b :: SELF_TYPE, IN
     self :: PTR
     .create
     .copy(b)
   end

   copy(b) ::: leaky
   ! Copy a basis "b" to "self". Make sure pointer parts of self are first
   ! destroyed or nullified, as you want.
      b :: SELF_TYPE, IN
      self = b
      .orbital.create_copy(b.orbital)
   end

   set_defaults
   ! Create and set up a default basis set
      .label   = "?"
      .n_orb   = 0
      .n_prim  = 0
   end

   update
   ! Update the shell data, if it exists
      if (.orbital.destroyed) return
      .n_orb   = .no_of_orbitals
      .n_prim  = .no_of_primitives
   end

!  ************
!  I/O Routines
!  ************

   read_keywords ::: get_from(OBJECT), recursive, leaky
   ! Read data from "stdin" using keyword style input.
   end

   process_keyword(keyword) ::: leaky
   ! Process command "keyword". Any required data needed by the "keyword" is
   ! inputted from "stdin".
     keyword :: STR(*), IN
     word :: STR
     word = keyword
     word.to_lower_case
     select case (word)
       case ("}            "); ! exit surrounding loop
       case ("label=       "); .read_label
       case ("orbitals=    "); .read_orbitals
       case ("put          "); .put
       case ("put_table    "); .put_table
       case ("tonto-style= "); .read_tonto_style
       case ("units=       "); .read_units
       ! These are only for making custom tables for the list type
       case ("put_label    "); stdout.put(.label,int_width=TRUE)
       case ("put_n_orb    "); stdout.put(.n_orb)
       case ("put_n_prim   "); stdout.put(.n_prim)
       case ("flush        "); stdout.flush
       case  default ;      UNKNOWN(word)
     end
   end

   read_units ::: get_from(OBJECT)
   ! Read a string which describes the units to be used
   end

   read_junk ::: get_from(OBJECT)
   ! Read in a junk string, useful for ignoring a field
   end

   read_label
   ! Read only the basis label
      stdin.read(.label)
   end

   read_orbitals ::: leaky
   ! Read a list of orbitals
      .orbital.read_list_keywords
      .update
   end

   read_tonto_style ::: leaky
   ! Create and read a tonto style basis set
      n :: INT
      .read_label
      .orbital.set_keys(["kind= ","occ=  ","n_fun=","n,c,z="])
      .orbital.read_data
      .update
   end

   put
   ! Put out the basis information to file "stdout"
      stdout.flush
      stdout.show("Coppens basis set : ",trim(.label))
      stdout.flush
      stdout.show("No. of orbitals        =",.n_orb)
      stdout.show("No. of primitives      =",.n_prim)
      .put_table
   end

   put_table
   ! Put out the basis information to file "stdout"
      i,j :: INT
      stdout.flush
      stdout.dash(int_fields=3,real_fields=3)
      stdout.put("Kind",int_width=TRUE)
      stdout.put("Orb #",int_width=TRUE)
      stdout.put("Prim",int_width=TRUE)
      stdout.put("N",int_width=TRUE)
      stdout.put("Exponent")
      stdout.put("Coeff")
      stdout.flush
      stdout.dash(int_fields=3,real_fields=3)
      do i = 1,.n_orb
         do j = 1,.orbital(i).n_fun
            if (j==1) then
               stdout.put(.orbital(i).kind,int_width=TRUE)
               stdout.put(i)
            else
               stdout.tab(int_fields=2)
            end
            stdout.put(j)
            stdout.put(.orbital(i).n(j))
            stdout.put(.orbital(i).z(j))
            stdout.put(.orbital(i).c(j))
            stdout.flush
         end
      end
      stdout.dash(int_fields=3,real_fields=3)
   end

!  ********************
!  Key related routines
!  ********************

   read_keys ::: get_from(OBJECT)
   ! Read the "keys".
   end

   process_keys ::: get_from(OBJECT), leaky
   ! Process each of the words in the "keys" list.
   end

   keys_created result (res) ::: get_from(OBJECT)
   ! Return TRUE if the list-element keys are created.
      res :: BIN
   end

   set_keys(the_keys) ::: get_from(OBJECT)
   ! This is for setting the "keys" externally.
     the_keys :: STRVEC(len=*,:)
   end

   clear_keys ::: get_from(OBJECT)
   ! This is for destroying the "keys" externally.
   end

   put_table_footer ::: get_from(OBJECT)
   ! Output a table footer from the list of "keys". NOTE: not all keywords need
   ! contribute to the banner - any unrecognised keyword is skipped.
   end

   put_table_header
   ! Output a table header from the list of "keys". NOTE: not all keywords need
   ! contribute to the banner - any unrecognised keyword is skipped.
     word :: STR
     width,k :: INT
   ENSURE(keys.created,"no keys")
     width = .table_width
     if (width > 0) then
       stdout.dash(width=width)
       do k = 1,size(keys)
         word = keys(k)
         word.to_lower_case
         select case (word)
           case ("put_label   "); stdout.put("label",int_width=TRUE)
           case ("put_n_orb   "); stdout.put("n_orb",int_width=TRUE)
           case ("put_n_prim  "); stdout.put("n_prim",int_width=TRUE)
           case ("flush       "); stdout.flush; exit
         end
         if (k==size(keys)) then
           stdout.flush ! In case they didn't write one.
           WARN("no flush keyword - you may later overrun the output buffer")
         end
       end
       stdout.dash(width=width)
     end
   end

   table_width result (res)
   ! Return the table width in characters, based on "keys".  Note that not all
   ! keywords need to contribute to the banner - if a keyword is not recognised,
   ! then it is skipped.
     word :: STR
     res,int_dash,real_dash,k :: INT
   ENSURE(keys.created,"no keys")
     int_dash = 0
     real_dash = 0
     do k = 1,size(keys)
       word = keys(k)
       word.to_lower_case
       select case (word)
         case ("}           "); ! exit surrounding loop
         case ("put_label   "); int_dash = int_dash + 1
         case ("put_n_orb   "); int_dash = int_dash + 1
         case ("put_n_prim  "); int_dash = int_dash + 1
         case ("flush       "); exit
         case default
       end
     end
     res = int_dash * stdout.int_width + real_dash * stdout.real_width
   end

!  *******
!  Methods
!  *******

   same_as(b) result(res)
   ! Return TRUE if the basis set "self" is the same as "b". Only the
   ! orbital vector is compared to see if they are "really" the same.
      self :: IN
      b :: SELF_TYPE, IN
      res :: BIN
      res = .orbital.same_as(b.orbital)
   end

   no_of_orbitals result(res) ::: pure
   ! Work out and return the number of orbitals in the basis set
      self :: IN
      res :: INT
      res = size(.orbital)
   end

   no_of_primitives result (res) ::: pure
   ! Work out and return the number of primitive fitting functions in the basis ! set
      self :: IN
      res :: INT
      i :: INT
      res = 0
      do i = 1,.no_of_orbitals
         res = res + .orbital(i).n_fun
      end
   end

   maximum_basis_n_value result (res)
   ! Returns the maximum n value over all orbitals in every basis set of the
   ! vector
     self :: IN
     res :: INT
     res = .orbital.maximum_orbital_n_value
   end

  min_exponent result (res) ::: pure
  ! Return the minimum exponent in the basis.
    self :: IN
    res,tmp :: REAL
    i :: INT
    ENSURE(.orbital.created,"no orbitals")
    res = ZERO
    do i= 1,.n_orb
      tmp = minval(.orbital(i).z)
      if (tmp < res) res = tmp
    end
  end

end
