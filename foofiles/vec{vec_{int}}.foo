!---------------------------------------------------------------------------
!
!  VEC{VEC_{INT}} : a matrix where each column is (possibly) a different length
!
! Copyright (C) Daniel Grimwood, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!---------------------------------------------------------------------------

module VEC{VEC_{INT}}

   implicit none

contains

   create(dim) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky
   ! Create space for object
      self :: PTR
      dim :: INT, IN
   end

   create(dim,dimv) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky
   ! Create space for a vector of vectors
   end

   create(dim,bounds) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky
   ! Create space for a vector of vectors
   end

   create_vec(dimv) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky
   ! Allocate the pointer parts
   end

   create_vec(bounds) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky
   ! Allocate the pointer parts
   end

   destroy ::: get_from(VEC{VEC_{INTRINSIC}}), leaky
   ! Destroy space for object
      self :: PTR
   end

   nullify_ptr_part ::: get_from(VEC{VEC_{INTRINSIC}})
   ! Nullify the pointer parts
   end

   destroy_ptr_part ::: get_from(VEC{VEC_{INTRINSIC}}), leaky
   ! Destroy the pointer parts
   end

   created result (res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has been created
      self :: PTR
      res :: BIN
   end

   destroyed result (res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has *not* been created
      self :: PTR
      res :: BIN
   end

   create_copy(vec) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky
   ! Create a replica copy of "vec".
      vec :: VEC{VEC_{INT}}, IN
      self :: PTR
   end

   copy(v) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky
   ! Make a copy of "v".
   end

   shrink(dim) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky
   ! Shrinks self to dimension "dim". Contents are retained.
   end

   expand(dim) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky
   ! Expands self to dimension "dim". Contents are retained.
   ! NOTE: pointer assignment is used to retain contents.
   ! NOTE: Elements which are added are nullified.
   end

   append(v) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky
   ! Expands self to the required dimension, and append the contents
   ! of encapsulated vector "v". 
   end

   append(value) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky
   ! Expands self to the required dimension, and append the single
   ! "value" onto the end of self.
   end

   join(list) result (res) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky
   ! Join together (i.e. concatenate) the vectors in self whose indices are
   ! listed in "list".
   end

   repetitions_in(list) ::: leaky
   ! Sort through "list" and return the indices of the repeated elements,
   ! including elements which are repeated only once (i.e. not repeated). The
   ! result "self" is a list of lists of the repeated elements (or, for unique
   ! elements, a list comprising only the unique element).
      self :: PTR
      list :: VEC{STR}, IN
   ENSURE(.destroyed,"self exists")
      n,n_rep,i,j,k :: INT
      mask :: VEC{BIN}*
      nullify(self)
      self.create(0)
      n = 0
      mask.create(list.dim)
      mask = TRUE
      do i = 1,list.dim
         if (NOT mask(i)) cycle
         n_rep = count(list(i)==list AND mask) ! Don't count previous elements
         n = n + 1
         self.expand(n)
         self(n).element.create(n_rep)
         self(n)[1] = i
         mask(i) = FALSE 
         k = 1
         do j = i+1,list.dim
            if (NOT mask(j)) cycle
            if (list(i)/=list(j)) cycle
            k = k + 1
            self(n)[k] = j
            mask(j) = FALSE 
         end
      end
      mask.destroy
   end

   repetitions_in(list,unique) ::: leaky
   ! Sort through "list" and return the indices of the repeated elements. The
   ! result "self" is a list of lists of the repeated elements (including the
   ! first element). AT the same time, "unique" is set to the indices of the
   ! non-repeatred elements. NOTE: this is not the same as the list of unique
   ! elements.
      self :: PTR
      list :: VEC{STR}, IN
      unique :: VEC{INT}*
   ENSURE(.destroyed,"self exists")
      u,n,n_rep,i,j,k :: INT
      mask :: VEC{BIN}*
      nullify(self)
      nullify(unique)
      self.create(0)
      unique.create(0)
      n = 0
      u = 0
      mask.create(list.dim)
      mask = TRUE
      do i = 1,list.dim
         if (NOT mask(i)) cycle
         mask(i) = FALSE                       ! Don't count the element itself
         n_rep = count(list(i)==list AND mask) ! ... or previous elements
         if (n_rep==0) then                    ! Not repeated
            u = u + 1
            unique.expand(u)
            unique(u) = i
         else                                  ! Repeated
            n = n + 1
            self.expand(n)
            self(n).element.create(n_rep+1)
            self(n)[1] = i
            k = 1
            do j = i+1,list.dim
               if (list(i)/=list(j)) cycle
               k = k + 1
               self(n)[k] = j
               mask(j) = FALSE 
            end
         end
      end
      mask.destroy
   end

end
