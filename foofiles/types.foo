! $Id$
!---------------------------------------------------------------------------------------
!
! TYPES : used to deposit all derived types used in TONTO.
!
! A separate module is required so that two modules can use 
! each others types, even if they can't use each others routines by
! with a "use" statement.
!
!---------------------------------------------------------------------------------------
module TYPES

   implicit none

#include "macros"

   type error_type
      INT :: status
      INT :: unit
   end

   type mm_type
      INT :: used 
      INT :: blocks 
      INT :: max_used 
      INT :: max_blocks 
      INT :: limit
      STR :: units
      INT :: level
      INT :: max_level
      IVEC, PTR   :: used_stack DEFAULT_NULL
      STRVEC, PTR :: call_stack DEFAULT_NULL
      INT :: check_level
   end 

   type dblfmt_type
      INT :: fields     
      INT :: width      
      INT :: precision  
      STR :: dbl_style  
   end 

   type buffer_type
      INT  :: pos                   ! position of the end of the last item
      INT  :: item                  ! the number of the last item
      INT  :: n_items               ! total number of items in the buffer
      BIN  :: analysed              ! true if the buffer has been analysed
      STR  :: comment_chars         ! comment characters used in the buffer
      BSTR :: buffer_str            ! the actual buffer string
   end 

   type unitnumber_type
     INT :: unit
   end

   type file_type
      INT :: unit
      INT :: record
      INT :: io_status
      STR :: name
      STR :: action
      STR :: file_status
      BIN :: buffered
      INT :: dbl_buffer_pos,int_buffer_pos
      VEC, PTR  :: dbl_buffer DEFAULT_NULL
      IVEC, PTR :: int_buffer DEFAULT_NULL
   end 

   type stream_type
      INT :: unit       ! This is a FILE
      INT :: record     
      INT :: io_status  
      STR :: name       
      INT :: fields     ! This is a DBLFMT
      INT :: width      
      INT :: precision  
      STR :: dbl_style  
   end 

   type input_type
      INT :: unit      ! This is a FILE
      INT :: record
      INT :: io_status
      STR :: name
      BUFFER :: buffer
   end 

   type output_type
      INT :: unit      ! This is a FILE
      INT :: record     
      INT :: io_status  
      STR :: name       
      INT :: fields    ! This is a DBLFMT
      INT :: int_width     
      INT :: dbl_width     
      INT :: dbl_precision 
      STR :: dbl_style     
      INT :: margin    ! These are new
      BIN :: labels    
      BUFFER :: buffer
   end 

   type archive_type
      STR         :: root_name         ! Archive root name
      STR         :: name              ! Archive name
      STR         :: kind              ! Archive basis kind for opmat objects
      STR         :: format            ! Archive format (blank for binary)
      FILE , PTR  :: file DEFAULT_NULL ! Binary file part
      INPUT, PTR  :: in DEFAULT_NULL   ! Input text file part
      OUTPUT, PTR :: out DEFAULT_NULL  ! Output text file part
   end 

   type rys_type
      INT :: n
      VEC, PTR :: w DEFAULT_NULL
      VEC, PTR :: r DEFAULT_NULL
   end

   type ivec__type
      IVEC, PTR :: vec DEFAULT_NULL
   end

   type vec__type
      VEC, PTR :: vec DEFAULT_NULL
   end

   type mat__type
      MAT, PTR :: mat DEFAULT_NULL
   end

   type mat3__type
      MAT3, PTR :: mat3 DEFAULT_NULL
   end

   type opvec_type
      INT        :: n_bf                    ! No of spatial basis functions (i.e.  AO's)
      VEC, PTR   :: restricted DEFAULT_NULL ! Restricted spinorbital representation
      VEC, PTR   :: alpha DEFAULT_NULL      ! Alpha part of a DODS representation
      VEC, PTR   :: beta DEFAULT_NULL       ! Beta  part of a DODS representation
      VEC, PTR   :: general DEFAULT_NULL    ! General mixed alpha-beta matrix representation
   end

   type opmat_type
      INT       :: n_bf
      MAT, PTR  :: restricted DEFAULT_NULL         ! Restricted spinorbital representation
      MAT, PTR  :: alpha DEFAULT_NULL              ! Alpha part of a DODS representation
      MAT, PTR  :: beta DEFAULT_NULL               ! Beta  part of a DODS representation
      MAT, PTR  :: general DEFAULT_NULL            ! General mixed alpha-beta matrix representation
      CMAT, PTR :: restricted_complex DEFAULT_NULL ! Complex restricted representation
      CMAT, PTR :: alpha_complex DEFAULT_NULL      ! Complex alpha part of a DODS representation
      CMAT, PTR :: beta_complex DEFAULT_NULL       ! Complex beta  part of a DODS representation
      CMAT, PTR :: general_complex DEFAULT_NULL    ! Complex general mixed alpha-beta matrix representation
      VEC, PTR  :: triangle DEFAULT_NULL           ! Space saving : lower triangle
      VEC, PTR  :: square DEFAULT_NULL             ! Space saving : lower triangle is real part, upper is imaginary
   end

   type vecdiis_type
      INT :: keep
      INT :: start
      INT :: n_vec
      INT :: new
      DBL :: error_length
      ARCHIVE :: archive
      MAT, PTR  :: mat DEFAULT_NULL
      VEC, PTR  :: coeff DEFAULT_NULL
   end

   type cvecdiis_type
      INT :: keep
      INT :: start
      INT :: n_vec
      INT :: new
      DBL :: error_length
      ARCHIVE :: archive
      CMAT, PTR  :: diis DEFAULT_NULL
      CVEC, PTR  :: coeff DEFAULT_NULL
   end

   type matdiis_type
      INT :: keep
      INT :: start
      INT :: n_vec
      INT :: new
      DBL :: error_length
      ARCHIVE :: archive
      MAT, PTR  :: diis DEFAULT_NULL
      VEC, PTR  :: coeff DEFAULT_NULL
   end

   type cmatdiis_type
      INT :: keep
      INT :: start
      INT :: n_vec
      INT :: new
      DBL :: error_length
      ARCHIVE :: archive
      CMAT, PTR  :: diis DEFAULT_NULL
      CVEC, PTR  :: coeff DEFAULT_NULL
   end

   type gaussian_type
      INT :: l 
      VEC(3) :: pos
      DBL :: ex
   end 

   type gaussian2_type
      INT :: l_a,l_b
      VEC(3) :: pos_a,pos_b
      DBL :: ex_a,ex_b
   end 

   type gaussian4_type
      INT :: l_a,l_b,l_c,l_d
      VEC(3) :: pos_a,pos_b,pos_c,pos_d
      DBL :: ex_a,ex_b,ex_c,ex_d
   end 

   type shell_type
      INT :: l 
      INT :: n_comp 
      INT :: n_cc 
      VEC, PTR :: ex DEFAULT_NULL
      VEC, PTR :: cc DEFAULT_NULL
   end 

   type shell1_type
      INT :: l 
      INT :: n_comp 
      INT :: n_cc 
      VEC(3) :: pos
      VEC, PTR :: ex DEFAULT_NULL
      VEC, PTR :: cc DEFAULT_NULL
   end 

   type shell2_type
      SHELL1 :: a          
      SHELL1 :: b          
   end

   type shell4_type
      SHELL1 :: a          
      SHELL1 :: b          
      SHELL1 :: c          
      SHELL1 :: d          
   end

   type basis_type
      STR :: label
      INT :: n_shell
      INT :: n_bf
      INT :: n_prim
      SHELLVEC, PTR :: shell DEFAULT_NULL
   end 

   type atom_type
      STR    :: label
      INT    :: atomic_number
      VEC(3) :: pos          
      MAT(3,3) :: thermal_tensor = ZERO
      BASIS, PTR :: basis DEFAULT_NULL
   end 

   type plotgrid_type
      STR    :: kind
      INT    :: orbital
      DBL    :: maximum_cell_distance
      INT    :: n_x, n_y, n_z, n_pt
      INT    :: centre_atom, x_atom_1, x_atom_2, y_atom_1, y_atom_2
      DBL    :: del
      VEC(3) :: centre, origin
      VEC(3) :: x_axis, y_axis, z_axis
      VEC(3) :: width, offset
      BIN    :: calc_x_width, calc_y_width
   end 

   type dftgrid_type
      STR :: spherical_grid_kind              ! Type of spherical grid
      STR :: radial_grid_kind                 ! Type of radial grid
      INT :: spherical_grid_order             ! Order of the spherical grid
      INT :: radial_grid_order                ! Order of the radial grid
      INT :: n_spherical_pts                  ! No of spherical grid points
      INT :: n_radial_pts                     ! No of radial grid points
      INT :: n_atom_pts                       ! No of atom grid points
      DBL :: becke_m_partition_power = FIVE   ! Used in smoothing the partition boundary
      DBL :: gauss_chebyshev_alpha   = ONE    ! Gauss-Chebychev radial grid parameters
      DBL :: gauss_chebyshev_m       = ONE
      DBL :: euler_maclaurin_alpha   = ONE    ! Euler-Maclaurin radial grid parameters
      DBL :: euler_maclaurin_m       = ONE
   end

   type irrep_type
      CHR(4) :: label
      INT :: dimension
      VEC, PTR :: character DEFAULT_NULL
      MAT3, PTR :: mat DEFAULT_NULL
   end

   type pointgroup_type
      CHR(4) :: symbol                 ! symmetry symbol
      CHR(4) :: ID_symbol              ! group id symbol
      INT :: ID_number                 ! group id number
      INT :: axis_order                ! principal axis order
      INT :: order                     ! order of the group
      INT :: n_irrep                   ! no of irreducible representations
      INT :: n_gen                     ! No. of generators
      BIN :: has_complex_irreps        ! true if the group has complex irreps
      IMAT, PTR :: table DEFAULT_NULL     ! group multiplication table
      MAT3, PTR :: mat DEFAULT_NULL       ! 3x3 representation matrices
      MAT3, PTR :: ptr DEFAULT_NULL       ! 3x3 representation matrices for p functions, same as mat
      MAT3, PTR :: dtr DEFAULT_NULL       ! 6x6 representation matrices for d functions
      MAT3, PTR :: ftr DEFAULT_NULL       ! 10x10 representation matrices for f functions
      IVEC, PTR :: inverse DEFAULT_NULL   ! Indices of inverse group elements
      IRREPVEC, PTR :: irrep DEFAULT_NULL ! List of irrrducible representations
   end

   type spacegroup_type
      STR :: IT_symbol                 ! International Table (Hermann-Maguin) symmetry symbol
      INT :: IT_group_number           ! International tables group number
      STR :: Hall_symbol               ! Hall notation symbol
      CHR :: lattice_symbol            ! Lattice symmetry symbol
      STR :: lattice_type              ! Lattice type
      BIN :: centrosymmetric           ! True if center of symmetry present
      INT :: order(3)                  ! Order of each crystal axis
      INT :: setting_index(3)          ! Indicates axes of rotation corresponding to x, y, or z...
      BIN :: has_bar(3)                ! True if bar for this axis
      BIN :: has_subscript(3)          ! True if subscript present for this axis
      CHR :: setting_symbol(3)         ! Superscript rotation axis symbols axis
      CHR :: subscript(3,3)            ! Subscript translations symbols for each axis
      INT :: lattice_symbol_index      ! Lattice symbol index number
      INT :: nL                        ! No. of translational lattice generators
      INT :: nR                        ! No. of rotation generators
      INT :: nG                        ! No. of generators
      INT :: n_seitz                   ! No. of Seitz matrices
      MAT3, PTR :: seitz DEFAULT_NULL     ! Seitz matrices (the transpose, as defined in Hall's paper)
      VEC(3) :: position                  ! Fractional unit cell position to reduce the spacegroup symmetry
      MAT, PTR ::  symop_pos DEFAULT_NULL ! List of Equivalent positions generated by seitx matrices
      MAT3, PTR :: symop_mat DEFAULT_NULL ! Corresponding symmetry matrix used to generate symop_pos
      INT :: n_symop                   ! No. of equivalent positions 
      INT :: n_unique                  ! No. of equivalent positions unrelated by traslation or inversion
      IVEC, PTR :: unique_symop        ! Index of unique symops not related by translation or inversion
      IVEC, PTR :: map_to_unique DEFAULT_NULL ! Maps symop to a unique symop. Negative indicates inversion
   end

   type unitcell_type
      VEC(3) :: angle                    ! cell angles  (in radians)
      VEC(3) :: length                   ! cell lengths (in bohr)
      DBL :: cell_volume                 ! cell volumes (bohr^3)
      MAT(3,3) :: cell_matrix            ! direct cell matrix (bohr)
      MAT(3,3) :: inverse_cell_matrix    ! inverse direct cell matrix (bohr^{-1})
      MAT(3,3) :: reciprocal_cell_matrix ! reciprocal cell matrix (bohr^{-1})
      MAT(3,3) :: rotation_matrix        ! Rotation matrix applied to reciprocal cell
      MAT(3,3) :: rrcm                   ! Rotated reciprocal cell matrix (bohr^{-1}) times 2 PI
   end

   type xtal_type
      SPACEGROUP, PTR :: spacegroup DEFAULT_NULL   ! spacegroup
      UNITCELL, PTR :: unitcell DEFAULT_NULL       ! unitcell
      INT :: n_refl                                ! No. of reflection planes
      IVEC, PTR :: h DEFAULT_NULL                  ! Miller indices for the reflections
      IVEC, PTR :: k DEFAULT_NULL                  ! Miller indices for the reflections
      IVEC, PTR :: l DEFAULT_NULL                  ! Miller indices for the reflections
      VEC, PTR :: F_exp DEFAULT_NULL               ! Experimental structure factors
      VEC, PTR :: sigma DEFAULT_NULL               ! Experimental sigma
      VEC, PTR :: F_calc DEFAULT_NULL              ! Calculated structure factors
      DBL :: r_factor                              ! R factor s agreementtatistic
      DBL :: weighted_r_factor                     ! Weighted R factor agreement statistic
      DBL :: chi2                                  ! Chi^2 agreement statistic
      DBL :: gof                                   ! Goodness of fit parameter
      INT :: n_param                               ! No of fitting parameters used
      DBL :: scale_factor                          ! Scale factor
      DBL :: sf_multiplier                         ! Multiply calculated structure factors
      BIN :: correct_extinction                    ! Whether to correct extinction
      BIN :: correct_dispersion                    ! Whether to correct dispersion
      DBL :: ext_factor                            ! Secondary extinction factor
      DBL :: wavelength                            ! Experiment wavelength
      STR :: kind                                  ! Diffraction experiment used.
      BIN :: F_calc_scaled                         ! Whether F_calc has been scaled.
      VEC, PTR :: F_to_add DEFAULT_NULL            ! Structure factors to add onto F_calc
   end

   type scfdata_type
     STR :: kind
     STR :: initial_guess
     DBL :: nuclear_energy
     DBL :: kinetic_energy
     DBL :: energy
     DBL :: old_energy
     DBL :: difference
     DBL :: convergence
     INT :: iteration,lambda_iteration
     INT :: max_iterations
     INT :: damp_finish
     DBL :: damp_factor
     DBL :: lambda, lambda_max, lambda_step
     DBL :: chi2, old_chi2, gof, r_factor, weighted_r_factor
     BIN :: direct
     BIN :: using_diis
     BIN :: output
     BIN :: NDDO                       ! Neglect of diatomic differential overlap
     DBL :: level_shift
     VECDIIS :: diis                   ! For fock matrix diis extrapolation
   end

   type time_type
     IVEC(8) :: started, stopped
   end

   type mol_type
      STR             :: name                    ! Name of molecule
      INPUT, PTR      :: in DEFAULT_NULL         ! Input file
      OUTPUT, PTR     :: out DEFAULT_NULL        ! Output file
      VEC(3)          :: B_field                 ! Applied magnetic field in atomic units
      VEC(3)          :: E_field                 ! Applied electric field in atomic units
      XTAL, PTR       :: xtal DEFAULT_NULL       ! Crystal symmetry of the enclosing crystal
      POINTGROUP, PTR :: pointgroup DEFAULT_NULL ! Pointgroup symmetry of the molecule
      ATOMVEC, PTR    :: atom DEFAULT_NULL       ! List of atoms
      BASISVEC, PTR   :: basis DEFAULT_NULL      ! List of basis sets
      PLOTGRID, PTR   :: grid DEFAULT_NULL       ! An enclosing rectangular grid for the molecule, for plots
      DFTGRID, PTR    :: dftgrid DEFAULT_NULL    ! For storing and generating DFT integration grids
      INT :: charge                              ! Electric charge molecule
      INT :: mult                                ! Spin multiplicity of molecule
      INT :: thermal_smearing_model              ! Thermal smearing model for ft integrals
      BIN :: optimise_thermals                   ! Whether to optimise the thermal parameters
      INT :: n_e                                 ! No of electrons
      INT :: n_a                                 ! No of alpha electrons
      INT :: n_b                                 ! No of beta electrons
      INT :: n_atom                              ! No of atoms
      INT :: n_basis                             ! No of basis sets
      INT :: n_shell                             ! Total number of shells in the molecular basis set
      INT :: n_shell_pairs                       ! Total number of shell pairs in the molecular basis set
      INT :: n_shell_quartets                    ! Total number of shell quartets in the molecular basis set
      INT :: n_bf                                ! Total number of basis functions in the molecular basis set
      INT :: n_prim                              ! Total number of primitives in the molecular basis set
      IVEC, PTR    :: atom_for_shell DEFAULT_NULL            ! Atom index for molecular shell index array
      IVEC, PTR    :: atom_shell_for_shell DEFAULT_NULL      ! Atom shell index for molecular shell index array
      IVEC, PTR    :: first_shell_for_atom DEFAULT_NULL      ! First molecule shell index for an atom
      IVEC, PTR    :: first_basis_fn_for_shell DEFAULT_NULL  ! First basis function for a given shell
      IVEC, PTR    :: last_basis_fn_for_shell DEFAULT_NULL   ! Last basis function for a given shell
      SCFDATA, PTR :: scfdata DEFAULT_NULL            ! SCF data object
      OPVEC, PTR   :: orbital_energies DEFAULT_NULL   ! The orbital energies
      OPMAT, PTR   :: molecular_orbitals DEFAULT_NULL ! The (real) molecular orbitals
      OPMAT, PTR   :: density_matrix DEFAULT_NULL     ! The real density matrix
      OPMAT, PTR   :: natural_orbitals DEFAULT_NULL   ! The natural orbitals
      OPVEC, PTR   :: occupation DEFAULT_NULL         ! The associated occupation numbers
      OPMAT, PTR   :: fock_matrix DEFAULT_NULL        ! The real fock matrix
      STR          :: partition_model                 ! Model for partitioning fragments of the molecule
      VEC, PTR     :: partition_factors DEFAULT_NULL  ! Partitioning factors for each atom
   end 

end
