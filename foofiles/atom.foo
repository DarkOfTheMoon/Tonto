!-------------------------------------------------------------------------------
!
! ATOM: can be a quantum mechanical atom, with a basis set
!       or a molecular mechanical atom with a force field potential
!
! Copyright (C) Dylan Jayatilaka, 1997
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!-------------------------------------------------------------------------------

module ATOM

   implicit none

   keys :: VEC{STR}*, private DEFAULT_NULL

!  ***************
!  Data statements
!  ***************

   !  The Periodic Table

   element_symbols :: VEC{STR}(len=2,103)

   data element_symbols/ &
    "H ",                                                                                "He", &
    "Li","Be",                                                  "B ","C ","N ","O ","F ","Ne", &
    "Na","Mg",                                                  "Al","Si","P ","S ","Cl","Ar", &
    "K ","Ca","Sc","Ti","V ","Cr","Mn","Fe","Co","Ni","Cu","Zn","Ga","Ge","As","Se","Br","Kr", &
    "Rb","Sr","Y ","Zr","Nb","Mo","Tc","Ru","Rh","Pd","Ag","Cd","In","Sn","Sb","Te","I ","Xe", &
    "Cs","Ba","La",     "Ce","Pr","Nd","Pm","Sm","Eu","Gd","Tb","Dy","Ho","Er","Tm","Yb","Lu", &
                   "Hf","Ta","W ","Re","Os","Ir","Pt","Au","Hg","Tl","Pb","Bi","Po","At","Rn", &
    "Fr","Ra","Ac",     "Th","Pa","U ","Np","Pu","Am","Cm","Bk","Cf","Es","Fm","Md","No","Lr"/

   element_names :: VEC{STR}(len=12,103)

   data element_names/ &
    "Hydrogen    ","Helium      ", &
    "Lithium     ","Beryllium   ", &
    "Boron       ","Carbon      ","Nitrogen    ","Oxygen      ","Fluorine    ","Neon        ", &
    "Sodium      ","Magnesium   ", &
    "Aluminium   ","Silicon     ","Phosphorous ","Sulfur      ","Chlorine    ","Argon       ", &
    "Potassium   ","Calcium     ", &
    "Scandium    ","Titanium    ","Vanadium    ","Chromium    ","Manganese   ", &
    "Iron        ","Cobalt      ","Nickel      ","Copper      ","Zinc        ", &
    "Gallium     ","Germanium   ","Arsenic     ","Selinium    ","Bromine     ","Krypton     ", &
    "Rubidium    ","Strontium   ", &
    "Yttrium     ","Zirconium   ","Niobium     ","Molybdenum  ","Technitium  ", &
    "Ruthenium   ","Rhodium     ","Palladium   ","Silver      ","Cadmium     ", &
    "Indium      ","Tin         ","Antimony    ","Tellurium   ","Iodine      ","Xenon       ", &
    "Cesium      ","Barium      ", &
    "Lanthanum   ", &
    "Cerium      ","Praseodymium","Neodymium   ","Promethium  ","Samarium    ","Europium    ","Gadolinium  ", &
    "Terbium     ","Dysprosium  ","Holmium     ","Erbium      ","Thulium     ","Ytterbium   ","Lutetium    ", &
                   "Haffnium    ","Tantalum    ","Tangsten    ","Rhenium     ", &
    "Osmium      ","Iridium     ","Platinum    ","Gold        ","Mercury     ", &
    "Thallium    ","Lead        ","Bismuth     ","Polonium    ","Astatine    ","Radon       ", &
    "Francium    ","Radium      ", &
    "Actinium    ", &
    "Thorium     ","Protactinium","Uranium     ","Neptunium   ","Plutonium   ","Americium   ","Curium      ", &
    "Berkellium  ","Californium ","Einsteinium ","Fermium     ","Mendelevium ","Nobelium    ","Lawrencium  "/

   !  Bragg-Slater radii taken from Aaron Lee's code
   !  WARNING: this is in Angstroms!

   bragg_slater_radii :: VEC{REAL}(54)

   data bragg_slater_radii/ &
      0.35d0,                                          0.35d0, &
      1.45d0,1.05d0,0.85d0,0.70d0,0.65d0,0.60d0,0.50d0,0.45d0, &
      1.80d0,1.50d0,1.25d0,1.10d0,1.00d0,1.00d0,1.00d0,1.00d0, &
      2.20d0,1.80d0, &
                    1.60d0,1.40d0,1.35d0,1.40d0,1.40d0,1.40d0,1.35d0,1.35d0,1.35d0,1.35d0, &
                    1.30d0,1.25d0,1.15d0,1.15d0,1.15d0,1.15d0, &
      1.30d0,1.30d0, &
                    1.30d0,1.30d0,1.30d0,1.30d0,1.30d0,1.30d0,1.30d0,1.30d0,1.30d0,1.30d0, &
                    1.30d0,1.30d0,1.30d0,1.30d0,1.30d0,1.30d0  /

   atom_bonded_range_factor :: REAL = 0.4d0*BOHR_PER_ANGSTROM

   ! Covalent radii from CCDC, in Angstrom

   covalent_radii_ccdc :: VEC{REAL}(110)
   
   data covalent_radii_ccdc/ &
      0.23d0,                                          1.50d0,&
      0.68d0,0.35d0,0.83d0,0.68d0,0.68d0,0.68d0,0.64d0,1.50d0,&
      0.97d0,1.10d0,1.35d0,1.20d0,1.05d0,1.02d0,0.99d0,1.51d0,&
      1.33d0,0.99d0,&
                    1.44d0,1.47d0,1.33d0,1.35d0,1.35d0,1.34d0,1.33d0,1.50d0,1.52d0,1.45d0,&
                    1.22d0,1.17d0,1.21d0,1.22d0,1.21d0,1.50d0,&
      1.47d0,1.12d0,&
                    1.78d0,1.56d0,1.48d0,1.47d0,1.35d0,1.40d0,1.45d0,1.50d0,1.59d0,1.69d0,&
                    1.63d0,1.46d0,1.46d0,1.47d0,1.40d0,1.50d0,&
      1.67d0,1.34d0,&
                    1.87d0,1.83d0,1.82d0,1.81d0,1.80d0,1.80d0,1.99d0,1.79d0,1.76d0,1.75d0,1.74d0,1.73d0,1.72d0,1.94d0,&
                    1.72d0,1.57d0,1.43d0,1.37d0,1.35d0,1.37d0,1.32d0,1.50d0,1.50d0,1.70d0,&
                    1.55d0,1.54d0,1.54d0,1.68d0,1.21d0,1.50d0,&
      1.50d0,1.90d0,&
                    1.88d0,1.79d0,1.61d0,1.58d0,1.55d0,1.53d0,1.51d0,0.99d0,1.54d0,1.83d0,1.50d0,1.50d0,1.50d0,1.50d0,&
                    1.50d0,1.50d0,1.50d0,1.50d0,1.50d0,1.50d0,1.50d0,1.50d0 /

   ! Covalent radii, where do they come from? in Angstrom x 100

   covalent_radii_invariom :: VEC{INT}(109)

   
   
   
   
   data covalent_radii_invariom/ &
      37,                                                                                   0, &
      123,  90,                                                    80,  77,  74,  71,  72,   0, &
      154, 136,                                                   118, 111, 106, 102,  99,   0, &
      203, 174, 144, 132, 122, 118, 117, 117, 116, 115, 117, 125, 126, 122, 120, 116, 114,   0, &
      218, 191, 162, 145, 134, 130, 127, 125, 125, 128, 134, 148, 144, 141, 140, 136, 133,   0, &
      235, 198, &
               169, 165, 165, 164, 164, 162, 185, 161, 159, 159, 157, 157, 156, 170, &
               156, 144, 134, 130, 128, 126, 127, 130, 134, 149, 148, 147, 146, 146, 145,   0, &
       0,   0, &
               188, 165, 161, 142, 130, 151, 182,   0,   0,   0,   0,   0,   0,   0, &
                 0,   0,   0,   0,   0,   0,   0 /

   ! Allred-Rochow electronegativities, where do they come from?
   ! Values x 100

   allred_rochow_electronegs :: VEC{INT}(85)
   
   data allred_rochow_electronegs/ &
      220,                                                                                 550, &
      97, 147,                                                   201, 250, 307, 350, 440, 480, &
      101, 123,                                                   147, 174, 206, 244, 283, 320, &
      91, 104, 120, 132, 145, 156, 160, 164, 170, 175, 175, 166, 182, 202, 220, 248, 274, 290, &
      89,  99, 111, 122, 123, 130, 136, 142, 145, 130, 142, 146, 149, 172, 182, 201, 221, 240, &
      86,  97, &
               108, 108, 107, 107, 107, 107, 110, 111, 110, 110, 110, 111, 111, 106, &
               114, 123, 133, 140, 146, 152, 155, 142, 142, 144, 144, 155, 167, 176, 190 /

   ! Van der Waals radii from CCDC, in Angstrom

   vdw_radii_ccdc :: VEC{REAL}(110)
   
   data vdw_radii_ccdc/ &
      1.20d0, 1.40d0, 1.82d0, 2.00d0, 2.00d0, 1.70d0, 1.55d0, 1.52d0, 1.47d0, 1.54d0, &
      2.27d0, 1.73d0, 2.00d0, 2.10d0, 1.80d0, 1.80d0, 1.75d0, 1.88d0, 2.75d0, 2.00d0, &
      2.00d0, 2.00d0, 2.00d0, 2.00d0, 2.00d0, 2.00d0, 2.00d0, 1.63d0, 1.40d0, 1.39d0, &
      1.87d0, 2.00d0, 1.85d0, 1.90d0, 1.85d0, 2.02d0, 2.00d0, 2.00d0, 2.00d0, 2.00d0, &
      2.00d0, 2.00d0, 2.00d0, 2.00d0, 2.00d0, 1.63d0, 1.72d0, 1.58d0, 1.93d0, 2.17d0, &
      2.00d0, 2.06d0, 1.98d0, 2.16d0, 2.00d0, 2.00d0, 2.00d0, 2.00d0, 2.00d0, 2.00d0, &
      2.00d0, 2.00d0, 2.00d0, 2.00d0, 2.00d0, 2.00d0, 2.00d0, 2.00d0, 2.00d0, 2.00d0, &
      2.00d0, 2.00d0, 2.00d0, 2.00d0, 2.00d0, 2.00d0, 2.00d0, 1.72d0, 1.66d0, 1.55d0, &
      1.96d0, 2.02d0, 2.00d0, 2.00d0, 2.00d0, 2.00d0, 2.00d0, 2.00d0, 2.00d0, 2.00d0, &
      2.00d0, 1.86d0, 2.00d0, 2.00d0, 2.00d0, 2.00d0, 2.00d0, 2.00d0, 2.00d0, 2.00d0, &
      2.00d0, 2.00d0, 2.00d0, 2.00d0, 2.00d0, 2.00d0, 2.00d0, 2.00d0, 2.00d0, 2.00d0 /

   ! Abundance weighted atomic masses taken from the WWW to be the
   ! same as Turbomol

   atomic_masses :: VEC{REAL}(92)

   data atomic_masses/ &
       1.007970d0,   4.002600d0, &
       6.939000d0,   9.012200d0,  10.811000d0,  12.011150d0,  14.006700d0,  15.999400d0,  18.998400d0,  20.183000d0, &
      22.989800d0,  24.312000d0,  26.981500d0,  28.086000d0,  30.973800d0,  32.064000d0,  35.453000d0,  39.948000d0, &
      39.102000d0,  40.080000d0, &
                    44.956000d0,  47.900000d0,  50.942000d0,  51.996000d0,  54.938000d0, &
                    55.850000d0,  58.933200d0,  58.710000d0,  63.540000d0,  65.370000d0, &
                                  69.720000d0,  72.590000d0,  74.921600d0,  78.960000d0,  79.909000d0,  83.800000d0, &
      85.470000d0,  87.620000d0,  &
                    88.905000d0,  91.220000d0,  92.906000d0,  95.940000d0,  99.000000d0, &
                   101.070000d0, 102.905000d0, 106.400000d0, 107.870000d0, 112.400000d0, &
                                 114.820000d0, 118.690000d0, 121.750000d0, 127.600000d0, 126.904000d0, 131.300000d0, &
      132.905000d0, 137.330000d0, &
                   138.910000d0, 140.115000d0, 140.908000d0, 144.240000d0, 146.920000d0, 150.360000d0, 151.965000d0, &
                   157.250000d0, 158.925000d0, 162.500000d0, 164.930000d0, 167.260000d0, 168.930000d0, 173.040000d0, &
                   174.970000d0, 178.490000d0, 180.950000d0, 183.850000d0, 186.210000d0, &
                   190.200000d0, 192.220000d0, 195.080000d0, 196.070000d0, 200.590000d0, &
                                 204.380000d0, 207.200000d0, 208.980000d0, 208.980000d0, 209.990000d0, 222.020000d0, &
      223.020000d0, 226.030000d0, &
                   227.030000d0, 232.040000d0, 231.040000d0, 238.030000d0/

   ! Abundance-weighted coherent neutron scattering lengths in fm
   ! taken from: International Tables for Crystallography, Vol. C,
   ! 1992, pp 384-391

   neutron_scattering_lengths :: VEC{REAL}(95)

   data neutron_scattering_lengths/ &
      -3.7390,  3.2600, &
      -1.9000,  7.7900,  5.3000,  6.6460,  9.3600,  5.8030,  5.6540,  4.5470, &
       3.6300,  5.3750,  3.4490,  4.1490,  5.1300,  2.8470,  9.5770,  1.9090, &
       3.7100,  4.9000, &
               12.2900, -3.4380,  -.3824,  3.6350, -3.7300, &
                9.5400,  2.5000, 10.3000,  7.7180,  5.6890, &
                         7.2879,  8.1929,  6.5800,  7.9700,  6.7950,  7.8000, &
       7.0800,  7.0200, &
                7.7500,  7.1600,  7.0540,  6.9500,  6.8000, &
                7.2100,  5.8800,  5.9100,  5.9220,  5.1000, &
                         4.0650,  6.2257,  5.5700,  5.8000,  5.2800,  4.8500, &
       5.4200,  5.0600, &
                8.2400,  4.8400,  4.4500,  7.6900, 12.6000,  4.2000,  6.7300, &
                9.5000,  7.3800, 16.9000,  8.0800,  8.0300,  7.0700, 12.4100, &
                7.2100,  7.7700,  6.9100,  4.7700,  9.2000, &
               11.0000, 10.6000,  9.6000,  7.6300, 12.6920, &
                         8.7760,  9.4017,  8.5307,  0.0000,  0.0000,  0.0000, &
       0.0000, 10.0000, &
                0.0000, 10.6300,  9.1000,  8.4170, 10.5500, 14.1000,  8.3000/

   ! X-ray dispersion correction factors.
   ! First element is f', second is f". Cr wavelength = 2.289620A.

   dispersion_correction_Cr :: VEC{CPX}(92)

   data dispersion_correction_Cr/ &
    (  0.0,  0.0), (  0.0,  0.0), (  0.0023,  0.0008), (  0.0083,  0.0033), (0.0190,  0.0094), &
    (  0.0364,  0.0213), (  0.0606,  0.0416), (  0.0928,  0.0731), (  0.1324,  0.1192), (  0.1793,  0.1837), &
    (  0.2295,  0.2699), (  0.2778,  0.3812), (  0.3260,  0.5212), (  0.3647,  0.6921), (  0.3898,  0.8984), &
    (  0.3899,  1.1410), (  0.3508,  1.4222), (  0.2609,  1.7458), (  0.0914,  2.1098), ( -0.1987,  2.5138), &
    ( -0.6935,  2.9646), ( -1.6394,  3.4538), ( -4.4818,  0.4575), ( -2.1308,  0.5468), ( -1.5980,  0.6479), &
    ( -1.2935,  0.7620), ( -1.0738,  0.8897), ( -0.9005,  1.0331), ( -0.7338,  1.1930), ( -0.6166,  1.3712), &
    ( -0.4989,  1.5674), ( -0.3858,  1.7841), ( -0.2871,  2.0194), ( -0.1919,  2.2784), ( -0.1095,  2.5578), &
    ( -0.0316,  2.8669), (  0.0247,  3.1954), (  0.1037,  3.6029), (  0.1263,  3.9964), (  0.1338,  4.4226), &
    (  0.1211,  4.8761), (  0.0801,  5.3484), ( -0.0025,  5.8597), ( -0.1091,  6.4069), ( -0.2630,  6.9820), &
    ( -0.4640,  7.5938), ( -0.7387,  8.2358), ( -1.1086,  8.9174), ( -1.5975,  9.6290), ( -2.2019, 10.3742), &
    ( -3.0637, 11.1026), ( -4.2407, 11.8079), ( -5.6353, 12.6156), ( -8.1899, 11.7407), (-10.3310, 12.8551), &
    (-11.0454, 10.0919), (-12.8190,  3.5648), ( -9.3304,  3.8433), ( -7.9841,  4.1304), ( -7.1451,  4.4278), &
    ( -6.5334,  4.7422), ( -6.0570,  5.0744), ( -5.6630,  5.4178), ( -5.3778,  5.7756), ( -5.0951,  6.1667), &
    ( -4.8149,  6.5527), ( -4.5887,  6.9619), ( -4.4106,  7.3910), ( -4.2698,  7.8385), ( -4.1523,  8.2969), &
    ( -4.0630,  8.7649), ( -4.0564,  9.2832), ( -3.9860,  9.8171), ( -3.9270, 10.3696), ( -3.9052, 10.9346), &
    ( -3.9016, 11.5251), ( -3.9049, 12.1453), ( -3.9435, 12.7910), ( -3.9908, 13.4551), ( -4.1029, 14.1473), &
    ( -4.2233, 14.8643), ( -4.4167, 15.5987), ( -4.6533, 16.3448), ( -4.9604, 17.1410), ( -5.3399, 17.9390), &
    ( -5.7275, 18.7720), ( -6.2180, 19.6009), ( -6.7502, 20.4389), ( -7.4161, 21.3053), ( -8.2118, 22.2248), &
    ( -9.4459, 23.1548), ( -9.9362, 23.1239)/

   ! X-ray dispersion correction factors.
   ! First element is f', second is f". Cu wavelength = 1.540520A.

   dispersion_correction_Cu :: VEC{CPX}(92)

   data dispersion_correction_Cu/ &
    (  0.0,  0.0), (  0.0,  0.0), (  0.0008,  0.0003), (  0.0038,  0.0014), (  0.0090,  0.0039), &
    (  0.0181,  0.0091), (  0.0311,  0.0180), (  0.0492,  0.0322), (  0.0727,  0.0534), (  0.1019,  0.0833), &
    (  0.1353,  0.1239), (  0.1719,  0.1771), (  0.2130,  0.2455), (  0.2541,  0.3302), (  0.2955,  0.4335), &
    (  0.3331,  0.5567), (  0.3639,  0.7018), (  0.3843,  0.8717), (  0.3868,  1.0657), (  0.3641,  1.2855), &
    (  0.3119,  1.5331), (  0.2191,  1.8069), (  0.0687,  2.1097), ( -0.1635,  2.4439), ( -0.5299,  2.8052), &
    ( -1.1336,  3.1974), ( -2.3653,  3.6143), ( -3.0029,  0.5091), ( -1.9646,  0.5888), ( -1.5491,  0.6778), &
    ( -1.2846,  0.7763), ( -1.0885,  0.8855), ( -0.9300,  1.0051), ( -0.7943,  1.1372), ( -0.6763,  1.2805), &
    ( -0.5657,  1.4385), ( -0.4688,  1.6079), ( -0.3528,  1.8200), ( -0.2670,  2.0244), ( -0.1862,  2.2449), &
    ( -0.1121,  2.4826), ( -0.0483,  2.7339), (  0.0057,  3.0049), (  0.0552,  3.2960), (  0.0927,  3.6045), &
    (  0.1215,  3.9337), (  0.1306,  4.2820), (  0.1185,  4.6533), (  0.0822,  5.0449), (  0.0259,  5.4591), &
    ( -0.0562,  5.8946), ( -0.1759,  6.3531), ( -0.3257,  6.8362), ( -0.5179,  7.3500), ( -0.7457,  7.9052), &
    ( -1.0456,  8.4617), ( -1.4094,  9.0376), ( -1.8482,  9.6596), ( -2.4164, 10.2820), ( -3.1807, 10.9079), &
    ( -4.0598, 11.5523), ( -5.3236, 12.2178), ( -8.9294, 11.1857), ( -8.8380, 11.9157), ( -9.1472,  9.1891), &
    ( -9.8046,  9.8477), (-14.9734,  3.7046), ( -9.4367,  3.9380), ( -8.0393,  4.1821), ( -7.2108,  4.4329), &
    ( -6.6179,  4.6937), ( -6.1794,  4.9776), (  5.7959,  5.2718), ( -5.4734,  5.5774), ( -5.2083,  5.8923), &
    ( -4.9801,  6.2216), ( -4.7710,  6.5667), ( -4.5932,  6.9264), ( -4.4197,  7.2980), ( -4.2923,  7.6849), &
    ( -4.1627,  8.0900), ( -4.0753,  8.5060), ( -4.0111,  8.9310), ( -3.9670,  9.3834), ( -3.9588,  9.8433), &
    ( -3.9487, 10.3181), ( -3.9689, 10.8038), ( -4.0088, 11.2969), ( -4.0794, 11.7994), ( -4.1491, 12.3296), &
    ( -4.2473, 12.8681), ( -4.3638, 13.4090)/

   ! X-ray dispersion correction factors.
   ! First element is f', second is f". Mo wavelength = 0.709260A.

   dispersion_correction_Mo :: VEC{CPX}(92)

   data dispersion_correction_Mo/ &
    (  0.0,  0.0), (  0.0,  0.0), ( -0.0003,  0.0001), (  0.0005,  0.0002), (  0.0013,  0.0007),  &
    (  0.0033,  0.0016), (  0.0061,  0.0033), (  0.0106,  0.0060), (  0.0171,  0.0103), (  0.0259,  0.0164),  &
    (  0.0362,  0.0249), (  0.0486,  0.0363), (  0.0645,  0.0514), (  0.0817,  0.0704), (  0.1023,  0.0942),  &
    (  0.1246,  0.1234), (  0.1484,  0.1585), (  0.1743,  0.2003), (  0.2009,  0.2494), (  0.2262,  0.3064),  &
    (  0.2519,  0.3716), (  0.2776,  0.4457), (  0.3005,  0.5294), (  0.3209,  0.6236), (  0.3368,  0.7283),  &
    (  0.3463,  0.8444), (  0.3494,  0.9721), (  0.3393,  1.1124), (  0.3201,  1.2651), (  0.2839,  1.4301),  &
    (  0.2307,  1.6083), (  0.1547,  1.8001), (  0.0499,  2.0058), ( -0.0929,  2.2259), ( -0.2901,  2.4595),  &
    ( -0.5574,  2.7079), ( -0.9393,  2.9676), ( -1.5307,  3.2498), ( -2.7962,  3.5667), ( -2.9673,  0.5597),  &
    ( -2.0727,  0.6215), ( -1.6857,  0.6857), ( -1.4390,  0.7593), ( -1.2594,  0.8363), ( -1.1178,  0.9187),  &
    ( -0.9988,  1.0072), ( -0.8971,  1.1015), ( -0.8075,  1.2024), ( -0.7276,  1.3100), ( -0.6537,  1.4246),  &
    ( -0.5866,  1.5461), ( -0.5308,  1.6751), ( -0.4742,  1.8119), ( -0.4205,  1.9578), ( -0.3680,  2.1192),  &
    ( -0.3244,  2.2819), ( -0.2871,  2.4523), ( -0.2486,  2.6331), ( -0.2180,  2.8214), ( -0.1943,  3.0179),  &
    ( -0.1753,  3.2249), ( -0.1638,  3.4418), ( -0.1578,  3.6682), ( -0.1653,  3.9035), ( -0.1723,  4.1537),  &
    ( -0.1892,  4.4098), ( -0.2175,  4.6783), ( -0.2586,  4.9576), ( -0.3139,  5.2483), ( -0.3850,  5.5486),  &
    ( -0.4720,  5.8584), ( -0.5830,  6.1852), ( -0.7052,  6.5227), ( -0.8490,  6.8722), ( -1.0185,  7.2310),  &
    ( -1.2165,  7.6030), ( -1.4442,  7.9887), ( -1.7033,  8.3905), ( -2.0133,  8.8022), ( -2.3894,  9.2266),  &
    ( -2.8358,  9.6688), ( -3.3944, 10.1111), ( -4.1077, 10.2566), ( -5.1210, 11.0496), ( -7.9122,  9.9777),  &
    ( -8.0659, 10.4580), ( -7.2224,  7.7847), ( -6.7704,  8.1435), ( -6.8494,  8.5178), ( -7.2400,  8.8979),  &
    ( -8.0334,  9.2807), ( -9.6767,  9.6646)/

   ! X-ray dispersion correction factors.
   ! First element is f', second is f". Ag wavelength = 0.559360A.

   dispersion_correction_Ag :: VEC{CPX}(92)

   data dispersion_correction_Ag/ &
    (  0.0,  0.0), (  0.0,  0.0), ( -0.0004,  0.0000), (  0.0001,  0.0001), (  0.0004,  0.0004),  &
    (  0.0015,  0.0009), (  0.0030,  0.0019), (  0.0056,  0.0036), (  0.0096,  0.0061), (  0.0152,  0.0098),  &
    (  0.0218,  0.0150), (  0.0298,  0.0220), (  0.0406,  0.0313), (  0.0522,  0.0431), (  0.0667,  0.0580),  &
    (  0.0826,  0.0763), (  0.0998,  0.0984), (  0.1191,  0.1249), (  0.1399,  0.1562), (  0.1611,  0.1926),  &
    (  0.1892,  0.2348), (  0.2060,  0.2830), (  0.2276,  0.3376), (  0.2496,  0.3992), (  0.2704,  0.4681),  &
    (  0.2886,  0.5448), (  0.3050,  0.6296), (  0.3147,  0.7232), (  0.3240,  0.8257), (  0.3242,  0.9375),  &
    (  0.3179,  1.0589), (  0.3016,  1.1903), (  0.2758,  1.3314), (  0.2367,  1.4831), (  0.1811,  1.6452),  &
    (  0.1067,  1.8192), (  0.0068,  2.0025), ( -0.1172,  2.2025), ( -0.2879,  2.4099), ( -0.5364,  2.6141),  &
    ( -0.8282,  2.8404), ( -1.2703,  3.0978), ( -2.0087,  3.3490), ( -5.3630,  3.6506), ( -2.5280,  0.5964),  &
    ( -1.9556,  0.6546), ( -1.6473,  0.7167), ( -1.4396,  0.7832), ( -1.2843,  0.8542), ( -1.1587,  0.9299),  &
    ( -1.0547,  1.0104), ( -0.9710,  1.0960), ( -0.8919,  1.1868), ( -0.8200,  1.2838), ( -0.7527,  1.3916),  &
    ( -0.6940,  1.5004), ( -0.6411,  1.6148), ( -0.5890,  1.7358), ( -0.5424,  1.8624), ( -0.5012,  1.9950),  &
    ( -0.4626,  2.1347), ( -0.4287,  2.2815), ( -0.3977,  2.4351), ( -0.3741,  2.5954), ( -0.3496,  2.7654),  &
    ( -0.3302,  2.9404), ( -0.3168,  3.1241), ( -0.3091,  3.3158), ( -0.3084,  3.5155), ( -0.3157,  3.7229),  &
    ( -0.3299,  3.9377), ( -0.3548,  4.1643), ( -0.3831,  4.3992), ( -0.4201,  4.6430), ( -0.4693,  4.8944),  &
    ( -0.5280,  5.1558), ( -0.5977,  5.4269), ( -0.6812,  5.7081), ( -0.7638,  5.9978), ( -0.8801,  6.2989),  &
    ( -1.0117,  6.6090), ( -1.1676,  6.9287), ( -1.3494,  7.2566), ( -1.5613,  7.5986), ( -1.8039,  7.9509),  &
    ( -2.0847,  8.3112), ( -2.4129,  8.6839), ( -2.8081,  9.0614), ( -3.2784,  9.4502), ( -3.8533,  9.8403),  &
    ( -4.6067, 10.2413), ( -5.7225, 10.6428)/

   saved_self :: ATOM*, private  DEFAULT_NULL

contains

! ******************
! Allocation methods
! ******************

   create ::: get_from(OBJECT), leaky
   ! Create an object
   end

   destroy ::: get_from(OBJECT), leaky
   ! Destroy an object
   end

   nullify_ptr_part 
   ! Nullify the pointer parts of the atom
   ! WARNING: all of these are usually pointer assigned in MOLECULE
   ! Therefore, the appropriate MOLECULE destructor should be called.
      nullify(.basis)          
      nullify(.slaterbasis)
      nullify(.coppensbasis)
      nullify(.atomic_orbitals)
      nullify(.density_matrix)
      nullify(.natural_orbitals)
      nullify(.occupation_numbers)
      nullify(.interpolator)
      nullify(.first_basis_fn_for_shell)
      nullify(.last_basis_fn_for_shell)
      nullify(.precomputed_basis_shellpair)
   end

   destroy_ptr_part ::: leaky
   ! Destroy the pointer parts of an atom
   ! WARNING: all of these are usually pointer assigned in MOLECULE
   ! Therefore, the appropriate MOLECULE destructor should be called.
      .basis.destroy
      .slaterbasis.destroy
      .coppensbasis.destroy
      .atomic_orbitals.destroy
      .density_matrix.destroy
      .natural_orbitals.destroy
      .occupation_numbers.destroy
      .interpolator.destroy
      .first_basis_fn_for_shell.destroy
      .last_basis_fn_for_shell.destroy
      .precomputed_basis_shellpair.destroy
   end

   created result (res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has been created
      self :: PTR
      res :: BIN
   end

   destroyed result (res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has *not* been created
      self :: PTR
      res :: BIN
   end

   create_copy(object) ::: get_from(OBJECT), leaky
   ! Create a copy of object
   end

   copy(atom) ::: leaky
   ! Make self a copy of atom.  
   ! WARNING: The basis sets point to externally allocated arrays, so
   ! they should usually be nullified before the atom is destroyed. 
      atom :: ATOM

      self = atom

      .nullify_ptr_part

      if (atom.basis.created)           .basis => atom.basis
      if (atom.slaterbasis.created)     .slaterbasis => atom.slaterbasis
      if (atom.coppensbasis.created)    .coppensbasis => atom.coppensbasis

      if (atom.first_basis_fn_for_shell.created)    .first_basis_fn_for_shell.create_copy(atom.first_basis_fn_for_shell)
      if (atom.last_basis_fn_for_shell.created)     .last_basis_fn_for_shell.create_copy(atom.last_basis_fn_for_shell)
      if (atom.precomputed_basis_shellpair.created) .precomputed_basis_shellpair.create_copy(atom.precomputed_basis_shellpair)

      if (atom.atomic_orbitals.created)    .atomic_orbitals.create_copy(atom.atomic_orbitals)
      if (atom.density_matrix.created)     .density_matrix.create_copy(atom.density_matrix)
      if (atom.natural_orbitals.created)   .natural_orbitals.create_copy(atom.natural_orbitals)
      if (atom.occupation_numbers.created) .occupation_numbers.create_copy(atom.occupation_numbers)

   end

   set_defaults
   ! Set a default atom
      .label = "?"
      .atomic_number = 0
      .oxidation_state = 0
      .pos = [ ZERO,ZERO,ZERO ]
      .U_iso = ZERO
      .thermal_tensor = ZERO
      .charge = ZERO
      .dipole = ZERO
      .spin = ZERO
      .spin_dipole = ZERO
      .charge_polarisability = ZERO
      .dipole_polarisability = ZERO
      .basis_label = " "
      .basis_kind = " "
      .slaterbasis_label = " "
      .coppensbasis_label = " "
      .axis_system = "cartesian"
      .thermal_axis_system = "cartesian"
      .use_interpolator = TRUE
      .energy = ZERO
      .group  = 0
      ! MM/protien defaults
      .protein_strand = 0
      .residue_atom_code = " "
      .residue_code = " "
      .residue_sequence_number = 0
      .mm_forcefield_name = " "
      .mm_atom_type = " "
      .mm_charge = ZERO
      .restraining_position = [ ZERO,ZERO,ZERO ]
      .restraining_force_constant = ZERO
      .site_occupancy = ONE
      .site_disorder_group = 0
   end

   set_label_and_atomic_number(label)
   ! Set an ATOM "label" and extract the atomic number from it.
      label :: STR
      lensym,z :: INT
      symbol :: STR
      error :: BIN
      .label = label
      if (label.is_int) then    ! The label must be the atomic number
         z = label.to_int
         .atomic_number = z
      else                      ! First part of the label is the element symbol
         lensym = label.index_of_nonalphabetical-1
         error = lensym>2 OR lensym==0
         ENSURE(NOT error,"unacceptable atom symbol, "// trim(label))
         symbol = label(1:lensym)
         symbol(1:1).to_upper_case
         symbol(2:2).to_lower_case
         if (symbol=="D" OR symbol=="T") then
           .atomic_number = 1
         else if (any(element_symbols==symbol(1:2))) then
            do z = 1,size(element_symbols)
               if (element_symbols(z)==symbol(1:2)) exit
            end
           .atomic_number = z
         else
            DIE("unknown element symbol: "//trim(symbol))
         end
      end
   end

!   set_coppensbasis_label(label) ::: leaky
!   ! Set the coppensbasis "label".
!      label :: STR
!      .coppensbasis_label = label
!      if (.coppensbasis.destroyed) .coppensbasis.create
!      .coppensbasis.set_label(label)
!   end

   set_atom_bonded_range_factor(fac) ::: selfless
   ! Set the range factor to decide when atoms are bonded.
      fac :: REAL
   ENSURE(fac>ZERO,"range factor must be grreater than zero")
      atom_bonded_range_factor = fac
   end

   set_covalent_radii_ccdc ::: selfless
   ! Set the the covalent radii for a given atomic number.
      an :: INT
      new_radius :: REAL
      stdin.read(an)
   ENSURE(an>0 AND an<111,"atomic number out of range")
      stdin.read(new_radius)
      covalent_radii_ccdc(an) = new_radius
   end

   set_saved_self ::: get_from(OBJECT)
   ! Set saved_self. This version has self a target.
   end

! ************
! I/O Routines
! ************

   read_keywords ::: get_from(OBJECT), recursive, leaky
   ! Read data from "stdin" using keyword style input.
   end

   process_keyword(keyword) ::: leaky
   ! Process command "keyword". Any required data needed by the "keyword" is
   ! inputted from "stdin".
      keyword :: STR, IN
      word :: STR
      word = keyword
      word.to_lower_case
      select case (word)
       case ("}                            ")  ! exit case
       case ("axis_system=                 "); .read_axis_system
       case ("basis_label=                 "); .read_basis_label
       case ("b_eq=                        "); .read_B_iso
       case ("b_iso=                       "); .read_B_iso
       case ("charge=                      "); .read_charge
       case ("coppensbasis_label=          "); .read_coppensbasis_label
       case ("group=                       "); .read_group
       case ("junk=                        "); ATOM::read_junk
       case ("label=                       "); .read_label
       case ("mm_atom_type=                "); .read_mm_atom_type
       case ("mm_charge=                   "); .read_mm_charge
       case ("mm_forcefield_name=          "); .read_mm_forcefield_name
       case ("oxidation_state=             "); .read_oxidation_state
       case ("pdb_input_line=              "); .read_pdb_input_line
       case ("pos=                         "); .read_pos
       case ("position=                    "); .read_pos
       case ("put                          "); .put
       case ("put_interpolator             "); .put_interpolator
       case ("residue_atom_code=           "); .read_residue_atom_code
       case ("residue_code=                "); .read_residue_code
       case ("restraining_position=        "); .read_restraining_position
       case ("restraining_force_constant=  "); .read_restraining_force
       case ("residue_sequence_number=     "); .read_residue_sequence_number
       case ("set_covalent_radii_ccdc      "); ATOM::set_covalent_radii_ccdc
       case ("site_disorder_group=        "); .read_site_disorder_group
       case ("site_occupancy=              "); .read_site_occupancy
       case ("slaterbasis_label=           "); .read_slaterbasis_label
       case ("thermal_axis_system=         "); .read_thermal_axis_system
       case ("thermal_tensor=              "); .read_thermal_tensor
       case ("u_eq=                        "); .read_U_iso
       case ("u_iso=                       "); .read_U_iso
       case ("u_tensor=                    "); .read_thermal_tensor
       case ("units=                       "); ATOM::read_units
       ! These are only for making custom tables for the list type
       case ("---For custom tables---      ");
       case ("flush                        "); stdout.flush
       case ("put_atomic_number            "); stdout.put(.atomic_number)
       case ("put_bragg_slater_radius      "); stdout.put(.bragg_slater_radius)
       case ("put_chemical_symbol          "); stdout.put(.chemical_symbol,int_width=TRUE)
       case ("put_column_number            "); stdout.put(.column_number)
       case ("put_ground_state_multiplicity"); stdout.put(.ground_state_multiplicity)
       case ("put_label                    "); stdout.put(.label,int_width=TRUE)
       case ("put_mass                     "); stdout.put(.mass)
       case ("put_mean_neutron_number      "); stdout.put(.mean_neutron_number)
       case ("put_neutron_scattering_length"); stdout.put(.neutron_scattering_length)
       case ("put_period_block             "); stdout.put(.period_block)
       case ("put_period_number            "); stdout.put(.period_number)
       case ("put_pos                      "); stdout.put(.pos(1))
                                               stdout.put(.pos(2))
                                               stdout.put(.pos(3))
       case ("put_position                 "); stdout.put(.pos(1))
                                               stdout.put(.pos(2))
                                               stdout.put(.pos(3))
       case ("put_thermal_tensor           "); .put_thermal_tensor
       case  default;                        UNKNOWN(word)
      end
   end

   read_units ::: get_from(OBJECT), selfless, private
   ! Read a string which describes the units to be used
   end

   read_junk ::: get_from(OBJECT), selfless, private
   ! Read in a junk string, useful for ignoring a field
   end

   read_group
   ! Read the index which describes the group the atom belongs to.
      stdin.read(.group)
   end

   read_pos
   ! Read in the position
      stdin.read(.pos)
   end

   read_label
   ! Read an ATOM label.
      .set_label_and_atomic_number(stdin.next_str)  ! Input atom label
   end

   read_charge
   ! Read the charge
      stdin.read(.charge)
   end

   read_oxidation_state
   ! Read the oxidation state
      stdin.read(.oxidation_state)
   end

   read_residue_atom_code
   ! Read the atom code describing where in the residue this atom
   ! resides (case sensitive).
      stdin.read(.residue_atom_code)
   end

   read_residue_code
   ! Read the residue name that this atom belongs to.
      stdin.read(.residue_code)
   end

   read_pdb_input_line
   ! Read a line in the PDB input style
      word :: STR
      stdin.read(word)
      word.to_lower_case
      ENSURE(word=="atom","PDB line does not begin with 'atom'")
      .read_residue_atom_code
      .read_residue_code
      .read_residue_sequence_number
      .read_pos
      ATOM::read_junk
      ATOM::read_junk
      .read_label
   end

   read_residue_sequence_number
   ! Read the residue sequence number of the atom in the molecule
      stdin.read(.residue_sequence_number)
   end

   read_mm_atom_type
   ! Read the atom type potential, used to define the force field potential
      stdin.read(.mm_atom_type)
   end

   read_mm_charge
   ! Read the MM charge on this atom
      stdin.read(.mm_charge)
   end

   read_mm_forcefield_name
   ! Read the MM forcefield name for this atom
      stdin.read(.mm_forcefield_name)
   end

   read_restraining_position
   ! Read the restraining position
      stdin.read(.restraining_position)
   end

   read_restraining_force
   ! Read the restrain force constant for this atom
      stdin.read(.restraining_force_constant)
   end

   read_site_disorder_group
   ! Read the site disorder group, used mainly for crystallographic applications.
      stdin.read(.site_disorder_group)
   end

   read_site_occupancy
   ! Read the site occupancy, used mainly for crystallographic applications.
      stdin.read(.site_occupancy)
   end

   read_axis_system
   ! Read a string which describes the axis system. Currently allowed is
   ! "cartesian" or "crystal". NOTE: .thermal_axis_system is changed too.
      stdin.read(.axis_system)
      .thermal_axis_system = .axis_system
      select case (.axis_system)
        case ("cartesian")
        case ("crystal  ")
        case default
          UNKNOWN(.axis_system)
      end
   end

   set_axis_system(word)
   ! Read a string which describes the axis system. Currently allowed is
   ! "cartesian" or "crystal". NOTE: .thermal_axis_system is changed too.
      word :: STR, IN
      .axis_system = word
      .thermal_axis_system = .axis_system
      select case (.axis_system)
       case ("cartesian")
       case ("crystal  ")
       case default
         UNKNOWN(.axis_system)
      end
   end

   read_thermal_axis_system
   ! Read a string which describes the thermal tensor axis system.
   ! Currently allowed, is "cartesian" or "crystal".
      stdin.read(.thermal_axis_system)
      select case (.thermal_axis_system)
        case ("cartesian")
        case ("crystal  ")
        case default
          UNKNOWN(.thermal_axis_system)
      end
   end

   set_thermal_axis_system(word)
   ! Read a string which describes the thermal tensor axis system.
   ! Currently allowed, is "cartesian" or "crystal".
      word :: STR, IN
      .thermal_axis_system = word
      select case (.thermal_axis_system)
       case ("cartesian")
       case ("crystal  ")
       case default
         UNKNOWN(.thermal_axis_system)
      end
   end

! Bases should be resolved, not read in.

!   read_basis ::: leaky
!   ! Read the basis set from "stdin"
!      .basis.create
!      .basis.read_keywords
!   end

!   read_slaterbasis ::: leaky
!   ! Read the slaterbasis set from "stdin"
!      .slaterbasis.create
!      .slaterbasis.read_keywords
!   end

!   read_coppensbasis ::: leaky
!   ! Read the coppensbasis set from "stdin"
!      .coppensbasis.create
!      .coppensbasis.read_keywords
!   end

   read_basis_label ::: leaky
   ! Read the basis set label from "stdin" which will be used to match a basis
   ! set to ...
      stdin.read(.basis_label)
   end

   read_slaterbasis_label ::: leaky
   ! Read the slater basis set label from "stdin" which will be used to match a
   ! basis set to ...
      stdin.read(.slaterbasis_label)
   end

   read_coppensbasis_label ::: leaky
   ! Read the Coppens basis set label from "stdin" which will be used to match a
   ! basis set to ... (in fact there is only one coppens basis type)
      stdin.read(.coppensbasis_label)
   end

   read_U_iso
   ! Read the isotropic thermal parameters from "stdin".  NOTE: units are
   ! Bohr^2, not Angstrom^2.
      stdin.read(.U_iso)
   end

   read_B_iso
   ! Read the isotropic B factor.NOTE: units are Bohr^2, not Angstrom^2.
      B_iso :: REAL
      stdin.read(B_iso)
      .U_iso = B_iso/(EIGHT*PI*PI)
   end

   read_thermal_tensor
   ! Read thermal parameters from "stdin". These are assumed to be in the
   ! cartesian axis system, and in bohr^2.  The expansion of the thermal
   ! smearing temperature factor term is:
   !              TF = exp ( -2\pi^2 U_{ij} h_i h_j a^*_i a^*_j )
   ! where (h) are the miller indices and (a^*) are the reciprocal lattice
   ! constants in angstrom^{-2}.
      tensor :: VEC{REAL}(6)
      stdin.read(tensor)
      .thermal_tensor(1,1) = tensor(1) ! Units must be bohr^2
      .thermal_tensor(2,2) = tensor(2) ! unless over-ridden by read_units=
      .thermal_tensor(3,3) = tensor(3)
      .thermal_tensor(1,2) = tensor(4)
      .thermal_tensor(1,3) = tensor(5)
      .thermal_tensor(2,3) = tensor(6)
      .thermal_tensor(2,1) = .thermal_tensor(1,2)
      .thermal_tensor(3,1) = .thermal_tensor(1,3)
      .thermal_tensor(3,2) = .thermal_tensor(2,3)
   end

! ********************
! Key related routines
! ********************

   read_keys ::: get_from(OBJECT)
   ! Read the "keys".
   end

   process_keys ::: get_from(OBJECT), leaky
   ! Process each of the words in the "keys" list.
   ENSURE(keys.created,"no keys")
   end

   keys_created result (res) ::: get_from(OBJECT)
   ! Return TRUE if the list-element keys are created.
   end

   set_keys(the_keys) ::: get_from(OBJECT)
   ! This is for setting the "keys" externally.
   end

   clear_keys ::: get_from(OBJECT)
   ! This is for destroying the "keys" externally.
   end

   put_table_footer ::: get_from(OBJECT)
   ! Output a table footer from the list of "keys". NOTE: not all keywords need
   ! contribute to the banner - any unrecognised keyword is skipped.
   end

   put_table_header
   ! Output a table header from the list of "keys". NOTE: not all keywords need
   ! contribute to the banner - any unrecognised keyword is skipped.
   ENSURE(keys.created,"no keys")
      word :: STR
      width,k :: INT
      width = .table_width
      if (width > 0) then
       stdout.dash(width=width)
       do k = 1,size(keys)
         word = keys(k)
         word.to_lower_case
         select case (word)
           case ("put_label   "); stdout.put("label",int_width=TRUE)
           case ("put_n_shells"); stdout.put("n_shells",int_width=TRUE)
           case ("put_n_bf    "); stdout.put("n_bf",int_width=TRUE)
           case ("put_n_prim  "); stdout.put("n_prim",int_width=TRUE)
           case ("flush       "); stdout.flush; exit
         end
         if (k==size(keys)) then
           stdout.flush ! In case they didn't write one.
           WARN("no flush keyword - you may later overrun the output buffer")
         end
       end
       stdout.dash(width=width)
      end
   end

   table_width result (res)
   ! Return the table width in characters, based on "keys".  Note that not all
   ! keywords need to contribute to the banner - if a keyword is not recognised,
   ! then it is skipped.
      res :: INT
   ENSURE(keys.created,"no keys")
      word :: STR
      int_dash,real_dash,k :: INT
      int_dash = 0
      real_dash = 0
      do k = 1,size(keys)
       word = keys(k)
       word.to_lower_case
       select case (word)
         case ("}           "); ! exit surrounding loop
         case ("put_label   "); int_dash = int_dash + 1
         case ("put_n_shells"); int_dash = int_dash + 1
         case ("put_n_bf    "); int_dash = int_dash + 1
         case ("put_n_prim  "); int_dash = int_dash + 1
         case ("flush       "); exit
         case default
       end
      end
      res = int_dash * stdout.int_width + real_dash * stdout.real_width
   end

! *******************
! Axis change methods
! *******************

   resolve_axis_system(cell)
   ! Change the axis system for the position and thermal tensors to
   ! "cartesian". "crystal" holds the axis system information.
      cell :: UNIT_CELL, IN
      if (.axis_system=="crystal")         .position_from(cell)
      if (.thermal_axis_system=="crystal") .thermal_tensor_from(cell)
   end

   change_axis_system_to(axiskind,cell)
   ! Change the axis system for the position *and* thermal tensors
   ! to "axiskind", either crystal or cartesian.
      axiskind :: STR, IN
      cell :: UNIT_CELL, IN
      select case (axiskind)
       case ("cartesian"); .position_from(cell); .thermal_tensor_from(cell)
       case ("crystal  "); .position_to(cell);   .thermal_tensor_to(cell)
       case default
         UNKNOWN(axiskind)
      end
   end

   change_coord_axis_system_to(axiskind,cell)
   ! Change the coordinate axis system for the position 
   ! to "axiskind", either crystal or cartesian.
      axiskind :: STR, IN
      cell :: UNIT_CELL, IN
      select case (axiskind)
       case ("cartesian"); .position_from(cell)
       case ("crystal  "); .position_to(cell)
       case default
         UNKNOWN(axiskind)
      end
   end

   change_thermal_axis_system_to(axiskind,cell)
   ! Change the axis system for the thermal tensors to "axiskind",
   ! either crystal or cartesian.
      axiskind :: STR, IN
      cell :: UNIT_CELL, IN
      select case (axiskind)
       case ("cartesian"); .thermal_tensor_from(cell)
       case ("crystal  "); .thermal_tensor_to(cell)
       case default
         UNKNOWN(axiskind)
      end
   end

   thermal_tensor_from(cell)
   ! Change thermal parameters from the crystal axis system to the
   ! cartesian axis system
      cell :: UNIT_CELL, IN
      select case (.thermal_axis_system)
       case ("crystal  ")
         ! Convert U_iso only when there is no anisotropic U tensor
         if (.U_iso>ZERO AND .thermal_tensor.is_zero) then 
            .thermal_tensor(1,1) = .U_iso
            .thermal_tensor(2,2) = .U_iso
            .thermal_tensor(3,3) = .U_iso
            .thermal_tensor(1,2) = .U_iso * cos(cell.gamma_star)
            .thermal_tensor(1,3) = .U_iso * cos(cell.beta_star)
            .thermal_tensor(2,3) = .U_iso * cos(cell.alpha_star)
            .thermal_tensor(2,1) = .thermal_tensor(1,2)
            .thermal_tensor(3,1) = .thermal_tensor(1,3)
            .thermal_tensor(3,2) = .thermal_tensor(2,3)
         end 
         .thermal_tensor.change_basis_using(cell.direct_U_matrix)
         ! After conversion, we should have U_iso for all diagonal elements in the cartesian basis
         .thermal_axis_system = "cartesian"
       case ("cartesian")
         ! do nothing
       case default
         UNKNOWN(.thermal_axis_system)
      end
   end

   thermal_tensor_to(cell)
   ! Change thermal parameters in the cartesian axis system to the
   ! crystal axis system
      cell :: UNIT_CELL, IN
      select case (.thermal_axis_system)
       case ("crystal  ")
         ! do nothing
       case ("cartesian")
         .thermal_tensor.change_basis_using(cell.reciprocal_U_matrix)
         .thermal_axis_system = "crystal"
       case default
         UNKNOWN(.thermal_axis_system)
      end
   end

   thermal_tensor_from_U_iso(cell)
   ! Set the thermal parameters in the crystal axis system from to the
   ! cartesian axis system
      cell :: UNIT_CELL, IN
      select case (.thermal_axis_system)
       case ("crystal  ")
         ! Convert U_iso only when there is no anisotropic U tensor
         if (.U_iso>ZERO AND .thermal_tensor.is_zero) then 
            .thermal_tensor(1,1) = .U_iso
            .thermal_tensor(2,2) = .U_iso
            .thermal_tensor(3,3) = .U_iso
            .thermal_tensor(1,2) = .U_iso * cos(cell.gamma_star)
            .thermal_tensor(1,3) = .U_iso * cos(cell.beta_star)
            .thermal_tensor(2,3) = .U_iso * cos(cell.alpha_star)
            .thermal_tensor(2,1) = .thermal_tensor(1,2)
            .thermal_tensor(3,1) = .thermal_tensor(1,3)
            .thermal_tensor(3,2) = .thermal_tensor(2,3)
         end 
         .thermal_tensor.change_basis_using(cell.direct_U_matrix)
         ! After conversion, we should have U_iso for all diagonal elements in the cartesian basis
         .thermal_axis_system = "cartesian"
       case ("cartesian")
         ! do nothing
       case default
         UNKNOWN(.thermal_axis_system)
      end
   end

   position_from(cell)
   ! Change atom positions in the crystal axis system to the
   ! cartesian axis system
      cell :: UNIT_CELL, IN
      select case (.axis_system)
       case ("crystal  ")
         .pos = matmul(cell.direct_matrix,.pos)
         .axis_system = "cartesian"
       case ("cartesian")
         ! do nothing
       case default
         UNKNOWN(.axis_system)
      end
   end

   position_to(cell)
   ! Change atom positions in the cartesian axis system to the
   ! the crystal axis system
      cell :: UNIT_CELL, IN
      select case (.axis_system)
       case ("crystal  ")
         ! do nothing
       case ("cartesian")
         .pos = matmul(cell.inverse_matrix,.pos)
         .axis_system = "crystal"
       case default
         UNKNOWN(.axis_system)
      end
   end

   change_coordinate_axes(axes)
   ! Change the coordiantes and thermal tensors to be expressed in terms of a
   ! new set of orthogonal "axes". We must be n the cartesian axis system.
   ENSURE(.axis_system=="cartesian","positions must be in cartesian axis system")
   ENSURE(.thermal_axis_system=="cartesian","U's must be in cartesian axis system")
      axes :: MAT{REAL}(3,3), IN
      .pos = matmul(axes,.pos)
      .thermal_tensor.change_basis_using(axes) ! WARNING: this may not be correct
   end

! ************************
! Basis resolution methods
! ************************

   resolve_basis(basis,suffix,found,minmatch) ::: template
   ! Resolve the basis BASE by trying to match to one of the labels in "basis"
   ! (a) first, if "suffix" is present and not blank, by generating a library 
   !     basis label by concatenating the element symbol with the "suffix"
   ! (b) If that fails, try to match "LABEL" with one of the labels from "basis".
   ! (c) If that fails, try matching the chemical symbol.
      basis :: VEC{BASIS}*
      suffix :: STR, optional
      found,minmatch :: BIN, optional
   ENSURE(basis.created,"no basis")

      library_label,symbol :: STR
      fnd :: BIN

      fnd = FALSE

      ! Match the library suffix label if it is there ...
      if (present(suffix)) then
      if (suffix/=" ") then
        library_label = .library_basis_label(suffix)
        BASE.resolve_by_label(library_label,basis,clobber=TRUE,found=fnd)
        if (fnd) LABEL = library_label
      end
      end

      ! Match LABEL if it is there ...
      if (NOT fnd AND LABEL/=" ") then
         BASE.resolve_by_label(LABEL,basis,clobber=TRUE,found=fnd)
      end

      ! Match the first chemical symbol ...
      if (present(minmatch)) minmatch = FALSE
      if (NOT fnd) then
         symbol = trim(.chemical_symbol)//":"
         BASE.resolve_by_label(symbol,basis,clobber=TRUE,minlab=TRUE,found=fnd)
         if (fnd) LABEL = BASE.label
         if (present(minmatch) AND fnd) minmatch = TRUE
      end

      ! Tell if "found"
      if (present(found)) found = fnd

   end

   resolve_basis(basis,suffix,found,minmatch) ::: get_from(ATOM, BASE=>.basis, LABEL=>.basis_label)
   ! Resolve the basis BASE by trying to match to one of the labels in "basis"
   ! (a) first, if "suffix" is present and not blank, by generating a library 
   !     basis label by concatenating the element symbol with the "suffix"
   ! (b) If that fails, try to match "LABEL" with one of the labels from "basis".
   ! (c) If that fails, try matching the chemical symbol.
   end

   resolve_basis(basis,suffix,found,minmatch) ::: get_from(ATOM, BASIS=>SLATERBASIS, BASE=>.slaterbasis, LABEL=>.slaterbasis_label)
   ! Resolve the basis BASE by trying to match to one of the labels in "basis"
   ! (a) first, if "suffix" is present and not blank, by generating a library 
   !     basis label by concatenating the element symbol with the "suffix"
   ! (b) If that fails, try to match "LABEL" with one of the labels from "basis".
   ! (c) If that fails, try matching the chemical symbol.
   end

   resolve_basis(basis,suffix,found,minmatch) ::: get_from(ATOM, BASIS=>COPPENSBASIS, BASE=>.coppensbasis, LABEL=>.coppensbasis_label)
   ! Resolve the basis BASE by trying to match to one of the labels in "basis"
   ! (a) first, if "suffix" is present and not blank, by generating a library 
   !     basis label by concatenating the element symbol with the "suffix"
   ! (b) If that fails, try to match "LABEL" with one of the labels from "basis".
   ! (c) If that fails, try matching the chemical symbol.
   end

! Library bases should be resolved not read in. See above.

!   read_library_data ::: leaky
!   ! Read the basis from the library. The library directory is as currenly
!   ! specified in the BASIS module. The basis_set_kind is extracted from the
!   ! atom .basis_label.
!   ENSURE(.basis_label/=" ","There is no basis label")
!   ENSURE(.basis_label.includes(":"),"The basis_label has no colon, hence no kind part")
!      basis :: VEC{BASIS}*
!      slaterbasis :: VEC{SLATERBASIS}*
!      coppensbasis :: VEC{COPPENSBASIS}*
!      basis_set_kind :: STR
!      basis_set_kind = .basis_label(.basis_label.index_of(":")+1:)
!      select case (.basis_kind)
!         case ("coppens")
!            coppensbasis.destroy
!            nullify(coppensbasis)
!            coppensbasis.read_library_data(coppensbasis.library_directory(basis_set_kind),[.basis_label])
!            .coppensbasis.create_copy(coppensbasis(1))
!            coppensbasis.destroy
!         case ("slater")
!            slaterbasis.destroy
!            nullify(slaterbasis)
!            slaterbasis.read_library_data(slaterbasis.library_directory(basis_set_kind),[.basis_label])
!            .slaterbasis.create_copy(slaterbasis(1))
!            slaterbasis.destroy
!         case ("gaussian")
!            basis.destroy
!            nullify(basis)
!            basis.read_library_data(basis.library_directory(basis_set_kind),[.basis_label])
!            .basis.create_copy(basis(1))
!            basis.destroy
!         case default
!            UNKNOWN(.basis_kind)
!      end
!   end

! ***************
! Inquiry methods
! ***************

   same_kind_as(atom) result (res)
   ! Return TRUE if self is the same kind of atom as "atom". The position and
   ! label are not compared since the same kind of atom can have a different
   ! position and label.  To check if the basis set is the same, only the
   ! label is used.
      atom :: ATOM
      res :: BIN
      bases_created,coppens_created,slater_created :: BIN
      bases_destroyed,coppens_destroyed,slater_destroyed :: BIN
      mixed :: BIN
      bases_created     = .basis.created AND atom.basis.created
      coppens_created   = .coppensbasis.created AND atom.coppensbasis.created
      slater_created    = .slaterbasis.created  AND atom.slaterbasis.created
      bases_destroyed   = .basis.destroyed AND atom.basis.destroyed
      coppens_destroyed = .coppensbasis.destroyed AND atom.coppensbasis.destroyed
      slater_destroyed  = .slaterbasis.destroyed   AND atom.slaterbasis.destroyed
      mixed = NOT (bases_created   OR bases_destroyed)   OR &
              NOT (coppens_created OR coppens_destroyed) OR &
              NOT (slater_created  OR slater_destroyed) 
      if (mixed) then
         res = FALSE
      else
         res = .atomic_number==atom.atomic_number 
         if (bases_created)   res = res AND .basis.label==atom.basis.label 
         if (coppens_created) res = res AND .coppensbasis.label==atom.coppensbasis.label 
         if (slater_created)  res = res AND .slaterbasis.label==atom.slaterbasis.label 
      end
   end

   no_of_shells result (res) ::: pure
   ! Return the no of shells
      self :: IN
      res :: INT
   ENSURE(.basis.created,"no basis")
      res = .basis.no_of_shells
   end

   n_shell result (res) ::: pure
   ! Return the no of shells
      self :: IN
      res :: INT
   ENSURE(.basis.created,"no basis")
      res = .basis.n_shell
   end

   no_of_basis_functions result (res) ::: pure
   ! Evaluate and return the no. of basis functions
      self :: IN
      res :: INT
   ENSURE(.basis.created,"no basis")
      res = .basis.no_of_basis_functions
   end

   no_of_sph_basis_functions result (res) ::: pure
   ! Evaluate and return the no. of spherical basis functions
      self :: IN
      res :: INT
   ENSURE(.basis.created,"no basis")
      res = .basis.no_of_sph_basis_functions
   end

   n_bf result (res) ::: pure
   ! Return the no. of basis functions
      self :: IN
      res :: INT
   ENSURE(.basis.created,"no basis")
      res = .basis.n_bf
   end

   no_of_primitives result (res) ::: pure
   ! Return the no of primitives for this atom
      self :: IN
      res :: INT
   ENSURE(.basis.created,"no basis")
      res = .basis.no_of_primitives
   end

   no_of_sph_primitives result (res) ::: pure
   ! Return the no of primitives for this atom
      self :: IN
      res :: INT
   ENSURE(.basis.created,"no basis")
      res = .basis.no_of_sph_primitives
   end

   n_prim result (res) ::: pure
   ! Return the no of primitives for this atom
      self :: IN
      res :: INT
   ENSURE(.basis.created,"no basis")
      res = .basis.n_prim
   end

   no_of_occupied_NOs(axiskind,tol) result (res)
   ! Returns the number of non-zero occupied natural orbitals. For this purpose,
   ! zero is defined to be "tol" if present, or TOL(7) otherwise
      self :: IN
      axiskind :: STR, optional, IN
      tol :: REAL, optional, IN
      res :: INT
   ENSURE(.occupation_numbers.created,"no occupation numbers")
      res = .occupation_numbers.no_of_occupied(axiskind,tol)
   end

   chemical_symbol(Z) result (res)
   ! Return the chemical symbol for this atom. If "Z" is present then the symbol
   ! returned is the one for the atom with atomic number "Z".
      Z :: INT, IN, optional
      res :: STR(len=2)
      atomic_number :: INT
      atomic_number = .atomic_number
      if (present(Z)) atomic_number = Z
      if (atomic_number<1 OR atomic_number>103) then; res = "??"
      else;                  res = element_symbols(atomic_number)
      end
   end

   chemical_symbol(Z) result (res) ::: selfless
   ! Return the element symbol for the atom with atoic number "Z".
      Z :: INT, IN
      res :: STR(len=2)
      if (Z<1 OR Z>103) then; res = "??"
      else;                   res = element_symbols(Z)
      end
   end

   chemical_name result (res)
   ! Return the chemical name for this atom
      res :: STR(12)
      if (.atomic_number<1 OR .atomic_number>103) then; res = "??"
      else;                  res = element_names(.atomic_number)
      end
   end

   mass result (res)
   ! Return the atomic mass for this atom
      res :: REAL
      if (.atomic_number<1 OR .atomic_number>92) then; res = ZERO
      else;                  res = atomic_masses(.atomic_number)
      end
   end

   mean_neutron_number result (res)
   ! Return the average (abundance weighted) number of neutrons for this atom,
   ! calculated roughly by subtracting the number of protons from the atomic mass.
      res :: REAL
      if (.atomic_number<1 OR .atomic_number>92) then; res = ZERO
      else;                  res = .mass - .atomic_number
      end
   end

   bragg_slater_radius result (res)
   ! Return the Bragg-Slater radius for this atom
   ! WARNING: this is in Angstroms!
      res :: REAL
   ENSURE(.atomic_number > 0,"atomic number less than 1")
      if (.atomic_number>54) then; res = 1.30d0
      else;                  res = bragg_slater_radii(.atomic_number)
      end
   end

   neutron_scattering_length result (res)
   ! Return the neutron scattering length for this atom
      res :: REAL
      if (.atomic_number<1 OR .atomic_number>95) then; res = ZERO
      else;            res = neutron_scattering_lengths(.atomic_number)
      end
   end

   n_core_electrons(Z) result(noble)
   ! Return the number of core electrons for the atom in the n-shell
   ! one less than the valence shell.  If "Z" is present it is used as
   ! the atomic number.
      Z :: INT, optional
      noble :: INT

      p :: INT
      atomic_number,tmp,n :: INT

      atomic_number = .atomic_number
      if (present(Z)) atomic_number = Z

      p = 1
      if (atomic_number<1) return

      noble = 0
      do
         n = (p+2)/2
         tmp = noble + 2*n**2
         if (atomic_number <= tmp) exit
         noble = tmp   ! add core electrons
         p = p + 1     ! next period
      end

   end

   period_number(Z) result(p)
   ! Return the period (i.e. row) on which the atom lies.
   ! If "Z" is present it is used as the atomic number.
      Z :: INT, optional

      p :: INT
      atomic_number,noble,n :: INT

      atomic_number = .atomic_number
      if (present(Z)) atomic_number = Z
      p = 1
      if (atomic_number<1) return
      noble = 0
      do
         n = (p+2)/2
         noble = noble + 2*n**2
         if (atomic_number <= noble) exit
         p = p + 1
      end

   end

   column_number(Z) result(col)
   ! Return the period column (i.e. row) on which the atom lies.
   ! If "Z" is present it is used as the atomic number.
       Z :: INT, optional
      col :: INT
      atomic_number,p,noble,n :: INT
      atomic_number = .atomic_number
      if (present(Z)) atomic_number = Z
      p = 1
      if (atomic_number<1) return
      noble = 0
      do
         n = (p+2)/2
         noble = noble + 2*n**2
         if (atomic_number <= noble) exit
         p = p + 1
      end
      noble = noble - 2*n**2
      col = atomic_number - noble
   end

   period_block(Z) result(b)
   ! Return the period block character in which the atom lies.
   ! If "Z" is present it is used as the atomic number.
       Z :: INT, optional
       b :: STR(1)
      p,col :: INT
      p   = .period_number(Z)
      col = .column_number(Z)
      if (p<4) then
         select case (col)
            case (1:2);   b = "s"
            case (3:8);   b = "p"
         end
      else if (p<6) then
         select case (col)
            case (1:2);   b = "s"
            case (3:12);  b = "d"
            case (13:18); b = "p"
         end
      else if (p<8) then
         select case (col)
            case (1:2);   b = "s"
            case (3:16);  b = "f"
            case (17:26); b = "d"
            case (27:32); b = "p"
         end
      else
         DIE("cannot assign for period "// trim(p.to_str))
      end
   end

   ground_state_multiplicity(Z) result(mult)
   ! Return the ground state multiplicity for this atom according to Hunds rule
   ! (Note this is not neccesarily the real ground state, esp. for Cu)
   ! If "Z" is present it is used as the atomic number.
       Z :: INT, optional
      mult :: INT
      p,col :: INT
      p   = .period_number(Z)
      col = .column_number(Z)
      if (p<4) then
         select case (col)
            case (2,8);   mult = 1
            case (1,3,7); mult = 2
            case (4,6);   mult = 3
            case (5);     mult = 4
         end
      else if (p<6) then
         select case (col)
            case (2,12,18);      mult = 1
            case (1,3,11,13,17); mult = 2
            case (4,10,14,16);   mult = 3
            case (5,9,15);       mult = 4
            case (6,8);          mult = 5
            case (7);            mult = 6
         end
      else if (p<8) then
         select case (col)
            case (2,16,26,32);         mult = 1
            case (1,3,15,17,25,27,31); mult = 2
            case (4,14,18,24,28,30);   mult = 3
            case (5,13,19,23,29);      mult = 4
            case (6,12,20,22);         mult = 5
            case (7,11,21);            mult = 6
            case (8,10);               mult = 7
            case (9);                  mult = 8
         end
      else
         DIE("cannot assign for period "// trim(p.to_str))
      end
   end

   dispersion_correction(wavelength) result (res)
   ! The dispersion correction which best matches the wavelength.
      self :: IN
      wavelength :: REAL
      res :: CPX
      if (.atomic_number<1 OR .atomic_number>92) then
       res = ZERO
      else
       ! The ranges for deciding these wavelengths are a bit arbirary!
       if (wavelength < 1.15) then
         res = dispersion_correction_Ag( .atomic_number ) ! 0.559A=1.06au
       else if (wavelength < 2.1) then
         res = dispersion_correction_Mo( .atomic_number ) ! 0.709A=1.34au
       else if (wavelength < 3.6) then
         res = dispersion_correction_Cu( .atomic_number ) ! 1.541A=2.91au
       else
         res = dispersion_correction_Cr( .atomic_number ) ! 2.29A=4.33au
       end
      end
   end

   library_basis_label(suffix) result (label)
   ! Return a library basis set label by appending "suffix" to the
   ! chemical symbol.
      suffix :: STR
      label :: STR
      symbol :: STR
      symbol = .chemical_symbol
      select case (suffix)
         case ("Coppens","Thakkar","Clementi-Roetti")
            if (.atomic_number>55) then
               select case (.atomic_number)
                  case (56);     symbol = "Sr"
                  case (57:71);  symbol = "Y"
                  case (72:86);  symbol = .chemical_symbol(.atomic_number-32)
                  case (87);     symbol = "Rb"
                  case (88);     symbol = "Sr"
                  case (89:103); symbol = "Y"
               end
               WARN("Replaced basis for atom "//.chemical_symbol.trim//" with that for atom "//symbol.trim)
            end
            label = trim(symbol)//trim(.oxidation_state_str)//":"//trim(suffix)
         case default
            label = trim(symbol)//":"//trim(suffix)
      end
   end

   library_basis_label(Z,suffix) result (label) ::: selfless, leaky
   ! Return a library basis set label for the atom with atomic number
   ! "Z", by appending "suffix" to the chemical symbol.
      Z :: INT, IN
      suffix :: STR
   ENSURE(Z>=1 AND Z<=103,"Z out of range")

      label :: STR
      symbol :: STR

      symbol = element_symbols(Z)
      select case (suffix)
         case ("Coppens","Thakkar","Clementi-Roetti")
            if (Z>55) then
               select case (Z)
                  case (56);     symbol = "Sr"
                  case (57:71);  symbol = "Y"
                  case (72:86);  symbol = element_symbols(Z-32)
                  case (87);     symbol = "Rb"
                  case (88);     symbol = "Sr"
                  case (89:103); symbol = "Y"
               end
            end
            label = trim(symbol)//":"//trim(suffix)
         case default
            label = trim(symbol)//":"//trim(suffix)
      end

   end

   oxidation_state_str result (res) 
   ! Return the oxidation state string, i.e. if the oxidation state is +3, then
   ! the returned string is "3+"; or if the oxidation state is -1 then the
   ! returned string is "-". This is useful for resolving certain library basis
   ! labels.
      res :: STR
      charge :: INT
      charge = .oxidation_state
      if (charge==0) then
         res = " "
      else
         if (charge>0) then; res = "+"
         else;               res = "-"
         end
         charge = abs(charge)
         if (charge/=1) res = trim(charge.to_str)//trim(res)
      end
   end

   has_ANO_data result (res)
   ! Return TRUE if the ANO data exists for the atom.
      res :: BIN
      res = .natural_orbitals.created AND .occupation_numbers.created
   end

!   has_basis result (res)
!   ! Return TRUE if the basis exists
!      res :: BIN
!      res = .basis.created
!   end

!   has_basis_label result (res)
!   ! Return TRUE if the basis label exists and is not blank
!      res :: BIN
!      if (.basis.destroyed) then;       res = FALSE
!      else if (.basis.label==" ") then; res = FALSE
!      else;                             res = TRUE
!      end
!   end

   is_bonded_to(b,range_factor) result (res)
   ! Return true if "self" is bonded to "b".  If present, "range_factor" is used
   ! to determine the distance range in which the atoms are regarded as bonded.
   ! This uses the CCDC method, as documented on their web page.
      b :: ATOM
      range_factor :: REAL, optional
      res :: BIN

      t,bond,bond_min,bond_max,dx,dy,dz,r2 :: REAL

      if (.site_disorder_group*b.site_disorder_group>0 AND .site_disorder_group/=b.site_disorder_group) then
         res = FALSE
      else
         t = atom_bonded_range_factor 
         if (present(range_factor)) t = range_factor
         bond = covalent_radii_ccdc(.atomic_number) + covalent_radii_ccdc(b.atomic_number)
         bond = bond*BOHR_PER_ANGSTROM ! Don't forget to convert to Bohr
         bond_min = bond - t
         bond_max = bond + t
         if (self.atomic_number==1 AND b.atomic_number==1) &
            bond_min = 0.9d0*BOHR_PER_ANGSTROM ! For HH, nothing closer than 0.9A
         dx = abs(.pos(1) - b.pos(1))
         dy = abs(.pos(2) - b.pos(2))
         dz = abs(.pos(3) - b.pos(3))
         if      (dx>bond_max) then; res = FALSE
         else if (dy>bond_max) then; res = FALSE
         else if (dz>bond_max) then; res = FALSE
         else
            r2 = dx*dx + dy*dy + dz*dz
            res = (r2 < bond_max*bond_max) AND (r2 > bond_min*bond_min)
         end
      end
   end

   is_nearby_to(b,dist) result (res)
   ! Return TRUE if atom "self" and atom "b" are nearby, i.e. within length
   ! "dist".
      b :: ATOM
      dist :: REAL
      res :: BIN
      tmp :: VEC{REAL}(3)
      r2 :: REAL
      tmp = .pos - b.pos
      tmp = abs(tmp)
      if      (tmp(1)>dist) then; res = FALSE
      else if (tmp(2)>dist) then; res = FALSE
      else if (tmp(3)>dist) then; res = FALSE
      else
         r2 = dot_product(tmp,tmp)
         res = (r2 < dist*dist)
      end
   end

   minimum_basis_exponent result (res)
   ! Return the minimum exponent in the basis.
      res :: REAL
      if (.coppensbasis.created) then
       res = .coppensbasis.min_exponent
      else if (.basis.created) then
       res = .basis.min_exponent
      else
       DIE("no basis")
      end
   end

   r_max(cutoff) result (res)
   ! Return the distance "r_max" at which the basis function with the lowest
   ! exponent is less than the value "cutoff".
      cutoff :: REAL, IN
      res :: REAL

   ENSURE(.basis.created,"no basis set")

      res = .basis.r_max(cutoff)

   end

   r2_max(cutoff) result (res)
   ! Return the squared distance "r2_max" at which the basis function with the
   ! lowest exponent is less than the value "cutoff".
      cutoff :: REAL, IN
      res :: REAL

   ENSURE(.basis.created,"no basis set")

      res = .basis.r2_max(cutoff)

   end

   has_dipole result (res)
   ! Return TRUE if the atomic dipole is nonzero.
      res :: BIN
      res = NOT .dipole.is_zero
   end

   has_polarisability result (res)
   ! Return TRUE if the atomic dipole is nonzero.
      res :: BIN
      res =  NOT .charge_polarisability.is_zero &
          OR NOT .dipole_polarisability.is_zero
   end

   has_recognised_label result (res)
   ! Return TRUE if the label corresponds to a recognised chemical element.
      res :: BIN

      label,symbol :: STR
      lensym :: INT
      error :: BIN

      .label = label
      if (label.is_int) then    ! The label must be the atomic number
         res = TRUE
      else                      ! First part of the label is the element symbol
         lensym = label.index_of_nonalphabetical-1
         error = lensym>2 OR lensym==0
         if (error) then
            res = FALSE
            return
         end
         symbol = label(1:lensym)
         symbol(1:1).to_upper_case
         symbol(2:2).to_lower_case
         if (symbol=="D" OR symbol=="T") then
            res = TRUE
         else if (any(element_symbols==symbol(1:2))) then
            res = TRUE 
         else
            res = FALSE
         end
      end
   end

! *********
! Invarioms
! *********

   allred_rochow_en result (res)
   ! Returns the Allred-Rochow EN for this atom
      res :: REAL
   ENSURE(.atomic_number > 0,"atomic number less than 1")
      if (.atomic_number>82) then; res = 1.0d0
      else;                  res = allred_rochow_electronegs(.atomic_number)*0.01d0
      end
   end

   invariom_covalent_radius result (res)
   ! Returns the covalent radius for this atom
      res :: REAL
   ENSURE(.atomic_number > 0,"atomic number less than 1")
      if (.atomic_number>109) then; res = 1.0d0
      else;                  res = covalent_radii_invariom(.atomic_number)*0.01d0
      end
   end

   get_invariom_rotation(U,actual,reference,L,fail)
   ! Returns the invariom rotation matrix "U" which matches
   ! coordinates "reference" to "actual" in a least squares sense.
   ! Return the mean fitting error "L" or else "fail"  for failure.
      U :: MAT{REAL}, OUT
      actual,reference :: MAT{REAL}, IN
      L :: REAL
      fail :: BIN
   ENSURE(U.is_square,"U must be square")
   ENSURE(U.dim==actual.dim2,"U incompatible with actual")
   ENSURE(reference.dim2==actual.dim2,"reference incompatible with actual")

      U0,X,Rd :: MAT{REAL}*
      d,n,p,q,i,iteration :: INT
      val :: REAL

      ! Set dimension, number of points to fit
      d = U.dim1
      n = reference.dim2

      ! Set minimum L value
      L = ZERO

      ! Start with U being unit matrix
      U.to_unit_matrix

      ! Create antisymmetric matrix X, temporary rotation U
      X.create(d,d)
      U0.create(d,d)
      Rd.create(reference.dim1,reference.dim2)

      ! Repeatedly update U until converged
      iteration = 0
      fail = FALSE
      do

         iteration = iteration + 1

         ! Rotate actual positions
         Rd.to_product_of(U,actual,transpose_A=TRUE)

         ! Get the derivative of L wrt. X_pq
         do p = 1,d
            do q = 1,p
               val = ZERO
               do i = 1,n
                  val = val + Rd(p,i)*reference(q,i) - Rd(q,i)*reference(p,q)
               end
               val = -TWO*val
               X(p,q) =  val
               X(q,p) = -val
            end
            X(p,p) = ZERO
         end

         ! Get maximum gradient
         val = maxval(abs(X))

         ! Exit if gradient converged or too many iteration
         if (val<TOL(4)) exit
         fail = iteration==1000
         if (fail) exit

         ! Otherwise scale X so the maximum value is less than 0.1
         val = TOL(1)/val
         X = X*val

         ! Exponentiate X
         X.exponentiate_to(U0)

         ! Update U
         X.to_product_of(U,U0)
         U = X

      end

      ! Clean up
      Rd.destroy; U0.destroy; X.destroy

      ! If failed, return, otherwise calculate L
      if (fail) return

      Rd.create(reference.dim1,reference.dim2)
      Rd.to_product_of(U,reference)

      L = ZERO
      do i = 1,d
         L = L + dot_product(actual(:,i),actual(:,i)) &
               + dot_product(reference(:,i),reference(:,i)) &
               - TWO*dot_product(actual(:,i),Rd(:,i))
      end
      L = sqrt(L)/d

      Rd.destroy
      
   end

! *************************
! Density plotting routines
! *************************

   make_density_grid(density_grid,pt,occ)
   ! Make the electron "density_grid" on "pt" using ".natural orbitals" and
   ! the ".occupation_numbers" vector. 
      self :: IN
      density_grid :: VEC{REAL}, OUT
      pt :: MAT{REAL}, IN
      occ :: REAL, IN, optional

   ENSURE(density_grid.dim==pt.dim1,"inconsistent number of points")

      select case (.basis_kind)
         case ("gaussian")
            if (.use_interpolator AND .interpolator.created) then
               .make_interpolated_density(density_grid,pt,occ)
            else
               ENSURE(.basis.created,"no basis")
               if (.natural_orbitals.number_kind=="real") then; .make_density_grid_r(density_grid,pt,occ)
               else;                                            .make_density_grid_c(density_grid,pt,occ)
               end
            end
         case ("slater")
            ENSURE(.slaterbasis.created,"no slaterbasis")
            .slaterbasis.make_density_grid(density_grid,pt,.pos,occ)
         case ("coppens")
            ENSURE(.coppensbasis.created,"no coppensbasis")
            .coppensbasis.make_density_grid(density_grid,pt,.pos,occ)
         case default
            UNKNOWN(.basis_kind)
      end

   end

   add_density_grid(density_grid,pt,occ)
   ! Add the electron "density_grid" on "pt" using ".natural orbitals" and
   ! the ".occupation_numbers" vector. 
      self :: IN
      density_grid :: VEC{REAL}, OUT
      pt :: MAT{REAL}, IN
      occ :: REAL, IN, optional

   ENSURE(density_grid.dim==pt.dim1,"inconsistent number of points")

      select case (.basis_kind)
         case ("gaussian")
            if (.use_interpolator AND .interpolator.created) then
               .add_interpolated_density(density_grid,pt,occ)
            else
               ENSURE(.basis.created,"no basis")
               ENSURE(.natural_orbitals.created,"no natural orbitals")
               if (.natural_orbitals.number_kind=="real") then; .add_density_grid_r(density_grid,pt,occ)
               else;                                            .add_density_grid_c(density_grid,pt,occ)
               end
            end
         case ("slater")
            ENSURE(.slaterbasis.created,"no slaterbasis")
            .slaterbasis.add_density_grid(density_grid,pt,.pos,occ)
         case ("coppens")
            ENSURE(.coppensbasis.created,"no coppensbasis")
            .coppensbasis.add_density_grid(density_grid,pt,.pos,occ)
         case default
            UNKNOWN(.basis_kind)
      end

   end

   make_density_grid_r(density_grid,pt,occ)
   ! Make the "density_grid" for the supplied points "pt" from restricted real
   ! natural orbitals
      self :: IN
      density_grid :: VEC{REAL}, OUT
      pt :: MAT{REAL}, IN
      occ :: REAL, IN, optional

   ENSURE(pt.dim2==3,"wrong dimension for points array")
   ENSURE(density_grid.dim==pt.dim1,"inconsistent number of points")
   ENSURE(.natural_orbitals.created("restricted"),"no restricted NO's")
   ENSURE(.occupation_numbers.created("restricted"),"no occupation numbers")

      NO :: VEC{REAL}*
      n_occ,n :: INT
      do_occ :: BIN

      ! Do occupation factor?
      do_occ = FALSE
      if (present(occ)) then
      if (NOT occ.equals(ONE)) then
        do_occ = TRUE
      end
      end

      density_grid = ZERO ! set to zero

      NO.create(pt.dim1)
      n_occ = .no_of_occupied_NOs

      do n = 1,n_occ
       .make_orbital_grid_r(NO,.natural_orbitals.restricted(:,n),pt,.pos)
       density_grid = density_grid + .occupation_numbers.restricted(n)*NO*NO
      end

      if (do_occ) density_grid = occ*density_grid

      NO.destroy

   end

   add_density_grid_r(density_grid,pt,occ)
   ! Add the "density_grid" for the supplied points "pt" from restricted real
   ! natural orbitals
      self :: IN
      density_grid :: VEC{REAL}, INOUT
      pt :: MAT{REAL}, IN
      occ :: REAL, IN, optional

   ENSURE(pt.dim2==3,"wrong dimension for points array")
   ENSURE(density_grid.dim==pt.dim1,"inconsistent number of points")
   ENSURE(.natural_orbitals.created("restricted"),"no restricted NO's")
   ENSURE(.occupation_numbers.created("restricted"),"no occupation numbers")

      NO :: VEC{REAL}*
      n_occ,n :: INT
      do_occ :: BIN

      ! Do occupation factor?
      do_occ = FALSE
      if (present(occ)) then
      if (NOT occ.equals(ONE)) then
        do_occ = TRUE
      end
      end

      NO.create(pt.dim1)
      n_occ = .no_of_occupied_NOs

      if (do_occ) then
        do n = 1,n_occ
          .make_orbital_grid_r(NO,.natural_orbitals.restricted(:,n),pt,.pos)
          density_grid = density_grid + occ*.occupation_numbers.restricted(n)*NO*NO
        end
      else
        do n = 1,n_occ
          .make_orbital_grid_r(NO,.natural_orbitals.restricted(:,n),pt,.pos)
          density_grid = density_grid +     .occupation_numbers.restricted(n)*NO*NO
        end
      end

      NO.destroy

   end

   make_density_grid_c(density_grid,pt,occ)
   ! Make the "density_grid" for the supplied points "pt" from restricted
   ! complex natural orbitals.
      self :: IN
      density_grid :: VEC{REAL}, OUT
      pt :: MAT{REAL}, IN
      occ :: REAL, IN, optional

   ENSURE(pt.dim2==3,"wrong dimension for points array")
   ENSURE(density_grid.dim==pt.dim1,"inconsistent number of points")
   ENSURE(.natural_orbitals.created("restricted_complex"),"no restricted NO's")
   ENSURE(.occupation_numbers.created("restricted"),"no occupation numbers")

      NO :: VEC{CPX}*
      n_occ,n :: INT
      do_occ :: BIN

      ! Do occupation factor?
      do_occ = FALSE
      if (present(occ)) then
      if (NOT occ.equals(ONE)) then
         do_occ = TRUE
      end
      end

      density_grid = ZERO ! set to zero

      NO.create(pt.dim1)
      n_occ = .no_of_occupied_NOs

      do n = 1,n_occ
         .make_orbital_grid_c(NO,.natural_orbitals.restricted_complex(:,n),pt,.pos)
         density_grid = density_grid + .occupation_numbers.restricted(n)*conjg(NO)*NO
      end

      if (do_occ) density_grid = occ*density_grid 

      NO.destroy

   end

   add_density_grid_c(density_grid,pt,occ)
   ! Make the "density_grid" for the supplied points "pt" from restricted
   ! complex natural orbitals.
      self :: IN
      density_grid :: VEC{REAL}, INOUT
      pt :: MAT{REAL}, IN
      occ :: REAL, IN, optional

   ENSURE(pt.dim2==3,"wrong dimension for points array")
   ENSURE(density_grid.dim==pt.dim1,"inconsistent number of points")
   ENSURE(.natural_orbitals.created("restricted_complex"),"no restricted NO's")
   ENSURE(.occupation_numbers.created("restricted"),"no occupation numbers")

      NO :: VEC{CPX}*
      n_occ,n :: INT
      do_occ :: BIN

      ! Do occupation factor?
      do_occ = FALSE
      if (present(occ)) then
      if (NOT occ.equals(ONE)) then
         do_occ = TRUE
      end
      end

      NO.create(pt.dim1)
      n_occ = .no_of_occupied_NOs

      if (do_occ) then
         do n = 1,n_occ
            .make_orbital_grid_c(NO,.natural_orbitals.restricted_complex(:,n),pt,.pos)
            density_grid = density_grid + occ*.occupation_numbers.restricted(n)*conjg(NO)*NO
         end
      else
         do n = 1,n_occ
            .make_orbital_grid_c(NO,.natural_orbitals.restricted_complex(:,n),pt,.pos)
            density_grid = density_grid +     .occupation_numbers.restricted(n)*conjg(NO)*NO
         end
      end

      NO.destroy

   end

   make_density_grid(density_grid,pt,D,occ)
   ! Make the "density_grid" for the supplied points "pt" from a
   ! density matrix "D"
      self :: IN
      density_grid :: VEC{REAL}, OUT
      pt :: MAT{REAL}, IN
      D :: MAT{REAL}, IN
      occ :: REAL, IN, optional

   ENSURE(pt.dim2==3,"wrong dimension for points array")
   ENSURE(density_grid.dim==pt.dim1,"inconsistent number of points")
   ENSURE(D.is_square,"D, not square")
   ENSURE(D.dim1==.basis.no_of_basis_functions,"D, wrong size")

      g :: MAT{REAL}*
      W :: VEC{REAL}*
      i :: INT
      do_occ :: BIN

      ! Do occupation factor?
      do_occ = FALSE
      if (present(occ)) then
      if (NOT occ.equals(ONE)) then
        do_occ = TRUE
      end
      end

      W.create(D.dim1)
      g.create(pt.dim1,D.dim1)

      .make_AO_grid(g,pt,.pos)

      do i = 1,pt.dim1
        W = matmul(g(i,:),D)
        density_grid(i) = sum(W*g(i,:))
      end

      if (do_occ) density_grid = occ*density_grid

      W.destroy
      g.destroy

   end

   add_density_grid(density_grid,pt,D,occ)
   ! Add the "density_grid" for the supplied points "pt" from a
   ! density matrix "D"
      self :: IN
      density_grid :: VEC{REAL}, INOUT
      pt :: MAT{REAL}, IN
      D :: MAT{REAL}, IN
      occ :: REAL, IN, optional

   ENSURE(pt.dim2==3,"wrong dimension for points array")
   ENSURE(density_grid.dim==pt.dim1,"inconsistent number of points")
   ENSURE(D.is_square,"D, not square")
   ENSURE(D.dim1==.basis.no_of_basis_functions,"D, wrong size")

      g :: MAT{REAL}*
      W :: VEC{REAL}*
      i :: INT
      do_occ :: BIN

      ! Do occupation factor?
      do_occ = FALSE
      if (present(occ)) then
      if (NOT occ.equals(ONE)) then
        do_occ = TRUE
      end
      end

      W.create(D.dim1)
      g.create(pt.dim1,D.dim1)

      .make_AO_grid(g,pt,.pos)

      if (do_occ) then
        do i = 1,pt.dim1
           W = matmul(g(i,:),D)
           density_grid(i) = density_grid(i) + occ*sum(W*g(i,:))
        end
      else
        do i = 1,pt.dim1
           W = matmul(g(i,:),D)
           density_grid(i) = density_grid(i) + sum(W*g(i,:))
        end
      end

      W.destroy
      g.destroy

   end


!   make_d_density_grid(d0_density,d1_density,d2_density,pt)
!   ! Work out the 1st derivative density "d1_density" and 2nd
!   ! derivative "d2_density" on a set of points "pt" for interpolated
!   ! densities.
!      self :: IN
!      d0_density :: VEC{REAL}, OUT
!      d1_density :: MAT{REAL}, OUT
!      d2_density :: MAT3{REAL}, OUT
!      pt :: MAT{REAL}, IN
!   ENSURE(d0_density.dim==pt.dim1,"inconsistent number of points")
!      select case (.basis_kind)
!         case ("gaussian")
!            DIE("gaussian case, use different routines")
!         case ("slater")
!            ENSURE(.slaterbasis.created,"no slaterbasis")
!            .slaterbasis.make_d_density_grid(d0_density,d1_density,d2_density,pt,.pos)
!         case ("coppens")
!            DIE("not implemented yet")
!         case default
!            UNKNOWN(.basis_kind)
!      end
!      if (NOT .site_occupancy.same_as(ONE)) then
!         d0_density = .site_occupancy*d0_density
!         d1_density = .site_occupancy*d1_density
!         d2_density = .site_occupancy*d2_density
!      end
!   end

! ************************
! Orbital density routines
! ************************

   make_AO_grid(g,pt,pos)
   ! Evaluate the AO density grid "g" on a set of grid points "pt" for an atom at position
   ! "pos". 
      g :: MAT{REAL}, OUT
      pt :: MAT{REAL}, IN
      pos :: VEC{REAL}(3), IN
   ENSURE(.basis.created,"no basis set")
   ENSURE(pt.dim1==g.dim1,"pt and g, incompatible")
   ENSURE(.basis.no_of_basis_functions==g.dim2,"pt and g, incompatible")
   ENSURE(pt.dim2==3,"wrong size, pt")
      sh :: SHELL1
      f,l,s :: INT
      l = 0
      do s = 1,.basis.n_shell
         sh.set(.basis.shell(s),pos)
         f = l + 1
         l = l + sh.n_comp
         sh.make_grid(g(:,f:l),pt)
      end
   end

   make_orbital_grid_r(g,orb,pt,pos,square)
   ! Evaluate the orbital density grid "g" for *one* AO-basis coefficient
   ! orbital vector "orb" on a set of grid points "pt" for an atom at position
   ! "pos". If "square" is present and TRUE, the square of the orbital density
   ! is returned.
      g :: VEC{REAL}, OUT
      orb :: VEC{REAL}, IN
      pt :: MAT{REAL}, IN
      pos :: VEC{REAL}(3), IN
      square :: BIN, optional, IN
   ENSURE(.basis.created,"no basis set")
   ENSURE(.basis.no_of_basis_functions==orb.dim,"incorrect suize, orb")
   ENSURE(pt.dim2==3,"wrong size, pt")
      sq :: BIN
      sh :: SHELL1
      sh_grid :: MAT{REAL}*
      n_pt,f,l,s :: INT
      sq = FALSE
      if (present(square)) sq = square
      n_pt = pt.dim1
      g = ZERO
      l = 0
      do s = 1,.basis.n_shell
         sh.set(.basis.shell(s),pos)
         f = l + 1
         l = f + sh.n_comp - 1
         sh_grid.create(n_pt,sh.n_comp)
         sh.make_grid(sh_grid,pt)
         g = g + matmul(sh_grid,orb(f:l))
         sh_grid.destroy
      end
      if (sq) g = g*g
   end

   make_orbital_grid_c(g,orb,pt,pos,square)
   ! Evaluate the orbital density grid "g" for *one* AO-basis coefficient
   ! orbital vector "orb" on a set of grid points "pt" for an atom at position
   ! "pos". If "square" is present and TRUE, the square of the orbital density
   ! is returned.
      self :: IN
      g :: VEC{CPX}, OUT
      orb :: VEC{CPX}, IN
      pt :: MAT{REAL}, IN
      pos :: VEC{REAL}(3), IN
      square :: BIN, optional, IN
   ENSURE(.basis.created,"no basis set")
   ENSURE(.basis.no_of_basis_functions==orb.dim,"incorrect suize, orb")
   ENSURE(pt.dim2==3,"wrong size, pt")
      sq :: BIN
      sh :: SHELL1
      sh_grid :: MAT{REAL}*
      n_pt,f,l,s :: INT
      sq = FALSE
      if (present(square)) sq = square
      n_pt = pt.dim1
      g = ZERO
      l = 0
      do s = 1,.basis.n_shell
         sh.set(.basis.shell(s),pos)
         f = l + 1
         l = f + sh.n_comp - 1
         sh_grid.create(n_pt,sh.n_comp)
         sh.make_grid(sh_grid,pt)
         g = g + matmul(sh_grid,orb(f:l))
         sh_grid.destroy
      end
      if (sq) g = conjg(g)*g
   end

! **********************
! Spherical density at R
! **********************

   density_at_radius(R) result (res)
   ! Work out the electron at radius "R".
      R :: REAL, IN
      res :: REAL
      density_grid :: VEC{REAL}(1)
      pt :: MAT{REAL}(1,3)
      select case (.basis_kind)
         case ("gaussian")
            ENSURE(.basis.created,"no basis")
            pt(1,:) = .pos + [R,ZERO,ZERO]
            if (.natural_orbitals.number_kind == "real") then; .make_density_grid_r(density_grid,pt)
            else;                                              .make_density_grid_c(density_grid,pt)
            end
            res = density_grid(1)
         case ("slater")
            ENSURE(.slaterbasis.created,"no slaterbasis")
            ENSURE(.slaterbasis.shell.created,"no slaterbasis shells")
            res = .slaterbasis.density_at_radius(R)
         case ("coppens")
            ENSURE(.coppensbasis.created,"no coppensbasis")
            ENSURE(.coppensbasis.orbital.created,"no coppensbasis orbital")
            res = .coppensbasis.density_at_radius(R)
         case default
            UNKNOWN(.basis_kind)
      end
   end

   density_value_at_radius(R) result (res) ::: selfless, public
   ! Return the density values at the radial value "R".
   ! This assumes that the atomic density is spherical!
      R :: REAL, IN
      res :: REAL
      n :: INT
      self :: ATOM*
      self => saved_self
      res = .density_at_radius(R)
   end

!   density_at_sqrt_radius2(R2) result (res) ::: selfless, public
!   ! Return the density values at the square root of radial value "R2".
!   ! This assumes that the atomic density is spherical!
!     R2 :: REAL, IN
!     res :: REAL
!     R :: REAL
!     self :: ATOM*
!     self => saved_self
!     R = sqrt(R2)
!     res = .density_at_radius(R)
!   end

!   density_at_sqrt_x1x(x) result (res) ::: selfless, public
!   ! The function r2 = (x/1-x) maps [0,1] -> [0,inf]. An even spacing
!   ! of points in x will lead to a distribution of points in r in the
!   ! range [0,inf] on which the density rho can be calculated. An
!   ! interpolation table of rho vs. x can be made.  The inverse of the
!   ! function is x = (r2/1+r2). These values of x can easily be
!   ! calculated from a given r2. The value of rho can then be
!   ! interpolated. This assumes that the atomic density is spherical!
!     x :: REAL, IN
!     res :: REAL
!
!     R :: REAL
!     self :: ATOM*
!
!
!     if (x>=ONE) then
!        res = ZERO
!     else
!        self => saved_self
!        R = .bragg_slater_radius*BOHR_PER_ANGSTROM*sqrt(x/(ONE-x))
!        res = .density_at_radius(R)
!     end
!
!   end

! ************
! Interpolator
! ************

   make_interpolator(interpolator) ::: leaky
   ! Make the .interpolator for the atom density. If present,
   ! "interpolator" is used as a template to get the settings needed. 
   ! NOTE: This is for a gaussian basis set; for slater or coppens
   ! bases use the interpolators stored in those bases. 
      interpolator :: INTERPOLATOR*, optional

   ENSURE(.basis_kind=="gaussian","interpolation must be for a gaussian basis")

      ! Create a copy of the template if it exists
      if (present(interpolator)) then
      if (interpolator.created) then
         .interpolator.destroy
         .interpolator.create_copy(interpolator)
      end
      end

      ! If no template, create a default interpolator
      if (.interpolator.destroyed) .interpolator.create

      ! Set domain scale factor. May not be required.
      .interpolator.set_domain_scale_factor(.bragg_slater_radius*BOHR_PER_ANGSTROM)

      ! Set the interpolation table
      .set_saved_self ! Used by ATOM: function below
      .interpolator.set_even_spaced_data(ATOM::density_value_at_radius)

   end

   interpolator_table_length(tol) result (length)
   ! Return the interpolator table "length" for a given tolerance "tol" for the
   ! atom density. The interpolator is a default one.
      tol,length :: REAL

      interpolator :: INTERPOLATOR*

      interpolator.create  
      .set_saved_self   ! Used by function below
      length = interpolator.the_table_length(ATOM::density_value_at_radius,tol)
      interpolator.destroy

   end

   make_interpolated_density(density,pt,occ)
   ! Make the spherical atomic "density" for the supplied points "pt"
   ! using a precalculated interpolator.
      self :: IN
      density :: VEC{REAL}, INOUT
      pt :: MAT{REAL}, IN
      occ :: REAL, IN, optional

   ENSURE(pt.dim2==3,"wrong dimension for points array")
   ENSURE(density.dim==pt.dim1,"inconsistent number of points")
   ENSURE(.interpolator.created,"no interpolator defined!")
   ENSURE(.interpolator.domain_mapping(1:4)=="sqrt","must using sqrt-like mapping")

      R2 :: VEC{REAL}*
      n_pt,n :: INT
      x,y,z,b :: REAL

      ! Space for R2
      n_pt = pt.dim1
      R2.create(n_pt)

      ! Get squared distances R2
      do n = 1,n_pt
        x = pt(n,1) - .pos(1)
        y = pt(n,2) - .pos(2)
        z = pt(n,3) - .pos(3)
        R2(n) = x*x + y*y + z*z
      end

      ! Get the interpolated density values
      .interpolator.values_for(R2,density,occ)

      ! Clean up
      R2.destroy

   end

   add_interpolated_density(density,pt,occ)
   ! Add the spherical atomic "density" for the supplied points "pt"
   ! using a precalculated interpolator.
      self :: IN
      density :: VEC{REAL}, INOUT
      pt :: MAT{REAL}, IN
      occ :: REAL, IN, optional

   ENSURE(pt.dim2==3,"wrong dimension for points array")
   ENSURE(density.dim==pt.dim1,"inconsistent number of points")
   ENSURE(.interpolator.created,"no interpolator defined!")
   ENSURE(.interpolator.domain_mapping(1:4)=="sqrt","must using sqrt-like mapping")

      R2 :: VEC{REAL}*
      n_pt,n :: INT
      x,y,z,b :: REAL

      ! Space for R2
      n_pt = pt.dim1
      R2.create(n_pt)

      ! Get squared distances R2
      do n = 1,n_pt
        x = pt(n,1) - .pos(1)
        y = pt(n,2) - .pos(2)
        z = pt(n,3) - .pos(3)
        R2(n) = x*x + y*y + z*z
      end

      ! Get the interpolated density values
      .interpolator.add_values_for(R2,density,occ)

      ! Clean up
      R2.destroy

   end

! ***************************
! Nabla density grid routines
! ***************************

   make_nabla_density_grid(nabla_grid,pts)
   ! Work out nabla of the density, "nabla_grid" on the set of point "pts".
      nabla_grid :: MAT{REAL}, OUT
      pts :: MAT{REAL}, IN
      if (.natural_orbitals.number_kind == "real") then
         .make_nabla_density_grid_r(nabla_grid,pts)
      else
         DIE("complex case not yet implemented")
      end
   end

   make_nabla_density_grid(nabla_grid,grid,pts)
   ! Work nabla of the density, "nabla_grid", and the density, "grid", evaluated
   ! on the set of points "pts".
      nabla_grid :: MAT{REAL}, OUT
      grid :: VEC{REAL}, OUT
      pts :: MAT{REAL}, IN
      if (.natural_orbitals.number_kind == "real") then
         .make_nabla_density_grid_r(nabla_grid,grid,pts)
      else
         DIE("complex case not yet implemented")
      end
   end

   make_nabla_density_grid_r(nabla_grid,pts)
   ! Work out nabla of the density, "nabla_grid", on the grid "pts" using
   ! ".natural_orbitals" and the ".occupation" number vector.
      nabla_grid :: MAT{REAL}, OUT
      pts :: MAT{REAL}, IN
   ENSURE(pts.dim2==3,"wrong dimension for points array")
   ENSURE(nabla_grid.dim1==pts.dim1,"wrong 1st dimension for nabla_grid array")
   ENSURE(nabla_grid.dim2==3,"wrong 2nd dimension for nabla_grid array")
   ENSURE(.natural_orbitals.created, "no natural orbitals")
   ENSURE(.natural_orbitals.created("restricted"), "no restricted NO's")
   ENSURE(.occupation_numbers.created, "no occupation numbers")
   ENSURE(.occupation_numbers.created("restricted"),"no occupation numbers")
      orb :: VEC{REAL}*
      nabla_orb :: MAT{REAL}*
      occ :: REAL
      n_occ,n,n_pts :: INT
      n_pts = size(pts,1)
      nabla_grid = ZERO
      orb.create(n_pts)
      nabla_orb.create(n_pts,3)
      n_occ = .no_of_occupied_NOs
      do n = 1,n_occ
       .make_nabla_orbital_grid_r(nabla_orb,orb,.natural_orbitals.restricted(:,n), pts)
       occ = .occupation_numbers.restricted(n)
       nabla_grid(:,1) = nabla_grid(:,1) + occ*orb(:)*nabla_orb(:,1)
       nabla_grid(:,2) = nabla_grid(:,2) + occ*orb(:)*nabla_orb(:,2)
       nabla_grid(:,3) = nabla_grid(:,3) + occ*orb(:)*nabla_orb(:,3)
      end
      nabla_grid = TWO*nabla_grid
      orb.destroy
      nabla_orb.destroy
   end

   make_nabla_density_grid_r(nabla_grid,grid,pts)
   ! Work out nabla of the density, "nabla_grid", and the density grid, "grid",
   ! using the grid "pts" and the ".natural_orbitals" and the ".occupation"
   ! number vector.
      nabla_grid :: MAT{REAL}, OUT
      grid :: VEC{REAL}, OUT
      pts :: MAT{REAL}, IN
   ENSURE(pts.dim2==3,  "wrong dimension for points array")
   ENSURE(nabla_grid.dim2==3,  "wrong dimension for nabla_grid array")
   ENSURE(nabla_grid.dim1==pts.dim1,"wrong dimension for nabla_grid array")
   ENSURE(grid.dim==pts.dim1,"wrong dimension for grid array")
   ENSURE(.natural_orbitals.created, "no natural orbitals")
   ENSURE(.natural_orbitals.created("restricted"), "no restricted NO's")
   ENSURE(.occupation_numbers.created, "no occupation numbers")
   ENSURE(.occupation_numbers.created("restricted"),"no occupation numbers")
      orb :: VEC{REAL}*
      nabla_orb :: MAT{REAL}*
      occ :: REAL
      n_occ,n,n_pts :: INT
      n_pts = size(pts,1)
      nabla_grid = ZERO
      grid = ZERO
      orb.create(n_pts)
      nabla_orb.create(n_pts,3)
      n_occ = .no_of_occupied_NOs
      do n = 1,n_occ
       .make_nabla_orbital_grid_r(nabla_orb,orb,.natural_orbitals.restricted(:,n), pts)
       occ = .occupation_numbers.restricted(n)
       nabla_grid(:,1) = nabla_grid(:,1) + occ*orb(:)*nabla_orb(:,1)
       nabla_grid(:,2) = nabla_grid(:,2) + occ*orb(:)*nabla_orb(:,2)
       nabla_grid(:,3) = nabla_grid(:,3) + occ*orb(:)*nabla_orb(:,3)
       grid(:) = grid(:) + occ*orb(:)*orb(:)
      end
      nabla_grid = TWO*nabla_grid
      orb.destroy
      nabla_orb.destroy
   end

   make_nabla_orbital_grid_r(g,h,orb,pt)
   ! Evaluate the nabla orbital density grid "g" as well as the orbital grid "h"
   ! for *one* AO-basis orbital vector "orb" on a set of grid points "pt"
      g :: MAT{REAL}
      h :: VEC{REAL}
      orb :: VEC{REAL}, IN, target
      pt :: MAT{REAL}, IN
   ENSURE(.basis.created,"no basis set")
   ENSURE(.basis.no_of_basis_functions==orb.dim,"incorrect suize, orb")
   ENSURE(g.dim1==pt.dim1,"grid array has wrong 1st dimension")
   ENSURE(g.dim2==3,"grid array has wrong 2nd dimension")
   ENSURE(h.dim==pt.dim1,"grid array has wrong 1st dimension")
      orb_a :: VEC{REAL}*
      sh :: SHELL1
      sh_grid :: MAT3{REAL}*
      sh_grid0 :: MAT{REAL}*
      n_pt,f,l,a :: INT
      n_pt = pt.dim1
      g = ZERO
      h = ZERO
      l = 0
      do a = 1,.basis.n_shell
         sh.set(.basis.shell(a),.pos)
         sh_grid.create(n_pt,sh.n_comp,3)
         sh_grid0.create(n_pt,sh.n_comp)
         sh.make_nabla_grid(sh_grid,sh_grid0,pt)
         f = l + 1
         l = f + sh.n_comp - 1
         orb_a => orb(f:l)
         g(:,1) = g(:,1) + matmul(sh_grid(:,:,1),orb_a)
         g(:,2) = g(:,2) + matmul(sh_grid(:,:,2),orb_a)
         g(:,3) = g(:,3) + matmul(sh_grid(:,:,3),orb_a)
         h = h + matmul(sh_grid0,orb_a)
         sh_grid0.destroy
         sh_grid.destroy
      end
   end

! **************************
! Laplacian density routines
! **************************

   make_laplacian_grid(laplacian_grid,pt)
   ! Work out the electron "laplacian_grid" on "pt" using ".natural orbitals"
   ! and  the ".occupation_numbers" vector.
      laplacian_grid :: VEC{REAL}
      pt :: MAT{REAL}
   ENSURE(.natural_orbitals.created, "no natural orbitals")
   ENSURE(.natural_orbitals.any_created, "no natural orbitals")
      if (.natural_orbitals.number_kind == "real") then
        .make_laplacian_grid_r(laplacian_grid,pt)
      else
        DIE("code not written yet")
      end
   end

   make_laplacian_grid_r(laplacian_grid,pt)
   ! Make the "laplacian_grid" for the supplied points "pt" from restricted
   ! real natural orbitals
      laplacian_grid :: VEC{REAL}
      pt :: MAT{REAL}
   ENSURE(pt.dim2==3, "wrong dimension for pt array")
   ENSURE(.natural_orbitals.created("restricted"), "no restricted NO's")
   ENSURE(.occupation_numbers.restricted.created, "no occupation #'s")
      NO :: VEC{REAL}*
      P,D :: MAT{REAL}*
      n_occ,n,n_pt :: INT
      n_pt = pt.dim1
      laplacian_grid = ZERO
      NO.create(n_pt)
      P.create(n_pt,3)
      D.create(n_pt,3)
      n_occ = .no_of_occupied_NOs
      do n = 1,n_occ
       .make_laplacian_orbital_grid_r(D,P,NO,.natural_orbitals.restricted(:,n), pt)
       laplacian_grid(:) = laplacian_grid(:) +  &
          .occupation_numbers.restricted(n) * ( &
          NO * (D(:,1)+D(:,2)+D(:,3)) + (P(:,1)*P(:,1) + P(:,2)*P(:,2) + P(:,3)*P(:,3)))
      end
      laplacian_grid(:) = TWO*laplacian_grid(:)
      D.destroy
      P.destroy
      NO.destroy
   end

   make_laplacian_orbital_grid_r(g,h,i,orb,pt)
   ! Evaluate the laplacian orbital density grid "g", as well as the nabla
   ! orbital grid "h" and the orbital grid "i" for *one* AO-basis orbital
   ! vector "orb" on a set of grid points "pt"
      g,h :: MAT{REAL}
      i :: VEC{REAL}
      orb :: VEC{REAL}, IN, target
      pt :: MAT{REAL}, IN
   ENSURE(.basis.created,"no basis set")
   ENSURE(.basis.no_of_basis_functions==orb.dim,"incorrect suize, orb")
   ENSURE(g.dim1==pt.dim1, "grid array has wrong 1st dimension")
   ENSURE(g.dim2==3,        "grid array has wrong 2nd dimension")
   ENSURE(h.dim1==pt.dim1, "grid array has wrong 1st dimension")
   ENSURE(h.dim2==3,        "grid array has wrong 2nd dimension")
   ENSURE(i.dim==pt.dim1,  "grid array has wrong 1st dimension")
      sh :: SHELL1
      sh_grid,sh_grid1 :: MAT3{REAL}*
      sh_grid0 :: MAT{REAL}*
      orb_a :: VEC{REAL}*
      n_pt,f,l,a :: INT
      n_pt = pt.dim1
      g = ZERO
      h = ZERO
      i = ZERO
      l = 0
      do a = 1,.basis.n_shell
         sh.set(.basis.shell(a),.pos)
         sh_grid.create(n_pt,sh.n_comp,3)
         sh_grid1.create(n_pt,sh.n_comp,3)
         sh_grid0.create(n_pt,sh.n_comp)
         sh.make_laplacian_grid(sh_grid,sh_grid1,sh_grid0,pt)
         f = l + 1
         l = f + sh.n_comp - 1
         orb_a => orb(f:l)
         g(:,1) = g(:,1) + matmul(sh_grid(:,:,1),orb_a)
         g(:,2) = g(:,2) + matmul(sh_grid(:,:,2),orb_a)
         g(:,3) = g(:,3) + matmul(sh_grid(:,:,3),orb_a)
         h(:,1) = h(:,1) + matmul(sh_grid1(:,:,1),orb_a)
         h(:,2) = h(:,2) + matmul(sh_grid1(:,:,2),orb_a)
         h(:,3) = h(:,3) + matmul(sh_grid1(:,:,3),orb_a)
         i = i + matmul(sh_grid0,orb_a)
         sh_grid0.destroy
         sh_grid1.destroy
         sh_grid.destroy
      end
   end

   make_rL_grid(laplacian_grid,pt)
   ! Work out the reduced "laplacian_grid" on "pt" using ".natural orbitals"
   ! and  the ".occupation_numbers" vector.
      laplacian_grid :: VEC{REAL}
      pt :: MAT{REAL}
   ENSURE(.natural_orbitals.created, "no natural orbitals")
   ENSURE(.natural_orbitals.any_created, "no natural orbitals")
      if (.natural_orbitals.number_kind == "real") then
        .make_rL_grid_r(laplacian_grid,pt)
      else
        DIE("code not written yet")
      end
   end

   make_rL_grid_r(laplacian_grid,pt)
   ! Make the reduced "laplacian_grid" for the supplied points "pt" from
   ! restricted real natural orbitals
      laplacian_grid :: VEC{REAL}
      pt :: MAT{REAL}
   ENSURE(pt.dim2==3, "wrong dimension for pt array")
   ENSURE(.natural_orbitals.created("restricted"), "no restricted NO's")
   ENSURE(.occupation_numbers.restricted.created, "no occupation #'s")
      rho,NO :: VEC{REAL}*
      P,D :: MAT{REAL}*
      n_occ,n,n_pt :: INT
      occ :: REAL
      n_pt = pt.dim1
      laplacian_grid = ZERO
      rho.create(n_pt); rho = ZERO
      NO.create(n_pt)
      P.create(n_pt,3)
      D.create(n_pt,3)
      n_occ = .no_of_occupied_NOs
      do n = 1,n_occ
       .make_laplacian_orbital_grid_r(D,P,NO,.natural_orbitals.restricted(:,n), pt)
       occ = .occupation_numbers.restricted(n)
       laplacian_grid = laplacian_grid +  occ * ( &
          NO * (D(:,1)+D(:,2)+D(:,3)) + (P(:,1)*P(:,1) + P(:,2)*P(:,2) + P(:,3)*P(:,3)))
       rho = rho + occ*NO*NO
      end
      laplacian_grid = TWO*laplacian_grid/rho
      D.destroy
      P.destroy
      NO.destroy
      rho.destroy
   end

! *****************************
! Energy density from rho grids
! *****************************

   make_E_hf_dens_from_rho_grid(E_grid,pt)
   ! Work out the energy density as the scaled electron density.
      E_grid :: VEC{REAL}
      pt :: MAT{REAL}
      fac :: REAL
      .make_density_grid(E_grid,pt)
      fac = .energy/.atomic_number
      E_grid = fac*E_grid
   end

! ***********************************
! Virial type energy density routines
! ***********************************

   make_H_from_virial_grid(H_grid,pt)
   ! Work out the energy density using the virial relationsip 2G + V = (1/4) L,
   ! or H = G + V = (1/4)L - G
      H_grid :: VEC{REAL}
      pt :: MAT{REAL}
      G_grid :: VEC{REAL}*
      G_grid.create(H_grid.dim)
      .make_G_kinetic_energy_grid(G_grid,pt)
      .make_laplacian_grid(H_grid,pt)
      H_grid = QUARTER*H_grid - G_grid
      G_grid.destroy
   end

   make_rH_from_virial_grid(H_grid,pt)
   ! Work out the reduced energy density using the virial relationsip 
   ! 2G + V = (1/4) L, or H = G + V = (1/4)L - G
      H_grid :: VEC{REAL}
      pt :: MAT{REAL}
      G_grid :: VEC{REAL}*
      G_grid.create(H_grid.dim)
      .make_rG_kinetic_energy_grid(G_grid,pt)
      .make_rL_grid(H_grid,pt)
      H_grid = QUARTER*H_grid - G_grid
      G_grid.destroy
   end

   make_H_Kirzhnits_grid(H_grid,pt)
   ! Work out the energy density using the Kirzhnits relationsip 2G + V = (1/4) L,
   ! or H = G + V = (1/4)L - G
      H_grid :: VEC{REAL}
      pt :: MAT{REAL}
      G_grid :: VEC{REAL}*
      G_grid.create(H_grid.dim)
      .make_G_Kirzhnits_grid(G_grid,pt)
      .make_laplacian_grid(H_grid,pt)
      H_grid = QUARTER*H_grid - G_grid
      G_grid.destroy
   end

   make_V_from_virial_grid(V,pt)
   ! Work out the potential energy density from using the 
   ! virial theorem: V = (1/4) L - 2G
      V :: VEC{REAL}
      pt :: MAT{REAL}
      G :: VEC{REAL}*
      G.create(V.dim)
      .make_G_kinetic_energy_grid(G,pt)
      .make_laplacian_grid(V,pt)
      V = QUARTER*V - TWO*G
      G.destroy
   end

   make_rV_from_virial_grid(V,pt)
   ! Work out the reduced potenbtial energy density from using the 
   ! virial theorem: V = (1/4) L - 2G
      V :: VEC{REAL}
      pt :: MAT{REAL}
      G :: VEC{REAL}*
      G.create(V.dim)
      .make_rG_kinetic_energy_grid(G,pt)
      .make_rL_grid(V,pt)
      V = QUARTER*V - TWO*G
      G.destroy
   end

   make_V_Kirzhnits_grid(V,pt)
   ! Work out the potential energy density from using the 
   ! Kirzhnits theorem: V = (1/4) L - 2G
      V :: VEC{REAL}
      pt :: MAT{REAL}
      G :: VEC{REAL}*
      G.create(V.dim)
      .make_G_Kirzhnits_grid(G,pt)
      .make_laplacian_grid(V,pt)
      V = QUARTER*V - TWO*G
      G.destroy
   end

! *******************************
! G-type kinetic density routines
! *******************************

   make_G_kinetic_energy_grid(G_grid,pt)
   ! Work out the G-type kinetic energy density (using nabla phi.nabla phi) on
   ! "pt" using ".natural orbitals" and  the ".occupation_numbers" vector.
      G_grid :: VEC{REAL}
      pt :: MAT{REAL}
   ENSURE(.natural_orbitals.created, "no natural orbitals")
   ENSURE(.natural_orbitals.any_created, "no natural orbitals")
      if (.natural_orbitals.number_kind=="real") then
        .make_G_kinetic_energy_grid_r(G_grid,pt)
      else
        DIE("code not written yet")
      end
   end

   make_G_kinetic_energy_grid_r(G_grid,pt)
   ! Make the G-type kinetic energy density "G_grid" for the supplied points
   ! "pt" from restricted real natural orbitals
      G_grid :: VEC{REAL}
      pt :: MAT{REAL}
   ENSURE(pt.dim2==3, "wrong dimension for pt array")
   ENSURE(.natural_orbitals.created("restricted"), "no restricted NO's")
   ENSURE(.occupation_numbers.restricted.created, "no occupation #'s")
      NO :: VEC{REAL}*
      P :: MAT{REAL}*
      n_occ,n,n_pt :: INT
      n_pt = pt.dim1
      G_grid = ZERO
      NO.create(n_pt)
      P.create(n_pt,3)
      n_occ = .no_of_occupied_NOs
      do n = 1,n_occ
       .make_nabla_orbital_grid_r(P,NO,.natural_orbitals.restricted(:,n), pt)
       G_grid(:) = G_grid(:) &
                 + .occupation_numbers.restricted(n) &
                 * (P(:,1)*P(:,1) + P(:,2)*P(:,2) + P(:,3)*P(:,3))
      end
      G_grid(:) = HALF*G_grid(:)
      P.destroy
      NO.destroy
   end

   make_rG_kinetic_energy_grid(G_grid,pt)
   ! Work out the reduced G-type kinetic energy density (using nabla phi.nabla phi) on
   ! "pt" using ".natural orbitals" and  the ".occupation_numbers" vector.
      G_grid :: VEC{REAL}
      pt :: MAT{REAL}
   ENSURE(.natural_orbitals.created, "no natural orbitals")
   ENSURE(.natural_orbitals.any_created, "no natural orbitals")
      if (.natural_orbitals.number_kind=="real") then
        .make_rG_kinetic_energy_grid_r(G_grid,pt)
      else
        DIE("code not written yet")
      end
   end

   make_rG_kinetic_energy_grid_r(G_grid,pt)
   ! Make the reduced G-type kinetic energy density "G_grid" for the supplied points
   ! "pt" from restricted real natural orbitals
      G_grid :: VEC{REAL}
      pt :: MAT{REAL}
   ENSURE(pt.dim2==3, "wrong dimension for pt array")
   ENSURE(.natural_orbitals.created("restricted"), "no restricted NO's")
   ENSURE(.occupation_numbers.restricted.created, "no occupation #'s")
      rho,NO :: VEC{REAL}*
      P :: MAT{REAL}*
      n_occ,n,n_pt :: INT
      occ :: REAL
      n_pt = pt.dim1
      G_grid = ZERO
      rho.create(n_pt); rho = ZERO
      NO.create(n_pt)
      P.create(n_pt,3)
      n_occ = .no_of_occupied_NOs
      do n = 1,n_occ
       .make_nabla_orbital_grid_r(P,NO,.natural_orbitals.restricted(:,n), pt)
       occ = .occupation_numbers.restricted(n)
       G_grid = G_grid + occ * (P(:,1)*P(:,1) + P(:,2)*P(:,2) + P(:,3)*P(:,3))
       rho = rho + occ*NO*NO
      end
      G_grid = HALF*G_grid/rho
      P.destroy
      NO.destroy
      rho.destroy
   end

   make_G_Kirzhnits_grid(G_grid,pt)
   ! Work out the G-type Kirzhnits kinetic energy density (using nabla phi.nabla phi) on
   ! "pt" using ".natural orbitals" and  the ".occupation_numbers" vector.
      G_grid :: VEC{REAL}
      pt :: MAT{REAL}
   ENSURE(.natural_orbitals.created, "no natural orbitals")
   ENSURE(.natural_orbitals.any_created, "no natural orbitals")
      if (.natural_orbitals.number_kind=="real") then
        .make_G_Kirzhnits_grid_r(G_grid,pt)
      else
        DIE("code not written yet")
      end
   end

   make_G_Kirzhnits_grid_r(G_grid,pt)
   ! Make the G-type Kirzhnits kinetic energy density "G_grid" for the supplied points
   ! "pt" from restricted real natural orbitals
      G_grid :: VEC{REAL}
      pt :: MAT{REAL}
   ENSURE(pt.dim2==3, "wrong dimension for pt array")
   ENSURE(.natural_orbitals.created("restricted"), "no restricted NO's")
   ENSURE(.occupation_numbers.restricted.created, "no occupation #'s")
      NO,rho,nab_ro2,lap_rho :: VEC{REAL}*
      G,L,nab_rho :: MAT{REAL}*
      lambda,k2,fac,occ,occ2 :: REAL
      n_occ,n,n_pt :: INT
      n_pt = pt.dim1
      rho.create(n_pt);       rho = ZERO
      lap_rho.create(n_pt);   lap_rho = ZERO 
      nab_ro2.create(n_pt)
      nab_rho.create(n_pt,3); nab_rho = ZERO 
      NO.create(n_pt)
      G.create(n_pt,3)
      L.create(n_pt,3)
      n_occ = .no_of_occupied_NOs
      do n = 1,n_occ
       .make_laplacian_orbital_grid_r(L,G,NO,.natural_orbitals.restricted(:,n), pt)
       occ  = .occupation_numbers.restricted(n)
       occ2 = TWO*occ
       rho  = rho + occ *NO*NO
       nab_rho(:,1) = nab_rho(:,1) + occ2*NO*G(:,1)
       nab_rho(:,2) = nab_rho(:,2) + occ2*NO*G(:,1)
       nab_rho(:,3) = nab_rho(:,3) + occ2*NO*G(:,1)
       lap_rho = lap_rho + occ2*(NO*(L(:,1)+L(:,2)+L(:,3)) + (G(:,1)*G(:,1) + G(:,2)*G(:,2) + G(:,3)*G(:,3)))
      end
      L.destroy; G.destroy; NO.destroy
      nab_ro2 = nab_rho(:,1)*nab_rho(:,1) + nab_rho(:,2)*nab_rho(:,2) + nab_rho(:,3)*nab_rho(:,3)
      nab_rho.destroy
      lambda = ONE/72.0d0
      k2 = HALF/SIX
      fac = 0.3d0*(THREE*PI*PI)**(TWOTHIRDS)
      G_grid = fac*rho**(FIVE/THREE) + lambda*nab_ro2/rho + k2*lap_rho
      nab_ro2.destroy; lap_rho.destroy; rho.destroy
   end

! *******************************
! K-type kinetic density routines
! *******************************

   make_K_kinetic_energy_grid(K_grid,pt)
   ! Work out the K-type kinetic energy density (using the nabla^2) on "pt"
   ! using ".natural orbitals" and  the ".occupation_numbers" vector.
      K_grid :: VEC{REAL}
      pt :: MAT{REAL}
   ENSURE(.natural_orbitals.created, "no natural orbitals")
   ENSURE(.natural_orbitals.any_created, "no natural orbitals")
      if (.natural_orbitals.number_kind=="real") then
        .make_K_kinetic_energy_grid_r(K_grid,pt)
      else
        DIE("code not written yet")
      end
   end

   make_K_kinetic_energy_grid_r(K_grid,pt)
   ! Make the K-type kinetic energy density "K_grid" for the supplied points
   ! "pt" from restricted real natural orbitals
      K_grid :: VEC{REAL}
      pt :: MAT{REAL}
   ENSURE(pt.dim2==3, "wrong dimension for pt array")
   ENSURE(.natural_orbitals.created("restricted"), "no restricted NO's")
   ENSURE(.occupation_numbers.restricted.created, "no occupation #'s")
      NO :: VEC{REAL}*
      P,D :: MAT{REAL}*
      n_occ,n,n_pt :: INT
      n_pt = pt.dim1
      K_grid = ZERO
      NO.create(n_pt)
      P.create(n_pt,3)
      D.create(n_pt,3)
      n_occ = .no_of_occupied_NOs
      do n = 1,n_occ
       .make_laplacian_orbital_grid_r(D,P,NO,.natural_orbitals.restricted(:,n), pt)
       K_grid(:) = K_grid(:) &
                 + .occupation_numbers.restricted(n) * NO * (D(:,1)+D(:,2)+D(:,3)) 
      end
      K_grid(:) = -HALF*K_grid(:)
      D.destroy
      P.destroy
      NO.destroy
   end

   make_rK_kinetic_energy_grid(K_grid,pt)
   ! Work out the reduced K-type kinetic energy density (using the nabla^2) on "pt"
   ! using ".natural orbitals" and  the ".occupation_numbers" vector.
      K_grid :: VEC{REAL}
      pt :: MAT{REAL}
   ENSURE(.natural_orbitals.created, "no natural orbitals")
   ENSURE(.natural_orbitals.any_created, "no natural orbitals")
      if (.natural_orbitals.number_kind=="real") then
        .make_rK_kinetic_energy_grid_r(K_grid,pt)
      else
        DIE("code not written yet")
      end
   end

   make_rK_kinetic_energy_grid_r(K_grid,pt)
   ! Make the K-type kinetic energy density "K_grid" for the supplied points
   ! "pt" from restricted real natural orbitals
      K_grid :: VEC{REAL}
      pt :: MAT{REAL}
   ENSURE(pt.dim2==3, "wrong dimension for pt array")
   ENSURE(.natural_orbitals.created("restricted"), "no restricted NO's")
   ENSURE(.occupation_numbers.restricted.created, "no occupation #'s")
      rho,NO :: VEC{REAL}*
      P,D :: MAT{REAL}*
      n_occ,n,n_pt :: INT
      occ :: REAL
      n_pt = pt.dim1
      K_grid = ZERO
      rho.create(n_pt); rho = ZERO
      NO.create(n_pt)
      P.create(n_pt,3)
      D.create(n_pt,3)
      n_occ = .no_of_occupied_NOs
      do n = 1,n_occ
       .make_laplacian_orbital_grid_r(D,P,NO,.natural_orbitals.restricted(:,n), pt)
       occ = .occupation_numbers.restricted(n)
       K_grid = K_grid + occ * NO * (D(:,1)+D(:,2)+D(:,3)) 
       rho = rho + occ*NO*NO
      end
      K_grid = -HALF*K_grid/rho
      D.destroy
      P.destroy
      NO.destroy
      rho.destroy
   end

! *************
! DFT potential
! *************

   make_dft_xc_pot_grid(V,pt,exchange,correlation)
   ! Work out the DFT exchange-correlation potential "V" at a series of points
   ! "pt".
      V :: VEC{REAL}
      pt :: MAT{REAL}
      exchange,correlation :: STR
      dft :: DFT_FUNCTIONAL
      rho :: VEC{REAL}*
      rho.create(V.dim)
      .make_density_grid(rho,pt)
      V = ZERO
      dft.r_potential(exchange,V,rho)
      dft.r_potential(correlation,V,rho)
      rho.destroy
   end

   make_dft_eff_pot_grid(V,pt,exchange,correlation)
   ! Work out the DFT effective potential "V" (i.e. the DFT potential plus the
   ! classical electric potential) on a grid of points "pt".
      V :: VEC{REAL}
      pt :: MAT{REAL}
      exchange,correlation :: STR
      rho :: VEC{REAL}*
      dft :: DFT_FUNCTIONAL
      .make_electric_potential_grid(V,pt)
      rho.create(V.dim)
      .make_density_grid(rho,pt)
      dft.r_potential(exchange,V,rho)
      dft.r_potential(correlation,V,rho)
      rho.destroy
   end

   make_dft_energy_grid(V,pt,exchange,correlation)
   ! Work out the Slater DFT energy "V" (i.e. the Slater potential times the
   ! density plus the classical electric energy) on a grid of points "pt".
      V :: VEC{REAL}
      pt :: MAT{REAL}
      exchange,correlation :: STR
   ENSURE(.density_matrix.created, "no density matrix")
   ENSURE(.density_matrix.restricted.created, "no restricted density matrix")
      Ve,rho :: VEC{REAL}*
      dft :: DFT_FUNCTIONAL
      .nuclear_potential(V,pt)
      Ve.create(V.dim)
      .make_electronic_pot_grid_r(Ve,pt,.density_matrix.restricted)
      V = -V - HALF*Ve
      Ve.destroy
      rho.create(V.dim)
      .make_density_grid(rho,pt)
      dft.r_energy_density(exchange,V,rho)
      dft.r_energy_density(correlation,V,rho)
      V = V*rho
      rho.destroy
   end

   make_H_dft_energy_grid(H_grid,pt,exchange,correlation)
   ! Work out the H DFT energy density "H_grid" on a set ofpoints "pt"
      H_grid :: VEC{REAL}
      pt :: MAT{REAL}
      exchange,correlation :: STR
      G_grid :: VEC{REAL}*
      G_grid.create(H_grid.dim)
      .make_G_kinetic_energy_grid(G_grid,pt)
      .make_dft_energy_grid(H_grid,pt,exchange,correlation)
      H_grid = H_grid + G_grid
      G_grid.destroy
   end

! ******************
! Electric potential
! ******************

   make_electric_potential_grid(pot_grid,pt)
   ! Make the electric potential "pot_grid" on a series of points "pt"
      pot_grid :: VEC{REAL}
      pt :: MAT{REAL}
   ENSURE(.density_matrix.created, "no density matrix")
   ENSURE(.density_matrix.restricted.created, "no restricted density matrix")
      if (.density_matrix.number_kind == "real") then
       .make_electric_potential_grid_r(pot_grid,pt,.density_matrix.restricted)
      else
       DIE("complex case not yet implemented")
      end
   end

   make_electric_potential_grid_r(pot_grid,pt,dens)
   ! Make the total electric potential "pot_grid" on a series of grid points
   ! "pt" using AO density matrix "dens"
      pot_grid :: VEC{REAL}
      pt :: MAT{REAL}
      dens :: MAT{REAL}, target
      elec_grid :: VEC{REAL}*
      .nuclear_potential(pot_grid,pt)
      elec_grid.create(size(pot_grid))
      .make_electronic_pot_grid_r(elec_grid,pt,dens)
      pot_grid.plus(elec_grid)
      elec_grid.destroy
   end

   make_electronic_pot_grid_r(pot_grid,pt,dens)
   ! Make the electronic potential "pot_grid" on a series of grid points "pt"
   ! using AO density matrix "dens"
      pot_grid :: VEC{REAL}
      pt :: MAT{REAL}
      dens :: MAT{REAL}, target
   ENSURE(.basis.created,"no basis set")
      Vab,Dba :: MAT{REAL}*
      sh :: SHELL2
      n_pt,n_shell_pairs,q,fa,fb,la,lb,k :: INT
      n_pt = pt.dim1
      n_shell_pairs = .basis.n_shell.triangle_number
      pot_grid = ZERO
      do q = 1,n_shell_pairs
         .get_precomputed_shell_pair(sh,q,fa,la,fb,lb)
         Dba => dens(fa:la,fb:lb)
         Vab.create(sh.a.n_comp,sh.b.n_comp)
         if (fa/=fb) then
           do k = 1,n_pt
             sh.get_nuc(Vab,ONE,pt(k,:))
             pot_grid(k) = pot_grid(k) - TWO*sum(Vab*Dba)
           end
         else
           do k = 1,n_pt
             sh.get_nuc(Vab,ONE,pt(k,:))
             pot_grid(k) = pot_grid(k) - sum(Vab*Dba)
           end
         end
         Vab.destroy
         sh.destroy_ptr_part
      end
   end

   nuclear_potential(values,pts)
   ! Calculate the nuclear potential "values" of a given set of "pts".
      values :: VEC{REAL}, OUT
      pts :: MAT{REAL}, IN
      n_pts,i :: INT
      r,x,y,z,xi,yi,zi :: REAL
      n_pts = values.dim
      values = ZERO
      x = .pos(1); y = .pos(2); z = .pos(3)
      do i = 1,n_pts
         xi = pts(i,1) - x
         yi = pts(i,2) - y
         zi = pts(i,3) - z
         r  = sqrt(xi*xi + yi*yi + zi*zi)
         if (r>tiny(r)) then
           values(i) = values(i) + .atomic_number / r
         else
           values(i) = values(i) + huge(ONE)
         end
      end
   end

! *********************************
! DFT grids for all basis functions
! *********************************

   make_bf_grid(grid,pt)
   ! Make a "grid" on which all the atom basis functions are evaluated, for the
   ! supplied points "pt".
      self :: IN
      grid :: MAT{REAL}, OUT
      pt :: MAT{REAL}, IN
   ENSURE(.basis.created,"no basis set")
   ENSURE(pt.dim2==3,"wrong dimension for pt array")
   ENSURE(grid.dim1==pt.dim1,"incompatible grid and pt arrays")
   ENSURE(grid.dim2==.no_of_basis_functions,"wrong size, grid array")
      sh :: SHELL1
      s,f,l :: INT
      l = 0
      do s = 1,.basis.n_shell
         sh.set(.basis.shell(s),.pos)
         f = l + 1
         l = l + sh.n_comp
         sh.make_grid(grid(:,f:l),pt)
      end
   end

   make_nabla_bf_grid(nabla_grid,pt)
   ! No need to set position
   ! Make a "nabla_grid" on which the gradient of all the atom basis functions
   ! are evaluated, for the supplied points "pt". 
      self :: IN
      nabla_grid :: MAT3{REAL}, target, OUT
      pt :: MAT{REAL}, IN
   ENSURE(.basis.created,"no basis set")
   ENSURE(pt.dim2==3,"wrong dimension for pt array")
   ENSURE(nabla_grid.dim1==pt.dim1,"incompatible nabla_grid and pt arrays")
   ENSURE(nabla_grid.dim2==.no_of_basis_functions,"wrong size, nabla_grid array")
   ENSURE(nabla_grid.dim3==3,"wrong size, nabla_grid array")
      sh :: SHELL1
      s,f,l :: INT
      l = 0
      do s = 1,.basis.n_shell
         sh.set(.basis.shell(s),.pos)
         f = l + 1
         l = l + sh.n_comp
         sh.make_nabla_grid(nabla_grid,pt)
      end
   end

   make_nabla_bf_grid(nabla_grid,grid,pt)
   ! Make a "nabla_grid" on which the gradient of all the atom basis functions
   ! are evaluated, for the supplied points "pt". Also return "grid", which
   ! tabluates the values of all the atom basis functions on the grid points.
      self :: IN
      nabla_grid :: MAT3{REAL}, target, OUT
      grid :: MAT{REAL}, target, OUT
      pt :: MAT{REAL}, IN
   ENSURE(.basis.created,"no basis set")
   ENSURE(pt.dim2==3,"wrong dimension for pt array")
   ENSURE(nabla_grid.dim1==pt.dim1,"incompatible nabla_grid and pt arrays")
   ENSURE(nabla_grid.dim2==.no_of_basis_functions,"wrong size, nabla_grid array")
   ENSURE(nabla_grid.dim3==3,"wrong size, nabla_grid array")
   ENSURE(grid.dim1==pt.dim1,"incompatible grid and pt arrays")
   ENSURE(grid.dim2==.no_of_basis_functions,"wrong size, grid array")
      sh :: SHELL1
      s,f,l :: INT
      Gx,Gy,Gz,G :: MAT{REAL}*
      l = 0
      do s = 1,.basis.n_shell
         sh.set(.basis.shell(s),.pos)
         f = l + 1
         l = l + sh.n_comp
         Gx => nabla_grid(:,f:l,1) ! These are contiguous in memory
         Gy => nabla_grid(:,f:l,2) ! which are passed below ...
         Gz => nabla_grid(:,f:l,3)
         G  =>       grid(:,f:l)
         sh.make_nabla_grid(Gx,Gy,Gz,G,pt)
      end
   end


   make_bf_grid(grid0,pt,cutoff)
   ! Make a "grid0" on which all the atom basis functions are evaluated, for the
   ! supplied points "pt".
      self :: IN
      grid0 :: MAT{REAL}, OUT
      pt :: MAT{REAL}, IN
      cutoff :: REAL
   ENSURE(.basis.created,"no basis set")
   ENSURE(pt.dim2==3,"wrong dimension for pt array")
   ENSURE(grid0.dim1==pt.dim1,"incompatible grid0 and pt arrays")
   ENSURE(grid0.dim2==.no_of_basis_functions,"wrong size, grid0 array")
      x,y,z,r2 :: VEC{REAL}*
      sh :: SHELL1
      n_pt,s,f,l :: INT
      n_pt = pt.dim1 
      x.create(n_pt); y.create(n_pt); z.create(n_pt); r2.create(n_pt)
      .make_displaced_points(x,y,z,r2,pt)
      l = 0
      do s = 1,.basis.n_shell
         sh.set(.basis.shell(s),.pos)
         f = l + 1
         l = l + sh.n_comp
         sh.make_grid(grid0(:,f:l),x,y,z,r2,cutoff)
      end
      r2.destroy; z.destroy; y.destroy; x.destroy
   end

   make_nabla_bf_grid(grid1,pt,cutoff)
   ! Make a nabla grid, "grid1", on which the gradient of all the atom basis
   ! functions are evaluated, for the supplied points "pt". 
      self :: IN
      grid1 :: MAT3{REAL}, target, OUT
      pt :: MAT{REAL}, IN
      cutoff :: REAL
   ENSURE(.basis.created,"no basis set")
   ENSURE(pt.dim2==3,"wrong dimension for pt array")
   ENSURE(grid1.dim1==pt.dim1,"incompatible grid1 and pt arrays")
   ENSURE(grid1.dim2==.no_of_basis_functions,"wrong size, grid1 array")
   ENSURE(grid1.dim3==3,"wrong size, grid1 array")
      x,y,z,r2 :: VEC{REAL}*
      sh :: SHELL1
      n_pt,s,f,l :: INT
      n_pt = pt.dim1 
      x.create(n_pt); y.create(n_pt); z.create(n_pt); r2.create(n_pt)
      .make_displaced_points(x,y,z,r2,pt)
      l = 0
      do s = 1,.basis.n_shell
         sh.set(.basis.shell(s),.pos)
         f = l + 1
         l = l + sh.n_comp
         sh.make_nabla_grid(grid1,x,y,z,r2,cutoff)
      end
      r2.destroy; z.destroy; y.destroy; x.destroy
   end

   make_nabla_bf_grid(grid1,grid0,pt,cutoff)
   ! Make a nabla grid "grid1" on which the gradient of all the atom basis functions
   ! are evaluated, for the supplied points "pt". Also return "grid0", which
   ! tabluates the values of all the atom basis functions on the grid points.
      self :: IN
      grid1 :: MAT3{REAL}, target, OUT
      grid0 :: MAT{REAL}, target, OUT
      pt :: MAT{REAL}, IN
      cutoff :: REAL
   ENSURE(.basis.created,"no basis set")
   ENSURE(pt.dim2==3,"wrong dimension for pt array")
   ENSURE(grid1.dim1==pt.dim1,"incompatible grid1 and pt arrays")
   ENSURE(grid1.dim2==.no_of_basis_functions,"wrong size, grid1 array")
   ENSURE(grid1.dim3==3,"wrong size, grid1 array")
   ENSURE(grid0.dim1==pt.dim1,"incompatible grid0 and pt arrays")
   ENSURE(grid0.dim2==.no_of_basis_functions,"wrong size, grid array")
      sh :: SHELL1
      n_pt,s,f,l :: INT
      x,y,z,r2 :: VEC{REAL}*
      Gx,Gy,Gz,G :: MAT{REAL}*
      n_pt = pt.dim1 
      x.create(n_pt); y.create(n_pt); z.create(n_pt); r2.create(n_pt)
      .make_displaced_points(x,y,z,r2,pt)
      l = 0
      do s = 1,.basis.n_shell
         sh.set(.basis.shell(s),.pos)
         f = l + 1
         l = l + sh.n_comp
         Gx => grid1(:,f:l,1) ! These are contiguous in memory
         Gy => grid1(:,f:l,2) ! which are passed below ...
         Gz => grid1(:,f:l,3)
         G  => grid0(:,f:l)
         sh.make_nabla_grid(Gx,Gy,Gz,G,x,y,z,r2,cutoff)
      end
      r2.destroy; z.destroy; y.destroy; x.destroy
   end


   make_displaced_pts(dx,dy,dz,r2,skip,pt,n_pt,cutoff) ::: public
   ! For a list of points "pt" of length "n_pt", return displacements
   ! "dx", "dy", "dz", their square "r2" and "skip" which tells when
   ! the basis function is less than "cutoff".
      dx,dy,dz,r2 :: VEC{REAL}(n_pt), OUT
      skip :: VEC{BIN}(n_pt), OUT
      pt :: MAT{REAL}(n_pt,3), IN
      n_pt :: INT, IN
      cutoff :: REAL, IN

   ENSURE(.basis.created,"no basis set")

      px,py,pz, xx,yy,zz, rr,r2_max :: REAL
      n :: INT

      px = .pos(1) 
      py = .pos(2) 
      pz = .pos(3) 

      r2_max = .r2_max(cutoff)

      do n = 1,n_pt

         xx = pt(n,1) - px 
         yy = pt(n,2) - py
         zz = pt(n,3) - pz 
         rr = xx*xx + yy*yy + zz*zz

         dx(n)   = xx
         dy(n)   = yy
         dz(n)   = zz
         r2(n)   = rr
         skip(n) = rr>r2_max

      end

   end


   make_displaced_points(x,y,z,r2,pt,create) ::: leaky
   ! From a given list of points "pt" return the displacements "x", "y", "z" and
   ! their square "r2". This saves work in the grid routines. If "create" is
   ! present and TRUE the arrays are created.
      x,y,z,r2 :: VEC{REAL}*
      pt :: MAT{REAL}, IN
      create :: BIN, IN, optional
   ENSURE(.basis.created,"no basis set")
      xx,yy,zz,px,py,pz :: REAL
      n,n_pt :: INT
      alloc :: BIN
      alloc = FALSE
      if (present(create)) alloc = create
      n_pt = pt.dim1
      if (alloc) then
         x.create(n_pt)
         y.create(n_pt)
         z.create(n_pt)
         r2.create(n_pt)
      end
      px = .pos(1) 
      py = .pos(2) 
      pz = .pos(3) 
      do n = 1,n_pt
         xx = pt(n,1) - px 
         yy = pt(n,2) - py
         zz = pt(n,3) - pz 
         x(n) = xx
         y(n) = yy
         z(n) = zz
         r2(n) = xx*xx + yy*yy + zz*zz
      end
   end

   tidy_displaced_points(x,y,z,r2) ::: leaky
   ! Destroy the displacements made by the previous routine.
      x,y,z,r2 :: VEC{REAL}*
      r2.destroy
      z.destroy
      y.destroy
      x.destroy
   end


   make_significant_points(x,y,z,r2,skip,pt,cutoff) ::: leaky
   ! From a given list of points "pt" return the significant displacements "x",
   ! "y", "z" and their square "r2". These are comprised of those points for
   ! which the basis functions of the atom have a significant value above
   ! "cutoff" i.e. those points for which "skip" is FALSE.
      x,y,z,r2 :: VEC{REAL}*
      skip :: VEC{BIN}*
      pt :: MAT{REAL}, IN
      cutoff :: REAL, IN
   ENSURE(.basis.created,"no basis set")
      px,py,pz,xx,yy,zz,rr, r2_max :: REAL
      n_pt,n,k :: INT
      n_pt = pt.dim1
      skip.create(n_pt)
      x.create(n_pt); y.create(n_pt); z.create(n_pt)
      r2.create(n_pt)
      r2_max = .r2_max(cutoff)
      px = .pos(1) 
      py = .pos(2) 
      pz = .pos(3) 
      k = 0
      do n = 1,n_pt
         xx = pt(n,1) - px 
         yy = pt(n,2) - py 
         zz = pt(n,3) - pz 
         rr = xx*xx + yy*yy + zz*zz
         skip(n) = rr>r2_max
         if (skip(n)) cycle
         k = k + 1
         x(k) = xx
         y(k) = yy
         z(k) = zz
         r2(k) = rr
      end
      if (k==0) then
         skip.destroy
         x.destroy; y.destroy; z.destroy
         r2.destroy
      else
         x.shrink(k); y.shrink(k); z.shrink(k)
         r2.shrink(k)
      end
   end

   make_significant_points(x,y,z,r2,d2,skip,pt,cutoff) ::: leaky
   ! From a given list of points "pt" return the significant displacements "x",
   ! "y", "z" and their square "r2". These are comprised of those points for
   ! which the basis functions of the atom have a significant value above
   ! "cutoff" i.e. those points for which "skip" is FALSE.
      x,y,z,r2,d2 :: VEC{REAL}*
      skip :: VEC{BIN}*
      pt :: MAT{REAL}, IN
      cutoff :: REAL, IN
   ENSURE(.basis.created,"no basis set")

      px,py,pz,xx,yy,zz,rr, r2_max :: REAL
      n_pt,n,k :: INT

      n_pt = pt.dim1
      skip.create(n_pt)
      x.create(n_pt); y.create(n_pt); z.create(n_pt)
      r2.create(n_pt); d2.create(n_pt)

      r2_max = .r2_max(cutoff)

      px = .pos(1) 
      py = .pos(2) 
      pz = .pos(3) 

      k = 0
      do n = 1,n_pt
         xx = pt(n,1) - px 
         yy = pt(n,2) - py 
         zz = pt(n,3) - pz 
         rr = xx*xx + yy*yy + zz*zz
         d2(n) = rr
         skip(n) = rr>r2_max
         if (skip(n)) cycle
         k = k + 1
         x(k) = xx
         y(k) = yy
         z(k) = zz
         r2(k) = rr
      end

      if (k==0) then
         skip.destroy
         x.destroy; y.destroy; z.destroy
         r2.destroy; d2.destroy
      else
         x.shrink(k); y.shrink(k); z.shrink(k)
         r2.shrink(k) ! don't shrink d2 or skip
      end
   
   end

   make_significant_points(x,y,z,r2,skip,pt,skip2,cutoff) ::: leaky
   ! From a given list of points "pt" return the significant displacements "x",
   ! "y", "z" and their square "r2". These are comprised of those points for
   ! which the basis functions of the atom have a significant value above
   ! "cutoff" i.e. those points for which "skip" is FALSE. "skip2" is an array
   ! which skips (in addition) some preselcted points.
      x,y,z,r2 :: VEC{REAL}*
      skip :: VEC{BIN}*
      pt :: MAT{REAL}, IN
      skip2 :: VEC{BIN}, IN
      cutoff :: REAL, IN
   ENSURE(.basis.created,"no basis set")
      xx,yy,zz,rr, r2_max :: REAL
      n_pt,n,k :: INT
      n_pt = pt.dim1
      skip.create(n_pt)
      x.create(n_pt); y.create(n_pt); z.create(n_pt)
      r2.create(n_pt)
      r2_max = .r2_max(cutoff)
      k = 0
      do n = 1,n_pt
         xx = pt(n,1) - .pos(1) 
         yy = pt(n,2) - .pos(2) 
         zz = pt(n,3) - .pos(3) 
         rr = xx*xx + yy*yy + zz*zz
         skip(n) = skip2(n) OR rr>r2_max
         if (skip(n)) cycle
         k = k + 1
         x(k) = xx
         y(k) = yy
         z(k) = zz
         r2(k) = rr
      end
      if (k==0) then
         skip.destroy
         x.destroy; y.destroy; z.destroy
         r2.destroy
      else
         x.shrink(k); y.shrink(k); z.shrink(k)
         r2.shrink(k) ! don't shrink skip
      end
   end

! ****************************
! Make basis shell information
! ****************************

   make_shell_info ::: leaky
   ! Define a vector of atom numbers corresponding to the molecule
   ! basis set shell numbers; also define a vector of atom shell numbers
   ! corresponding to the molecule basis set shell number
   ENSURE(.basis.created,"no basis set")
      .first_basis_fn_for_shell.destroy
      .last_basis_fn_for_shell.destroy
      .set_shell_limits(.first_basis_fn_for_shell,.last_basis_fn_for_shell)
      .make_precomputed_shellpairs
      GAUSSIAN_DATA:set_indices(maxval(.basis.shell.l))
   end

   set_shell_limits(first,last) ::: leaky
   ! Set the indices of first and last basis functions in a particular shell
   ! "s", first(s) and last(s), respectively.
      first,last :: VEC{INT}*
      n_shell,f,l,s :: INT
      n_shell = .basis.n_shell
      nullify(first); first.create(n_shell)
      nullify(last);  last.create(n_shell)
      l = 0
      do s = 1,n_shell
         f = l + 1
         l = f + .basis.shell(s).n_bf - 1
         first(s) = f
         last(s)  = l
      end
   end

   make_precomputed_shellpairs ::: leaky
   ! Make a SHELLPAIR vector "shellpair" which includes precomputed data for the
   ! basis set.
   ! NOTE for later: n_unique_shells should be a basisvec routine.
   ! NOTE for later: precomputed_basis_shellpair should be a MAT{REAL} type
   ENSURE(.basis.created,"no basis set")
      n,a,b :: INT
      n = .basis.no_of_shells
      .precomputed_basis_shellpair.destroy
      .precomputed_basis_shellpair.create(n,n)
      do a = 1,.basis.n_shell
        do b = 1,a
           .precomputed_basis_shellpair(a,b).copy_a(.basis.shell(a))
           .precomputed_basis_shellpair(a,b).copy_b(.basis.shell(b))
           .precomputed_basis_shellpair(a,b).make_precalculated_data
        end
      end
   end

   get_precomputed_shell_pair(shell,q,fa,la,fb,lb) ::: leaky
   ! Get the SHELL2 object "shell" correponding to the pair index "q"
   ! Also return the basis function start indices "fa", "la", etc ...
      shell :: SHELL2, OUT
      q :: INT, IN
      fa,la,fb,lb :: INT, OUT
   ENSURE(.precomputed_basis_shellpair.created,"no precomputed basis shellpair data")
   ENSURE(.first_basis_fn_for_shell.created,"no first_basis_fn data")
   ENSURE(.last_basis_fn_for_shell.created,"no last_basis_fn data")
      a,b :: INT
      a  = (1+int(sqrt(8.0d0*q-7.0d0)))/2
      b  = q - a*(a-1)/2
      fa = .first_basis_fn_for_shell(a)
      fb = .first_basis_fn_for_shell(b)
      la = .last_basis_fn_for_shell(a)
      lb = .last_basis_fn_for_shell(b)
      shell.set_and_precompute_from(.precomputed_basis_shellpair(a,b),.pos,.pos,same_center=TRUE,skip=FALSE)
   end

! **************
! Output methods
! **************

   put
   ! Put out the atom information to file "stdout"
      stdout.flush
      stdout.show("Label                  =",trim(.label))
      stdout.show("Atomic No.             =",.atomic_number)
      stdout.show("Chemical symbol        =",trim(.chemical_symbol))
      stdout.show("Atom coordinates       =",.pos(1),.pos(2),.pos(3))
      if (.residue_sequence_number/=0) .put_mm_info
      if (.basis.created)              .basis.put
      if (.coppensbasis.created)       .coppensbasis.put
   ! if (.interpolator.created)       .interpolator.put
   end

   put_mm_info
   ! Put out the MM/protien part of the atom information to file "stdout"
      stdout.flush
      stdout.show("Residue atom code       =",trim(.residue_atom_code))
      stdout.show("Residue code            =",trim(.residue_code))
      stdout.show("Residue sequence number =",.residue_sequence_number)
      stdout.show("MM forcefield name      =",.mm_forcefield_name)
      stdout.show("MM atom type            =",.mm_atom_type)
      stdout.show("MM charge               =",.mm_charge)
      stdout.show("Restraining position    =",.restraining_position)
      stdout.show("Restraining force       =",.restraining_force_constant)
   end

   put_thermal_tensor(units)
   ! Output the thermal tensor.  Does not put a header or carriage return.
   ! Only outputs the 6 independent ones, not all 9.
      units :: STR, optional
      unit :: STR
      U :: VEC{REAL}(6)
      unit = "bohr^2"
      if (present(units)) unit = units
      if (unit=="bohr^2") then
        stdout.put(.thermal_tensor(1,1))
        stdout.put(.thermal_tensor(2,2))
        stdout.put(.thermal_tensor(3,3))
        stdout.put(.thermal_tensor(1,2))
        stdout.put(.thermal_tensor(1,3))
        stdout.put(.thermal_tensor(2,3))
      else
        U(1) = .thermal_tensor(1,1)
        U(2) = .thermal_tensor(2,2)
        U(3) = .thermal_tensor(3,3)
        U(4) = .thermal_tensor(1,2)
        U(5) = .thermal_tensor(1,3)
        U(6) = .thermal_tensor(2,3)
        U.convert_to(unit)
        stdout.put(U(1))
        stdout.put(U(2))
        stdout.put(U(3))
        stdout.put(U(4))
        stdout.put(U(5))
        stdout.put(U(6))
      end
   end

   put_natural_orbitals
   ! Put out the current associated molecular orbitals to file "out"
   ENSURE(.natural_orbitals.created,"no natural orbitals")
   ENSURE(.occupation_numbers.created,"no natural orbital occupations")
      stdout.flush
      stdout.text("Natural orbital occupations:")
      stdout.put( .occupation_numbers, format="column")
      stdout.flush
      stdout.text("Natural orbitals:")
      stdout.put( .natural_orbitals)
   end

   put_interpolator
   ! Put out the atom information to file "stdout"
      select case (.basis_kind)
         case ("slater")
            ENSURE(.slaterbasis.created,"no slaterbasis")
            stdout.flush
            stdout.text("Atom slaterbasis info:")
            .slaterbasis.interpolator.put
         case ("coppens")
            ENSURE(.coppensbasis.created,"no coppensbasis")
            stdout.flush
            stdout.text("Atom coppensbasis info:")
            .coppensbasis.interpolator.put
         case default
            DIE("no interpolator for basis "//trim(.basis_kind)) 
      end
   end

end
