!---------------------------------------------------------------------------
!
!  VEC{INT} : Integer vector operations ...
!
! Copyright (C) Dylan Jayatilaka, 1997
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!---------------------------------------------------------------------------

module VEC{INT}

   implicit none

contains

! =================
! Memory allocation
! =================

   create(dim) ::: get_from(VEC{INTRINSIC}), leaky
   ! Create space for object
   end

   create(lb,ub) ::: get_from(VEC{INTRINSIC}), leaky
   ! Create the vector with lower bound "lb", upper bound "ub"
   end

   create(bounds) ::: get_from(VEC{INTRINSIC}), leaky
   ! Create the vector with "bounds"
   end

   destroy ::: get_from(VEC{INTRINSIC}), leaky
   ! Destroy space for object
   end

   create_copy(v) ::: get_from(VEC{INTRINSIC}), leaky
   ! Create a copy of vector "v".
   end

   copy(v) ::: get_from(VEC{INTRINSIC})
   ! Copy vector "v".
   end

   created result (res) ::: get_from(VEC{INTRINSIC}), inlined_by_foo
   ! Returns true if self has been created
   end

   destroyed result (res) ::: get_from(VEC{INTRINSIC}), inlined_by_foo
   ! Returns true if self has *not* been created
   end

! ==================
! Size-of operations
! ==================

   size result (res) ::: get_from(VEC{INTRINSIC}), inlined_by_foo
   ! Return the size of the array
   end

   dim result (res) ::: get_from(VEC{INTRINSIC}), inlined_by_foo
   ! Return the size of the 1st dimension
   end

! =======================
! Shrinking and expansion
! =======================

   shrink(dim,chop_start) ::: get_from(VEC{INTRINSIC}), leaky
   ! Shrink "self" from the last element, to dimension "dim". Contents are
   ! retained.  If "chop_start" is present and TRUE, then "self" is shrunk or
   ! chopped from the start, and the contents from the end are retained.
   end

   expand(dim,grow_start) ::: get_from(VEC{INTRINSIC}), leaky
   ! Expand "self" to dimension "dim" from the end. New slots are left undefined.
   ! If "grow_start" is present and TRUE, then "self" is expanded from the
   ! start. Again, the starting slots are undefined.
   end

   append(v) ::: get_from(VEC{INTRINSIC}), leaky
   ! Expands self and appends the contents of vector "v".
   end

   append(v1,v2) ::: get_from(VEC{INTRINSIC}), leaky
   ! Expands self and appends the contents of vectors "v1" and "v2".
   end

   append(value) ::: get_from(VEC{INTRINSIC}), leaky
   ! Expands self by 1, and appends the single scalar "value" onto the end.
   end

   append_only_if_unique(value) ::: get_from(VEC{INTRINSIC}), leaky
   ! Expands self by 1, and appends the single scalar "value" onto the end, but
   ! only if the "value" is unique
   end

   prepend(v) ::: get_from(VEC{INTRINSIC}), leaky
   ! Prepend the vector "v" to "self". "self" is expanded.
   end

   prepend(value) ::: get_from(VEC{INTRINSIC}), leaky
   ! Prepend an single "value" to "self". "self" is expanded.
   end

   prune(values) ::: get_from(VEC{INTRINSIC}), leaky
   ! Removes the scalar "values" from the vector, if they are there.
   ! The order of the elementsis otherwise unchanged.
   end

   prune(value) ::: get_from(VEC{INTRINSIC}), leaky
   ! Removes the single scalar "value" from the vector, if it is there.
   ! The order of the elementsis otherwise unchanged.
   end

   prune_element(k) ::: get_from(VEC{INTRINSIC}), leaky
   ! Removes the single element at position "k" from the vector.
   ! The order of the elements is unchanged.
   end

! ====================
! Comparison functions
! ====================

   equals(v) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Return true if "self" is the same as "v".
   end

   same_as(v) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Return true if "self" is the same as "v".
   end

   has_elements_common_with(v) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Return true if "self" has elements common with "v"
   end

   has_no_elements_common_with(v) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Return true if "self" has no elements common with "v"
   end

   has_all_elements_common_with(v) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Return true if ALL elements of "self" are common with any in "v"
   end

   n_elements_common_with(v) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Return the number of elements of "self" which are common with "v"
   end

   n_elements_uncommon_with(v) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Return the number of elements of "self" which are uncommon with "v"
   end

   elements_common_with(v) result (res) ::: get_from(VEC{INTRINSIC}), leaky
   ! Return the elements of "self" which are common with "v",
   ! e.g. if self = [1,1,2,1] and v = [1], res = [1,1,1].
   ! See also routine below.
   end

   elements_uncommon_with(v) result (res) ::: get_from(VEC{INTRINSIC}), leaky
   ! Return the elements of "self" which are uncommon with "v"
   ! e.g. if self = [1,1,2,1] and v = [1], res = [2].
   ! See also routine above.
   end

   indices_of_elements_matching(item) result (res) ::: get_from(VEC{INTRINSIC}), leaky
   ! Return the indices of the elements in "self" which match "item"
   ! NOTE: this routine returns a pointer!
   end

   is_zero result (res) ::: pure
   ! Return true if the vector is zero
      self :: IN
      res :: BIN
      res = all(self==0)
   end

   is_z_axis result (res)
   ! Return true if the vector is set to the z-axis
      res :: BIN
   ENSURE(.dim==3,"must supply a 3 dimensional vector!")
      res = self(1) == 0
      res = self(2) == 0 AND res
      res = (1-self(3)) == 0 AND res
   end

! =============================
! Repetition related operations
! =============================

   remove_repetitions ::: get_from(VEC{INTRINSIC}), leaky
   ! Sort through the vector and remove repeated elements which come later in
   ! the list.  NOTE: the vector may shrink
   end

   has_repetitions result (res) ::: get_from(VEC{INTRINSIC})
   ! Return TRUE if self has at least one repeated element.
   end

   no_of_unique_elements result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Return the number of unique elements in the vector.
   end

   unique_elements result(unique) ::: get_from(VEC{INTRINSIC}), leaky
   ! Sort through the vector and return the unique elements
   end

   make_repetition_count(cnt,n_kind) ::: get_from(VEC{INTRINSIC}), leaky
   ! Create an array "cnt" in which each element cnt(i) is a count of the number
   ! times that self(i) is repeated in self(:). Later elements of "cnt" which
   ! are repetitions of earlier ones are assigned a count of zero. The number of
   ! different kinds is returned in "n_kind".
   end

   indices_of_unique_elements result(unique) ::: get_from(VEC{INTRINSIC}), leaky
   ! Sort through the vector and return the indices of the unique elements
   end

   make_unique_element_maps(unique_element,unique_element_for) ::: get_from(VEC{INTRINSIC}), leaky
   ! Make a map of unique_element's, and the inverse map
   ! unique_element_for a given non-unique element in the list.
   end

! ================
! Sorting routines
! ================

   sort(decreasing_order) ::: get_from(VEC{OBJECT})
   ! Sort array "self" from lowest to highest, using simple insertion sort.  If
   ! "decreasing_order" is present and TRUE sort from highest to lowest instead.
   end

   quick_sort(decreasing_order) ::: get_from(VEC{OBJECT})
   ! Sort the vector into increasing order.If "decreasing_order" is present and
   ! TRUE, the vector is sorted from largest to smallest
   end

   quick_sort_increasing ::: get_from(VEC{OBJECT}), recursive, private
   ! Sort the vector into order, smallest to largest
   end

   quick_sort_decreasing ::: get_from(VEC{OBJECT}), recursive, private
   ! Sort the vector into order, largest to smallest
   end

   quick_sort(indices,decreasing_order) ::: get_from(VEC{OBJECT})
   ! Return the "indices" which sort self from smallest to largest, i.e. on
   ! return "self(indices)" is sorted. NOTE: self is *not* sorted.
   ! If "decreasing_order" is present and TRUE, the indices are sorted from
   ! largest to smallest
   end

   quick_sort_increasing(indices) ::: get_from(VEC{OBJECT}), recursive, private
   ! Return the indices which sort vector from smallest to largest, i.e. on
   ! return "self(indices)" is sorted. NOTE: self is *not* sorted.
   end

   quick_sort_decreasing(indices) ::: get_from(VEC{OBJECT}), recursive, private
   ! Return the indices which sort vector from largest to smallest, i.e. on
   ! return "self(indices)" is sorted. NOTE: self is *not* sorted.
   end

   reverse_order ::: get_from(VEC{INTRINSIC})
   ! Reverse the order of the elements of self
      self :: INOUT
   end

   swap_elements(e1,e2) ::: get_from(VEC{INTRINSIC}), pure
   ! Swap elements "e1" and "e2" in "self".
      self :: INOUT
      e1,e2 :: INT, IN
   end

! ====================
! Numerical operations
! ====================

   set_to(v) ::: get_from(VEC{INTRINSIC}, V_TYPE=>VEC{INT}), pure
   ! Set the vector to "v". See also the "copy" routine.
   end

   plus(v,mask) ::: get_from(VEC{INTRINSIC}, V_TYPE=>VEC{INT}), pure
   ! Add vector "v" to "self"
   end

   minus(v,mask) ::: get_from(VEC{INTRINSIC}, V_TYPE=>VEC{INT}), pure
   ! Subtract vector "v" from "self"
   end

   to_scaled(v,fac) ::: get_from(VEC{INTRINSIC}, V_TYPE=>VEC{INT}, FAC_TYPE=>INT), pure
   ! Set the vector to "v" scaled by "fac"
   end

   plus_scaled(v,fac) ::: get_from(VEC{INTRINSIC}, V_TYPE=>VEC{INT}, FAC_TYPE=>INT), pure
   ! Add a vector "v" scaled by "fac" to "self"
   end

   dot(v) result (res) ::: get_from(VEC{INTRINSIC}, V_TYPE=>VEC{INT}, RES_TYPE=>INT), pure
   ! Return the dot product with "v"
   end

   cross(v) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Return the cross product of "self" and "v".
   end

   to_cross_product_of(u,v) ::: get_from(VEC{INTRINSIC}), pure
   ! Set the vector to the cross product of "u" and "v".
   end

   to_product_of(a,v,transpose_a) ::: get_from(VEC{INTRINSIC}, A_TYPE=>MAT{INT}, V_TYPE=>VEC{INT})
   ! Set "self" to the product of the matrix "a" and vector "v". If present,
   ! "transpose_a" can be set to TRUE if the matrix needs to be transposed.
   end

   plus_product_of(a,v,transpose_a) ::: get_from(VEC{INTRINSIC}, A_TYPE=>MAT{INT}, V_TYPE=>VEC{INT})
   ! Add to "self" the product of the matrix "a" and vector "v". If present,
   ! "transpose_a" can be set to TRUE if the marix needs to be transposed.
   end

   to_scaled_product_of(a,v,fac,transpose_a) ::: get_from(VEC{INTRINSIC}, A_TYPE=>MAT{INT}, V_TYPE=>VEC{INT}, FAC_TYPE=>INT)
   ! Set "self" to the product of the matrix "a" and vector "v" scaled by "fac".
   ! If present, "transpose_a" can be set to TRUE if the matrix needs to be
   ! transposed.
   end

   plus_scaled_product_of(a,v,fac,transpose_a) ::: get_from(VEC{INTRINSIC}, A_TYPE=>MAT{INT}, V_TYPE=>VEC{INT}, FAC_TYPE=>INT)
   ! Add to self "self" the product of the matrix "a" and vector "v" scaled by
   ! "fac".  If present, "transpose_a" can be set to TRUE if the matrix needs to
   ! be transposed.
   end

   rotate_by(a) ::: get_from(VEC{INTRINSIC})
   ! Rotate self by matrix "a", treating self as a column vector
   end

   translate_by(v) ::: get_from(VEC{INTRINSIC})
   ! Translate self by vector "v".
   end

   outer_product_with(v) result (res) ::: get_from(VEC{INTRINSIC})
   ! Returns the outer product of "self" with vector "v".
   end

   norm result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Return the norm of the vector
   end

   distance_to(a) result (res) ::: get_from(VEC{INTRINSIC})
   ! Return the distance to "a" if supplied
   end

!   mean result (res) ::: get_from(VEC{INTRINSIC}), pure
!   ! Return the mean of the vector
!   end

! ==================
! Min/max operations
! ==================

   chop_large_absolute_values(val) ::: get_from(VEC{INTRINSIC}), pure
   ! Set all values in the self whose absolute value is larger than "val" to
   ! "val" times the sign of the original value.
   end

   largest_value result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Return the maximum absolute value in the vector
   end

   smallest_value result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Return minimum absolute value in the vector
   end

   no_of_elements_larger_than(tol) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Return the number of elements larger than "tol".
   end

! ================
! Range operations
! ================

   all_in_range(range) result (res) ::: get_from(VEC{INTRINSIC})
   ! Return TRUE if all values of self are within the specified "range".
   end

   in_range(range) result (res) ::: get_from(VEC{INTRINSIC})
   ! Return element i as TRUE if self(i) is within the specified "range".
   end

   range result (res) ::: get_from(VEC{INTRINSIC})
   ! Return the range (smallest and largest value) of self.
   end

! ==========================
! Index returning operations
! ==========================

   index_of_maximum result (ind) ::: get_from(VEC{INTRINSIC}), pure
   ! Return the index of the maximum in the vector
   end

   index_of_minimum result (ind) ::: get_from(VEC{INTRINSIC}), pure
   ! Return the index of the minimum in the vector
   end

   index_of_largest_value result (ind) ::: get_from(VEC{INTRINSIC}), pure
   ! Return the index "ind" of the largest absolute value in the vector
   end

   index_of_smallest_value result (ind) ::: get_from(VEC{INTRINSIC}), pure
   ! Return the index "ind" of the smallest value in the vector
   end

   index_of_first_nonzero_value result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Returns the index of the first nonzero component of self.
   end

   index_of_first_zero_value result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Returns the index of the first zero component of self.
   end

   index_of_value(val) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Returns the first index in "self" which has the value "val", or 0 if "val"
   ! is not present in the array. This version uses the == test for strict
   ! equality.
   end

   index_of_value_ne_to(val) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Returns the first index in "self" which does not have the value
   ! "val", or 0 if all the values are equal to "val". This version
   ! uses the == test for strict equality.
   end

! =============
! String widths
! =============
   
   str_lengths result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Returns the minimal string lengths.
   end 

   max_str_length result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Returns the maximum of the string lengths.
   end

! =====================
! Conversion to strings
! =====================

   to_str result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Change self to a string of minimal length
   end 

   to_str(format,left_justify) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Change self to a "string" using the specified fortran "format".
   end

   to_str(width,left_justify) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Change self to a string with specified "width".
   end

   to_concatenated_str(format,separator) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Change self to a string using "format" if specified, and with
   ! "separator" between each item, if specified.
   end

! ========================
! Unit conversion routines
! ========================

   convert_to(units) ::: get_from(VEC{INTRINSIC})
   ! Convert the "self" in atomic units or generic units to a new
   ! number in "units".
   end

   convert_from(units) ::: get_from(VEC{INTRINSIC})
   ! Convert the number "self" from "units" system to a new number
   ! in atomic units or generic units.
   end

! =======================
! Spin-orbital operations
! =======================

   alpha result (res) ::: get_from(VEC{INTRINSIC})
   ! return the alpha sector of the vector
   end

   beta result (res) ::: get_from(VEC{INTRINSIC})
   ! return the beta sector of the vector
   end

! ======================
! Binning and histograms
! ======================

   to_histogram_from_data(X,X_min,X_max,X_bin) ::: leaky
   ! Set "self" to a histogram matrix whose i-th element contains
   ! a count of the elements in the i-th bin of data "X", where a bin
   ! is a range of descriptor values in "X" of side length "X_bin"
   ! beginning at "X_min" and ending at "X_max". The dimension of self
   ! is calculated within this routine. 
   ! NOTE: Don't use binned data to calculate properties unless you
   ! really need to coarse grain.
      self :: PTR
      X :: VEC{REAL}, IN
      X_min,X_max,X_bin :: REAL, IN

   ENSURE(X_max>X_min,"X_max is smaller than X_min!")
   ENSURE(X_bin<(X_max-X_min),"X_bin size is larger than [X_min,X_max]")

      n_X, i,k :: INT
      X_ran :: REAL

      ! The range of value ...
      X_ran = X_max - X_min

      ! The number of bins ...
      n_X = ceiling(X_ran/X_bin)

      ! Create the histogram (leaky)
      self.create(n_X)
      self = 0

      ! Now do the binning ...
      do k = 1,X.dim

         ! Get the bin
         i = ceiling(min(X(k)-X_min,X_ran)/X_bin)

         ! Accumulate
         self(i) = self(i) + 1

      end

   end

! ==========
! Misc stuff
! ==========

   make_combinations_of_length(k,C) ::: recursive
   ! Make the combination matrix "C" of all p distinct combinations
   ! C(:,p) of the elements in self(:) of length "k"
      self :: IN
      k :: INT, IN
      C :: MAT{INT}, OUT
   ENSURE(k<=size(self),"k is too large")
   ENSURE(k>0,"k must be positive")
   ENSURE(C.dim1==k,"wrong dim1, C")
   ENSURE(C.dim2==int(.dim.choose(k),kind=INT_KIND),"wrong dim2, C")
      s,s_k,s1_k1 :: INT
      s   = .dim
      s_k = int(s.choose(k),kind=INT_KIND)
      if (k==1) then
        C(1,:) = self(:)
      else if (k==s) then
        C(:,1) = self(:)
      else if (s>k) then
        s1_k1 = int((s-1).choose(k-1),kind=INT_KIND)
        C(1,1:s1_k1) = self(1)
        self(2:).make_combinations_of_length(k-1,C(2:k,1:s1_k1))
        self(2:).make_combinations_of_length(k,C(:,s1_k1+1:s_k))
      end
   end

   combinations_of_length(k) result(C) ::: recursive, leaky
   ! Returns the combination matrix "C" of all p distinct combinations
   ! C(:,p) of the elements in self(:) of length "k"
   ! WARNING: this routine allocates the result "C"; it should not be
   ! destroyed in the caller, it should be *deallocated*. This should be fixed
   ! later so that there is no allocation within this routine.
      k :: INT
      C :: MAT{INT}*
   ENSURE(k<=size(self),"k is too large")
   ENSURE(k>0,"k must be positive")
      s,s_k,s1_k1 :: INT
      L,R :: MAT{INT}*
      s     = size(self)
      s_k   = int(    s.choose(k),  kind=INT_KIND)
      allocate(C(k,s_k))
      if (k==1) then
       C(1  ,:)             = self(:)
      else if (k==s) then
       C(:  ,1)             = self(:)
      else if (s>k) then
       s1_k1 = int((s-1).choose(k-1),kind=INT_KIND)
       C(1  ,      1:s1_k1) = self(1)
       L                   => self(2:).combinations_of_length(k-1)
       C(2:k,      1:s1_k1) = L
       deallocate(L)
       R                   => self(2:).combinations_of_length(k)
       C(:  ,s1_k1+1: s_k ) = R
       deallocate(R)
      end
   end

   to_pair_vec_from(v1,v2)
   ! If "v1" and "v2" are vectors which contain some common elements, set "self"
   ! so that self(i)=j implies that v1(i)=v2(j). Further, self(i)=0 that implies
   ! that the vector element i in "v1" is unpaired with any in "v2".
      self :: INOUT
      v1, v2 :: VEC{INT}

   ENSURE(size(v1)==size(v2),"vectors are not compatible sizes")

      i, j :: INT

      self = 0
      do i = 1, size(v1)
        do j = 1, size(v2)
           if ((v1(i)==v2(j)) AND (NOT(any(self==j)))) self(i)=j
        end
      end

   end

end
