!
! Copyright (C) Daniel Grimwood, 2003
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!*******************************************************************************

module VEC{PERIODIC_FMM_LEVEL}

  implicit none

contains

!*******************************************************************************
! Memory allocation
!*******************************************************************************

   create(lb,ub,mol,charges,positions) ::: leaky
   ! Create the vector with lower bound "lb", upper bound "ub". Must also supply
   ! a molecule "mol", and fragment "charges" and "positions" for correct
   ! initialisation.
      self :: PTR
      lb,ub :: INT, IN
      mol :: MOLECULE, IN
      charges :: VEC{REAL}*
      positions :: MAT{REAL}*
      nullify(self)
      allocate(self(lb:ub))
      ADD_MEMORY((ub-lb+1)*ELEMENT_TYPE_SIZE)
      .nullify_ptr_part
      .set_defaults(mol,charges,positions)
   end

   destroy ::: get_from(VEC{OBJECT}), leaky
   ! Destroy space for object
   end

   nullify_ptr_part ::: get_from(VEC{OBJECT})
   ! Nullify the pointer parts of self
   end

   destroy_ptr_part ::: get_from(VEC{OBJECT})
   ! Destroy the pointer parts of self
   end

   set_defaults(mol,charges,positions)
   ! Set default values.
      self :: PTR
      mol :: MOLECULE, IN
      charges :: VEC{REAL}*
      positions :: MAT{REAL}*
   ENSURE(.dim>1,"must have at least two levels")
      i :: INT
      self(0).set_defaults(mol,charges,positions)
      do i = 1,.dim
         self(i).set_defaults(self(i-1))
      end
   end

!*******************************************************************************
! Misc
!*******************************************************************************

   make_positions_and_charges ::: leaky
   ! Make a list of point charges that accurately represents the total charge of
   ! the initial level (i.e. unit cell). Then sort the charges into boxes.
   ! NOTE: this sets level 0--1 ONLY.
      self :: PTR
   ENSURE(.created,"no fmm levels")
   ENSURE(lbound(self,1)==0,"must have level zero as lower bound")
   ENSURE(ubound(self,1)>0,"must have at least level 0 and level 1")
      self(0).make_L0_positions_and_charges
      self(0).make_L0_positions_into_boxes 
      ! Copy charges to level 1
      self(1).charges   => self(0).charges
      self(1).positions => self(0).positions
   end

   make_box_charges ::: leaky
   ! Make the list of charges in each box at level 0, used for making the box
   ! multipoles and box total charges. ALso make the list of total box and total
   ! subbox charges, for correctly evaluating l_max.
      self :: PTR
   ENSURE(.created,"no fmm levels")
   ENSURE(lbound(self,1)==0,"must have level zero as lower bound")
   ENSURE(ubound(self,1)>1,"must have at least two levels")
      i :: INT
      self(0).make_L0_total_box_charges
      self(1).make_total_box_charges(self(0)) 
      do i = 2,ubound(self,1)
         self(i).make_total_box_charges(self(i-1)) 
         self(i).make_total_subsubbox_charges(self(i-2))
      end
   end
 
   set_l_max
   ! Set l_max and other basic information for all levels. This assumes that the
   ! first level is zero and that level zero is properly initialised.
      self :: PTR
   ENSURE(.created,"no fmm levels")
   ENSURE(lbound(self,1)==0,"must have level zero as lower bound")
   ENSURE(ubound(self,1)>=1,"must have at least level 0 and level 1")
      i :: INT
      do i = 1,ubound(self,1)
         self(i).set_l_max(self(i-1))
      end
   end

   make_box_multipoles(l_max) ::: leaky
   ! Make the list of box multipoles at level 0 up to order "l_max". Then define
   ! the remaining box multipoles and the subsubbox multipoles.
      self :: PTR
      l_max :: INT
   ENSURE(.created,"no fmm levels")
   ENSURE(lbound(self,1)==0,"must have level zero as lower bound")
   ENSURE(ubound(self,1)>1,"must have at least three levels")
      i :: INT
      self(0).make_L0_box_multipoles(l_max)
      self(1).make_box_multipoles(self(0)) 
 ! self(1).put_box_multipoles
 ! self(1).make_L1_box_multipoles(l_max)
 ! self(1).put_box_multipoles
 ! stop
      do i = 2,ubound(self,1)
         self(i).make_box_multipoles(self(i-1)) 
         self(i).make_subsubbox_multipoles(self(i-2))
      end
   end
 
   make_potential(values,adjust_surface_dipoles) 
   ! Make the the "values" of the potential at the positions of the effective
   ! charges in the initial fragment, ".fragment_positions". If present TRUE,
   ! "adjust_surface_dipoles" causes most of the dipoles on the surface of this
   ! level to be reversed, to simulate the neutralisation of the surface charge,
   ! in order to get a potential close to the Ewald potential.
      self :: PTR
      values :: VEC{REAL}
      adjust_surface_dipoles :: BIN, optional
   ENSURE(.created,"no fmm levels")
   ENSURE(lbound(self,1)==0,"must have level zero as lower bound")
   ENSURE(ubound(self,1)>=1,"must have at least two levels")
      i :: INT
      values = ZERO
       ! stdout.set_real_style("e")
      do i = 1,ubound(self,1)
         self(i).add_potential_to(values)
       ! stdout.text("potential so far:")
       ! stdout.show("level =",i)
       ! stdout.put(values,"column")
       ! if (i==5) exit
      end
         self(1).subtract_fragment_potential(values)
   end

   put
   ! Output the list information
      self :: PTR
      i :: INT
      do i = lbound(self,1),ubound(self,1)
         self(i).put
      end
   end

end
