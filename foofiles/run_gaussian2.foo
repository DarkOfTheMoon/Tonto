! Testing numerical integration

program run_GAUSSIAN2

   implicit none

   g :: GAUSSIAN2           ! A GAUSSIAN2 object
   S :: MAT{REAL}*           ! A pointer to a real matrix
   F :: MAT3{CPX}*    
   Fa,Fb :: MAT4{CPX}* 
   step :: REAL
   i :: INT
   k :: MAT{REAL}*           ! A real vector
   d :: DFTGRID*            ! A pointer to a DFT grid object
   b :: BECKE_GRID*    
   qkind,acc,pss :: STR
   rc,rh,sa :: BIN
   gd :: GAUSSIAN_DATA*

   TONTO_INITIALISE

   std_time.start
   stdin.create_stdin;   stdin.open
   stdout.create_stdout; stdout.open
   stderr.create_stderr; stderr.open

   TONTO_SET_STDERR(stdout)
 
   gd.set_indices(l_max=4)
   stdout.flush
   stdout.text("First, define a gaussian pair ...")
   g.a.set_l(2)
   g.a.set_pos([0.0d0,1.0d0,0.0d0])
   g.a.set_ex(0.02d0)
   g.b.set_l(2)
   g.b.set_pos([0.0d0,1.0d0,4.0d0])
   g.b.set_ex(0.09d0)

   g.put                    ! Output to "stdout"
   stdout.flush             ! Observe dot notation access to "g"
!
!   stdout.flush
!   stdout.text("Now make the fourier transform integrals between the")
!   stdout.text("two gaussian functions :-")
!   stdout.flush             ! Create space for answer, in array "S"
!   k.create(2,3)
!   F.create(2,g.a.n_comp,g.b.n_comp)
!   k(1,:) = [1,0,0]
!   k(2,:) = [0,1,0]
!   g.make_ft(F,k)  
!   stdout.text("F:")
!   stdout.put(F)
!
!   step = 0.001d0
!   Fa.create(2,g.a.n_comp,g.b.n_comp,3)
!   Fb.create(2,g.a.n_comp,g.b.n_comp,3)
!   Fa = ZERO
!   Fb = ZERO
!   do i = 1,3
!      do s = -1,1,2
!         g.a.pos(i) = g.a.pos(i) + s*step
!         g.make_ft(F,k)  
!         Fa(:,:,:,i) = Fa(:,:,:,i) + s*F/(TWO*step)
!         g.a.pos(i) = g.a.pos(i) - s*step
!      end
!      do s = -1,1,2
!         g.b.pos(i) = g.b.pos(i) + s*step
!         g.make_ft(F,k)  
!         Fb(:,:,:,i) = Fb(:,:,:,i) + s*F/(TWO*step)
!         g.b.pos(i) = g.b.pos(i) - s*step
!      end
!   end
!   stdout.text("Fa:")
!   stdout.put(Fa)
!   stdout.text("Fb:")
!   stdout.put(Fb)
!   g.make_ft_da_db(Fa,Fb,k)  
!   stdout.text("Fa:")
!   stdout.put(Fa)
!   stdout.text("Fb:")
!   stdout.put(Fb)
!   Fb.destroy
!   Fa.destroy
!   F.destroy
!   k.destroy

    stdout.flush
    stdout.text("Now Make the overlap integrals between the two")
    stdout.text("two gaussian functions :-")
    stdout.flush             ! Create space for answer, in array "S"
    S.create(g.a.n_comp,g.b.n_comp)
    g.make_overlap_ints(S)   ! Make the integrals
    stdout.put(S)            ! Output to "stdout"
! 
!  ! stdout.flush
!  ! stdout.text("Change the precision of the output to 3 decimal")
!  ! stdout.text("places, and a field width of 8 characters")
!  ! stdout.set_real_precision(3)
!  ! stdout.set_real_width(8) 
! 
!    stdout.flush
!    stdout.text("Analytically evaluate the nuclear attaction")
!    stdout.text("integrals for gaussian pair assuming the nucleus")
!    stdout.text("of unit charge is at (0,1,0) :- ")
!    stdout.flush
!    g.make_nuclear_attraction_ints(S,c=[0.0d0,1.0d0,0.0d0])
!    stdout.put(S)
! 
!    stdout.flush
!    stdout.text("Numerically evaluate the previous integrals with")
!    stdout.text("a default DFT grid :")
!    stdout.flush
!    d.create ! <<<<<<<<<<<<
!    d.set_defaults
!    d.gauss_chebyshev_alpha = ONE
!    d.spherical_grid_order = 17 ! allowed L=9,11,13,15,17,19,23,25,27,29,35,41,47,53,59
!    d.radial_grid_order = 20
!    d.set_grid_data
!    d.put
!    d.make_matrix_elements_of(DFTGRID:v010,g,S)
!    stdout.put(S)
! 
!    stdout.flush
!    stdout.text("Numerically evaluate the previous integrals with")
!    stdout.text("a default BECKE_GRID :")
!    stdout.flush
!    b.create ! <<<<<<<<<<<<
!    print *, "Enter the kind of quadrature:"
!    read *, qkind
!    print *, "kind = ",qkind
!    b.set_kind(qkind)
!    print *, "Enter the accuracy needed:"
!    read *, acc
!    print *, "accuracy = ",acc
!    b.set_accuracy(acc)
!    b.set_grid_data
!    b.partition_scaling_scheme = "none" ! default setting
!    b.partition_scaling_scheme = "delley"
!    b.reduce_core_angular_grid = FALSE  ! default setting
!    b.scale_atomic_grids = TRUE         ! default setting
!    print *, "Do you want to reduce the H angular grid:"
!    read *, rh
!    print *, "reduce H grid = ",rh
!    print *,log(huge(ONE))
!    b.reduce_H_angular_grid = rh
!    b.put
!    b.make_matrix_elements_of(DFTGRID:v010,g,S)
!    stdout.put(S)
!  ! b.put_atom_info
!  ! b.put_grid

   tonto.report

end
