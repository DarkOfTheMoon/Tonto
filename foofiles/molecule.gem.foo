!==============================================================================-
!
! MOLECULE.GEM: An object representation of a molecule.
!
! Copyright (C) Dylan Jayatilaka, Patrick Cassam-Chenai
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: molecule.gem.foo $
!==============================================================================-


module MOLECULE.GEM

   implicit none

contains

! ============================================
! Geminal Mean Field Configuration Interaction
! ============================================

   read_geminal_mf_scheme ::: leaky 
   ! Read in geminal mean field scheme options

   ENSURE(.atom.created,"no atom info")
   ENSURE(.basis_info_made,"no basis info")

     v :: MAT4{REAL}*
     eri_archive :: ARCHIVE
     make_integrals, readin_mos :: BIN
     n_bf, new_n_bf :: INT

     .geminal_mf_scheme.create
     .geminal_mf_scheme.set_defaults(.n_a,.n_bf,.name,.BASE:nuclear_repulsion_energy)
     .geminal_mf_scheme.read_keywords

     ! Ensure 1-electron integrals
     .INTS:make_overlap_matrix
     .SCF:make_core_matrix

     ! this routine stops here in most cases
     if(.geminal_mf_scheme.readin_scheme) then
       .geminal_mf_scheme.read_scheme
     end

     if(.geminal_mf_scheme.make_singlet_extremals) then

       n_bf = .n_bf
       make_integrals = .geminal_mf_scheme.make_integrals
       readin_mos     = .geminal_mf_scheme.readin_mos

       if (make_integrals) then

         ! First create the MO integrals on disk
         v.create(n_bf,n_bf,n_bf,n_bf)
         .FOCK:make_ERI_integrals(v)

         new_n_bf = .geminal_mf_scheme.n_orbitals
         DIE_IF(new_n_bf>n_bf OR new_n_bf<0,"invalid orbital number")

         eri_archive.set(.name,"h_integrals")

         if (readin_mos) then

           if (new_n_bf==n_bf) then
             .FOCK:make_read_MO_ERI_integrals(v,eri_archive,add_core=.geminal_mf_scheme.add_core)
           else
             .FOCK:make_read_MO_ERI_integrals(v,eri_archive,add_core=.geminal_mf_scheme.add_core,new_n_bf=new_n_bf)
           end

         else

           if (new_n_bf==n_bf) then
             .FOCK:make_MO_ERI_integrals(v,eri_archive,add_core=.geminal_mf_scheme.add_core)
           else
             .FOCK:make_MO_ERI_integrals(v,eri_archive,add_core=.geminal_mf_scheme.add_core,new_n_bf=new_n_bf)
           end

         end

         v.destroy      

         stdout.text(" ")
         stdout.text("an integral file has been saved on disk")
         stdout.text(" ")

       else

         stdout.text(" ")
         stdout.text("using old integral file")
         stdout.text(" ")

       end

       .geminal_mf_scheme.spectrum.make_singlet_extremals

     end

   end

   do_geminal_mf_scheme ::: leaky 
   ! perform a geminal mean field calculation

   ENSURE(.geminal_mf_scheme.created,"no geminal_mf_scheme info")
   ENSURE(.atom.created,"no atom info")
   ENSURE(.basis_info_made,"no basis info")

     v :: MAT4{REAL}*
     eri_archive :: ARCHIVE
     make_integrals, readin_mos :: BIN
     n_bf, new_n_bf :: INT
     do_electric_dipole :: BIN

     n_bf = .n_bf

     ! Ensure 1-electron integrals
     .INTS:make_overlap_matrix
     .SCF:make_core_matrix

     do_electric_dipole = any(.geminal_mf_scheme.do_electric_dipole)
     if (do_electric_dipole) then
       .geminal_mf_scheme.spectrum.nuclear_electric_dipole = .BASE:nuclear_dipole_moment
     end

     make_integrals = .geminal_mf_scheme.make_integrals
     readin_mos     = .geminal_mf_scheme.readin_mos

     if (make_integrals) then

       ! First create the MO integrals on disk
       v.create(n_bf,n_bf,n_bf,n_bf)
       .FOCK:make_ERI_integrals(v)

       new_n_bf = .geminal_mf_scheme.n_orbitals
       DIE_IF(new_n_bf>n_bf OR new_n_bf<0,"invalid orbital number")

       eri_archive.set(.name,"h_integrals")

       if (readin_mos) then

         if(new_n_bf==n_bf)then
           .FOCK:make_read_MO_ERI_integrals(v,eri_archive,add_core=.geminal_mf_scheme.add_core)
           if (do_electric_dipole) .FOCK:make_read_MO_EDM_integrals
         else
           .FOCK:make_read_MO_ERI_integrals(v,eri_archive,add_core=.geminal_mf_scheme.add_core,new_n_bf=new_n_bf)
           if (do_electric_dipole) .FOCK:make_read_MO_EDM_integrals(new_n_bf=new_n_bf)
         end

       else

         if(new_n_bf==n_bf)then
           .FOCK:make_MO_ERI_integrals(v,eri_archive,add_core=.geminal_mf_scheme.add_core)
           if(do_electric_dipole) .FOCK:make_MO_EDM_integrals
         else
           .FOCK:make_MO_ERI_integrals(v,eri_archive,add_core=.geminal_mf_scheme.add_core,new_n_bf=new_n_bf)
           if(do_electric_dipole) .FOCK:make_MO_EDM_integrals(new_n_bf=new_n_bf)
         end

       end

       v.destroy      

       stdout.text(" ")
       stdout.text("an integral file has been saved on disk")
       stdout.text(" ")

     else

       stdout.text(" ")
       stdout.text("using old integral file")
       stdout.text(" ")

     end

     .geminal_mf_scheme.do_gmf_auto

   end

   restart_geminal_mf_scheme ::: leaky 
   ! perform a geminal mean field calculation

   ENSURE(.geminal_mf_scheme.created,"no geminal_mf_scheme info")
   ENSURE(.atom.created,"no atom info")
   ENSURE(.basis_info_made,"no basis info")

     v :: MAT4{REAL}*
     eri_archive :: ARCHIVE
     make_integrals, readin_mos :: BIN
     n_bf, new_n_bf :: INT
     do_electric_dipole :: BIN

     ! Ensure 1-electron integrals
     .INTS:make_overlap_matrix
     .SCF:make_core_matrix

     n_bf = .n_bf

     do_electric_dipole = any(.geminal_mf_scheme.do_electric_dipole)
     if (do_electric_dipole) then
       .geminal_mf_scheme.spectrum.nuclear_electric_dipole = .BASE:nuclear_dipole_moment
     end

     make_integrals = .geminal_mf_scheme.make_integrals
     readin_mos     = .geminal_mf_scheme.readin_mos

     if (make_integrals) then

       ! First create the MO integrals on disk
       v.create(n_bf,n_bf,n_bf,n_bf)
       .FOCK:make_ERI_integrals(v)

       new_n_bf = .geminal_mf_scheme.n_orbitals

       eri_archive.set(.name,"h_integrals")

       if (readin_mos) then

         if(new_n_bf==n_bf)then
           .FOCK:make_read_MO_ERI_integrals(v,eri_archive,add_core=.geminal_mf_scheme.add_core)
           if (do_electric_dipole) .FOCK:make_read_MO_EDM_integrals
         else
           .FOCK:make_read_MO_ERI_integrals(v,eri_archive,add_core=.geminal_mf_scheme.add_core,new_n_bf=new_n_bf)
           if (do_electric_dipole) .FOCK:make_read_MO_EDM_integrals(new_n_bf=new_n_bf)
         end

       else

         if(new_n_bf==n_bf)then
           .FOCK:make_MO_ERI_integrals(v,eri_archive,add_core=.geminal_mf_scheme.add_core)
           if(do_electric_dipole) .FOCK:make_MO_EDM_integrals
         else
           .FOCK:make_MO_ERI_integrals(v,eri_archive,add_core=.geminal_mf_scheme.add_core,new_n_bf=new_n_bf)
           if(do_electric_dipole) .FOCK:make_MO_EDM_integrals(new_n_bf=new_n_bf)
         end

       end

       v.destroy      

       stdout.text(" ")
       stdout.text("an integral file has been saved on disk")
       stdout.text("Warning: a restart job may failed")
       stdout.text(" ")

     else

       stdout.text(" ")
       stdout.text("using old integral file")
       stdout.text(" ")

     end

     .geminal_mf_scheme.restart_gmf_auto

   end

end
