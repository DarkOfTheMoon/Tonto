!-------------------------------------------------------------------------------
!
! SLATERSHELL: used to describe contracted slater shells.
!
! Copyright (C) Dylan Jayatilaka, 1997
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!-------------------------------------------------------------------------------

module SLATERSHELL

   implicit none

   keys :: VEC{STR}*, private DEFAULT_NULL

contains

! ***************************
! Create and destroy routines
! ***************************

   create ::: get_from(OBJECT), leaky
   ! Create an object
      self :: PTR
   end

   destroy ::: get_from(OBJECT), leaky
   ! Destroy an object
      self :: PTR
   end

   nullify_ptr_part
   ! Nullify the pointer parts of the atomvec
      nullify(.n)
      nullify(.z)
      nullify(.c)
      nullify(.orb_kind)
      nullify(.occupancy)
   end

   destroy_ptr_part ::: leaky
   ! Destroy the pointer parts
      .n.destroy
      .z.destroy
      .c.destroy
      .orb_kind.destroy
      .occupancy.destroy
   end

   created result (res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has been created
      self :: PTR
      res :: BIN
   end

   destroyed result (res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has *not* been created
      self :: PTR
      res :: BIN
   end

   set_defaults
   ! Set default values
      .l = 0
      .l_chr = " "
      .n_orb = 0
      .n_prim = 0
   end

   copy(c) ::: leaky
   ! Create a copy of c
       c :: SLATERSHELL
       self = c
       .nullify_ptr_part
       if (c.n.created) .n.create_copy(c.n)
       if (c.z.created) .z.create_copy(c.z)
       if (c.c.created) .c.create_copy(c.c)
       if (c.orb_kind.created) .orb_kind.create_copy(c.orb_kind)
       if (c.occupancy.created) .occupancy.create_copy(c.occupancy)
   end

   set_l(l)
   ! Set the l value
      l :: INT
      .l = l
      .l_chr = SLATERSHELL::l_chr(.l)
   end

   set_n_comp
   ! Set the number of components
      .n_comp = 2*.l+1
   end

! ***********
! I/O methods
! ***********

   read_keywords ::: get_from(OBJECT), recursive, leaky
   ! Read data from "stdin" using keyword style input.
   end

   process_keyword(keyword) ::: leaky
   ! Process command "keyword". Data is inputted from "stdin", unless "keyword"
   ! is a sequence of blank separated strings.  In this case, the sequence is
   ! processed as if it were a separate file.
      keyword :: STR, IN
      word :: STR
      word = keyword
      word.to_lower_case
      select case (word)
        case ("}                          ")  ! exit case
        case ("c=                         "); .read_c
        case ("junk=                      "); SLATERSHELL::read_junk
        case ("kind=                      "); .read_kind
        case ("l=                         "); .read_l
        case ("l_int=                     "); .read_l_int
        case ("l_chr=                     "); .read_l_chr
        case ("l,kind,n,z,c*=             "); .read_l_kind_n_z_c_ptr
        case ("n=                         "); .read_n
        case ("n_prim=                    "); .read_n_prim
        case ("n_orb=                     "); .read_n_orb
        case ("n,z,c*=                    "); .read_n_z_c_ptr
        case ("occupancy=                 "); .read_occupancy
        case ("units=                     "); SLATERSHELL::read_units
        case ("z=                         "); .read_z
        case  default;                        UNKNOWN(word)
      end
   end

   read_units ::: get_from(OBJECT), selfless, private
   ! Read a string which describes the units to be used
   end

   read_junk ::: get_from(OBJECT), selfless, private
   ! Read in a junk string, useful for ignoring a field
   end

   read_l ::: get_from(SHELL)
   ! Read in the l symbol
   end

   read_l_int ::: get_from(SHELL)
   ! Read in the l integer. No way to get "L" shells in this input mode.
   end

   read_l_chr ::: get_from(SHELL), private
   ! Read in the l symbol
   end

   read_n_prim 
   ! Read in the number of contraction coefficients
      stdin.read(.n_prim)
      ENSURE(.n_prim>0,"n_prim must be positive")
   end

   read_n_orb
   ! Read in the number of generally contracted orbitals
      stdin.read(.n_orb)
      ENSURE(.n_orb>0,"n_orb must be positive")
   end

   read_n ::: leaky
   ! Read in the "n" quantum numbers. NOTE: n_prim must already have been input.
   ENSURE(.n_prim>0,"n_prim not set; use n_prim= before this command")
      .n.destroy
      .n.create(.n_prim)
      stdin.read(.n)
   end

   read_c ::: leaky
   ! Read in the "c" contraction coefficients. NOTE: n_orb must already have
   ! been input.
   ENSURE(.n_prim>0,"n_prim not set; use n_prim= before this command")
   ENSURE(.n_orb>0,"n_orb not set; use n_orb= before this command")
      .c.destroy
      .c.create(.n_prim,.n_orb)
      stdin.read(.c)
   end

   read_z ::: leaky
   ! Read in the "z" slater function exponents. NOTE: n_prim must already have
   ! been input.
   ENSURE(.n_prim>0,"n_prim not set; use n_prim= before this command")
      .z.destroy
      .z.create(.n_prim)
      stdin.read(.z)
   end

   read_kind ::: leaky
   ! Read in the orbital kind ("1s", "2s", "2p" ....); also set zero
   ! occupancies, if kinds are not set
      if (.orb_kind.created) .orb_kind.destroy
      stdin.read_ptr(.orb_kind)
      if (.n_orb>0) then; ENSURE(.n_orb==.orb_kind.dim,"n_orb and kind length inconsistent")
      else;               .n_orb = .orb_kind.dim
      end
      if (.occupancy.created) then
         WARN_IF(.n_orb/=.occupancy.dim,"n_orb and occupancy length inconsistent")
      else
         .occupancy.create(.n_orb)
         .occupancy = 0
      end
   end

   read_occupancy ::: leaky
   ! Read in the occupancies; also set blank kinds, if kinds are not set.
      if (.occupancy.created) .occupancy.destroy
      stdin.read_ptr(.occupancy)
      if (.n_orb>0) then; ENSURE(.n_orb==.orb_kind.dim,"n_orb and kind length inconsistent")
      else;               .n_orb = .orb_kind.dim
      end
      if (.orb_kind.created) then
         WARN_IF(.n_orb/=.orb_kind.dim,"n_orb and kind length inconsistent")
      else
         .orb_kind.create(.n_orb)
         .orb_kind = " "
      end
   end

   read_l_kind_n_z_c_ptr ::: leaky
   ! Read in everything: l, kind, and then n,z,c in a table, as in an Ajit
   ! Thakkar table
      .read_l_chr
      .read_kind
      .read_n_z_c_ptr
   end

   read_n_z_c_ptr ::: leaky
   ! Read in the "n", "z" and then "c" coefficients, across a line.
   ENSURE(.n_orb>0,"n_orb not set; use n_orb= before this command")
   ENSURE(.n_prim==0,"n_prim already defined!")
      tmp :: VEC{REAL}*
      i,k :: INT
      stdin.read_ptr(tmp)
      ENSURE(mod(tmp.dim,(.n_orb+2))==0,"number of data not divisible by n_orb")
      .n_prim =  tmp.dim/(.n_orb+2)
      .n.destroy; .c.destroy; .z.destroy
      .n.create(.n_prim)
      .z.create(.n_prim)
      .c.create(.n_prim,.n_orb)
      k = 0
      do i = 1,.n_prim
         ENSURE(tmp(k+1).is_int,"n number is not integer")
         .n(i)   = tmp(k+1)
         .z(i)   = tmp(k+2)
         .c(i,:) = tmp(k+2+1:k+2+.n_orb)
         k = k + 2 + .n_orb 
      end
      tmp.destroy
   end

! ********************
! Key related routines
! ********************

   read_keys ::: get_from(OBJECT)
   ! Read the "keys".
   end

   process_keys ::: get_from(OBJECT), leaky
   ! Process each of the words in the "keys" list.
   end

   keys_created result (res) ::: get_from(OBJECT)
   ! Return TRUE if the list-element keys are created.
      res :: BIN
   end

   set_keys(the_keys) ::: get_from(OBJECT)
   ! This is for setting the "keys" externally.
      the_keys :: VEC{STR}
   end

   clear_keys ::: get_from(OBJECT)
   ! This is for destroying the "keys" externally.
   end

   put_table_footer ::: get_from(OBJECT)
   ! Output a table footer from the list of "keys". NOTE: not all keywords need
   ! contribute to the banner - any unrecognised keyword is skipped.
   end

   put_table_header
   ! Output a table header from the list of "keys". NOTE: not all keywords need
   ! contribute to the banner - any unrecognised keyword is skipped.
      word :: STR
      width,k :: INT
      width = .table_width
      if (width > 0) then
       stdout.dash(width=width)
       do k = 1,size(keys)
         word = keys(k)
         word.to_lower_case
         select case (word)
           case ("flush            "); stdout.flush; exit
           case ("put_l            "); stdout.put("l",int_width=TRUE)
           case ("put_n_prim       "); stdout.put("n_prim",int_width=TRUE)
           case ("put_n_orb        "); stdout.put("n_orb",int_width=TRUE)
           case ("put_configuration"); stdout.put("Config.")
           case default
         end
         if (k==size(keys)) then
           stdout.flush ! In case they didn't write one.
           WARN("no flush keyword - you may later overrun the output buffer")
         end
       end
       stdout.dash(width=width)
      end
   end

   table_width result (res)
   ! Return how wide a table is, based on "keys".  Note that not all keywords
   ! need to contribute to the banner - any unrecognised keyword is skipped.
      res :: INT
      word :: STR
      int_dash,real_dash,k :: INT
      int_dash = 0
      real_dash = 0
      ENSURE(keys.created,"no keywords")
      do k = 1,size(keys)
       word = keys(k)
       word.to_lower_case
       select case (word)
         case ("put_l            "); int_dash = int_dash + 1
         case ("put_n_prim       "); int_dash = int_dash + 1
         case ("put_n_orb        "); int_dash = int_dash + 1
         case ("put_configuration"); real_dash = real_dash + 1
         case ("flush            "); exit
         case default
       end
      end
      res = int_dash * stdout.int_width + real_dash * stdout.real_width
   end

! ***************
! Inquiry Methods
! ***************

   l_chr(l) result (res) ::: get_from(SHELL), selfless, private
   ! Return a character representation for angular mtm "l"
   ! Of course, "L" shells are never returned: they have mixed mtm.
   end

   same_as(b) result (res)
   ! Return TRUE if "self" is the same as "b".
      self :: IN
      b :: SLATERSHELL, IN
      res :: BIN
   ENSURE(.n.created,"no n quantum numbers")
   ENSURE(.c.created,"no contraction coefficients")
   ENSURE(.z.created,"no exponents")
   ENSURE(b.n.created,"no n quantum numbers to compare to")
   ENSURE(b.c.created,"no contraction coefficients to compare to")
   ENSURE(b.z.created,"no exponents to compare to")
      res = .l == b.l &
            AND .n.same_as(b.n) &
            AND .c.same_as(b.c) &
            AND .z.same_as(b.z)
      if (res AND .orb_kind.created)  res = all(.orb_kind==b.orb_kind)
      if (res AND .occupancy.created) res = all(.occupancy==b.occupancy)
   end

   no_of_basis_functions result (res) ::: pure
   ! Work out and return the TOTAL number of generally contracted basis
   ! functions , counting the agular part also.
      self :: IN
      res :: INT
      res = .n_comp*.n_orb
   end

   no_of_primitives result (res) ::: pure
   ! Work out and return the TOTAL number of primitives, counting the angular
   ! part also.
      self :: IN
      res :: INT
      res = .n_comp*.n_prim
   end

! ******************************
! Density and derivative density
! ******************************

   density_at_radius(R) result (res)
   ! Returns the value of the coppens orbital at radius "R".
   ! SOme work can be save if the prefactor array is made.
      R :: REAL, IN
      res :: REAL
      i :: INT
      orb :: REAL
      val :: VEC{REAL}*
      val.create(.n_prim)
      where (.n==1)
         val =             exp(-.z*R) 
      elsewhere
         val = R**(.n-1) * exp(-.z*R) 
      end
      res = ZERO
      do i = 1,.n_orb
         orb = sum(.c(:,i) * val)
         res = res + .occupancy(i)*orb*orb
      end
      ! Divide by 4*pi since the radial wavefunction
      ! is multiplied by Y(lm) which is (4pi)^(1/2)
      res = res/(FOUR*PI)
      val.destroy
   end

   densities_at_radii(R) result (res)
   ! Returns the values of the coppens density at all the radii "R".
      R :: VEC{REAL}, IN
      res :: VEC{REAL}(R.dim)
      i,p :: INT
      orb :: REAL
      val :: VEC{REAL}*
      val.create(.n_prim)
      do p = 1,R.dim
         where (.n==1)
            val =                exp(-.z*R(p))
         elsewhere
            val = R(p)**(.n-1) * exp(-.z*R(p))
         end
         res(p) = ZERO
         do i = 1,.n_orb
            orb = sum(.c(:,i) * val)
            res(p) = res(p) + .occupancy(i)*orb*orb
         end
      end
      ! Divide by 4*pi since the radial wavefunction
      ! is multiplied by Y(lm) which is (4pi)^(1/2)
      res = res / (FOUR*PI)
      val.destroy
   end


   density_d1_at_radius(R) result (res)
   ! Returns the 1st radial derivative of the orbital at all the radii "R".
      R :: REAL, IN
      res :: REAL
      i,p :: INT
      Rp,orb,dorb :: REAL
      val1,val2,val3 :: VEC{REAL}*
   ! f(R)  = \sum_i n_i (\sum_j c_{ji} R^(n_i-1) exp(-z_i R))^2
   ! f'(R) = \sum_i 2 n_i (\sum_j c_{ji} R^(n_i-1) exp(-z_i R))
   !         (\sum_j c_{ji} R^(n_i-2) exp(-z_i R)[(n_i-1) - z_i R ])
      val1.create(.n_prim)
      val2.create(.n_prim)
      val3.create(.n_prim)
         Rp = R
         val3 = -.z*Rp
         where (.n==2)
            val2 =              exp(val3) 
         elsewhere
            val2 = Rp**(.n-2) * exp(val3) 
         end         
         val1 = val2 * Rp
         val2 = val2 * (.n - ONE - val3)
         res = ZERO
         do i = 1,.n_orb
            orb  = sum(.c(:,i) * val1 )
            dorb = sum(.c(:,i) * val2 )
            res = res + TWO*.occupancy(i)*orb*dorb
         end
      val3.destroy
      val2.destroy
      val1.destroy
   end

   densities_d1_at_radii(R) result (res)
   ! Returns the 1st radial derivative of the orbital at all the radii "R".
      R :: VEC{REAL}, IN
      res :: VEC{REAL}(R.dim)
      i,p :: INT
      Rp,orb,dorb :: REAL
      val1,val2,val3 :: VEC{REAL}*
   ! f(R)  = \sum_i n_i (\sum_j c_{ji} R^(n_i-1) exp(-z_i R))^2
   ! f'(R) = \sum_i 2 n_i (\sum_j c_{ji} R^(n_i-1) exp(-z_i R))
   !         (\sum_j c_{ji} R^(n_i-2) exp(-z_i R)[(n_i-1) - z_i R ])
      val1.create(.n_prim)
      val2.create(.n_prim)
      val3.create(.n_prim)
      do p = 1,R.dim
         Rp = R(p)
         val3 = -.z*Rp
         where (.n==2)
            val2 =              exp(val3) 
         elsewhere
            val2 = Rp**(.n-2) * exp(val3)
         end
         val1 = val2 * Rp
         val2 = val2 * (.n - ONE - val3)
         res(p) = ZERO
         do i = 1,.n_orb
            orb  = sum(.c(:,i) * val1 )
            dorb = sum(.c(:,i) * val2 )
            res(p) = res(p) + TWO*.occupancy(i)*orb*dorb
         end
      end
      val3.destroy
      val2.destroy
      val1.destroy
   end


   density_d2_at_radius(R) result (res)
   ! Returns the 2nd radial derivative of the orbital at all the radii "R".
      R :: REAL, IN
      res :: REAL
      i,p :: INT
      Rp,Rp2,orb,dorb,ddorb :: REAL
      tmp3,val1,val2,val3 :: VEC{REAL}*
   ! f(R)   = \sum_i n_i (\sum_j c_{ji} R^(n_i-1) exp(-z_i R))^2
   ! f'(R)  = \sum_i 2 n_i (\sum_j c_{ji} R^(n_i-1) exp(-z_i R))
   !         (\sum_j c_{ji} R^(n_i-2) exp(-z_i R)[(n_i-1) - z_i R ])
   ! f''(R) = \sum_i 2 n_i {
   !         (\sum_j c_{ji} R^(n_i-2) exp(-z_i R)[(n_i-1) - z_i R ])
   !         (\sum_j c_{ji} R^(n_i-2) exp(-z_i R)[(n_i-1) - z_i R ])
   !         +
   !                       (\sum_j c_{ji} R^(n_i-1) exp(-z_i R))
   !         (\sum_j c_{ji} ( (
   !                       (n_i-2) R^(n_i-3) exp(-z_i R)
   !                       -z_i R^(n_i-2) exp(-z_i R)
   !                       ) [(n_i-1) - z_i R ]
   !                       -
   !                        z_i R^(n_i-2) exp(-z_i R) )
   ! f''(R) = \sum_i 2 n_i {
   !         (\sum_j c_{ji} R^(n_i-2) exp(-z_i R)[(n_i-1) - z_i R ])^2
   !         +
   !         (\sum_j c_{ji} R^(n_i-1) exp(-z_i R))
   !         (\sum_j c_{ji} R^(n_i-3) exp(-z_i R) ((n_i-2 - z_i R ) [n_i-1 - z_i R ] - z_i R )
      val1.create(.n_prim)
      val2.create(.n_prim)
      val3.create(.n_prim)
      tmp3.create(.n_prim)
         Rp = R
         Rp2 = Rp*Rp
         val3 = -.z*Rp
         where (.n==3)
            tmp3 =              exp(val3) 
         elsewhere
            tmp3 = Rp**(.n-3) * exp(val3) 
         end
         val1 = (.n - ONE - val3)
         val2 = tmp3 * Rp * val1
         val3 = tmp3 * (val1*val1 - val1 - val3)
         val1 = tmp3 * Rp2
         res = ZERO
         do i = 1,.n_orb
            orb   = sum(.c(:,i) * val1 )
            dorb  = sum(.c(:,i) * val2 )
            ddorb = sum(.c(:,i) * val3 )
            res = res + TWO*.occupancy(i)*(dorb*dorb + orb*ddorb)
         end
      tmp3.destroy
      val3.destroy
      val2.destroy
      val1.destroy
   end

   densities_d2_at_radii(R) result (res)
   ! Returns the 2nd radial derivative of the orbital at all the radii "R".
      R :: VEC{REAL}, IN
      res :: VEC{REAL}(R.dim)
      i,p :: INT
      Rp,Rp2,orb,dorb,ddorb :: REAL
      tmp3,val1,val2,val3 :: VEC{REAL}*
   ! f(R)   = \sum_i n_i (\sum_j c_{ji} R^(n_i-1) exp(-z_i R))^2
   ! f'(R)  = \sum_i 2 n_i (\sum_j c_{ji} R^(n_i-1) exp(-z_i R))
   !         (\sum_j c_{ji} R^(n_i-2) exp(-z_i R)[(n_i-1) - z_i R ])
   ! f''(R) = \sum_i 2 n_i {
   !         (\sum_j c_{ji} R^(n_i-2) exp(-z_i R)[(n_i-1) - z_i R ])
   !         (\sum_j c_{ji} R^(n_i-2) exp(-z_i R)[(n_i-1) - z_i R ])
   !         +
   !                       (\sum_j c_{ji} R^(n_i-1) exp(-z_i R))
   !         (\sum_j c_{ji} ( (
   !                       (n_i-2) R^(n_i-3) exp(-z_i R)
   !                       -z_i R^(n_i-2) exp(-z_i R)
   !                       ) [(n_i-1) - z_i R ]
   !                       -
   !                        z_i R^(n_i-2) exp(-z_i R) )
   ! f''(R) = \sum_i 2 n_i {
   !         (\sum_j c_{ji} R^(n_i-2) exp(-z_i R)[(n_i-1) - z_i R ])^2
   !         +
   !         (\sum_j c_{ji} R^(n_i-1) exp(-z_i R))
   !         (\sum_j c_{ji} R^(n_i-3) exp(-z_i R) ((n_i-2 - z_i R ) [n_i-1 - z_i R ] - z_i R )
      val1.create(.n_prim)
      val2.create(.n_prim)
      val3.create(.n_prim)
      tmp3.create(.n_prim)
      do p = 1,R.dim
         Rp = R(p)
         Rp2 = Rp*Rp
         val3 = -.z*Rp
         where (.n==3)
            tmp3 =              exp(val3) ! save this
         elsewhere
            tmp3 = Rp**(.n-3) * exp(val3) ! save this
         end
         val1 = (.n - ONE - val3)
         val2 = tmp3 * Rp * val1
         val3 = tmp3 * (val1*val1 - val1 - val3)
         val1 = tmp3 * Rp2
         res(p) = ZERO
         do i = 1,.n_orb
            orb   = sum(.c(:,i) * val1 )
            dorb  = sum(.c(:,i) * val2 )
            ddorb = sum(.c(:,i) * val3 )
            res(p) = res(p) + TWO*.occupancy(i)*(dorb*dorb + orb*ddorb)
         end
      end
      tmp3.destroy
      val3.destroy
      val2.destroy
      val1.destroy
   end

! *************
! Normalisation
! *************

   unnormalise 
   ! Set the value of the coefficient to correspond to un-normalised Slater
   ! functions -- assuming they are normalised. This saves in computation time.
      i,n2 :: INT
      fac :: REAL
      do i = 1,.n_prim
        n2 = 2*.n(i)
        fac = sqrt(TWO*.z(i)/n2.factorial) * (TWO*.z(i))**.n(i)
      ! stdout.text("i ="//i.to_str.trim//" fac ="//fac.to_str.trim)
      ! stdout.put(.c(i,:),"row")
        .c(i,:) = .c(i,:) * fac
      ! stdout.put(.c(i,:),"row")
      end
   end

   renormalise 
   ! Set the value of the coefficient to correspond to normalised slater
   ! functions --- assuming they are w.r.t. unnormalised functions. 
      i,n2 :: INT
      do i = 1,.n_prim
        n2 = 2*.n(i)
        .c(i,:) = .c(i,:) / (sqrt(TWO*.z(i)/n2.factorial) * (TWO*.z(i))**.n(i))
      end
   end

! ******
! Output
! ******

   put
   ! Put the orbital information to "stdout"
      stdout.flush
      stdout.show("L quantum no.     = ",.l)
      stdout.show("No. of orbitals   = ",.n_orb)
      stdout.show("No. of primitives = ",.n_prim)
      .put_table
   end

   put_table
   ! Put the orbital information to "stdout" in table format
      i,j :: INT
      stdout.flush
      stdout.dash(int_fields=2,real_fields=.n_orb+1)
      stdout.put("#",int_width=TRUE)
      stdout.put("N",int_width=TRUE)
      stdout.put("Exponent")
      if (.orb_kind.created AND .occupancy.created) then
         do j = 1,.n_orb
            stdout.put(.orb_kind(j).trim//"("//.occupancy(j).to_str.trim//")")
         end
      else if (.orb_kind.created) then
         do j = 1,.n_orb
            stdout.put(.orb_kind(j).trim)
         end
      else
         do j = 1,.n_orb
            stdout.put("Orb. "//j.to_str.trim)
         end
      end
      stdout.flush
      stdout.dash(int_fields=2,real_fields=.n_orb+1)
      do i = 1,.n_prim
         stdout.put(i)
         stdout.put(.n(i))
         stdout.put(.z(i))
         do j = 1,.n_orb
            stdout.put(.c(i,j))
         end
         stdout.flush
      end
      stdout.dash(int_fields=2,real_fields=.n_orb+1)
   end

end
