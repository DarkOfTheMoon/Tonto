!---------------------------------------------------------------------
!
! ATOM_GROUP:
!
! For storing the lists of integers which make up separate atom groups
! within a list of atoms.
!
! Copyright (C) Dylan Jayatilaka, June 2011
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: atom_group.foo $
!
!---------------------------------------------------------------------

module ATOM_GROUP

   implicit none

   keys :: VEC{STR}*, private DEFAULT_NULL

contains

   create ::: get_from(OBJECT), leaky, pure
   ! Create an object
   end

   destroy ::: get_from(OBJECT), leaky, pure
   ! Destroy an object
   end

   nullify_ptr_part ::: always_pure
   ! Nullify the pointer parts
      self :: INOUT

      nullify(.atom_index)
      nullify(.atom)
      nullify(.mol)

   end

   destroy_ptr_part ::: leaky, pure
   ! Destroy the pointer parts
      self :: INOUT

      .atom_index.destroy

      nullify(.atom) ! do not destroy
      ! .mol.destroy ! destroy manually

   end

   created result (res) ::: get_from(OBJECT), inlined_by_foo, always_pure
   ! Returns true if self has been created
      self :: PTR
      res :: BIN
   end

   destroyed result (res) ::: get_from(OBJECT), inlined_by_foo, always_pure
   ! Returns true if self has *not* been created
      self :: PTR
      res :: BIN
   end

   create_copy(object) ::: get_from(OBJECT), leaky, pure
   ! Create a copy of object
   end

   copy(object) ::: leaky, pure
   ! Copy the "object"
      self :: INOUT
      object :: ATOM_GROUP, IN

      self = object

      .nullify_ptr_part

      CREATE_COPY_COMPONENT(atom_index)

   end

!  ===========
!  Set methods
!  ===========

   set_defaults ::: always_pure
   ! Set up defaults
      self :: INOUT

      .name   = " "
      .n_atoms = 0
      .charge = 0
      .n_MOs  = 0

   end

   set_one_group ::: pure
   ! Set up one group comprising all the atoms
      self :: INOUT

   ENSURE(.atom.created,"atom list not created")

      i :: INT

      .atom_index.destroy
      .atom_index.create(.atom.dim)
      .atom_index = [ (i, i=1,.atom.dim) ]

   end

   set_atom(atom) ::: pure
   ! Set the .atom list to which .atom_index refers to
      self :: INOUT
      atom :: VEC{ATOM}*

   ENSURE(atom.created,"atom list not created")

      .atom => atom

   end

   set_mol(mol) ::: pure
   ! Set the molecule associated with .atom_index
      self :: INOUT
      mol :: MOLECULE*

   ENSURE(mol.created,"mol not created")

      .mol => mol

   end

   set_name(name) ::: always_pure
   ! Set the name of this stom group to be "name"
      self :: INOUT
      name :: STR, IN

      .name = name

   end

!  ============
!  Read methods
!  ============

   read_keywords ::: get_from(OBJECT), recursive, leaky, impure
   ! Read data from "stdin" using keyword style input.
   end

   process_keyword(keyword) ::: leaky, impure
   ! Process command "keyword". Any required data needed by the "keyword" is
   ! inputted from "stdin".
      self :: INOUT
      keyword :: STR, IN

      word :: STR

      word = keyword
      word.to_lower_case

      select case (word)
         case ("}                      ")  ! exit read_loop
         case ("charge=                "); .read_charge
         case ("atom_indices=          "); .read_atom_indices
         case ("n_mos=                 "); .read_n_MOs
         case ("name=                  "); .read_name
         ! These are only for making custom tables for the list type
         case ("---For custom tables---");
         case ("flush                  "); stdout.flush
         case ("put_charge             "); stdout.put(.charge)
         case ("put_chemical_symbols   "); .put_chemical_symbols
         case ("put_atom_indices       "); .put_atom_indices
         case ("put_n_atoms            "); stdout.put(.n_atoms)
         case ("put_n_mos              "); stdout.put(.n_MOs)
         case ("put_name               "); stdout.put(.name)
         case default;       UNKNOWN(word)
      end

   end

   read_atom_indices ::: leaky, impure
   ! Read the atom atom_indices in the group
      self :: INOUT

      stdin.read_ptr(.atom_index)

      .n_atoms = .atom_index.dim

   end

   read_charge ::: leaky, impure
   ! Read the charges on the group
      self :: INOUT

      stdin.read(.charge)

   end

   read_n_MOs ::: leaky, impure
   ! Read the number of MOs to use to make the density matrix on each group
      self :: INOUT

      stdin.read(.n_MOs)

   end

   read_name ::: leaky, impure
   ! Read the name for the groups
      self :: INOUT

      stdin.read(.name)

   end

   finalise(atom) ::: leaky, pure
   ! Do all the sanity checks and default settings
      self :: INOUT
      atom :: VEC{ATOM}*

   ENSURE(atom.destroyed,"no atom list")
   ENSURE(atom.dim>0,"no atoms")

      ! Set the atom information
      .set_atom(atom)

   ENSURE(.atom_index.created,"no atom_index in the group")
   ENSURE(.atom_index.dim<=.atom.dim,"more atom_index than # of atoms!")
   ENSURE(NOT .atom_index.has_repetitions,"there are repeated atom_index!")
   ENSURE(all(.atom_index>0),"non-positive atom atom_index!")
   ENSURE(all(.atom_index<=.atom.dim),"index too large")

   end

! ====================
! Key related routines
! ====================

   read_keys ::: get_from(OBJECT), leaky, impure
   ! Read the "keys".
   end

   process_keys ::: get_from(OBJECT), leaky, impure
   ! Process each of the words in the "keys" list.
   end

   keys_created result (res) ::: get_from(OBJECT), always_pure
   ! Return TRUE if the list-element keys are created.
   end

   set_keys(the_keys) ::: get_from(OBJECT), impure
   ! This is for setting the "keys" externally.
   end

   clear_keys ::: get_from(OBJECT), leaky, impure
   ! This is for destroying the "keys" externally.
   end

!  ===========
!  Put methods
!  ===========

   put_chemical_symbols ::: impure
   ! Output the chemical symbol information
      self :: IN

   ENSURE(.atom_index.created,"no atom atom_index")
   ENSURE(.atom.created,"no atoms")

      i :: INT

      do i = 1,.n_atoms
         stdout.put(.atom(.atom_index(i)).chemical_symbol,width=3)
      end

   end

   put_atom_indices ::: impure
   ! Output info array
      self :: IN

   ENSURE(.atom_index.created,"no atom atom_index")

      i,pos,wid,len :: INT

      pos = stdout.buffer.item_end
      wid = stdout.real_width
      len = stdout.real_width

      do i = 1,.atom_index.dim
         stdout.put(.atom_index(i),width=3)
         len = len + 3
         if (len>wid) then
         stdout.flush
         stdout.tab(width=pos)
         end
      end

   end

end
