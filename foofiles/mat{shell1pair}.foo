!-------------------------------------------------------------------------------
!
! MAT{SHELL1PAIR} : a vector of pairs of gaussian SHELL1PAIR's.
!
! This object is used to store precalculated information used in ERI integral
! evaluation.
!
! Copyright (C) Dylan Jayatilaka, 2000
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!-------------------------------------------------------------------------------

module MAT{SHELL1PAIR}

   implicit none

contains

!  =================
!  Memory allocation
!  =================

   create(dim1,dim2) ::: get_from(MAT{OBJECT}), leaky
   ! Create space for object. This version does not set defaults.
   end

   destroy ::: get_from(MAT{OBJECT}), leaky
   ! Destroy the object
   end

   created result (res) ::: get_from(MAT{OBJECT}), inlined_by_foo
   ! Returns true if self has been created
   end

   destroyed result (res) ::: get_from(MAT{OBJECT}), inlined_by_foo
   ! Returns true if self has *not* been created
   end

   nullify_ptr_part ::: get_from(MAT{OBJECT})
   ! Nullify the pointer parts of self
   end

   destroy_ptr_part ::: get_from(MAT{OBJECT}), leaky
   ! Destroy the pointer parts of self
   end

   create_copy(matrix) ::: get_from(MAT{OBJECT}), leaky
   ! Create a copy of matrix
   end

   copy(matrix) ::: get_from(MAT{OBJECT}), leaky
   ! Copy the "matrix".
   end

!  ============================
!  Size-of and shape operations 
!  ============================

   size result (res) ::: get_from(MAT{OBJECT}), inlined_by_foo
   ! Return the size of the array
   end

   dim1 result (res) ::: get_from(MAT{OBJECT}), inlined_by_foo
   ! Return the size of the 1st dimension
   end

   dim2 result (res) ::: get_from(MAT{OBJECT}), inlined_by_foo
   ! Return the size of the 2nd dimension
   end

   shape result (res) ::: get_from(MAT{OBJECT})
   ! Return the shape of "self"
   end

   is_same_shape_as(a) result (res) ::: get_from(MAT{OBJECT}), pure
   ! Returns TRUE if the matrix "a" has the same shape as "self"
   end

   is_transposed_shape_of(a) result (res) ::: get_from(MAT{OBJECT}), pure
   ! Returns TRUE if the matrix "a" is the transposed shape of self
   end

   is_square result (res) ::: get_from(MAT{OBJECT}), pure
   ! Returns TRUE if the matrix is square
   end

!  ======
!  Output
!  ======

   dump(object_name,lower_triangle) ::: get_from(MAT{OBJECT}, TYPE=>SHELL1PAIR)
   ! Dump a matrix object in text format
   end

   dmpp(object_name,lower_triangle) ::: get_from(MAT{OBJECT}, TYPE=>SHELL1PAIR)
   ! Dump a matrix pointer object in text format
   end

end
