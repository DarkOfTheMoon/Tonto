!---------------------------------------------------------------------------
!
! VEC{ATOM}: ATOM vectors
!
! Copyright (C) Dylan Jayatilaka, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!---------------------------------------------------------------------------

module VEC{ATOM}

   implicit none

   ! Index information arrays; the strange "4" stands for "for" and prevents a
   ! name clash with a procedure of the same name.

   saved_self :: VEC{ATOM}*, private  DEFAULT_NULL
   index_info_created :: BIN, private DEFAULT(FALSE)
   atom_4_shell :: VEC{INT}*, private DEFAULT_NULL
   atom_shell_4_shell :: VEC{INT}*, private DEFAULT_NULL
   first_shell_4_atom :: VEC{INT}*, private DEFAULT_NULL
   first_basis_fn_4_shell :: VEC{INT}*, private DEFAULT_NULL
   last_basis_fn_4_shell  :: VEC{INT}*, private DEFAULT_NULL
   angular_moment_4_shell :: VEC{INT}*, private DEFAULT_NULL
   first_basis_fn_4_atom  :: VEC{INT}*, private DEFAULT_NULL
   last_basis_fn_4_atom   :: VEC{INT}*, private DEFAULT_NULL

   ! Atom connection table, to save work
   connections_for :: VEC{VEC_{INT}}*, private DEFAULT_NULL

contains

!  ******************
!  Allocation methods
!  ******************

   create(dim) ::: get_from(VEC{OBJECT}), leaky
   ! Create space for object
   end

   destroy ::: get_from(VEC{OBJECT}), leaky
   ! Destroy space for object
   end

   create_copy(vec) ::: get_from(VEC{OBJECT}), leaky
   ! Create a replica copy of "vec".
   end

   copy(vec) ::: get_from(VEC{OBJECT}), leaky
   ! Copy "vec".
   end

   nullify_ptr_part ::: get_from(VEC{OBJECT})
   ! Nullify the pointer parts of self
   end

   nullify_bases
   ! Nullify the bases 
      .nullify_basis_part
      .nullify_slaterbasis_part
      .nullify_coppensbasis_part
   end

   nullify_basis_part
   ! Nullify the basis parts of self
      a :: INT
      do a = 1,.dim
         nullify(self(a).basis)
      end
   end

   nullify_slaterbasis_part
   ! Nullify the slaterbasis parts of self
      a :: INT
      do a = 1,.dim
         nullify(self(a).slaterbasis)
      end
   end

   nullify_coppensbasis_part
   ! Nullify the coppensbasis parts of self
      a :: INT
      do a = 1,.dim
         nullify(self(a).coppensbasis)
      end
   end

   destroy_ptr_part ::: leaky
   ! Destroy the pointer parts of self
      a :: INT
   !  .destroy_interpolator_part
      .nullify_bases
      do a = 1,.dim ! Now we can safely destroy everything .....
         self(a).destroy_ptr_part
      end
   end

!   destroy_interpolator_part ::: leaky
!   ! Destroy the interpolator pointer parts of self
!      if (.has_all_coppens_interpolators) .destroy_coppens_interpolators 
!      if (.has_all_slater_interpolators)  .destroy_slater_interpolators 
!   end

   created result (res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has been created
   end

   destroyed result (res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has *not* been created
   end

   set_defaults ::: get_from(VEC{OBJECT})
   ! Set default values
   end

   set_labels_and_atomic_numbers(labels)
   ! Set "labels" for the atoms and also their atomic numbers.
      labels :: VEC{STR}
      ENSURE(labels.dim==.dim,"wrong length for labels")
      n :: INT
      do n = 1,.n_atom
        self(n).set_label_and_atomic_number(labels(n))
      end
   end

   set_labels(labels)
   ! Set the "labels" ONLY for the atoms; use the above routine to set the
   ! atomic numbers as well.
      labels :: VEC{STR}
   ENSURE(labels.dim==.dim,"wrong length for labels")
      self(:).label = labels
   end

!   set_coppensbasis_labels(labels)
!   ! Set the .coppensbasis "labels".
!      labels :: VEC{STR}
!      ENSURE(labels.dim==.dim,"wrong length for labels")
!      n :: INT
!      do n = 1,.n_atom
!        self(n).set_coppensbasis_label(labels(n))
!      end
!   end

   shrink(dim)
   ! Shrink the atomvec to dimension "dim", retaining contents.
     self :: PTR
     dim :: INT, IN
     ENSURE(.created,"no self array")
     ENSURE(dim<=.dim,"dim too large")
     old :: VEC{ATOM}*
     n :: INT
     if (dim==.dim) return
     old => self
     nullify(self)
     self.create(dim)
     do n=1,dim
       self(n).copy(old(n))
     end
     old.nullify_basis_part
     old.destroy
   end

   expand(dim) ::: get_from(VEC{OBJECT}), leaky
   ! Expand the vector "self" to "dim". New slots are left undefined.
   end

   append(v) ::: get_from(VEC{OBJECT}), leaky
   ! Expands self and appends the contents of vector "v".
   end

   append(value) ::: get_from(VEC{OBJECT}), leaky
   ! Expands self by 1, and appends the single scalar "value" onto the end.
   end

! ***********************
! List-based I/O Routines
! ***********************

   read_list_keywords ::: get_from(VEC{OBJECT}), recursive, leaky
   ! Read in and process list-based keywords from "stdin". List-based keywords
   ! are those that are intended to apply to each individual element of the list
   ! through a list of "keys" stored in the associated list-element type module.
   ! NOTE: this routine will create the list, if required.
   end

   process_list_keyword(keyword) ::: get_from(VEC{OBJECT}), leaky
   ! Process a list-type "keyword", common to all list-type objects.
   end

   read_data(ignore_braces) ::: get_from(VEC{OBJECT}), leaky
   ! Process the keywords list to read data or commands. If "ignore_braces" is
   ! present then the opening and closing braces, which are normally required,
   ! are ignored.
   end

   data_length result (length) ::: get_from(VEC{OBJECT})
   ! Read ahead in stdin to get the "length" of the data list, i.e. the number
   ! of data items in the list. The data must begin with the first data item,
   ! *not* a "{" symbol.  The order of data items comprising the list is given
   ! by keys defined in the associated list-element type module. The data list
   ! must be terminated by a "}" symbol.
   end

   read_altered_data ::: get_from(VEC{OBJECT}), leaky
   ! Read in a sublist of the complete list, and alter the data for that
   ! sublist.  The order of the data items in the sublist is given by the "keys"
   ! defined in the associated list-element type module.
   end

   read_append_data ::: get_from(VEC{OBJECT}), leaky
   ! Read in a set of data to append to an existing set.
   end

   process_keys ::: get_from(VEC{OBJECT}), leaky
   ! Process the "keys" on each element of the list.
   end

   process_keys_once ::: get_from(VEC{OBJECT})
   ! Process the "keys" just once on an anonymous object. This is useful if the
   ! "keys" set global variables in the list module (e.g. the default order of
   ! lists *within* the list data) as opposed to being keys pertaining to each
   ! element of the list.
   end

   keys_created result (res) ::: get_from(VEC{OBJECT})
   ! Return TRUE if the list-element keys are created.
   end

   set_keys(the_keys) ::: get_from(VEC{OBJECT})
   ! This is for setting the "keys" externally.
   end

   clear_keys ::: get_from(VEC{OBJECT})
   ! This is for destroying the "keys" externally.
   end

   read_keys ::: get_from(VEC{OBJECT})
   ! Read a new set of keys
   end

   put_keys_table ::: get_from(VEC{OBJECT})
   ! Output a generic table based on the "keys"
   end

   put_table_header ::: get_from(VEC{OBJECT})
   ! Put out a table header based on "keys"
   end

   put_table_footer ::: get_from(VEC{OBJECT})
   ! Put out a table footer based on "keys"
   end

   redirect ::: leaky
   ! Redirect input
     self :: PTR
     stdin.redirect(stdin.next_str)
   end

   revert ::: leaky
   ! Revert back to previous stdin file
     self :: PTR
     stdin.revert
   end

! ***************************
! Non-list based I/O routines
! ***************************

   read_keywords ::: get_from(VEC{OBJECT}), recursive, leaky
   ! Read in and process normal (non list-type) keywords from "stdin".
   end

   process_keyword(keyword) ::: leaky
   ! Process a normal (non list-type) "keyword".
     self :: PTR
     keyword :: STR
     word :: STR
     word = keyword
     word.to_lower_case
     select case (word)
       case("}") ! do nothing.
     ! case("b_iso_to_u_iso         "); .B_iso_to_U_iso
       case("find_n_terminal_atoms  "); .find_N_terminal_atoms
       case("find_protein_backbone  "); .find_protein_backbone
       case("put                    "); .put
       case("put_bond_angle_table   "); .put_bond_angle_table
       case("put_bond_length_table  "); .put_bond_length_table
       case("put_coord_info         "); .put_coord_info
       case("put_coordinates        "); .put_coordinates
       case("put_invariom_labels    "); .put_invariom_labels
       case("put_mm_info            "); .put_mm_info
       case("put_thermal_tensors    "); .put_thermal_tensors
       case("put_torsion_angle_table"); .put_torsion_angle_table
       case("put_protein_sequence   "); .put_protein_sequence
       case("put_restraint_atoms    "); .put_restraint_atoms
       case("read_cif               "); .read_CIF
       case("redirect               "); .redirect
       case("revert                 "); .revert
       case("set_covalent_radii_ccdc"); ATOM:set_covalent_radii_ccdc
       case default;               UNKNOWN(word)
     end
   end

   read_CIF ::: leaky
   ! Read information from a Crystallographic Information File whose name is
   ! read from "stdin".
      self :: PTR
      cif :: CIF*
      found :: BIN
      name :: STR
      stdin.read(name)
      cif.create(name)
      cif.open
      cif.find_crystal_data_block(found)
      ENSURE(found,"no crystal data block found") 
      .read_CIF(cif)
      cif.destroy
   end

   read_CIF(cif) ::: leaky
   ! Read information from a Crystallographic Information File, "cif".
   ! It is an error if there are no atom coordinatesin the file.
   ! It is NOT an error if the thermal tensors are missing.
   ! NOTE: self is destroyed and created from this file!
      self :: PTR
      cif :: CIF
      fs,fc,fo,fu,fl,fail :: BIN
      IDs,labels,symbols :: VEC{STR}*
      i,ind :: INT
      pos,U :: MAT{REAL}*
      U_iso :: VEC{REAL}*
      unit_cell :: UNIT_CELL
      fac,a,b,c :: REAL
      ! Read the site labels FIRST because these seem to correlate with
      ! the anisotropic U's.
      nullify(symbols)
      nullify(labels)
      cif.read_looped_item("_atom_site_type_symbol",symbols,fs)
      cif.read_looped_item("_atom_site_label",labels,fl)
      ENSURE(fs OR fl,"no atom site label information in CIF file")
      .destroy
      if (symbols.created) then
         .create(symbols.dim)
         .set_labels_and_atomic_numbers(symbols) ! For Z's
         if (labels.created) .set_labels(labels) ! For U's
      else if (labels.created) then
         .create(labels.dim)
         .set_labels_and_atomic_numbers(labels)  ! This may not work
      end
      labels.destroy
      symbols.destroy
      ! Read the site coordinates, and possibly occupancies
      cif.find_looped_item("_atom_site_occupancy",fo)
      if (fo) then
         IDs.create(4)
         IDs = ["_atom_site_fract_x  ", &
                "_atom_site_fract_y  ", &
                "_atom_site_fract_z  ", &
                "_atom_site_occupancy"]
         cif.read_looped_items(IDs,pos,found=fc)
      else
         IDs.create(3)
         IDs = ["_atom_site_fract_x  ", &
                "_atom_site_fract_y  ", &
                "_atom_site_fract_z  "]
         cif.read_looped_items(IDs,pos,found=fc)
      end
      ENSURE(fc,"no atom coordinate information in CIF file")
      ! Assign the CIF info to the atom list
      self(:).axis_system = "crystal"
      self(:).pos(1) = pos(1,:)
      self(:).pos(2) = pos(2,:)
      self(:).pos(3) = pos(3,:)
      if (fo) self(:).site_occupancy = pos(4,:)
      pos.destroy
      IDs.destroy
      ! Read the U_iso values if there
      cif.read_looped_item("_atom_site_U_iso_or_equiv",U_iso,found=fu)
      if (fu) then
         ! Change units if required 
         if (cif.U_iso_is_B_iso) then
            fac = ONE/(EIGHT*PI*PI)
            U_iso = fac*U_iso
         end
         U_iso.convert_from("angstrom^2")
         self(:).U_iso = U_iso
         U_iso.destroy
      end
      ! Now read U tensor if it is there ...
      IDs.create(6)
      IDs = ["_atom_site_aniso_U_11", &
             "_atom_site_aniso_U_22", &
             "_atom_site_aniso_U_33", &
             "_atom_site_aniso_U_12", &
             "_atom_site_aniso_U_13", &
             "_atom_site_aniso_U_23"]
      cif.read_looped_item("_atom_site_aniso_label",labels,fl)
      cif.read_looped_items(IDs,U,found=fu)
      if (fl AND fu) then
         ! Change units if required 
         if (cif.U_is_B) then
            fac = ONE/(EIGHT*PI*PI)
            U = fac*U
         else if (cif.U_is_beta) then
            unit_cell.read_CIF(cif)
            a = unit_cell.length(1)
            b = unit_cell.length(2)
            c = unit_cell.length(3)
            fac = ONE/(TWO*PI*PI)
            U = fac*U
            do i = 1,.dim
               U(1,i) = U(1,i)/(a*a)
               U(2,i) = U(1,i)/(b*b)
               U(3,i) = U(1,i)/(c*c)
               U(4,i) = U(1,i)/(a*b)
               U(5,i) = U(1,i)/(a*c)
               U(6,i) = U(1,i)/(b*c)
            end
         end
         U.convert_from("angstrom^2")
         ! Match the anisotropic U labels and assign the U tensors
         fail = FALSE
         DIE_IF(self(:).label.no_of_unique_elements/=.dim,"for the ADP's, every site symbol must be distinct!")
         do i = 1,labels.dim
            ind = self(:).label.index_of(labels(i))
            if (ind<=0) then
               WARN("label "//labels(i).trim//" cant be found, failed to read U's")
               fail = TRUE 
               exit
            end
            self(ind).thermal_tensor(1,1) = U(1,i)
            self(ind).thermal_tensor(2,2) = U(2,i)
            self(ind).thermal_tensor(3,3) = U(3,i)
            self(ind).thermal_tensor(1,2) = U(4,i)
            self(ind).thermal_tensor(2,1) = U(4,i)
            self(ind).thermal_tensor(1,3) = U(5,i)
            self(ind).thermal_tensor(3,1) = U(5,i)
            self(ind).thermal_tensor(2,3) = U(6,i)
            self(ind).thermal_tensor(3,2) = U(6,i)
         end
         if (NOT fail) then
            self(:).thermal_axis_system = "crystal"
         else
            do i = 1,labels.dim
            self(i).thermal_tensor = ZERO
            end
         end
      end
      if (fu) U.destroy
      if (fl) labels.destroy
      IDs.destroy
   end

   read_CIF_ADPs(cif) ::: leaky
   ! Read ADP information from a Crystallographic Information File, "cif".
   ! It is an error if the thermal tensors are missing in the "cif" file.
   ! It is an error if self is not defined or does not have the same
   ! length as the ADP list. NOTE: it is up to you to ensure that the
   ! atom order in the CIF is the same as the atom order in self.
      self :: PTR
      cif :: CIF
   ENSURE(.created,"no atom list exists")
      fu  :: BIN
      IDs :: VEC{STR}*
      i   :: INT
      U   :: MAT{REAL}*
      U_iso :: VEC{REAL}*
      unit_cell :: UNIT_CELL
      fac,a,b,c :: REAL
      ! Read the U_iso values if there
      cif.read_looped_item("_atom_site_U_iso_or_equiv",U_iso,found=fu)
      if (fu) then
         DIE_IF(U_iso.dim/=.dim,"inconsistent number of atoms and U's")
         ! Change units if required 
         if (cif.U_iso_is_B_iso) then
            fac = ONE/(EIGHT*PI*PI)
            U_iso = fac*U_iso
         end
         U_iso.convert_from("angstrom^2")
         self(:).U_iso = U_iso
         self(:).thermal_axis_system = "crystal"
         U_iso.destroy
      end
      ! Now read U tensor if it is there ...
      IDs.create(6)
      IDs = ["_atom_site_aniso_U_11", &
             "_atom_site_aniso_U_22", &
             "_atom_site_aniso_U_33", &
             "_atom_site_aniso_U_12", &
             "_atom_site_aniso_U_13", &
             "_atom_site_aniso_U_23"]
      cif.read_looped_items(IDs,U,found=fu)
      if (fu) then
         ! Change units if required 
         if (cif.U_is_B) then
            fac = ONE/(EIGHT*PI*PI)
            U = fac*U
         else if (cif.U_is_beta) then
            unit_cell.read_CIF(cif)
            a = unit_cell.length(1)
            b = unit_cell.length(2)
            c = unit_cell.length(3)
            fac = ONE/(TWO*PI*PI)
            U = fac*U
            do i = 1,.dim
               U(1,i) = U(1,i)/(a*a)
               U(2,i) = U(1,i)/(b*b)
               U(3,i) = U(1,i)/(c*c)
               U(4,i) = U(1,i)/(a*b)
               U(5,i) = U(1,i)/(a*c)
               U(6,i) = U(1,i)/(b*c)
            end
         end
         U.convert_from("angstrom^2")
         ! Match the labels and assign the U tensors
         do i = 1,.dim
            self(i).thermal_tensor(1,1) = U(1,i)
            self(i).thermal_tensor(2,2) = U(2,i)
            self(i).thermal_tensor(3,3) = U(3,i)
            self(i).thermal_tensor(1,2) = U(4,i)
            self(i).thermal_tensor(2,1) = U(4,i)
            self(i).thermal_tensor(1,3) = U(5,i)
            self(i).thermal_tensor(3,1) = U(5,i)
            self(i).thermal_tensor(2,3) = U(6,i)
            self(i).thermal_tensor(3,2) = U(6,i)
            self(i).thermal_axis_system = "crystal"
         end
         U.destroy
      end
      IDs.destroy
   end

!*******************************************************************************

!   resolve_bases(basis,clobber,resolve_all) ::: leaky
!   ! Resolve the basis sets for each atom by matching the atom basis set label
!   ! with the labels from the basis set vector "basis". If "clobber" is present
!   ! and TRUE (the default situation), then any matched basis is pointer
!   ! assigned to the matching element in "basis" irrespective of whether it is
!   ! already associated; otherwise if the matching basis set is already
!   ! associated, it is not pointer assigned. If "resolve_all" is present and TRUE
!   ! (the default) an error is generated if all the basis sets are not resolved;
!   ! the default is that "resolve_all" is FALSE.
!      basis :: VEC{BASIS}*
!      clobber,resolve_all :: BIN, optional
!      a :: INT
!      found,find_all :: BIN
!      ENSURE(basis.created,"no basis set")
!      find_all = TRUE
!      if (present(resolve_all)) find_all = resolve_all
!      do a = 1,.n_atom
!         self(a).resolve_basis(basis,clobber,found)
!         if (find_all) then
!           ENSURE(found,"unknown basis, atom "// trim(a.to_str))
!         end
!      end
!   end
!
!   resolve_library_bases(basis,clobber,resolve_all) ::: leaky
!   ! Resolve the basis sets for each atom by first looking in the "basis" list,
!   ! and then (if needed) looking in a basis set library file. The appropriate
!   ! basis set library files are obtained from the basis set qualifier -- the
!   ! part after the colon in the atom basis set label. For example, if the atom
!   ! basis set label is "H:DZP", then the qualifier is "DZP" and the routine
!   ! looks in library file basis_sets/"DZP" for a matching basis set. If found,
!   ! the basis set is appended to "basis". If "clobber" is present and TRUE (the
!   ! default situation), then any matched basis is pointer assigned to the
!   ! matching element in "basis" irrespective of whether it is already
!   ! associated; otherwise if the matching basis set is already associated, it
!   ! is not pointer assigned. If "resolve_all" is present and TRUE (the default)
!   ! an error is generated if all the basis sets are not resolved; the default
!   ! is that "resolve_all" is FALSE.
!      basis :: VEC{BASIS}*
!      clobber,resolve_all :: BIN, optional
!      a :: INT
!      found,find_all :: BIN
!      find_all = TRUE
!      if (present(resolve_all)) find_all = resolve_all
!      do a = 1,.n_atom
!         self(a).resolve_library_basis(basis,clobber,found)
!         if (find_all) then
!           ENSURE(found,"unknown basis, atom "// trim(a.to_str))
!         end
!      end
!   end
!
!   resolve_basis_suffix(basis,suffix,clobber,resolve_all) ::: leaky
!   ! Match the basis set labels from the given basis set vector "basis"
!   ! with atom basis set labels contructed in a standard way by joining
!   ! the (lower case) atom chemical symbol with the -"suffix" string.
!   ! If "clobber" is present and FALSE, then any basis which is already associated
!   ! is not resolved even though there may be a matching entry. If "resolve_all"
!   ! is present and FALSE, then it is not an error if all the basis sets are
!   ! nopt resolved.
!      basis :: VEC{BASIS}*
!      suffix :: STR
!      clobber,resolve_all :: BIN, optional
!      a :: INT
!      found,find_all :: BIN
!      find_all = TRUE
!      if (present(resolve_all)) find_all = resolve_all
!      do a = 1,.n_atom
!         self(a).resolve_basis_suffix(basis,suffix,clobber,found)
!         if (find_all) then
!           ENSURE(found,"unknown basis, atom "// trim(a.to_str))
!         end
!      end
!   end
!
!   resolve_bases(basis,clobber,resolve_all) ::: leaky
!   ! Resolve the basis sets for each atom by matching the atom basis set label
!   ! with the labels from the basis set vector "basis". If "clobber" is present
!   ! and TRUE (the default situation), then any matched basis is pointer
!   ! assigned to the matching element in "basis" irrespective of whether it is
!   ! already associated; otherwise if the matching basis set is already
!   ! associated, it is not pointer assigned. If "resolve_all" is present and TRUE
!   ! (the default) an error is generated if all the basis sets are not resolved;
!   ! the default is that "resolve_all is FALSE.
!      basis :: VEC{SLATERBASIS}*
!      clobber,resolve_all :: BIN, optional
!      a :: INT
!      found,find_all :: BIN
!      ENSURE(basis.created,"no basis set")
!      find_all = TRUE
!      if (present(resolve_all)) find_all = resolve_all
!      do a = 1,.n_atom
!         self(a).resolve_basis(basis,clobber,found)
!         if (find_all) then
!           ENSURE(found,"unknown basis, atom "// trim(a.to_str))
!         end
!      end
!   end
!
!   resolve_library_bases(basis,clobber,resolve_all) ::: leaky
!   ! Resolve the basis sets for each atom by first looking in the "basis" list,
!   ! and then (if needed) looking in a basis set library file. The appropriate
!   ! basis set library files are obtained from the basis set qualifier -- the
!   ! part after the colon in the atom basis set label. For example, if the atom
!   ! basis set label is "H:DZP", then the qualifier is "DZP" and the routine
!   ! looks in library file basis_sets/"DZP" for a matching basis set. If found,
!   ! the basis set is appended to "basis". If "clobber" is present and TRUE (the
!   ! default situation), then any matched basis is pointer assigned to the
!   ! matching element in "basis" irrespective of whether it is already
!   ! associated; otherwise if the matching basis set is already associated, it
!   ! is not pointer assigned. If "resolve_all" is present and TRUE (the default)
!   ! an error is generated if all the basis sets are not resolved; the default
!   ! is that "resolve_all is FALSE.
!      basis :: VEC{SLATERBASIS}*
!      clobber,resolve_all :: BIN, optional
!      a :: INT
!      found,find_all :: BIN
!      find_all = TRUE
!      if (present(resolve_all)) find_all = resolve_all
!      do a = 1,.n_atom
!         self(a).resolve_library_basis(basis,clobber,found)
!         if (find_all) then
!           ENSURE(found,"unknown basis, atom "// trim(a.to_str))
!         end
!      end
!   end
!
!   resolve_basis_suffix(basis,suffix,clobber,resolve_all) ::: leaky
!   ! Match the basis set labels from the given basis set vector "basis"
!   ! with atom basis set labels contructed in a standard way by joining
!   ! the (lower case) atom chemical symbol with the -"suffix" string.
!   ! If "clobber" is present and FALSE, then any basis which is already associated
!   ! is not resolved even though there may be a matching entry. If "resolve_all"
!   ! is present and FALSE, then it is not an error if all the basis sets are
!   ! nopt resolved.
!      basis :: VEC{SLATERBASIS}*
!      suffix :: STR
!      clobber,resolve_all :: BIN, optional
!      a :: INT
!      found,find_all :: BIN
!      find_all = TRUE
!      if (present(resolve_all)) find_all = resolve_all
!      do a = 1,.n_atom
!         self(a).resolve_basis_suffix(basis,suffix,clobber,found)
!         if (find_all) then
!           ENSURE(found,"unknown basis, atom "// trim(a.to_str))
!         end
!      end
!   end

!   resolve_library_bases(basis,clobber,resolve_all) ::: leaky
!   ! Resolve the basis sets for each atom by first looking in the "basis" list,
!   ! and then (if needed) looking in a basis set library file. The appropriate
!   ! basis set library files are obtained from the basis set qualifier -- the
!   ! part after the colon in the atom basis set label. For example, if the atom
!   ! basis set label is "H:DZP", then the qualifier is "DZP" and the routine
!   ! looks in library file basis_sets/"DZP" for a matching basis set. If found,
!   ! the basis set is appended to "basis". If "clobber" is present and TRUE (the
!   ! default situation), then any matched basis is pointer assigned to the
!   ! matching element in "basis" irrespective of whether it is already
!   ! associated; otherwise if the matching basis set is already associated, it
!   ! is not pointer assigned. If "resolve_all" is present and TRUE (the default)
!   ! an error is generated if all the basis sets are not resolved; the default
!   ! is that "resolve_all is FALSE.
!      basis :: VEC{COPPENSBASIS}*
!      clobber,resolve_all :: BIN, optional
!      a :: INT
!      found,find_all :: BIN
!      find_all = TRUE
!      if (present(resolve_all)) find_all = resolve_all
!      do a = 1,.n_atom
!         self(a).resolve_library_basis(basis,clobber,found)
!         if (find_all) then
!           ENSURE(found,"unknown basis, atom "// trim(a.to_str))
!         end
!      end
!   end

!   resolve_bases_by_labels(labels,basis,clobber,resolve_all) 
!   ! Resolve the basis sets for each atom self(a), by pointer assigning to the
!   ! element in "basis" which has the same label as "labels(a)". If "clobber" is
!   ! present and TRUE (the default situation), then any matched basis is pointer
!   ! assigned to the matching element in "basis" irrespective of whether it is
!   ! already associated; otherwise if the matching basis set is already
!   ! associated, it is not pointer assigned. If "resolve_all" is present and
!   ! TRUE (the default) an error is generated if all the basis sets are not
!   ! resolved; the default is that "resolve_all is FALSE.
!      labels :: VEC{STR}
!      basis :: VEC{COPPENSBASIS}*
!      clobber,resolve_all :: BIN, optional
!      a :: INT
!      found,find_all :: BIN
!   ENSURE(basis.created,"no basis set")
!   ENSURE(labels.dim==.n_atom,"wrong number of labels")
!      find_all = TRUE
!      if (present(resolve_all)) find_all = resolve_all
!      do a = 1,.n_atom
!         self(a).resolve_by_basis_label(labels(a),basis,clobber,found)
!         if (find_all) then
!           ENSURE(found,"unknown basis, atom "// trim(a.to_str))
!         end
!      end
!   end

!   resolve_bases_by_suffix(suffix,basis,clobber,resolve_all) 
!   ! Resolve the basis sets for each atom self(a), by pointer assigning to the
!   ! element in "basis" which has a label constructed in a standard way, by
!   ! joining the atom chemical symbol with the -"suffix" string.  If "clobber"
!   ! is present and FALSE, then any basis which is already associated is not
!   ! resolved even though there may be a matching entry. If "resolve_all" is
!   ! present and FALSE, then it is not an error if all the basis sets are nopt
!   ! resolved.
!      suffix :: STR
!      basis :: VEC{COPPENSBASIS}*
!      clobber,resolve_all :: BIN, optional
!      a :: INT
!      found,find_all :: BIN
!      find_all = TRUE
!      if (present(resolve_all)) find_all = resolve_all
!      do a = 1,.n_atom
!         self(a).resolve_by_basis_suffix(suffix,basis,clobber,found)
!         if (find_all) then
!           ENSURE(found,"unknown basis, atom "// trim(a.to_str))
!         end
!      end
!   end

   resolve_bases(basis,suffix) 
   ! Resolve the basis sets for each atom -- by pointer assigning its basis to
   ! the element in "basis" which matches either the atoms .basis_label, or else
   ! matches a label constructed in a standard way, by joining the atom chemical
   ! symbol with the ":suffix" string.  
      basis :: VEC{BASIS}*
      suffix :: STR, optional
      a :: INT
      do a = 1,.n_atom
         self(a).resolve_basis(basis,suffix)
      end
   end

   resolve_bases(basis,suffix) 
   ! Resolve the basis sets for each atom -- by pointer assigning its basis to
   ! the element in "basis" which matches either the atoms .basis_label, or else
   ! matches a label constructed in a standard way, by joining the atom chemical
   ! symbol with the ":suffix" string.  
      basis :: VEC{SLATERBASIS}*
      suffix :: STR, optional
      a :: INT
      do a = 1,.n_atom
         self(a).resolve_basis(basis,suffix)
      end
   end

   resolve_bases(basis,suffix) 
   ! Resolve the basis sets for each atom -- by pointer assigning its basis to
   ! the element in "basis" which matches either the atoms .basis_label, or else
   ! matches a label constructed in a standard way, by joining the atom chemical
   ! symbol with the ":suffix" string.  
      basis :: VEC{COPPENSBASIS}*
      suffix :: STR, optional
      a :: INT
      do a = 1,.n_atom
         self(a).resolve_basis(basis,suffix)
      end
   end

!  **************
!  Output methods
!  **************

   put
   ! Output atom information, without full basis set info
      stdout.flush
      stdout.show("Chemical Formula       =",trim(.chemical_formula))
      stdout.show("No of atoms            =",size(self))
      stdout.show("No of electrons        =",.n_e)
      if (.has_residue_codes) then; .put_mm_info
      else;                         .put_coord_info
      end
      if (.has_restraints)          .put_restraint_atoms
   end

   put_coord_info(all)
   ! Output atom coordinate information, including bond lengths, angles,
   ! without full basis set info
     all :: BIN, IN, optional
      .put_coordinates
      .put_bond_length_table(all)
      .put_bond_angle_table(all)
      .put_torsion_angle_table(all)
   end

   put_coordinates 
   ! Output the atom coordinate information
      has_basis_labels :: BIN
      has_basis_labels = .bases_are_all_labeled &
                      OR .coppensbases_are_all_labeled &
                      OR .slaterbases_are_all_labeled
      if (has_basis_labels) then
        .put_coords_with_basis_label
        .put_coords_with_basis_label(angstrom=TRUE)
      else
        .put_coords_without_basis_label
        .put_coords_without_basis_label(angstrom=TRUE)
      end
   end


   put_coords_with_basis_label(angstrom) ::: private
   ! Output the atom coordinates information, including the basis label,
   ! but not the entire basis set.
      self :: target
      angstrom :: BIN, optional
   ENSURE(.bases_are_all_labeled OR .coppensbases_are_all_labeled OR .slaterbases_are_all_labeled,"no bases")
      i :: INT
      label :: STR
      in_angstrom,coppens,slater,gaussian :: BIN
      in_angstrom = FALSE
      if (present(angstrom)) in_angstrom = angstrom
      gaussian = .bases_are_all_labeled
      slater = .slaterbases_are_all_labeled
      coppens = .coppensbases_are_all_labeled
      WARN_IF(gaussian AND slater,"there are gaussian and slater bases")
      WARN_IF(gaussian AND coppens,"there are gaussian and coppens bases")
      WARN_IF(slater AND coppens,"there are slater and coppens bases")
      stdout.flush
      if (NOT in_angstrom) then
      stdout.text("Atom list information:")
      else
      stdout.text("Atom list information (in angstrom):")
      end
      stdout.dash(int_fields=3,real_fields=4)
      stdout.put("#",int_width=TRUE)
      stdout.put("ID",int_width=TRUE)
      stdout.put("Z",int_width=TRUE)
      stdout.put("x")
      stdout.put("y")
      stdout.put("z")
      stdout.put("Basis")
      stdout.flush
      stdout.dash(int_fields=3,real_fields=4)
      do i = 1,.n_atom
         stdout.put(i)
         stdout.put(self(i).label,int_width=TRUE)
         stdout.put(self(i).atomic_number)
         if (NOT in_angstrom) then
         stdout.put(self(i).pos(1))
         stdout.put(self(i).pos(2))
         stdout.put(self(i).pos(3))
         else
         stdout.put(self(i).pos(1).to_units("angstrom"))
         stdout.put(self(i).pos(2).to_units("angstrom"))
         stdout.put(self(i).pos(3).to_units("angstrom"))
         end
         if (slater) then;       label = self(i).slaterbasis.label
         else if (coppens) then; label = self(i).coppensbasis.label
         else;                   label = self(i).basis.label
         end
         stdout.put(label)
         stdout.flush
      end
      stdout.dash(int_fields=3,real_fields=4)
   end

   put_coords_without_basis_label(angstrom) ::: private
   ! Output the atom coordinates information, without basis set label
      angstrom :: BIN, optional
      i :: INT
      in_angstrom,coppens :: BIN
      in_angstrom = FALSE
      if (present(angstrom)) in_angstrom = angstrom
      stdout.flush
      if (NOT in_angstrom) then
      stdout.text("Atom list information:")
      else
      stdout.text("Atom list information (in angstrom):")
      end
      stdout.dash(int_fields=3,real_fields=3)
      stdout.put("#",int_width=TRUE)
      stdout.put("ID",int_width=TRUE)
      stdout.put("Z",int_width=TRUE)
      stdout.put("x")
      stdout.put("y")
      stdout.put("z")
      stdout.flush
      stdout.dash(int_fields=3,real_fields=3)
      do i = 1,.n_atom
         stdout.put(i)
         stdout.put(self(i).label,int_width=TRUE)
         stdout.put(self(i).atomic_number)
         if (NOT in_angstrom) then
         stdout.put(self(i).pos(1))
         stdout.put(self(i).pos(2))
         stdout.put(self(i).pos(3))
         else
         stdout.put(self(i).pos(1).to_units("angstrom"))
         stdout.put(self(i).pos(2).to_units("angstrom"))
         stdout.put(self(i).pos(3).to_units("angstrom"))
         end
         stdout.flush
      end
      stdout.dash(int_fields=3,real_fields=3)
   end

   put_pdb(pdbfile)
   ! Output the atoms in pdb file format to "pdbfile" (blame Birger)
      pdbfile :: TEXTFILE*

      i,in,ic,ip,len_code,len_pnum,element_len :: INT
      label,element_name,residue_number,code,three_letter_code,position_symbol,position_number :: STR

      ! Save PDB settings for later
      pdbfile.save

      ! Loop over atoms
      do i = 1,.n_atom

         ! The ATOM number
         pdbfile.put("ATOM",width=4)
         pdbfile.put(i,width=7)

         ! Start to analyse the atom label 
         label = self(i).label
       ! print *,"label =",trim(label)

         ! Get start of atom index, hence the element name
         label.replace_all("(","")
         label.replace_all(")","")
         in = label.index_of_digit  
         DIE_IF(in==0,"no atom index in atom label: "//trim(label))
         ! Get rid of left bracket
         element_name = label(1:in-1)
       ! print *,"in =",in
       ! print *,"element_name =",trim(element_name)

         ! Get start of residue code, hence the residue number
         ic = label(in:).index_of_nondigit 
         DIE_IF(ic==0,"no residue code in atom label: "//trim(label))
         ic = ic + in - 1
         residue_number = label(in:ic-1)
       ! print *,"ic =",ic
       ! print *,"residue_number =",trim(residue_number)

         ! Get start of position symbol, hence residue code, position
         ! symbol and position number (could be blank)
         ! position symbols are alpha (a)
         ! position symbols are beta (b)
         ! position symbols are gamma (c,g)
         ! position symbols are delta (d)
         ! position symbols are epsilon (e)
         ! position symbols are nu (n)
         ! position symbols are terminal (t)
         ! position symbols are zeta (z)
         ! position symbols are peptide bond (')

         ip = label(ic:).index_of_character_in("'abcgdentz")
         if (ip/=0) then
            ip = ip + ic - 1
            code = label(ic:ip-1)
            position_symbol = label(ip:ip)
            position_number = label(ip+1:)
         else
            code = label(ic:)
            position_symbol = " "
            position_number = " "
         end
       ! print *,"ip =",ip
       ! print *,"code =",trim(code)
       ! print *,"position_symbol =",trim(position_symbol)
       ! print *,"position_number =",trim(position_number)

         ! Do some checks ...
         len_code = len_trim(code)
         DIE_IF(NOT (len_code==1 OR len_code==3),"residue code must be 1 or 3 characters: "//trim(label))
         len_pnum = len_trim(position_number)
         DIE_IF(len_pnum>1,"position number code cannot exceed 1 character: "//trim(label))
         if (position_number/=" ") then
         DIE_IF(NOT position_number.is_included_in("123456789"),"unknown position number: "//trim(label))
         end

         ! If the code is a one letter code, convert it
         if (len_code == 3) then
            select case (code)
               case ("UNK","AIB","IVA","WAT","EOH","TER")
               case ("ALA","ARG","GLN","GLY","VAL","LEU","ILE","SER","THR","CYS")
               case ("MET","PRO","HIS","ASN","GLU","ASP","PHE","TRP","TYR","LYS")
               case ("ACD","HSE","ACE","HYP","HYL","ALB","ALI","ABU","ARO","ORN")
               case ("ASX","PCA","BAS","SAR","BET","TAU","FOR","THY","GLX","HET")
               case default; DIE("unknown three letter residue code: "//trim(code))
            end 
            three_letter_code = code
         else if (len_code == 1) then
            select case (code)
               case ("X"); three_letter_code = "UNK"
               case ("O"); three_letter_code = "WAT"
               case ("B"); three_letter_code = "EOH"
               case ("U"); three_letter_code = "AIB"
               case ("A"); three_letter_code = "ALA"
               case ("R"); three_letter_code = "ARG"
               case ("Q"); three_letter_code = "GLN"
               case ("G"); three_letter_code = "GLY"
               case ("V"); three_letter_code = "VAL"
               case ("L"); three_letter_code = "LEU"
               case ("I"); three_letter_code = "ILE"
               case ("J"); three_letter_code = "IVA"
               case ("S"); three_letter_code = "SER"
               case ("T"); three_letter_code = "THR"
               case ("C"); three_letter_code = "CYS"
               case ("M"); three_letter_code = "MET"
               case ("P"); three_letter_code = "PRO"
               case ("H"); three_letter_code = "HIS"
               case ("N"); three_letter_code = "ASN"
               case ("E"); three_letter_code = "GLU"
               case ("D"); three_letter_code = "ASP"
               case ("F"); three_letter_code = "PHE"
               case ("W"); three_letter_code = "TRP"
               case ("Y"); three_letter_code = "TYR"
               case ("K"); three_letter_code = "LYS"
               case ("Z"); three_letter_code = "TER"
               case default; DIE("unknown one letter residue code: "//trim(code))
            end 
         else
            DIE("code must be one or three characters")
         end 

         ! Print the new atom label from one read in
         pdbfile.tab(width=1)
         if (position_number==" ") then
         pdbfile.tab(width=1)
         else
         pdbfile.put(position_number,width=1,left_justify=TRUE)
         end
         pdbfile.put(element_name,width=len_trim(element_name),left_justify=TRUE)
         if (position_symbol.is_included_in("abcgdenz")) then 
         position_symbol.to_upper_case
         pdbfile.put(position_symbol,width=1,left_justify=TRUE)
         pdbfile.tab(width=1)
         else
         pdbfile.tab(width=2)
         end
         element_len = len_trim(element_name)
         if (element_len == 1) then
         pdbfile.tab(width=1)
         end
         pdbfile.put(three_letter_code,width=3,left_justify=TRUE)
         pdbfile.tab(width=2)
         pdbfile.put(residue_number,width=4)
         pdbfile.tab(width=4)
         pdbfile.set_real_precision(3)
         pdbfile.set_real_width(8)
         pdbfile.put(self(i).pos(1).to_units("angstrom"))
         pdbfile.put(self(i).pos(2).to_units("angstrom"))
         pdbfile.put(self(i).pos(3).to_units("angstrom"))
         pdbfile.set_real_precision(2)
         pdbfile.set_real_width(6)
         pdbfile.put(self(i).site_occupancy)
         pdbfile.put(8*PI*PI*self(i).U_iso)
         pdbfile.put(self(i).chemical_symbol,width=12)
         pdbfile.flush

         ! Print Anisotropic U's if non-hydrogen
         if (self(i).atomic_number==1) cycle

         pdbfile.put("ANISOU",width=6)
         pdbfile.put(i,width=5)
         pdbfile.tab(width=1)
         if (position_number==" ") then
         pdbfile.tab(width=1)
         else
         pdbfile.put(position_number,width=1,left_justify=TRUE)
         end
         pdbfile.put(element_name,width=2,left_justify=TRUE)
         pdbfile.tab(width=2)
         pdbfile.put(three_letter_code,width=3,left_justify=TRUE)
         pdbfile.tab(width=2)
         pdbfile.put(residue_number,width=4)
         pdbfile.tab(width=2)
         pdbfile.set_int_width(7)

         ! Order for the ADP's .......
         ! u11 u22 u33 u12 u13 u23 XD-format
         ! u11 u22 u33 u12 u23 u13 SHELX
         ! u11 u22 u33 u13 u23 u12 PDB-format
         pdbfile.put(nint(self(i).thermal_tensor(1,1).to_units("angstrom^2")*10000))
         pdbfile.put(nint(self(i).thermal_tensor(2,2).to_units("angstrom^2")*10000))
         pdbfile.put(nint(self(i).thermal_tensor(3,3).to_units("angstrom^2")*10000))
         pdbfile.put(nint(self(i).thermal_tensor(1,3).to_units("angstrom^2")*10000))
         pdbfile.put(nint(self(i).thermal_tensor(2,3).to_units("angstrom^2")*10000))
         pdbfile.put(nint(self(i).thermal_tensor(1,2).to_units("angstrom^2")*10000))

         ! Last thing on line, chemical symbol
         pdbfile.put(self(i).chemical_symbol,width=8)

         ! Flush the line
         pdbfile.flush 

      end
      pdbfile.unsave
   end


   put_cif(ciffile)
   ! Output the atoms in pdb file format to "ciffile"
      ciffile :: TEXTFILE*

      i :: INT
      label :: STR

      ! Save CIF settings for later
      ciffile.save
      ciffile.set_real_precision(4)
      ciffile.set_real_width(8)


      ciffile.text("loop_")
      ciffile.text("_atom_site_label")
      ciffile.text("_atom_site_fract_x")
      ciffile.text("_atom_site_fract_y")
      ciffile.text("_atom_site_fract_z")
      ciffile.text("_atom_site_occupancy")
      ! Loop over atoms
      do i = 1,.n_atom
         ciffile.put(self(i).label.trim,width=len_trim(self(i).label))
         ciffile.put(self(i).pos(1))
         ciffile.put(self(i).pos(2))
         ciffile.put(self(i).pos(3))
         ciffile.put(self(i).site_occupancy)
         ciffile.flush
      end

      ciffile.flush 
      ciffile.flush 

      ciffile.text("loop_")
      ciffile.text("_atom_site_aniso_label")
      ciffile.text("_atom_site_aniso_U_11")
      ciffile.text("_atom_site_aniso_U_22")
      ciffile.text("_atom_site_aniso_U_33")
      ciffile.text("_atom_site_aniso_U_12")
      ciffile.text("_atom_site_aniso_U_13")
      ciffile.text("_atom_site_aniso_U_23")
      do i = 1,.n_atom
         ! Order for the ADP's .......
         ! u11 u22 u33 u12 u13 u23 XD-format
         ! u11 u22 u33 u12 u23 u13 SHELX
         ciffile.put(self(i).label.trim,width=len_trim(self(i).label))
         ciffile.put(self(i).thermal_tensor(1,1).to_units("angstrom^2"))
         ciffile.put(self(i).thermal_tensor(2,2).to_units("angstrom^2"))
         ciffile.put(self(i).thermal_tensor(3,3).to_units("angstrom^2"))
         ciffile.put(self(i).thermal_tensor(1,2).to_units("angstrom^2"))
         ciffile.put(self(i).thermal_tensor(1,3).to_units("angstrom^2"))
         ciffile.put(self(i).thermal_tensor(2,3).to_units("angstrom^2"))
      ciffile.flush 
      end

      ciffile.flush 
      ciffile.unsave
   end

   put_cif_with_errors(ciffile,delta_p)
   ! Output the atoms in pdb file format to "ciffile"
      ciffile :: TEXTFILE*
      delta_p :: VEC{REAL}

      i,n,e,k :: INT
      p,d :: REAL
      label :: STR

      ! Save CIF settings for later
      ciffile.save
      ciffile.set_real_precision(4)
      ciffile.set_real_width(12)


      ciffile.text("loop_")
      ciffile.text("_atom_site_label")
      ciffile.text("_atom_site_fract_x")
      ciffile.text("_atom_site_fract_y")
      ciffile.text("_atom_site_fract_z")
      ciffile.text("_atom_site_occupancy")
      ! Loop over atoms
      k = -9
      do i = 1,.n_atom
         k = k + 9
         ciffile.put(self(i).label.trim,width=len_trim(self(i).label))
         .get_precision_and_error(self(i).pos(1),delta_p(k+1),p,d,n,e)
         ciffile.put(p,precision=n,width=(ciffile.real_width-3))
         ciffile.put("("//trim(e.to_str)//")",width=3)

         .get_precision_and_error(self(i).pos(2),delta_p(k+2),p,d,n,e)
         ciffile.put(p,precision=n,width=(ciffile.real_width-3))
         ciffile.put("("//trim(e.to_str)//")",width=3)

         .get_precision_and_error(self(i).pos(3),delta_p(k+3),p,d,n,e)
         ciffile.put(p,precision=n,width=(ciffile.real_width-3))
         ciffile.put("("//trim(e.to_str)//")",width=3)
         ciffile.put(self(i).site_occupancy)
         ciffile.flush         
      end

      ciffile.text("loop_")
      ciffile.text("_atom_site_aniso_label")
      ciffile.text("_atom_site_aniso_U_11")
      ciffile.text("_atom_site_aniso_U_22")
      ciffile.text("_atom_site_aniso_U_33")
      ciffile.text("_atom_site_aniso_U_12")
      ciffile.text("_atom_site_aniso_U_13")
      ciffile.text("_atom_site_aniso_U_23")
      k = -9
      do i = 1,.n_atom
         ! Order for the ADP's .......
         ! u11 u22 u33 u12 u13 u23 XD-format
         ! u11 u22 u33 u12 u23 u13 SHELX
         k = k + 9
         ciffile.put(self(i).label.trim,width=len_trim(self(i).label))
         .get_precision_and_error(self(i).thermal_tensor(1,1),delta_p(k+4),p,d,n,e,angstrom2=TRUE)
         ciffile.put(p,precision=n,width=(ciffile.real_width-3))
         ciffile.put("("//trim(e.to_str)//")",width=3)

         .get_precision_and_error(self(i).thermal_tensor(2,2),delta_p(k+5),p,d,n,e,angstrom2=TRUE)
         ciffile.put(p,precision=n,width=(ciffile.real_width-3))
         ciffile.put("("//trim(e.to_str)//")",width=3)

         .get_precision_and_error(self(i).thermal_tensor(3,3),delta_p(k+6),p,d,n,e,angstrom2=TRUE)
         ciffile.put(p,precision=n,width=(ciffile.real_width-3))
         ciffile.put("("//trim(e.to_str)//")",width=3)

         .get_precision_and_error(self(i).thermal_tensor(1,2),delta_p(k+7),p,d,n,e,angstrom2=TRUE)
         ciffile.put(p,precision=n,width=(ciffile.real_width-3))
         ciffile.put("("//trim(e.to_str)//")",width=3)

         .get_precision_and_error(self(i).thermal_tensor(1,3),delta_p(k+8),p,d,n,e,angstrom2=TRUE)
         ciffile.put(p,precision=n,width=(ciffile.real_width-3))
         ciffile.put("("//trim(e.to_str)//")",width=3)

         .get_precision_and_error(self(i).thermal_tensor(2,3),delta_p(k+9),p,d,n,e,angstrom2=TRUE)
         ciffile.put(p,precision=n,width=(ciffile.real_width-3))
         ciffile.put("("//trim(e.to_str)//")",width=3)

      ciffile.flush 
      end

      ciffile.flush 
      ciffile.unsave
   end

   get_precision_and_error(value,error,p,d,n,e,angstrom,angstrom2) ::: get_from_(CRYSTAL), private
   ! Get the precision and error for CIF style error output
   end

   list_symbol(a) result (res) ::: private
   ! Return the chemical symbol and atomvec number of atom "a".
   ! e.g., "Na (3)"
     a :: INT
     res :: STR
     res =  trim(self(a).chemical_symbol) // " (" // trim(a.to_str) // ")"
   end

   put_bond_length_table(all) ::: private
   ! Output the bond length table. If "all" is present and true, put out all
   ! possible bond lengths
      all :: BIN, IN, optional
      print_all_bonds :: BIN
      atom_kind :: VEC{VEC_{INT}}*
      n_k,k,l,kk,ll,a,b :: INT
      symbol_a,symbol_b :: STR
      r_ab :: REAL
      print_all_bonds = FALSE
      if (present(all)) print_all_bonds = all
      if (.n_atom<2) return
      if (.no_of_bonds<1 AND NOT print_all_bonds) return
      .make_atom_kind_list(atom_kind)
      n_k = size(atom_kind)
      stdout.flush
      stdout.text("Bond lengths:",flush=2)
      stdout.show("No. of independent bonds  =",.no_of_bonds)
      stdout.flush
      stdout.dash(int_fields=2,real_fields=2)
      stdout.put("Atom_a",int_width=TRUE)
      stdout.put("Atom_b",int_width=TRUE)
      stdout.put("r_ab/au")
      stdout.put("r_ab/Angstrom",flush=1)
      stdout.dash(int_fields=2,real_fields=2)
      do k = 1,n_k
      do kk = 1,size(atom_kind(k).element)
         a = atom_kind(k).element(kk)
         symbol_a = .list_symbol(a)
         do l = 1,n_k
         do ll = 1,size(atom_kind(l).element)
            b = atom_kind(l).element(ll)
            symbol_b = .list_symbol(b)
            if (a>=b) cycle
            if (NOT print_all_bonds AND NOT .bonded(a,b)) cycle
            r_ab = .bond_distance(a,b)
            stdout.put(symbol_a,int_width=TRUE)
            stdout.put(symbol_b,int_width=TRUE)
            stdout.put(r_ab)
            stdout.put(r_ab*ANGSTROM_PER_BOHR)
            stdout.flush
         end
         end
      end
      end
      atom_kind.destroy
      stdout.dash(int_fields=2,real_fields=2)
   end

   put_bond_angle_table(all) ::: private
   ! Output the bond length table. If "all" is present and true, put out all
   ! possible angles
      all :: BIN, IN, optional
      print_all_angles :: BIN
      atom_kind :: VEC{VEC_{INT}}*
      n_k,k,l,m,kk,ll,mm,a,b,c :: INT
      symbol_a,symbol_b,symbol_c :: STR
      theta_abc :: REAL
      print_all_angles = FALSE
      if (present(all)) print_all_angles = all
      if (.n_atom<3 ) return
      if (.no_of_angles<1 AND NOT print_all_angles) return
      if (.no_of_angles>100 AND NOT print_all_angles) return
      .make_atom_kind_list(atom_kind)
      n_k = size(atom_kind)
      stdout.flush
      stdout.text("Bond angles (b the central atom):",flush=2)
      stdout.show("No. of independent angles =",.no_of_angles)
      stdout.flush
      stdout.dash(int_fields=3,real_fields=1)
      stdout.put("Atom_a",int_width=TRUE)
      stdout.put("Atom_b",int_width=TRUE)
      stdout.put("Atom_c",int_width=TRUE)
      stdout.put("Angle_abc/degrees",flush=1)
      stdout.dash(int_fields=3,real_fields=1)
      do k = 1,n_k
      do kk = 1,size(atom_kind(k).element)
         a = atom_kind(k).element(kk)
         symbol_a = .list_symbol(a)
         do l = 1,n_k
         do ll = 1,size(atom_kind(l).element)
            b = atom_kind(l).element(ll)
            if (a==b) cycle
            if (NOT print_all_angles AND NOT .bonded(a,b)) cycle
            symbol_b = .list_symbol(b)
            do m = 1,n_k
            do mm = 1,size(atom_kind(m).element)
               c = atom_kind(m).element(mm)
               if (b==c OR c==a) cycle
               if (NOT print_all_angles AND NOT .bonded(b,c)) cycle
               symbol_c = .list_symbol(c)
               theta_abc = .bond_angle(a,b,c,degrees=TRUE)
               stdout.put(symbol_a,int_width=TRUE)
               stdout.put(symbol_b,int_width=TRUE)
               stdout.put(symbol_c,int_width=TRUE)
               stdout.put(theta_abc)
               stdout.flush
            end
            end
         end
         end
      end
      end
      atom_kind.destroy
      stdout.dash(int_fields=3,real_fields=1)
   end

   put_torsion_angle_table(all) ::: private
   ! Output the torsion angle table. If "all" is present and true, put out all
   ! possible angles
      all :: BIN, IN, optional
      print_all_angles,abc_colinear,bcd_colinear :: BIN
      atom_kind :: VEC{VEC_{INT}}*
      n_k,k,l,m,n,kk,ll,mm,nn,a,b,c,d :: INT
      symbol_a,symbol_b,symbol_c,symbol_d :: STR
      theta_abcd :: REAL
      print_all_angles = FALSE
      if (present(all)) print_all_angles = all
      if (.n_atom<4) return
      if (.no_of_torsion_angles<1 AND NOT print_all_angles) return
      if (.no_of_angles>100 AND NOT print_all_angles) return
      .make_atom_kind_list(atom_kind)
      n_k = size(atom_kind)
      stdout.flush
      stdout.text("Torsion angles (looking down b->c):",flush=2)
      stdout.show("No. of independent angles =",.no_of_torsion_angles)
      stdout.flush
      stdout.dash(int_fields=4,real_fields=1)
      stdout.put("Atom_a",int_width=TRUE)
      stdout.put("Atom_b",int_width=TRUE)
      stdout.put("Atom_c",int_width=TRUE)
      stdout.put("Atom_d",int_width=TRUE)
      stdout.put("Angle_abcd/degrees",flush=1)
      stdout.dash(int_fields=4,real_fields=1)
      do k = 1,n_k
      do kk = 1,size(atom_kind(k).element)
         a = atom_kind(k).element(kk)
         symbol_a = .list_symbol(a)
         do l = 1,n_k
         do ll = 1,size(atom_kind(l).element)
            b = atom_kind(l).element(ll)
            if (a==b) cycle
            if (NOT print_all_angles AND NOT .bonded(a,b)) cycle
            symbol_b = .list_symbol(b)
            do m = 1,n_k
            do mm = 1,size(atom_kind(m).element)
               c = atom_kind(m).element(mm)
               if (a==c OR b==c) cycle
               if (NOT print_all_angles AND NOT .bonded(b,c)) cycle
               symbol_c = .list_symbol(c)
               do n = 1,n_k
               do nn = 1,size(atom_kind(n).element)
                  d = atom_kind(n).element(nn)
                  if (NOT print_all_angles AND NOT .bonded(c,d)) cycle
                  if (a==d OR b==d OR c==d) cycle
                  symbol_d = .list_symbol(d)
                  theta_abcd = .torsion_angle(a,b,c,d,abc_colinear, &
                                            bcd_colinear,degrees=TRUE)
                  stdout.put(symbol_a,int_width=TRUE)
                  stdout.put(symbol_b,int_width=TRUE)
                  stdout.put(symbol_c,int_width=TRUE)
                  stdout.put(symbol_d,int_width=TRUE)
                  if (abc_colinear AND bcd_colinear) then
                     stdout.put("a-b-c-d colinear")
                  else if (abc_colinear) then
                     stdout.put("a-b-c colinear")
                  else if (bcd_colinear) then
                     stdout.put("b-c-d colinear")
                  else
                     stdout.put(theta_abcd)
                  end
                  stdout.flush
               end
               end
            end
            end
         end
         end
      end
      end
      atom_kind.destroy
      stdout.dash(int_fields=4,real_fields=1)
   end

   put_thermal_tensors(crystal)
   ! Output the thermal tensors. If present, "crystal" is used to change the
   ! thermal tensors to the crystal axis system and then print them out; the
   ! thermal tensors are changed back afterwards.
      crystal :: CRYSTAL, IN, optional
   ENSURE(.has_cartesian_thermal_axes,"thermals tensors are not in cartesian system")
      if (.has_U_iso) then
         stdout.flush
         stdout.text("Isotropic thermal factors U_iso in cartesian coordinates/(bohr^2):")
         .put_U_iso_helper
         stdout.text("Isotropic thermal factors U_iso in cartesian coordinates/(angstrom^2):")
         .put_U_iso_helper(units="angstrom^2")
      end
      if (.has_thermal_tensors) then
         stdout.flush
         stdout.text("Thermal tensors (ADP's) in cartesian coordinates/(bohr^2):")
         .put_thermal_tensors_helper
         stdout.text("Thermal tensors (ADP's) in cartesian coordinates/(angstrom^2):")
         .put_thermal_tensors_helper(units="angstrom^2")
         if (present(crystal)) then
            .change_thermal_axis_system_to("crystal",crystal)
            stdout.text("Thermal tensors in crystal axis system/(angstrom^2):")
            .put_thermal_tensors_helper(units="angstrom^2")
            .change_thermal_axis_system_to("cartesian",crystal)
         end
      end
   end

   put_U_iso_helper(units) ::: private
   ! Output the U_iso values -- helper routine. 
      units :: STR, optional
      i :: INT
      fac :: REAL
      fac = ONE
      if (present(units)) fac.convert_to(units)
      stdout.flush
      stdout.dash(int_fields=1,real_fields=1)
      stdout.put("Atom",int_width=TRUE)
      stdout.put("U_iso")
      stdout.flush
      stdout.dash(int_fields=1,real_fields=1)
      do i = 1,size(self)
        stdout.put(i)
        stdout.put(fac*self(i).U_iso)
        stdout.flush
      end
      stdout.dash(int_fields=1,real_fields=1)
      stdout.flush
   end

   put_thermal_tensors_helper(units) ::: private
   ! Output the thermal tensors -- helper routine. 
      units :: STR, optional
      i :: INT
      stdout.flush
      stdout.dash(int_fields=1,real_fields=6)
      stdout.put("Atom",int_width=TRUE)
      stdout.put("U11")
      stdout.put("U22")
      stdout.put("U33")
      stdout.put("U12")
      stdout.put("U13")
      stdout.put("U23")
      stdout.flush
      stdout.dash(int_fields=1,real_fields=6)
      do i = 1,size(self)
        stdout.put(i)
        self(i).put_thermal_tensor(units)
        stdout.flush
      end
      stdout.dash(int_fields=1,real_fields=6)
      stdout.flush
   end

   put_mm_info ::: private
   ! Output a table of the residue names, sequence numbers, charges, but
   ! no basis sets. This is in PDB input format.
      i :: INT
      stdout.flush
      stdout.text("Residue information:",flush=1)
      stdout.dash(width=42)
      stdout.put(" ",width=4)
      stdout.put("#",width=7)
      stdout.put("Name",width=4)
      stdout.put("Residue",width=5)
      stdout.put("Sequence",width=6)
      stdout.put("x",width=3)
      stdout.put("y",width=3)
      stdout.put("z",width=3)
      stdout.put("Charge",width=3)
      stdout.put("Element",width=4)
      stdout.flush
      stdout.dash(width=42)
      stdout.dash(int_fields=6,real_fields=5)
      do i = 1,size(self)
         stdout.put("ATOM",width=4)
         stdout.put(i,width=7)
         stdout.put(self(i).residue_atom_code,width=4)
         stdout.put(self(i).residue_code,width=5)
         stdout.put(self(i).residue_sequence_number,width=6)
         stdout.put(self(i).pos(1),width=8,precision=3)
         stdout.put(self(i).pos(2),width=8,precision=3)
         stdout.put(self(i).pos(3),width=8,precision=3)
         stdout.put(self(i).mm_charge,width=7,precision=3)
         stdout.put(self(i).label,width=4)
         stdout.flush
      end
      stdout.dash(width=42)
   end

   put_restraint_atoms ::: private
   ! Output a table of the atom names, residue names and restraint atom
   ! information
      i :: INT
      stdout.text("Restraint atoms:",flush=1)
      stdout.save
      stdout.set_int_width(9)
      stdout.set_real_width(9)
      stdout.set_real_precision(3)
      stdout.dash(int_fields=5,real_fields=3)
      stdout.put(" ",int_width=TRUE)
      stdout.put("Atom",int_width=TRUE)
      stdout.put("Residue",int_width=TRUE)
      stdout.put("Sequence")
      stdout.put("x")
      stdout.put("y")
      stdout.put("z")
      stdout.put("Force",int_width=TRUE)
      stdout.flush
      stdout.dash(int_fields=5,real_fields=3)
      do i = 1,size(self)
         if (self(i).restraining_force_constant.is_zero) cycle
         stdout.put(" ",int_width=TRUE)
         stdout.put(self(i).residue_atom_code,int_width=TRUE)
         stdout.put(self(i).residue_code,int_width=TRUE)
         stdout.put(self(i).residue_sequence_number)
         stdout.put(self(i).restraining_position(1))
         stdout.put(self(i).restraining_position(2))
         stdout.put(self(i).restraining_position(3))
         stdout.put(self(i).restraining_force_constant)
         stdout.flush
      end
      stdout.dash(int_fields=5,real_fields=3)
      stdout.unsave
   end

   put_principal_axes
   ! Put out the principal axis information
      pm,pn :: VEC{REAL}(3)
      pa :: MAT{REAL}(3,3)
      reorder :: BIN
      .make_principal_moments(pm,pa,reorder)
      pn = pm/maxval(pm) ! normalised moments
      stdout.flush
      stdout.text("Principal moments and axes:")
      stdout.flush
      stdout.show("Centre of mass    =",.centre_of_mass)
      stdout.show("Principal moments =",pm)
      stdout.show("Spherical top?    =",.is_spherical_top(pn))
      stdout.show("Symmetric top?    =",.is_symmetric_top(pn))
      stdout.show("Prolate top?      =",.is_prolate_top(pn))
      stdout.show("Oblate top?       =",.is_oblate_top(pn))
      stdout.flush
      stdout.text("Principal axes:")
      stdout.put(pa)
   end

   put_vrml(out)
   ! Put vrml version of the atomvec to the file in object "out".
     out :: TEXTFILE
     out.set_real_precision(5)
     out.set_real_width(12)

     stdout.text("Generating VRML atoms...")
     .put_vrml_header(out)
     .put_vrml_atoms(out)
     .put_vrml_bonds(out)
     stdout.text("done VRML atoms")
     stdout.flush
   end

   put_vrml_header(out) ::: private
   ! Put vrml header, and prototype bond and spheres, to the file.
     out :: TEXTFILE
     out.text("PROTO Atom " // achar(91))
     out.text("   field SFColor col 1 0 0")
     out.text("   field SFFloat rad 1")
     out.text("   field SFVec3f pos 0 0 0")
     out.text(achar(93))
     out.text("{")
     out.text("   Transform {")
     out.text("      translation IS pos")
     out.text("      children " // achar(91))
     out.text("         Shape {")
     out.text("            appearance Appearance {")
     out.text("               material Material {")
     out.text("                  diffuseColor IS col")
     out.text("               }")
     out.text("            }")
     out.text("            geometry Sphere {")
     out.text("              radius IS rad")
     out.text("            }")
     out.text("         }")
     out.text("      " // achar(93))
     out.text("   }")
     out.text("}")
     out.flush
     out.text("PROTO Bond " // achar(91))
     out.text("   field SFColor col 1 0 0")
     out.text("   field SFFloat hgt 1")
     out.text("   field SFVec3f pos 0 0 0")
     out.text("   field SFRotation rot 1 0 0 0")
     out.text(achar(93))
     out.text("{")
     out.text("   Transform {")
     out.text("      translation IS pos")
     out.text("      rotation IS rot")
     out.text("      children " // achar(91))
     out.text("         Shape {")
     out.text("            appearance Appearance {")
     out.text("               material Material {")
     out.text("                 diffuseColor IS col")
     out.text("               }")
     out.text("            }")
     out.text("            geometry Cylinder {")
     out.text("               radius 0.304245979")
     out.text("               height IS hgt")
     out.text("               top    FALSE")
     out.text("               bottom FALSE")
     out.text("            }")
     out.text("         }")
     out.text("      " // achar(93))
     out.text("   }")
     out.text("}")
     out.flush
   end

   put_vrml_atoms(out) ::: private
   ! Put spheres for the atoms to view as vrml.
     out :: TEXTFILE
     colour :: VEC{REAL}(3)
     label :: STR(2)
     radius :: REAL
     n,Z :: INT
     do n=1,.n_atom
       Z = self(n).atomic_number
       label = self(n).chemical_symbol
       select case (label)
         case ("H ");                     colour = (/191,196,192/)
         case ("He","Rn");                colour = (/88,196,160/)
         case ("Li","Be","Na","Mg");      colour = (/144,149,145/)
         case ("B ");                     colour = (/187,4,187/)
         case ("C ");                     colour = (/160,80,17/)
         case ("N ","Al");                colour = (/126,169,176/)
         case ("Si");                     colour = (/192,172,137/)
         case ("S ");                     colour = (/192,165,0/)
         case ("Cl");                     colour = (/0,165,0/)
         case ("O ","Ca","Ge","As");      colour = (/192,12,8/)
         case ("Se","Br","Sr","I ");      colour = (/192,12,8/)
         case default;                    colour = (/192,148,25/)
       end
       select case (Z)
         case (1:54);     radius = self(n).bragg_slater_radius
         case default;    radius = 1.30d0
       end
       colour = colour / 256
       out.text("Atom {")
       out.text(" col " // trim(colour.to_str("f15.8",separator=", ")))
       out.text(" pos " // trim(self(n).pos.to_str("f15.8",separator=", ")))
       out.text(" rad " // trim(radius.to_str("f15.8")))
       out.text("}")
     end
   end

   put_vrml_bonds(out) ::: private
   ! Put bonds for the atoms to view as vrml.
     out :: TEXTFILE
     col_a,col_b,posa,posb,pos1,pos2,AB,centre :: VEC{REAL}(3)
     rot :: VEC{REAL}(4)
     hgta,hgtb,rada,radb :: REAL
     a,b :: INT
     do a = 1,.n_atom
       do b = 1,a-1
         if (.bonded(a,b)) then
           posa = self(a).pos
           posb = self(b).pos
           AB = posb-posa
           AB.normalise
           rada = self(a).bragg_slater_radius
           radb = self(b).bragg_slater_radius
           centre = HALF*(posa+rada*AB + posb-radb*AB)
           hgta = (centre - posa).norm
           hgtb = (posb - centre).norm
           pos1 = HALF*(centre + posa)
           pos2 = HALF*(centre + posb)
           rot(4) = PI
           rot(1:3) = AB + (/ZERO,ONE,ZERO/)
           rot(1:3).normalise
           select case (self(a).chemical_symbol)
             case ("H ");                     col_a = (/191,196,192/)
             case ("He","Rn");                col_a = (/88,196,160/)
             case ("Li","Be","Na","Mg");      col_a = (/144,149,145/)
             case ("B ");                     col_a = (/187,4,187/)
             case ("C ");                     col_a = (/160,80,17/)
             case ("N ","Al");                col_a = (/126,169,176/)
             case ("Si");                     col_a = (/192,172,137/)
             case ("S ");                     col_a = (/192,165,0/)
             case ("Cl");                     col_a = (/0,165,0/)
             case ("O ","Ca","Ge","As");      col_a = (/192,12,8/)
             case ("Se","Br","Sr","I ");      col_a = (/192,12,8/)
             case default;                    col_a = (/192,148,25/)
           end
           select case (self(b).chemical_symbol)
             case ("H ");                     col_b = (/191,196,192/)
             case ("He","Rn");                col_b = (/88,196,160/)
             case ("Li","Be","Na","Mg");      col_b = (/144,149,145/)
             case ("B ");                     col_b = (/187,4,187/)
             case ("C ");                     col_b = (/160,80,17/)
             case ("N ","Al");                col_b = (/126,169,176/)
             case ("Si");                     col_b = (/192,172,137/)
             case ("S ");                     col_b = (/192,165,0/)
             case ("Cl");                     col_b = (/0,165,0/)
             case ("O ","Ca","Ge","As");      col_b = (/192,12,8/)
             case ("Se","Br","Sr","I ");      col_b = (/192,12,8/)
             case default;                    col_b = (/192,148,25/)
           end
           col_a = col_a / 256
           col_b = col_b / 256
           out.text("Bond {")
           out.text(" col " //  trim(col_a.to_str("f15.8",separator=", ")))
           out.text(" pos " //  trim(pos1.to_str("f15.8",separator=", ")))
           out.text(" rot " //  trim(rot.to_str("f15.8",separator=", ")))
           out.text(" hgt " //  trim(hgta.to_str("f15.8")))
           out.text("}")
           out.text("Bond {")
           out.text(" col " //  trim(col_b.to_str("f15.8",separator=", ")))
           out.text(" pos " //  trim(pos2.to_str("f15.8",separator=", ")))
           out.text(" rot " //  trim(rot.to_str("f15.8",separator=", ")))
           out.text(" hgt " //  trim(hgtb.to_str("f15.8")))
           out.text("}")
         end
       end
     end
   end

   put_atom_groups
   ! Put out the atom group information
   ENSURE(.groups_defined,"no atom group information")
      n,i :: INT
      list :: VEC{VEC_{INT}}*
      .make_atom_group_lists(list)
      stdout.save
      stdout.set_int_width(3)
      stdout.set_n_fields(25)
      stdout.set_use_labels(FALSE)
      stdout.flush
      stdout.text("Atom group information")
      stdout.flush
      stdout.show("n_groups =",list.dim)
      do n = 1,list.dim
         stdout.put_text("group "// trim(n.to_str) //"  =")
         do i = 1,list(n).element.dim
            stdout.put(list(n).element(i))
         end
         stdout.flush
      end
      stdout.unsave
      list.destroy
   end

!   put_all_interpolators
!   ! Put out all the atom interpolators, up to a given atomic number.
!   ENSURE(.groups_defined,"no atom group information")
!      n,i :: INT
!      list :: VEC{VEC_{INT}}*
!      .make_interpolator
!      .make_atom_group_lists(list)
!      stdout.save
!      stdout.set_int_width(3)
!      stdout.set_n_fields(25)
!      stdout.set_use_labels(FALSE)
!      stdout.flush
!      stdout.text("Atom group information")
!      stdout.flush
!      stdout.show("n_groups =",list.dim)
!      do n = 1,list.dim
!         stdout.put_text("group "// trim(n.to_str) //"  =")
!         do i = 1,list(n).element.dim
!            stdout.put(list(n).element(i))
!         end
!         stdout.flush
!      end
!      stdout.unsave
!      list.destroy
!   end

!  *************************
!  Geometry unit conversions
!  *************************

   resolve_axis_system(crystal)
   ! Change the atom axis systems to cartesian, from crystal, if required.
      crystal :: CRYSTAL, IN
       a :: INT
      do a = 1,.n_atom
         self(a).resolve_axis_system(crystal)
      end
   end

   change_axis_system_to(axiskind,crystal)
   ! Change the axis system "axiskind" for all atoms to or from "cartesian" and
   ! "crystal".
      axiskind :: STR
      crystal :: CRYSTAL, IN
       a :: INT
      do a = 1,.n_atom
         self(a).change_axis_system_to(axiskind,crystal)
      end
   end

   change_thermal_axis_system_to(axiskind,crystal)
   ! Change the thermal tensor axis system "axiskind" for all atoms to or from
   ! "cartesian" and "crystal".
      axiskind :: STR
      crystal :: CRYSTAL, IN
       a :: INT
      do a = 1,.n_atom
         self(a).change_thermal_axis_system_to(axiskind,crystal)
      end
   end

   convert_from_angstrom
   ! Convert atom positions to A.U. from Angstroms
       a :: INT
      do a = 1,.n_atom
         self(a).pos = self(a).pos*BOHR_PER_ANGSTROM
      end
   end

   convert_to_angstrom
   ! Convert atom positions to Angstroms from A.U.
       a :: INT
      do a = 1,.n_atom
         self(a).pos = self(a).pos*ANGSTROM_PER_BOHR
      end
   end

   get_coordinates(coord)
   ! Get the atom coordinates in a matrix object "coord"
      coord :: MAT{REAL}
       a :: INT
      if (size(coord,1)==3) then
         do a = 1,.n_atom
            coord(:,a) = self(a).pos
         end
      else if (size(coord,2)==3) then
         do a = 1,.n_atom
            coord(a,:) = self(a).pos
         end
      else
         DIE("wrong shape for coordinate matrix")
      end
   end

   coordinates result (coord)
   ! Get the atom coordinates in a matrix object "coord"
      coord :: MAT{REAL}(3,.dim)
      a :: INT
      do a = 1,.n_atom
         coord(:,a) = self(a).pos
      end
   end

   transposed_coordinates result (coord)
   ! Get the atom coordinates in a matrix object "coord"
      coord :: MAT{REAL}(.dim,3)
      a :: INT
      do a = 1,.n_atom
         coord(a,:) = self(a).pos
      end
   end

   get_mean_neutron_numbers(NN)
   ! Get the atom coordinates in a matrix object "coord"
      NN :: VEC{REAL}
       a :: INT
      do a = 1,.n_atom
         NN(a) = self(a).mean_neutron_number
      end
   end

   extend_bond_lengths(z1,z2,factor) 
   ! Uniformly extend the bond lengths between all BONDED atoms with atomic
   ! number "z1" and "z2" by a "factor". Only the coordinates of the atoms with
   ! atomic number "z2" are altered.
      z1,z2 :: INT, IN
      factor :: REAL, IN
      atom_kind :: VEC{INT}*
      n_kind,z1_pos,z2_pos,z1_kind,z2_kind,a1,a2 :: INT
      r :: VEC{REAL}(3)
      if (all(self(:).atomic_number/=z1) OR all(self(:).atomic_number/=z2)) return
 ! stdout.text("A ...")
      z1_pos = self(:).atomic_number.index_of_value(z1)
      z2_pos = self(:).atomic_number.index_of_value(z2)
 ! stdout.text("B ...")
      atom_kind.create(.n_atom)
      .make_atom_kind_list(atom_kind,n_kind)
 ! stdout.text("C ...")
      z1_kind = atom_kind(z1_pos)
      z2_kind = atom_kind(z2_pos)
 ! stdout.show("z1      =",z1)
 ! stdout.show("z1_pos  =",z1_pos)
 ! stdout.show("z1_kind =",z1_kind)
 ! stdout.show("z2      =",z2)
 ! stdout.show("z2_pos  =",z2_pos)
 ! stdout.show("z2_kind =",z2_kind)
      do a1 = z1_pos,.n_atom
         if (atom_kind(a1)/=z1_kind) cycle
         do a2 = z2_pos,.n_atom
            if (atom_kind(a2)/=z2_kind) cycle
            if (NOT .bonded(a1,a2)) cycle
 ! stdout.show("bonded, a1, a2 =",[a1,a2])
 ! stdout.show("old a2 pos     =",self(a2).pos)
            r = self(a2).pos - self(a1).pos
            self(a2).pos = self(a1).pos + factor*r 
 ! stdout.show("NEW a2 pos     =",self(a2).pos)
         end
      end
      atom_kind.destroy
 ! stop
   end

   set_bond_lengths(z1,z2,length) 
   ! Uniformly set the bond lengths between all BONDED atoms with atomic number
   ! "z1" and "z2" to be "length". Only the coordinates of the atoms with atomic
   ! number "z2" are altered.
      z1,z2 :: INT, IN
      length :: REAL, IN
      atom_kind :: VEC{INT}*
      n_kind,z1_pos,z2_pos,z1_kind,z2_kind,a1,a2 :: INT
      r :: VEC{REAL}(3)
      if (all(self(:).atomic_number/=z1) OR all(self(:).atomic_number/=z2)) return
      z1_pos = self(:).atomic_number.index_of_value(z1)
      z2_pos = self(:).atomic_number.index_of_value(z2)
      atom_kind.create(.n_atom)
      .make_atom_kind_list(atom_kind,n_kind)
      z1_kind = atom_kind(z1_pos)
      z2_kind = atom_kind(z2_pos)
 ! stdout.show("z1      =",z1)
 ! stdout.show("z1_pos  =",z1_pos)
 ! stdout.show("z1_kind =",z1_kind)
 ! stdout.show("z2      =",z2)
 ! stdout.show("z2_pos  =",z2_pos)
 ! stdout.show("z2_kind =",z2_kind)
      do a1 = z1_pos,.n_atom
         if (atom_kind(a1)/=z1_kind) cycle
         do a2 = z2_pos,.n_atom
            if (atom_kind(a2)/=z2_kind) cycle
            if (NOT .bonded(a1,a2)) cycle
 ! stdout.show("bonded, a1, a2 =",[a1,a2])
 ! stdout.show("old a2 pos     =",self(a2).pos)
            r = self(a2).pos - self(a1).pos
            r.normalise
            self(a2).pos = self(a1).pos + length*r 
 ! stdout.show("NEW a2 pos     =",self(a2).pos)
         end
      end
      atom_kind.destroy
   end

!  *******************
!  Information methods
!  *******************

   sum_of_atomic_numbers result (res)
   ! Return the sum of the atomic numbers
      res :: REAL
      res = sum(self(:).atomic_number)
   end

   atomic_numbers result (res)
   ! Return the atomic numbers as a vector
      res :: VEC{REAL}(size(self))
      res = self(:).atomic_number
   end

   nuclear_energy result (res)
   ! Return the nuclear repulsion energy
      res :: REAL
      i,j,qi,qj :: INT
      radius :: VEC{REAL}(3)
      res = ZERO
      do i=1,.n_atom
         qi = self(i).atomic_number
         do j=1,i-1
            qj = self(j).atomic_number
            radius =  self(j).pos - self(i).pos
            res = res + qi * qj / sqrt( radius.dot(radius) )
         end
      end
   end

   nuclear_energy(atoms) result (res)
   ! Return the nuclear repulsion energy felt by the group of atoms "a" in
   ! the field of all the nuclei in "self"
      atoms :: VEC{INT}
      res :: REAL
      a, i, j,qi,qj, n_atoms :: INT
      radius :: VEC{REAL}(3)
      res = ZERO
      n_atoms = size(atoms)
      do i = 1,n_atoms
       a = atoms(i)
       qi = self(a).atomic_number
       do j = 1,.n_atom
        if (any(atoms==j)) cycle
        qj = self(j).atomic_number
        radius =  self(j).pos - self(a).pos
        res = res + qi * qj / sqrt( radius.dot(radius) )
       end
      end
      res = HALF*res ! only count half the interaction energy
      res = res + self(atoms).nuclear_energy
   end

   nuclear_energy(atoms,nuclei) result (res)
   ! Return the nuclear repulsion energy felt by the group of atoms "a" in
   ! the field of all the nuclei in "nuclei"
      atoms, nuclei :: VEC{INT}
      res :: REAL
      a, i, j,k,qi,qj, n_atoms, n_field :: INT
      radius :: VEC{REAL}(3)
      res = ZERO
      n_atoms = size(atoms)
      n_field = size(nuclei)
      do i=1,n_atoms
       a = atoms(i)
       qi = self(a).atomic_number
       do k=1,n_field
        j = nuclei(k)
        if (any(atoms==j)) cycle
        qj = self(j).atomic_number
        radius =  self(j).pos - self(a).pos
        res = res + qi * qj / sqrt( radius.dot(radius) )
       end
      end
      res = res + self(atoms).nuclear_energy
   end

   chemical_formula result (res)
   ! Return the chemical formula for the molecule, as a string, in alphabetical
   ! order of elements
      res :: STR
      symbol :: VEC{STR}*
      a,na :: INT
      symbol.create(size(self))
      do a = 1,.n_atom
         symbol(a) = self(a).chemical_symbol
      end
      symbol.quick_sort
      res = " "
      a = 1
      do
         na = count(symbol==symbol(a))
         res = trim(res) // trim(symbol(a))
         if (na>1) &
         res = trim(res) // trim(na.to_str)
         a = a + na
         if (a>.n_atom) exit
      end
      symbol.destroy
   end

   centre_of_mass result(centre)
   ! Return the centre of mass
      centre :: VEC{REAL}(3)
      a :: INT
      mw :: REAL
      mw = ONE/.molecular_weight
      centre = ZERO
      do a = 1,.n_atom
         centre = centre + self(a).pos*self(a).mass*mw
      end
   end

   move_origin_to_centre_of_mass
   ! Move the origin to the centre of mass
      .translate_by(-.centre_of_mass)
   end

   change_to_principal_axes
   ! Move the origin to the centre of mass and change the coordinates to be with
   ! respect to the principal axes
      pm :: VEC{REAL}(3)
      pa :: MAT{REAL}(3,3)
      .translate_by(-.centre_of_mass)
      .make_principal_moments(pm,pa)
      .change_coordinate_axes(pa)
   end

   change_to_principal_top_axes
   ! Move the origin to the centre of mass and change the coordinates to be with
   ! respect to the principal top axes i.e. in the case of symmetric tops the
   ! last axis is the unique axes.
      pm :: VEC{REAL}(3)
      pa :: MAT{REAL}(3,3)
      reorder :: BIN
      .translate_by(-.centre_of_mass)
      .make_principal_moments(pm,pa,reorder)
      .change_coordinate_axes(pa)
   end

   change_coordinate_axes(axes)
   ! Change the coordinates of the atoms to be with respect to the columns of
   ! "axes", which must be an orthogonal matrix.
      axes :: MAT{REAL}(3,3)
      a :: INT
      do a = 1,.n_atom
         self(a).change_coordinate_axes(axes)
      end
   end

   reduced_mass result(mu)
   ! Return the centre of mass
      mu :: REAL
      a :: INT
      mu = ZERO
      do a = 1,.n_atom
         mu = mu + ONE / self(a).mass
      end
      mu = ONE/mu
   end

   make_inertia_tensor(it)
   ! Make the moment of inertia tensor wrt the centre of mass
      it :: MAT{REAL}(3,3)
      m :: MAT{REAL}(3,3)
      com,r :: VEC{REAL}(3)
      trace :: REAL
      a :: INT
      com = .centre_of_mass
      it = ZERO
      do a = 1, .n_atom
         r = self(a).pos - com
         m = spread(r,dim=1,ncopies=3)*spread(r,dim=2,ncopies=3)
         m = self(a).mass * m
         trace = m.trace
         m = -m
         m.increment_diagonal_by(trace)
         it = it + m
      end
   end

   make_principal_moments(pm,pa,reorder)
   ! Make the principal moments "pm" and principal axes "pm" wrt the centre of
   ! mass.  If "reorder" is present then the principal axes are made to be right
   ! handed. Also:
   ! - For sperical tops, the local x,y,z axes are the pricipal axes
   ! - For symmetric tops, the C axis is unique
   ! - For asymmetric tops, the pricipal axes are aligned close to the local
   !    x,y,z axes
      pm :: VEC{REAL}(3)
      pa :: MAT{REAL}(3,3)
      reorder :: BIN, optional
      pn :: VEC{REAL}(3)
      it :: MAT{REAL}(3,3)
      .make_inertia_tensor(it)                  ! Make the inertia tensor and axes
      it.solve_eigenproblem(pm,pa)
      if (NOT present(reorder)) return
      where (pm<TOL(6))                         ! Set small moments to zero
         pm = ZERO
      end
      if (abs(pa(1,2)) > abs(pa(1,1))) then     ! Make principal axes close to x,y,z
         pa.swap_columns(1,2)
         pm.swap_elements(1,2)
      end
      if (abs(pa(1,3)) > abs(pa(1,1))) then
         pa.swap_columns(1,3)
         pm.swap_elements(1,3)
      end
      if (abs(pa(2,3)) > abs(pa(2,2))) then
         pa.swap_columns(2,3)
         pm.swap_elements(2,3)
      end
    ! pn = pm
      pn = pm/maxval(abs(pm))                   ! Use normalised moments for now
      if (.is_spherical_top(pn)) then           ! Spherical top? ... axes are x,y,z
            pa.to_unit_matrix         
      else if (.is_symmetric_top(pn)) then      ! Symmetric top? ... C axis is unique
         if (abs(pn(1)-pn(3)) < TOL(2)) then 
            pa.swap_columns(2,3)
            pm.swap_elements(2,3)
         else if (abs(pn(2)-pn(3)) < TOL(2)) then
            pa.swap_columns(1,3)
            pm.swap_elements(1,3)
         end
      end
      if (pa(1,1)<ZERO AND pa(2,2)<ZERO) then   ! Make positive diagonals
         pa(:,1) = -pa(:,1)
         pa(:,2) = -pa(:,2)
      end
      if (pa.determinant>ZERO) return           ! Ensure axes are right handed
      if (abs(pm(1)-pm(2)) < TOL(6)) then       ! Swap columns 1,2 if equal moments
         pm.swap_elements(1,2)
         pa.swap_columns(1,2)
      else if (abs (pm(2)-pm(3)) < TOL(6)) then ! Swap columns 2,3 if equal moments
         pm.swap_elements(2,3)
         pa.swap_columns(2,3)
      else                                      ! Reverse all C axis
         pa(:,3) = -pa(:,3)
      end
   end

!   make_principal_moments(pm,pa,reorder)
!   ! Make the principal moments "pm" and principal axes "pm" wrt the centre of
!   ! mass.  If "reorder" is present then the principal axes are made to be right
!   ! handed. Also:
!   ! - For sperical tops, the local x,y,z axes are the pricipal axes
!   ! - For symmetric tops, the C axis is unique
!   ! - For asymmetric tops, the pricipal axes are aligned close to the local
!   !    x,y,z axes
!      pm :: VEC{REAL}(3)
!      pa :: MAT{REAL}(3,3)
!      reorder :: BIN, optional
!      pn :: VEC{REAL}(3)
!      it,pa2 :: MAT{REAL}(3,3)
!      .make_inertia_tensor(it)
!      it.solve_eigenproblem(pm,pa)
!      if (NOT present(reorder)) return
!   stdout.text("first pa:")
!   stdout.put(pa)
!   stdout.text("first pm:")
!   stdout.put(pm)
!      where (pm<TOL(6))
!        pm = ZERO                               ! Small moments set to zero
!      end
!      pn = pm/maxval(abs(pm))                   ! Use normalised moments for now
!      pn = pm
!      if (.is_spherical_top(pn)) then           ! For spherical tops, principal
!            pa.to_unit_matrix                   ! axes are x,y,z
!      else if (.is_symmetric_top(pn)) then      ! For symmetric tops C axis is
!         if (abs(pn(1)-pn(3)) < TOL(2)) then    ! unique
!            pa.swap_columns(2,3)
!            pm.swap_elements(2,3)
!   stdout.text("23 pa:")
!   stdout.put(pa)
!         else if (abs(pn(2)-pn(3)) < TOL(2)) then
!            pa.swap_columns(1,3)
!            pm.swap_elements(1,3)
!   stdout.text("13 pa:")
!   stdout.put(pa)
!         end
!      else                                      ! For asymmetric tops, principal
!         if (abs(pa(1,2)) > abs(pa(1,1))) then  ! axes are close to x,y,z
!            pa.swap_columns(1,2)
!            pm.swap_elements(1,2)
!         end
!         if (abs(pa(1,3)) > abs(pa(1,1))) then
!            pa.swap_columns(1,3)
!            pm.swap_elements(1,3)
!         end
!         if (abs(pa(2,3)) > abs(pa(2,2))) then
!            pa.swap_columns(2,3)
!            pm.swap_elements(2,3)
!         end
!      end
!   stdout.text("norms:")
!   stdout.put(pa.column_norms)
!   stdout.text("LAST pa:")
!   stdout.put(pa)
!   stdout.text("LAST pm:")
!   stdout.put(pm)
!      if (pa.determinant>ZERO) return ! Ensure principal axes are right handed
!   stdout.text("neg pa:")
!   stdout.put(pa)
!      if (abs(pm(1)-pm(2)) < TOL(6)) then
!         pm.swap_elements(1,2)
!         pa.swap_columns(1,2)
!   stdout.text("12 pa:")
!   stdout.put(pa)
!      else if (abs (pm(2)-pm(3)) < TOL(6)) then
!         pm.swap_elements(2,3)
!         pa.swap_columns(2,3)
!      else
!         pa(1:3,3) = -pa(1:3,3)
!   stdout.text("-3 pa:")
!   stdout.put(pa)
!      end
!   stdout.text("last pa:")
!   stdout.put(pa)
!   end

   is_linear(pm) result (res) ::: private
   ! Return TRUE if the geometry is linear.
   ! Needs principal moments of inertia "pm"
      res :: BIN
      pm :: VEC{REAL}(3)
      res = any(pm==ZERO)
   end

   is_spherical_top(pm) result (res) ::: private
   ! Return TRUE if the geometry is a spherical top
   ! Needs principal moments of inertia "pm"
      res :: BIN
      pm :: VEC{REAL}(3)
      res = .no_of_same_principal_moments(pm)==3
   end

   is_symmetric_top(pm) result (res) ::: private
   ! Return TRUE if the geometry is a symmetric top
   ! Needs principal moments of inertia "pm"
      res :: BIN
      pm :: VEC{REAL}(3)
      res = .no_of_same_principal_moments(pm)==1
   end

   is_prolate_top(pm) result (res) ::: private
   ! Return TRUE if the geometry is a prolate top
   ! Needs principal moments of inertia "pm" after alignment
      res :: BIN
      pm :: VEC{REAL}(3)
      res = .is_symmetric_top(pm) AND (pm(3)<pm(1))
   end

   is_oblate_top(pm) result (res) ::: private
   ! Return TRUE if the geometry is a oblate top
   ! Needs principal moments of inertia "pm" after alignment
      res :: BIN
      pm :: VEC{REAL}(3)
      res = .is_symmetric_top(pm) AND (pm(3)>pm(1))
   end

   is_asymmetric_top(pm) result (res) ::: private
   ! Return TRUE if the geometry is a asymmetric top
   ! Needs principal moments of inertia "pm"
      res :: BIN
      pm :: VEC{REAL}(3)
      res = .no_of_same_principal_moments(pm)==0
   end

   no_of_same_principal_moments(pm) result(same)
   ! Return the number of "same" pairs of principal moments of inertia.
   ! Needs principal moments of inertia "pm"
      same :: INT
      pm :: VEC{REAL}(3)
      i,j :: INT
      same = 0
      do i = 1,3
      do j = 1,i-1
         if (abs(pm(i)-pm(j))<=TOL(2)) then
            same = same + 1
         end
      end
      end
   end

   has_sequence_numbers result (res)
   ! Return TRUE if any atom in the list has a non zero sequence number
      res :: BIN
      res = any(self(:).residue_sequence_number > 1)
   end

   has_thermal_tensors result (res)
   ! Return TRUE if any atom in the list has a non zero thermal tensor
      res :: BIN
      i :: INT
      res = FALSE
      do i=1,.dim
        if (all(self(i).thermal_tensor==ZERO)) cycle
        res = TRUE 
        exit
      end  
   end

   has_U_iso result (res)
   ! Return TRUE if any atom in the list has a non zero U_iso
      res :: BIN
      res = any(self.U_iso>ZERO)
   end

   has_thermal_factors result (res)
   ! Return TRUE if any atom in the list has a non zero thermal tensor
   ! OR non zero isotropic thermal factor.
      res :: BIN
      res = .has_thermal_tensors OR .has_U_iso
   end

   has_residue_codes result (res)
   ! Return TRUE if any atom in the list has a residue names
      res :: BIN
      res = any(self(:).residue_code /= " " )
   end

   has_restraints result (res)
   ! Return TRUE if any atom in the list has a restrained position
   ! or restrained force constants
      res :: BIN
      res = any(self(:).restraining_force_constant/=ZERO)
   end

   molecular_weight result (res)
   ! Return the molceular weight for this atomvec
      res :: REAL
      a :: INT
      res = ZERO
      do a = 1,.n_atom
         res = res + self(a).mass
      end
   end

   centre_of_atoms(axes) result(centre)
   ! Return the centroid of the atom positions in "centre". If "axes" is present
   ! then the "centre" is expressed with respect to the new "axes", where the
   ! columns of "axes" are the coordinates of the new axes in terms of the old.
      centre :: VEC{REAL}(3)
      axes :: MAT{REAL}(3,3), optional
      a :: INT
      centre = ZERO
      do a = 1,.n_atom
         centre = centre + self(a).pos
      end
      centre = centre/.n_atom
      if (present(axes)) centre = matmul(transpose(axes),centre)
   end

   move_origin_to_centre_of_atoms
   ! Move the origin to the centre of atoms
      .translate_by(-.centre_of_atoms)
   end

   bounding_cube_width result(width)
   ! Return "width" which is a width of a side of a cube in which the molecule
   ! nicely sits.
   ! Suitable for generating plot widths.
      width :: REAL
      centre,dist :: VEC{REAL}(3)
      length :: REAL
      a :: INT
      width = ZERO
      centre = .centre_of_atoms
      do a = 1,.n_atom
         dist = self(a).pos - centre
         length = dist.norm + self(a).bragg_slater_radius*BOHR_PER_ANGSTROM*TWO
         length = max(length, dist.norm*TWO)
         width = max(width,length)
      end
      width = TWO*width
   end

   bounding_box(axes) result(box)
   ! Return "box" which are three widths of a side of a box in which the
   ! molecule nicely sits. If "axes" is present, the "box" coordinates are
   ! expressed in terms of the new "axes", where the columns of "axes" are the
   ! coordinates of the new axes in terms of the old. These "axes" may be
   ! (typically) the principal moment axes. This routine is suitable for
   ! generating plot widths.
      axes :: MAT{REAL}(3,3), optional
      box :: VEC{REAL}(3)
      centre,dist :: VEC{REAL}(3)
      a :: INT
      box = ZERO
      centre = .centre_of_atoms
      do a = 1,.n_atom
         dist = self(a).pos - centre
         dist = abs(dist)
         if (present(axes)) then
           dist = matmul(transpose(axes),dist) ! coordinates in new axis system
           dist = abs(dist)
         end
         dist = dist + self(a).bragg_slater_radius*BOHR_PER_ANGSTROM*TWO
         box  = max(box,dist)
      end
      box = FOUR*box
   end

   make_shape_tensor(st)
   ! Make the shape tensor "st" wrt the centre of atoms. This is the same as the
   ! moment of inertia tensor except that each atom is assumed to have unit mass.
      st :: MAT{REAL}(3,3)
      m :: MAT{REAL}(3,3)
      c,r :: VEC{REAL}(3)
      a :: INT
      c = .centre_of_atoms
      st = ZERO
      do a = 1, .n_atom
         r = self(a).pos - c
         m = spread(r,dim=1,ncopies=3)*spread(r,dim=2,ncopies=3)
         m.increment_diagonal_by(-m.trace)
         st = st - m
      end
   end

   make_shape_moments(sm,sa)
   ! Make the shape moments "sm" and principal shape axes "sa" wrt the centre of
   ! atoms. The shape axes are the same as the principal moment of inertia axes
   ! except that each atom is assumed to have unit mass. The principal shape
   ! axes are made right handed.
      sm :: VEC{REAL}(3)
      sa :: MAT{REAL}(3,3)
      st :: MAT{REAL}(3,3)
      .make_shape_tensor(st)
      st.solve_eigenproblem(sm,sa)
      if (abs(sa(1,2)) > abs(sa(1,1))) then ! make axes are close to x,y,z
         sa.swap_columns(1,2)
         sm.swap_elements(1,2)
      end
      if (abs(sa(1,3)) > abs(sa(1,1))) then
         sa.swap_columns(1,3)
         sm.swap_elements(1,3)
      end
      if (abs(sa(2,3)) > abs(sa(2,2))) then
         sa.swap_columns(2,3)
         sm.swap_elements(2,3)
      end
      if (sa(1,1)<ZERO)        sa(:,1) = -sa(:,1)  ! make axes +ve
      if (sa(2,2)<ZERO)        sa(:,2) = -sa(:,2)
      if (sa.determinant<ZERO) sa(:,3) = -sa(:,3)
   end

   get_geometry(g)
   ! Return the geometry "g" in a matrix
      self :: IN
      g :: MAT{REAL}, OUT
      n_atom,n :: INT
      if (size(g,1)==3 AND size(g,2)==.n_atom) then
         n_atom = size(g,2)
         do n = 1,n_atom
            g(:,n) = self(n).pos
         end
      else if (size(g,1)==.n_atom AND size(g,2)==3) then
         n_atom = size(g,1)
         do n = 1,n_atom
            g(n,:) = self(n).pos
         end
      else
         DIE("incorrectly sized geometry array")
      end
   end

   get_geometry_vector(g)
   ! Return the geometry "g" as a flat vector where the xyz positions increment
   ! fastest, useful for optimisations
      g :: VEC{REAL}
   ENSURE(g.dim==3*.n_atom,"wrong size, g")
      k,i :: INT
      k = 0
      do i = 1,.n_atom
        g(k+1) = self(i).pos(1)
        g(k+2) = self(i).pos(2)
        g(k+3) = self(i).pos(3)
        k = k + 3
      end
   end

   set_geometry_from_vector(g)
   ! Set the geometry from "g", a flat vector, where the xyz positions
   ! increment fastest
      g :: VEC{REAL}
   ENSURE(g.dim==3*.n_atom,"wrong size, g")
      k,i :: INT
      k = 0
      do i = 1,.n_atom
        self(i).pos(1) = g(k+1)
        self(i).pos(2) = g(k+2)
        self(i).pos(3) = g(k+3)
        k = k + 3
      end
   end

   geometry result (g)
   ! Return the geometry "g" in a (3 x .n_atom) matrix
       g :: MAT{REAL}(3,.dim)
      n_atom,n :: INT
      n_atom = .dim
      do n = 1,n_atom
         g(:,n) = self(n).pos
      end
   end

   geometry_vector result (g)
   ! Return the geometry "g" as a flat vector where the xyz positions increment
   ! fastest, useful for optimisations
      g :: VEC{REAL}(3*size(self))
      k,i :: INT
      k = 0
      do i = 1,.n_atom
        g(k+1) = self(i).pos(1)
        g(k+2) = self(i).pos(2)
        g(k+3) = self(i).pos(3)
        k = k + 3
      end
   end

   has_all_ANO_data result(has)
   ! Return TRUE if all atom ANO data exists
      self :: IN
      has :: BIN
      a :: INT
      has = TRUE
      do a = 1,.n_atom
         has = self(a).has_ANO_data
         if (NOT has) exit
      end
   end

   has_all_slater_bases result(has)
   ! Return TRUE if all atom slater basis data exists
      self :: IN
      has :: BIN
      a :: INT
      has = TRUE
      do a = 1,.n_atom
         has = self(a).slaterbasis.created
         if (NOT has) exit
      end
   end

   has_all_coppens_bases result(has)
   ! Return TRUE if all atom slater basis data exists
      self :: IN
      has :: BIN
      a :: INT
      has = TRUE
      do a = 1,.n_atom
         has = self(a).coppensbasis.created
         if (NOT has) exit
      end
   end

   has_all_density_data result(has)
   ! Return TRUE if all atoms have some kind of atom density data, either
   ! slaterbasis, coppensbasis or gausian ANO data. This routine does NOT check
   ! that they are all the same kind of data!
      self :: IN
      has :: BIN
      has = .has_all_slater_bases OR .has_all_coppens_bases OR .has_all_ANO_data
   end

   has_all_interpolators result(has)
   ! Return TRUE if all atoms have slaterbases which have interpolators, or all
   ! atoms have coppensbases with interpolators.
      self :: IN
      has :: BIN
      has = .has_all_slater_interpolators OR .has_all_coppens_interpolators
   end

   has_all_slater_interpolators result(has)
   ! Return TRUE if all atoms have slaterbases which have interpolators.
      self :: IN
      has :: BIN
      a :: INT
      has = TRUE
      do a = 1,.n_atom
         has = self(a).slaterbasis.created
         if (NOT has) exit
         has = self(a).slaterbasis.interpolator.created
         if (NOT has) exit
      end
   end

   has_all_coppens_interpolators result(has)
   ! Return TRUE if all atoms have coppensbases which have interpolators.
      self :: IN
      has :: BIN
      a :: INT
      has = TRUE
      do a = 1,.n_atom
         has = self(a).coppensbasis.created
         if (NOT has) exit
         has = self(a).coppensbasis.interpolator.created
         if (NOT has) exit
      end
   end

   has_cartesian_thermal_axes result(has)
   ! Return TRUE if all atom thermal tensors are in the cartesian axis system.
      self :: IN
      has :: BIN
      a :: INT
      has = TRUE
      do a = 1,.n_atom
         has = self(a).thermal_axis_system=="cartesian"
         if (NOT has) exit
      end
   end

   has_crystal_thermal_axes result(has)
   ! Return TRUE if all atom thermal tensors are in the crystal axis system.
      self :: IN
      has :: BIN
      a :: INT
      has = TRUE
      do a = 1,.n_atom
         has = self(a).thermal_axis_system=="crystal"
         if (NOT has) exit
      end
   end

   has_disorder result (has)
   ! Return TRUE if any atom has disorder i.e. an occupancy which is not one.
      self :: IN
      has :: BIN
      has = NOT self(:).site_occupancy.are_all_equal_to(ONE)
   end

   chemical_symbols result (res)
   ! Return an array of the chemical symbols for each atom
      res :: VEC{STR}(size(self))
       a :: INT
      do a = 1,.n_atom
         res(a) = self(a).chemical_symbol
      end
   end

   numbered_chemical_symbols result (res)
   ! Return an array of the chemical symbols for each atom with a number
   ! at the end in brackets, which is the number of the atom in thge list.
      res :: VEC{STR}(size(self))
       a :: INT
      do a = 1,.n_atom
         res(a) = self(a).chemical_symbol
         res(a) = trim(res(a))//"("//trim(a.to_str)//")"
      end
   end

   basis_labels result (labels) ::: leaky
   ! Return a list of basis set "labels". Missing labels are returned blank.
      labels :: VEC{STR}*
      i :: INT
      labels.create(size(self))
      do i = 1,size(self)
         if (self(i).basis_label/=" ") then; labels(i) = self(i).basis_label
         else;                               labels(i) = " "
         end
      end
   end

   library_basis_labels(suffix) result (labels) ::: leaky
   ! Return a list of library basis set labels, the atoms element name with
   ! ":suffix" appended to it. Only a unique list of basis labels is returned.
      suffix :: STR
      labels :: VEC{STR}*
      i :: INT
      labels.create(.dim)
      do i = 1,.dim
         labels(i) = self(i).library_basis_label(suffix)
      end
      labels.remove_repetitions
   end

   library_basis_labels(Z_max,suffix) result (labels) ::: selfless, leaky
   ! Return a list of library basis set labels, for the atoms with
   ! atomic numbers up to "Z_max", with ":suffix" appended to it. Only
   ! a unique list of basis labels is returned.
      Z_max :: INT
      suffix :: STR
      labels :: VEC{STR}*
      Z :: INT
      labels.create(Z_max)
      do Z = 1,Z_max
         labels(Z) = ATOM:library_basis_label(Z,suffix)
      end
   end

!   library_basis_labels(suffix) result (labels) ::: leaky
!   ! Return a list of library basis set labels. The label is either the atoms
!   ! own .basis_label (if it contains the colon character, the indicator of a
!   ! library basis set), or else it is the atoms element name with ":suffix"
!   ! appended to it. Only a unique list of basis labels is returned.
!      suffix :: STR
!      labels :: VEC{STR}*
!      i :: INT
!      labels.create(size(self))
!      do i = 1,size(self)
!         if (self(i).basis_label.includes(":")) then
!            labels(i) = self(i).basis_label
!         else
!            labels(i) = self(i).library_basis_label(suffix)
!         end
!      end
!      labels.remove_repetitions
!   end

   atom_index_from_pos(pos) result (res)
   ! Return the index of atom from its position "pos"
      pos :: VEC{REAL}(3)
      res :: INT
      a :: INT
      found :: BIN
      found = FALSE
      do a = 1,.n_atom
         found = pos.same_as(self(a).pos)
         if (found) exit
      end
      res = a
      ENSURE(found,"no atom for this position")
   end

   minimum_basis_exponents result (res)
   ! Return the minimum exponent in the basis.
     res :: VEC{REAL}(.dim)
     i :: INT
     do i = 1,.dim
        res(i) = self(i).minimum_basis_exponent
     end
   end

   has_dipoles result (has)
   ! Return TRUE if any of the atoms have dipoles
      self :: IN
      has :: BIN
      a :: INT
      do a = 1,.dim
         has = self(a).has_dipole
         if (has) exit
      end
   end

   has_polarisabilities result (has)
   ! Return TRUE if any of the atoms have polarisabilities
      self :: IN
      has :: BIN
      a :: INT
      do a = 1,.dim
         has = self(a).has_polarisability
         if (has) exit
      end
   end

!  ********************************
!  Moments, fields, field gradients
!  ********************************

   nuclear_dipole_moment result (res)
   ! Return the dipole moment obtained from the nuclear charges
      res :: VEC{REAL}(3)
       a :: INT
      res = ZERO
      do a = 1,.n_atom
         res = res + self(a).atomic_number*self(a).pos(:)
      end
   end

   nuclear_quadrupole_moment result (res)
   ! Return the quadrupole moment obtained from the nuclear charges
   ! as a vector, in the order: xx, yy, zz, xy, xz, yz
      res :: VEC{REAL}(6)
       Z :: REAL
       a :: INT
      res = ZERO
      do a = 1,.n_atom
         Z = self(a).atomic_number
         res(1) = res(1) + Z*self(a).pos(1)*self(a).pos(1)
         res(2) = res(2) + Z*self(a).pos(2)*self(a).pos(2)
         res(3) = res(3) + Z*self(a).pos(3)*self(a).pos(3)
         res(4) = res(4) + Z*self(a).pos(1)*self(a).pos(2)
         res(5) = res(5) + Z*self(a).pos(1)*self(a).pos(3)
         res(6) = res(6) + Z*self(a).pos(2)*self(a).pos(3)
      end
   end

   nuclear_octupole_moment result (res)
   ! Return the octupole moment obtained from the nuclear charges as a vector,
   ! in the order: xxx, yyy, zzz, xxy, xxz, yyx, yyz, zzx, zzy, xyz
      res :: VEC{REAL}(10)
      Z :: REAL
      a :: INT
      res = ZERO
      do a = 1,.n_atom
         Z = self(a).atomic_number
         res(1)  = res(1)  + Z*self(a).pos(1)*self(a).pos(1)*self(a).pos(1)
         res(2)  = res(2)  + Z*self(a).pos(2)*self(a).pos(2)*self(a).pos(2)
         res(3)  = res(3)  + Z*self(a).pos(3)*self(a).pos(3)*self(a).pos(3)
         res(4)  = res(4)  + Z*self(a).pos(1)*self(a).pos(1)*self(a).pos(2)
         res(5)  = res(5)  + Z*self(a).pos(1)*self(a).pos(1)*self(a).pos(3)
         res(6)  = res(6)  + Z*self(a).pos(2)*self(a).pos(2)*self(a).pos(1)
         res(7)  = res(7)  + Z*self(a).pos(2)*self(a).pos(2)*self(a).pos(3)
         res(8)  = res(8)  + Z*self(a).pos(3)*self(a).pos(3)*self(a).pos(1)
         res(9)  = res(9)  + Z*self(a).pos(3)*self(a).pos(3)*self(a).pos(2)
         res(10) = res(10) + Z*self(a).pos(1)*self(a).pos(2)*self(a).pos(3)
      end
   end

   nuclear_E_field_at_nuclei result (res)
   ! Return the nuclear contribution to the electric fields
   ! at the nuclei as a (3 x .n_atom) array
      res :: MAT{REAL}(3,size(self))
      Z,r :: REAL
      a,b :: INT
      ab :: VEC{REAL}(3)
      res = ZERO
      do a = 1,.n_atom
         do b = 1,.n_atom
            if (b==a) cycle
            Z  = self(b).atomic_number
            ab = self(a).pos - self(b).pos
            r  = ab.norm
            res(:,a) = res(:,a) + Z*ab/(r*r*r)
         end
      end
   end

   nuclear_EFG_at_nuclei result (res)
   ! Return the nuclear contribution to the electric fields gradient (EFG)
   ! at the nuclei as a (6 x .n_atom) array
      res :: MAT{REAL}(6,size(self))
      Z,r,r3,r5 :: REAL
      a,b :: INT
      ab :: VEC{REAL}(3)
      res = ZERO
      do a = 1,.n_atom
         do b = 1,.n_atom
            if (b==a) cycle
            Z  = self(b).atomic_number
            ab = self(a).pos - self(b).pos
            r  = ab.norm
            r3 = r*r*r
            r5 = r3*r*r
            res(1,a) = res(1,a) - Z * (THREE*ab(1)*ab(1)/r5 - ONE/r3)
            res(2,a) = res(2,a) - Z * (THREE*ab(2)*ab(2)/r5 - ONE/r3)
            res(3,a) = res(3,a) - Z * (THREE*ab(3)*ab(3)/r5 - ONE/r3)
            res(4,a) = res(4,a) - Z * (THREE*ab(1)*ab(2)/r5)
            res(5,a) = res(5,a) - Z * (THREE*ab(1)*ab(3)/r5)
            res(6,a) = res(6,a) - Z * (THREE*ab(2)*ab(3)/r5)
         end
      end
   end

!  ************************
!  Atom kinds, unique atoms
!  ************************

   same_kind_of_atoms(a,b) result (res)
   ! Return true if atoms "a" and "b" are the same kind
      a,b :: INT
      res :: BIN
      res = self(a).same_kind_as(self(b))
   end

   make_atom_kind_count(cnt,n_kind) ::: leaky
   ! Return an array "cnt" in which each element represents an atom, and the
   ! value of that array element is a count of the number of atoms of that kind.
   ! Later atoms (i.e. array elements) which are of the same kind as earlier
   ! atoms have a count equal to the minus of the index of the earlier atom they
   ! are equivalent to. The number of different kinds is returned in "n_kind".
      cnt :: VEC{INT}*
      n_kind :: INT
      n,l,n_atom :: INT
      n_atom = .n_atom
      nullify(cnt); cnt.create(n_atom)
      cnt = 1
      do n = 1,n_atom
         if (cnt(n)<0) cycle
         do l = n+1,n_atom
            if (cnt(l)<0) cycle
            if ( .same_kind_of_atoms(l,n) ) then
               cnt(n) = cnt(n)+1
               cnt(l) = -n
            end
         end
      end
      n_kind = count(cnt>0)
   end

   make_atom_kind_list(atom_kind) ::: leaky
   ! Make the atom kind list ... atom_kind(k).element(c) is the c-th atom of the
   ! same kind as atom k, which is a unique kind.
      atom_kind :: VEC{VEC_{INT}}*
      cnt :: VEC{INT}*
      n,l,k,c,n_atom :: INT
      n_atom = .n_atom
      .make_atom_kind_count(cnt,n)
      nullify(atom_kind)
      atom_kind.create(n)
      k = 0
      do n = 1,n_atom
         if (cnt(n)<0) cycle
         k = k+1
         c = 1
         atom_kind(k).element.create(cnt(n))
         atom_kind(k).element(c) = n
         do l = n+1,n_atom
            if (cnt(l)/=-n) cycle
            c = c+1
            atom_kind(k).element(c) = l
         end
      end
      cnt.destroy
   end

   make_atom_kind_list(atom_kind,n_kind)
   ! Make a different atom kind list ... atom_kind(k) is the kind index of the
   ! k-th atom. (Same effect as the make_atom_kind_map routine).
      atom_kind :: VEC{INT}
      n_kind :: INT
   ENSURE(size(atom_kind)==.dim,"atom_kind is incorrectly dimensioned")
      n_atom,n,l :: INT
      n_atom = .dim
      atom_kind = (/ (n, n=1,n_atom) /)
      n_kind = 0
      do n = 1,n_atom
         if (atom_kind(n)<=n_kind) cycle
         n_kind = n_kind + 1
         atom_kind(n) = n_kind
         do l = n+1,n_atom
            if (atom_kind(l)<=n_kind) cycle
            if ( NOT .same_kind_of_atoms(l,n) ) cycle
            atom_kind(l) = n_kind
         end
      end
   end

   make_unique_atom_list(unique_atom) ::: leaky
   ! "unique_atom(k)" is the index of the first atom which represents all the
   ! the atoms which are of the same kind, k.
      unique_atom :: VEC{INT}
      atom_kind :: VEC{INT}*
      n_kind,k,pos :: INT
      atom_kind.create(.dim)
      .make_atom_kind_list(atom_kind,n_kind)
      ENSURE(size(unique_atom)==n_kind,"unique atom incorrectly dimensioned")
      do k = 1,n_kind
         pos = atom_kind.index_of_value(k)
         ENSURE(pos/=0,"atom kind "// trim(k.to_str) //" does not exist!")
         unique_atom(k) = pos
      end
      atom_kind.destroy
   end

   make_unique_atom_list(unique_atom,atom_kind,n_kind) ::: leaky
   ! "unique_atom(k)" is the index of the first atom which represents all the
   ! the atoms which are of the same kind, k. The atom kinds for each atom "a"
   ! are given by "atom_kind(a)" ...
      unique_atom,atom_kind :: VEC{INT}*
      n_kind :: INT
      k,pos :: INT
      atom_kind.create(.dim)
      .make_atom_kind_list(atom_kind,n_kind)
      unique_atom.create(n_kind)
      do k = 1,n_kind
         pos = atom_kind.index_of_value(k)
         ENSURE(pos/=0,"atom kind "// trim(k.to_str) //" does not exist!")
         unique_atom(k) = pos
      end
   end

   make_atom_kind_map(map)
   ! Make an atom kind array "map", where map(a) is the unique atom kind
   ! corresponding to atom index a.
      map :: VEC{INT}*
      atom_kind :: VEC{VEC_{INT}}*
      n_k,k,kk :: INT
      map.create(size(self))
      .make_atom_kind_list(atom_kind)
      n_k = size(atom_kind)
      do k  = 1,n_k
      do kk = 1,size(atom_kind(k).element)
         map(atom_kind(k).element(kk)) = k
      end
      end
      atom_kind.destroy
   end

!  ***********
!  Atom groups
!  ***********

   groups_defined result (res)
   ! Return TRUE if all atom groups have been defined
      res :: BIN
      if (all(self(:).group>0)) then; res = TRUE
      else;                           res = FALSE
      end
   end

   find_connected_groups
   ! This routine searches through the list of atoms as assigns each atom the
   ! same group number if the atom is a part of the same connected molecule.
      n,a,b :: INT
      found :: BIN
      n = 1
      a = 1
      self(a).group = n  ! atom 1 is in group 1
      do a = 2,.dim
         found = FALSE
         do b = 1,a-1
            if (NOT self(a).is_bonded_to(self(b))) cycle
            found = TRUE
            exit
         end
         if (found) then
            self(a).group = self(b).group
         else
            n = n + 1
            self(a).group = n
         end
      end
   end

   make_atom_group_lists(list) ::: leaky
   ! This routine finds all the atoms in the same group and makes their indices
   ! as a list of integers. The result is a "list" of list of integers. NOTE
   ! that "list" is created.
      list :: VEC{VEC_{INT}}*
   ENSURE(.groups_defined,"no group info supplied in atoms=")
      n_group,m_group,a,g,n,i :: INT
      group_indices :: VEC{INT}*
      group_indices.create(.dim)
      group_indices = self(:).group
      n_group = group_indices.no_of_unique_elements
      list.create(n_group)
      if (n_group==1) then
         list(1).element.create(.dim)
         list(1).element = [ (i, i=1,.dim) ]
      else
        m_group = maxval(group_indices)
        g = 0
        do a = 1,m_group
           n = count(group_indices==a)
           if (n==0) cycle
           g = g + 1
           list(g).element.create(n)
           list(g).element = pack( [ (i, i=1,.n_atom) ], group_indices==a)
        end
        ! .put_atom_groups
      end
      group_indices.destroy
   end

!  *************************
!  Shell information methods
!  *************************

!   get_shell_limits(s,first,last)
!   ! Get the shell function limits "first" and "last" for atomvec shell
!   ! number "s"
!      s,first,last :: INT
!      a,as,n,ss :: INT
!      ss = 0; last = 0
!      atom_loop: do a = 1,.n_atom
!         n = self(a).basis.n_shell
!         do as = 1,n
!            ss = ss + 1
!            first = last+1
!            last  = first + self(a).basis.shell(as).n_comp - 1
!            if (s==ss) exit atom_loop
!         end
!      end do atom_loop
!   end

   make_shell_limits(first,last,momentum) ::: leaky
   ! Get the shell function limit vectors "first" and "last" for corresponding
   ! to the concatenated vector of atomvec shells. Also get the angular
   ! "momentum" for the shell.
      first,last,momentum :: VEC{INT}*
      a,as,n,ss,f,l :: INT
      nullify(first);    first.create(.n_shell)
      nullify(last);     last.create(.n_shell)
      nullify(momentum); momentum.create(.n_shell)
      ss = 0; l = 0
      do a = 1,.n_atom
         n = self(a).basis.n_shell
         do as = 1,n
            ss = ss + 1
            f = l + 1
            l = f + self(a).basis.shell(as).n_comp - 1
            first(ss) = f
            last(ss)  = l
            momentum(ss) = self(a).basis.shell(as).l
         end
      end
   end

   make_atom_basis_fn_limits(first,last) ::: leaky
   ! Get the first and last basis functions for the atoms
      first,last :: VEC{INT}*
      a,as,n,l :: INT
      nullify(first); first.create(size(self))
      nullify(last);  last.create(size(self))
      l = 0
      do a = 1,.n_atom
         n = self(a).basis.n_shell
         first(a) = l + 1
         do as = 1,n
            l = l + self(a).basis.shell(as).n_comp
         end
         last(a) = l
      end
   end

!   maximum_basis_set_l_value result (res)
!   ! Returns the maximum basis set l value for all the atoms
!     self :: IN
!     res :: INT
!     i,l :: INT
!     res = 0
!     do i = 1,.dim
!        ENSURE(self(i).basis.created,"basis "//i.to_str.trim//" not created")
!        l = self(i).basis.maximum_basis_set_l_value
!        res = max(l,res)
!     end
!   end

!  ******************************
!  Atom-shell information methods
!  ******************************

   atom_for_shell(s) result(a)
   ! Return the *atom* number "a" corresponding to the
   ! *atomvec* shell number "s"
      a,s :: INT
      ss,n :: INT
      ss = 0
      do a = 1,.n_atom
         n = self(a).basis.n_shell
         ss = ss + n
         if (s<=ss) exit
      end
   end

   atom_for_shell result (res) ::: leaky
   ! Return a vector of *atom* numbers corresponding to the
   ! vector of *atomvec* shell numbers
      res :: VEC{INT}*
      a,ss,n :: INT
      nullify(res); res.create(.n_shell)
      ss = 0
      do a = 1,.n_atom
         n = self(a).basis.n_shell
         res(ss+1:ss+n) = a
         ss = ss + n
      end
   end

   atom_shell_for_shell(s) result(as)
   ! Return the *atom* shell number "as" corresponding to the
   ! *atomvec* shell number "s"
   ENSURE(.dim>0,"no atoms")
      as,s :: INT
      a,ss,n :: INT
      ss = 0
      do a = 1,.n_atom
         ENSURE(self(a).basis.created,"no basis for atom "//trim(a.to_str))
         n = self(a).basis.n_shell
         ss = ss + n
         if (s<=ss) exit
      end
      as = s - ss + n
   end

   atom_shell_for_shell result (res) ::: leaky
   ! Return a vector of *atom* shell numbers corresponding to the
   ! *atomvec* shell number vector
      res :: VEC{INT}*
      a,ss,n,as :: INT
      nullify(res); res.create(.n_shell)
      ss = 0
      do a = 1,.n_atom
         n = self(a).basis.n_shell
         do as = 1,n
            res(ss+as) = as
         end
         ss = ss + n
      end
   end

   first_shell_for_atom(a) result (res)
   ! Return the index of the first shell for atom "a" in the atomvec
      a,res :: INT
      at,n :: INT
      res = 1
      do at = 1,(a-1)
         n = self(a).basis.n_shell
         res = res + n
      end
   end

   make_shell_for_atom_limits(first,last)
   ! Return the indices of the first and last shell for each atom in the atomvec
      first,last :: VEC{INT}
      ss,a,n :: INT
      ss = 0
      do a = 1,.n_atom
         first(a) = ss + 1
         n = self(a).basis.n_shell
         ss = ss + n
         last(a) = ss
      end
   end

   first_shell_for_atom result (res) ::: leaky
   ! Return the indices of the first shell for an atom in the atomvec
      res :: VEC{INT}*
      ss,a,n :: INT
      nullify(res); res.create(size(self))
      ss = 0
      do a = 1,.n_atom
         n = self(a).basis.n_shell
         res(a) = ss + 1
         ss = ss + n
      end
   end

!  ***************
!  Invariom labels
!  ***************

   neighbours_of(a,range_factor) result (res) ::: leaky
   ! Return the list of atoms bonded to atom "a".
      a :: INT
      range_factor :: REAL, optional
      res :: VEC{INT}*
      b :: INT
      nullify(res)
      do b = 1,.dim
         if (b==a) cycle
         if (NOT .bonded(a,b,range_factor)) cycle 
         res.append(b)
      end
   end

   is_next_neighbour_chiral(a) result (res) ::: leaky
   ! Return TRUE if there are four next nearest neighbours for the
   ! atom "a", and if they are all different.
      a :: INT
      res :: BIN
      neighbour :: VEC{INT}*
      Z :: VEC{INT}(4)
      neighbour => .neighbours_of(a)
      if (neighbour.destroyed) then
         res = FALSE
      else if (neighbour.dim==4) then
         Z = self(neighbour).atomic_number
         res = NOT Z.has_repetitions
      else
         res = FALSE
      end
      neighbour.destroy
   end

   next_neighbour_handedness_of(a) result (res) ::: leaky
   ! Return the handedness of the atom "a" based only on the four
   ! connecting atoms around it.
      a :: INT
      res :: STR
      n :: INT
      p2,p3,p4,pc :: VEC{REAL}(3)
      Z,order :: VEC{INT}(4)
      neighbour :: VEC{INT}*
      neighbour => .neighbours_of(a)
      DIE_IF(neighbour.destroyed,"there are no neighbours")
      n = neighbour.dim
      DIE_IF(neighbour.dim/=4,"must have four neighbours, n = "//trim(n.to_str))
    ! stdout.show("neighbours =",neighbour)
      Z = self(neighbour).atomic_number
      Z.quick_sort(order)
      neighbour = neighbour(order)
    ! stdout.show("sorted neighbours =",neighbour)
      p2 = self(neighbour(2)).pos - self(a).pos
      p3 = self(neighbour(3)).pos - self(a).pos
      p4 = self(neighbour(4)).pos - self(a).pos
      pc = p4.cross(p3)
      if (p2.dot(pc)>ZERO) then; res = "R"
      else;                      res = "S"
      end
      neighbour.destroy
   end


   invariom_labels result (res) ::: leaky
   ! Return the invariom label for the atom "a"
      res :: VEC{STR}*
      a :: INT
      res.create(.dim)
      do a = 1,.dim
         res(a) = .invariom_label_of(a)
      end
   end

   invariom_label_of(a) result (res)
   ! Return the invariom label for the atom "a"
      a :: INT
      res :: STR

      special_Z :: VEC{INT}(3) = [1,15,16]
      i,j,n,m,f2,l2,p :: INT
      Z,bond,order,neighbour,Z2,bond2,order2,neighbour2 :: VEC{INT}*
      bonds,bonds2,mesomer,ZZ :: VEC{STR}*
      special,do_2nd_neighbour :: BIN
      symbol :: STR

      ! Start with the R or S symbol, if the atom is chiral
      if (.is_next_neighbour_chiral(a)) then; res = trim(.next_neighbour_handedness_of(a))//"-"
      else;                                   res = " "
      end

      ! Start with "a" atoms chemical symbol
      res = trim(res)//self(a).chemical_symbol

      ! Get indices of the nearest neighbours; return if no neighbours
      neighbour => .neighbours_of(a)
      if (neighbour.destroyed) return
      neighbour.prune(a)
      if (neighbour.dim==0) return

      ! Create arrays to store the bond order (times 10) and string
      ! form of bond order
      n = neighbour.dim
      bond.create(n)
      bonds.create(n)

      ! Get the atomic numbers Z of neighbors and order them in 
      ! decreasing bond-order/atomic number
      Z.create(n)
      order.create(n)
      Z = self(neighbour).atomic_number
      .allred_rochow_bond_orders(a,neighbour,bond,bonds)
      Z = 1000*bond + Z
      Z.quick_sort(order,decreasing_order=TRUE)
      neighbour = neighbour(order)
      bond  = bond(order)
      bonds = bonds(order)
      order.destroy; Z.destroy

      ! If special Z atoms switch on next nearest neighbour
      f2 = 0
      special = FALSE

      if (any(special_Z==self(a).atomic_number)) then
         f2 = 1
         l2 = bond.dim
         special = TRUE

      ! Find out how many mesomeric bonds there are
      else
         f2 = bond.index_of_value(15)
         l2 = 0
         if (f2>0) then
            if      (f2==bond.dim) then;       l2 = f2
            else if (bond(bond.dim)==15) then; l2 = bond.dim
            else;                              l2 = bond(f2+1:).index_of_value_ne_to(15)
                                               l2 = f2 + l2 - 1
            end
         end
      end

      do_2nd_neighbour = f2>0 AND l2>=f2

      nullify(mesomer)

      ! If we should do second nearest neighbours ...
      if (do_2nd_neighbour) then

         mesomer.create(f2,l2); mesomer = " "
         ZZ.create(f2,l2);      ZZ = "0"

         ! Loop over second nearest neighbour atoms or mesomeric atoms
         do i = f2,l2

            ! Get indices of the 2nd nearest neighbours; return if no neighbours
            neighbour2 => .neighbours_of(neighbour(i))
            DIE_IF(neighbour2.destroyed,"mesomeric atom has no neighbours")

            ! We don't want the original first neighbour
            neighbour2.prune(a)
            if (neighbour2.dim==0) then
               neighbour2.destroy
               cycle
            end

            ! Order the 2nd nearest neighbours in decreasing bond-order/atomic number
            m = neighbour2.dim
            bond2.create(m)
            bonds2.create(m)
            Z2.create(m)
            order2.create(m)
            Z2 = self(neighbour2).atomic_number
            .allred_rochow_bond_orders(neighbour(i),neighbour2,bond2,bonds2)
            Z2 = 1000*bond2 + Z2
            Z2.quick_sort(order2,decreasing_order=TRUE)
            neighbour2 = neighbour2(order2)
            Z2 = Z2(order2)
            bond2 = bond2(order2)
            bonds2 = bonds2(order2)

           ! Make and store the unsorted mesomer 2nd nearest neighbour invariom names
            mesomer(i) = achar(91)
            do j = 1,m
               symbol = self(neighbour2(j)).chemical_symbol
               mesomer(i) = trim(mesomer(i))// &
                            trim(bonds2(j))// &
                            trim(symbol.lower_case)
            end
            mesomer(i) = trim(mesomer(i))//achar(93)

            ! Make the 2nd nearest neighbour ordering string ZZ
            p = 1
            do j = 1,m
               ZZ(i)(p:p+3) = trim(Z2(j).to_str)
               p = p + 4
            end

            order2.destroy
            Z2.destroy
            bonds2.destroy
            bond2.destroy
            neighbour2.destroy
         end

         ! Now reorder the mesomer strings according to ZZ
         if (l2>f2) then
            order.create(f2,l2)
            ZZ.quick_sort(order,decreasing_order=TRUE)
            order = order + f2 - 1
            neighbour(f2:l2) = neighbour(order)
            mesomer(f2:l2) = mesomer(order)
            order.destroy
         end

         ZZ.destroy

      end

      ! Now everything is sorted; just make the invariom label
      res = res.trim_blanks_from_start
      do i = 1,n
         symbol = self(neighbour(i)).chemical_symbol
         res = trim(res)//trim(bonds(i))//trim(symbol.lower_case)
         if (bond(i)==15 OR special) then
            res = trim(res)//trim(mesomer(i))
         end
      end

      mesomer.destroy; bonds.destroy; bond.destroy; neighbour.destroy
   end

   put_invariom_labels
   ! Print out the invariom labels
      a :: INT
      do a = 1,.dim
         stdout.show("label for atom "//trim(a.to_str)//" = ",.invariom_label_of(a))
      end
   end

   allred_rochow_bond_orders(a,neighbours,bond,bonds)
   ! Given at atom "a" and its "neighbours" return the allred-rochow
   ! bond distinguishing parameters "bond" (times 10) and the
   ! cooresponding string form.
      a :: INT, IN
      neighbours :: VEC{INT}, IN
      bond :: VEC{INT}, OUT
      bonds :: VEC{STR}, OUT

   ENSURE(0<a AND a <=.dim,"index a out of range")
   ENSURE(bond.dim==neighbours.dim,"bond array, wrong size")
   ENSURE(bonds.dim==neighbours.dim,"bond array, wrong size")

      i,b :: INT
      br :: REAL

      do i = 1,neighbours.dim
         b = .bond_distinguisher(a,neighbours(i))
         bond(i) = b
         if (b==15) then
            br = b/TEN
            bonds(i) = br.to_str("f3.1")
         else
            b = b/10
            bonds(i) = b.to_str
         end
      end
   end

   bond_distinguisher(a,b) result (res)
   ! Return true if "self" is bonded to "b".  If present, "range_factor" is used
   ! to determine the distance range in which the atoms are regarded as bonded.
   ! This uses the CCDC method, as documented on their web page.
      a,b :: INT, IN
      res :: INT
      d,chi,cra,crb,ena,enb :: REAL
      d = .bond_distance(a,b)
      d = d.to_units("angstrom")
      cra = self(a).invariom_covalent_radius 
      crb = self(b).invariom_covalent_radius 
      ena = self(a).allred_rochow_en
      enb = self(b).allred_rochow_en
      chi = cra + crb - 0.08 * abs(ena-enb) - d
    ! print *,"----------"
    ! print *,"a   =",a
    ! print *,"b   =",b
    ! print *,"pa  =",self(a).pos
    ! print *,"pb  =",self(b).pos
    ! print *,"za  =",self(a).atomic_number
    ! print *,"zb  =",self(b).atomic_number
    ! print *,"cra =",cra
    ! print *,"crb =",crb
    ! print *,"ena =",ena
    ! print *,"enb =",enb
    ! print *,"d   =",d
    ! print *,"chi =",chi
    ! print *,"----------"
           if (chi <= 0.0847 ) then; res = 10
      else if (chi <= 0.184 )  then; res = 15
      else if (chi <= 0.27 )   then; res = 20
      else if (chi >  0.27 )   then; res = 30
      end

   end


   smiles_invariom_labels result (res) ::: leaky
   ! Return the invariom label for the atom "a"
      res :: VEC{STR}*
      a :: INT
      res.create(.dim)
      do a = 1,.dim
         res(a) = .smiles_invariom_label_of(a)
      end
   end

   smiles_invariom_label_of(a) result (res)
   ! Return the invariom label for the atom "a"
      a :: INT
      res :: STR

      special_Z :: VEC{INT}(3) = [1,15,16]
      i,j,n,m,f2,l2,p :: INT
      Z,bond,order,neighbour,Z2,bond2,order2,neighbour2 :: VEC{INT}*
      bonds,bonds2,mesomer,ZZ :: VEC{STR}*
      special,do_2nd_neighbour :: BIN
      symbol :: STR

      ! Start with the R or S symbol, if the atom is chiral
      if (.is_next_neighbour_chiral(a)) then; res = trim(.next_neighbour_handedness_of(a))//"-"
      else;                                   res = " "
      end

      ! Start with "a" atoms chemical symbol
      res = trim(res)//self(a).chemical_symbol

      ! Get indices of the nearest neighbours; return if no neighbours
      neighbour => .neighbours_of(a)
      if (neighbour.destroyed) return
      neighbour.prune(a)
      if (neighbour.dim==0) return

      ! Create arrays to store the bond order (times 10) and string
      ! form of bond order
      n = neighbour.dim
      bond.create(n)
      bonds.create(n)

      ! Get the atomic numbers Z of neighbors and order them in 
      ! decreasing bond-order/atomic number
      Z.create(n)
      order.create(n)
      Z = self(neighbour).atomic_number
      .smiles_bond_orders(a,neighbour,bond,bonds)
      Z = 1000*bond + Z
      Z.quick_sort(order,decreasing_order=TRUE)
      neighbour = neighbour(order)
      bond  = bond(order)
      bonds = bonds(order)
      order.destroy; Z.destroy

      ! If special Z atoms switch on next nearest neighbour
      f2 = 0
      special = FALSE

      if (any(special_Z==self(a).atomic_number)) then
         f2 = 1
         l2 = bond.dim
         special = TRUE

      ! Find out how many mesomeric bonds there are
      else
         f2 = bond.index_of_value(15)
         l2 = 0
         if (f2>0) then
            if      (f2==bond.dim) then;       l2 = f2
            else if (bond(bond.dim)==15) then; l2 = bond.dim
            else;                              l2 = bond(f2+1:).index_of_value_ne_to(15)
                                               l2 = f2 + l2 - 1
            end
         end
      end

      do_2nd_neighbour = f2>0 AND l2>=f2

      nullify(mesomer)

      ! If we should do second nearest neighbours ...
      if (do_2nd_neighbour) then

         mesomer.create(f2,l2); mesomer = " "
         ZZ.create(f2,l2);      ZZ = "0"

         ! Loop over second nearest neighbour atoms or mesomeric atoms
         do i = f2,l2

            ! Get indices of the 2nd nearest neighbours; return if no neighbours
            neighbour2 => .neighbours_of(neighbour(i))
            DIE_IF(neighbour2.destroyed,"mesomeric atom has no neighbours")

            ! We don't want the original first neighbour
            neighbour2.prune(a)
            if (neighbour2.dim==0) then
               neighbour2.destroy
               cycle
            end

            ! Order the 2nd nearest neighbours in decreasing bond-order/atomic number
            m = neighbour2.dim
            bond2.create(m)
            bonds2.create(m)
            Z2.create(m)
            order2.create(m)
            Z2 = self(neighbour2).atomic_number
            .smiles_bond_orders(neighbour(i),neighbour2,bond2,bonds2)
            Z2 = 1000*bond2 + Z2
            Z2.quick_sort(order2,decreasing_order=TRUE)
            neighbour2 = neighbour2(order2)
            Z2 = Z2(order2)
            bond2 = bond2(order2)
            bonds2 = bonds2(order2)

           ! Make and store the unsorted mesomer 2nd nearest neighbour invariom names
            mesomer(i) = "("
            do j = 1,m
               symbol = self(neighbour2(j)).chemical_symbol
               mesomer(i) = trim(mesomer(i))// &
                            trim(bonds2(j))// &
                            trim(symbol.lower_case)
            end
            mesomer(i) = trim(mesomer(i))//")"

            ! Make the 2nd nearest neighbour ordering string ZZ
            p = 1
            do j = 1,m
               ZZ(i)(p:p+3) = trim(Z2(j).to_str)
               p = p + 4
            end

            order2.destroy
            Z2.destroy
            bonds2.destroy
            bond2.destroy
            neighbour2.destroy
         end

         ! Now reorder the mesomer strings according to ZZ
         if (l2>f2) then
            order.create(f2,l2)
            ZZ.quick_sort(order,decreasing_order=TRUE)
            order = order + f2 - 1
            neighbour(f2:l2) = neighbour(order)
            mesomer(f2:l2) = mesomer(order)
            order.destroy
         end

         ZZ.destroy

      end

      ! Now everything is sorted; just make the invariom label
      res = res.trim_blanks_from_start
      res = trim(res)//"("
      do i = 1,n
         symbol = self(neighbour(i)).chemical_symbol
         res = trim(res)//trim(bonds(i))//trim(symbol.lower_case)
         if (bond(i)==15 OR special) then
            res = trim(res)//trim(mesomer(i))
         end
      end
      res = trim(res)//")"

      mesomer.destroy; bonds.destroy; bond.destroy; neighbour.destroy

   end

   put_smiles_invariom_labels
   ! Print out the invariom labels
      a :: INT
      do a = 1,.dim
         stdout.show("label for atom "//trim(a.to_str)//" = ",.smiles_invariom_label_of(a))
      end
   end

   smiles_bond_orders(a,neighbours,bond,bonds)
   ! Given at atom "a" and its "neighbours" return the allred-rochow
   ! bond distinguishing parameters "bond" (times 10) and the
   ! cooresponding string form.
      a :: INT, IN
      neighbours :: VEC{INT}, IN
      bond :: VEC{INT}, OUT
      bonds :: VEC{STR}, OUT

   ENSURE(0<a AND a <=.dim,"index a out of range")
   ENSURE(bond.dim==neighbours.dim,"bond array, wrong size")
   ENSURE(bonds.dim==neighbours.dim,"bond array, wrong size")

      i,b :: INT
      br :: REAL

      do i = 1,neighbours.dim
         b = .bond_distinguisher(a,neighbours(i))
         bond(i) = b
         select case (b)
         case (10);    bonds(i) = "-"
         case (15);    bonds(i) = ":"
         case (20);    bonds(i) = "="
         case (25);    bonds(i) = "%"
         case (30);    bonds(i) = "#"
         case default; bonds(i) = "?"
         end
      end
   end


!  *****************
!  Connection tables
!  *****************

   make_connection_table(skip_hydrogen) ::: leaky
   ! Make the atom connection table "connections_for".  If
   ! "skip_hydrogen" is present and TRUE, connections are not made to
   ! any hydrogen atom.
     skip_hydrogen :: BIN, optional
     r :: REAL
     if (connections_for.created) return
     r = 0.5
     r.convert_from("angstrom")
     ATOM:set_atom_bonded_range_factor(r)
     .make_connection_table(connections_for,skip_hydrogen)
   end

   make_connection_table(connections_for,skip_hydrogen) ::: leaky
   ! Make the atom connection table "connections_for".  If
   ! "skip_hydrogen" is present and TRUE, connections are not made to
   ! any hydrogen atom.
     connections_for :: VEC{VEC_{INT}}* 
     skip_hydrogen :: BIN, optional
     pos_i,pos_j :: VEC{REAL}(3)
     i,j :: INT
     skip_H :: BIN
     skip_H = FALSE
     if (present(skip_hydrogen)) skip_H = skip_hydrogen
     connections_for.create(.dim,0)
     do i = 1,.dim
        if (skip_H) then
           if (self(i).atomic_number==1) cycle
        end
        do j = i+1,.dim
           if (skip_H) then
              if (self(j).atomic_number==1) cycle
           end
           if (NOT self(i).is_bonded_to(self(j))) cycle
           connections_for(i).element.append(j)
           connections_for(j).element.append(i)
        end
     end
   end

!  *****************
!  Protein detection
!  *****************

   find_N_terminal_atoms
   ! Print the indices of the N terminal atoms.
     list :: VEC{INT}* 
     .make_connection_table(skip_hydrogen=TRUE)
     .find_N_terminal_atoms(list) 
     stdout.text("List of N terminal atoms:")
     stdout.put(list,"column")
     list.destroy
     connections_for.destroy
   end

   find_N_terminal_atoms(list) ::: leaky
   ! Print the indices of the protein backbone atoms.
     list :: VEC{INT}* 
   ENSURE(connections_for.created,"no connection table")
   ENSURE(connections_for.dim==.dim,"wrong size connection table")
     N,Cp0,Ca,Cb,Cp,N1,Ot,Ct :: INT
     N_terminal :: BIN
     list.create(0)                           
     do N = 1,.dim                           
        if (self(N).atomic_number/=7) cycle
        Cp0 = 0
        if (NOT .is_protein_backbone_N(N,Cp0,Ca,Cb,Cp,N1,Ot,Ct,N_terminal,try=TRUE)) cycle
        if (NOT N_terminal) cycle
        list.append(N)
     end
   end


   find_protein_backbone
   ! Return the of indices of the N terminal atoms.
     backbone :: VEC{VEC_{INT}}* 
     .make_connection_table(skip_hydrogen=TRUE)
     .find_protein_backbone(backbone) 
     backbone.destroy
     connections_for.destroy
   end

   find_protein_backbone(backbone) ::: leaky
   ! Return the "backbone" of atom indices in each protein backbone.
     backbone :: VEC{VEC_{INT}}* 

   ENSURE(connections_for.created,"no connection table")
   ENSURE(connections_for.dim==.dim,"wrong size connection table")

     terminal :: VEC{INT}*
     N_terminal :: BIN
     i, N,Cp0,Ca,Cb,Cp,N1,Ot,Ct :: INT

     .find_N_terminal_atoms(terminal)

     backbone.create(terminal.dim,1)

     do i = 1,terminal.dim

        N = terminal(i)
        backbone(i)[1] = N
        Cp0 = 0

        do
           if (NOT .is_protein_backbone_N(N,Cp0,Ca,Cb,Cp,N1,Ot,Ct,N_terminal,try=TRUE)) exit
           if      (Ot/=0) then
              backbone(i).element.append([Ca,Cp,Ot])
              exit
           else if (Ct/=0) then
              backbone(i).element.append([Ca,Cp,Ct])
              exit
           else
              backbone(i).element.append([Ca,Cp,N1])
              N = N1
              Cp0 = Cp
           end
        end

        stdout.show("Backbone for protein strand = ",i)
        stdout.put(backbone(i)[:],"column")
     end

     terminal.destroy

   end

!   find_protein_backbone_from_N(N,C,found,Ca,Cc,N1,Ot)
!   ! Given the index "N" of a nitrogen atom and possibly the index "C"
!   ! of a connected carbon atom, return "found" as TRUE if that
!   ! nitrogen atom is part of a protein backbone. Also return the
!   ! index "Ca" of the C-alpha carbon, the index "Cc" of the C-carboxy
!   ! carbon, and either "N1" the next nitrogen in the backbone, or
!   ! "Ot" the terminal oxygen in the backbone. This assumes a
!   ! connection table has been made.
!     N,C :: INT, IN
!     found :: BIN, OUT
!     Ca,Cc,N1,Ot :: INT, OUT
!
!   ENSURE(connections_for.created,"no connection table")
!   ENSURE(connections_for.dim==.dim,"wrong size connection table")
!   ENSURE(N>0 AND N<=.dim,"N index out of range")
!   ENSURE(self(N).atomic_number==7,"N is not the index of a nitrogen atom")
!   ENSURE(C>=0 AND C<=.dim,"C index out of range")
!
!     nn,na,ia,nc,ic,O2,X :: INT
!
!     ! Set defaults
!     found = FALSE
!     Ca = 0; Cc = 0; N1 = 0; Ot = 0
!
!     ! Check if C is bonded to N
!     if (C>0) then
!        DIE_IF(NOT self(N).is_bonded_to(self(C)),"N is not bonded to C")
!     end
!
!     ! # of connections for N
!     nn = connections_for(N).element.dim                  
!
!     ! A backbone N must have 1 connection and can't have 
!     ! more than 2 connections
!     if (nn<=0) return
!     if (nn >2) return
!
!     ! Get the index of C-alpha atom
!     Ca = connections_for(N)[1]                         
!     if (Ca==C) then
!        DIE_IF(nn<2,"not enough connections to N = "//trim(N.to_str))
!        Ca = connections_for(N)[2]                         
!     end
!
!     ! C-alpha must be a carbon
!     if (self(Ca).atomic_number/=6) return
!
!     ! # of  connections for C-alpha
!     na = connections_for(Ca).element.dim 
!
!     ! C-alpha must have 2 connections (GLY) or 3 connections
!     if (na/=3 AND na/=2) return
!
!     ! Now find C-carboxy carbon
!     do ia = 1,na 
!        Cc = connections_for(Ca)[ia]          ! Index of C-carboxy
!        if (Cc==N) cycle                      ! Cc can't be the first N
!        if (self(Cc).atomic_number/=6) cycle  ! Cc must be a carbon
!        nc = connections_for(Cc).element.dim
!        if (nc/=3) cycle                      ! C-carboxy must have 3 connections
!        O2 = 0                                ! It must have a =O
!        N1 = 0                                ! It must have a -N, or
!        Ot = 0                                ! It must have a terminal -OH
!        do ic = 1,nc
!           X = connections_for(Cc)[ic]
!           if (X==Ca) cycle
!           if (self(X).atomic_number==7) N1 = X
!           if (self(X).atomic_number==8) then
!              if (Ot==0) then; O2 = X
!              else;            Ot = X
!              end
!           end
!        end
!        found = O2/=0 AND (N1/=0 OR Ot/=0)
!        if (found) exit
!     end
!   end


   is_protein_backbone_N(N,Cp0,Ca,Cb,Cp,N1,Ot,Ct,N_terminal,try) result (res)
   ! Return TRUE if "N" is the index of a nitrogen atom in the
   ! backbone of a protein, Cp0-N-Ca-Cp-(N1,Ot,Ct), given also
   ! (possibly) the index "Cp0" of a connected C prime carbon atom.
   ! Return the index "Ca" of the C-alpha carbon, the index of the
   ! beta carbon "Cb" (if it exists), the index "Cp" of the next C
   ! prime carboxy carbon, and either "N1" the next nitrogen in the
   ! backbone, or "Ot" the terminal oxygen in the backbone. If "N" is
   ! an N-terminal atom, return "N_terminal" as TRUE. This assumes a
   ! connection table has been made.
     N,Cp0 :: INT, IN
     Ca,Cb,Cp,N1,Ot,Ct :: INT, OUT
     N_terminal :: BIN, OUT
     try :: BIN, optional
     res :: BIN

   ENSURE(connections_for.created,"no connection table")
   ENSURE(connections_for.dim==.dim,"wrong size connection table")
   ENSURE(N>0 AND N<=.dim,"N index out of range")
   ENSURE(self(N).atomic_number==7,"N is not the index of a nitrogen atom")
   ENSURE(Cp0>=0 AND Cp0<=.dim,"Cp0 index out of range")

     C1,C2,C3,O1, O11,Ca1,N11 :: INT

     res = FALSE
     N_terminal = FALSE

     ! One connection to N: Terminal N-Ca connection
     if (.has_1_connection(N,6,Ca)) then                                         
        res = .is_protein_C_alpha(Ca,N,Cb,Cp,O1,N1,Ot,Ct)
        N_terminal = TRUE

     ! Two connections to N: Backbone or terminal PRO C1-N-C2 connection
     else if (.has_2_connections(N,6,6,C1,C2)) then                                         

        Ca = 0
        if      (C1==Cp0) then; Ca = C2
        else if (C2==Cp0) then; Ca = C1
        end

        ! We found Cp0, so we know Ca 
        if (Ca/=0) then 
           res = .is_protein_C_alpha(Ca,N,Cb,Cp,O1,N1,Ot,Ct)

        ! Find which of C1 and C2 is Ca. If requested, determine which
        ! of C1 and C2 is NOT a Cp, which implies N_terminal. Also
        ! check for a terminal proline.
        else 
           if      (.is_protein_C_alpha(C1,N,Cb,Cp,O1,N1,Ot,Ct)) then
              res = TRUE
              Ca = C1
              if (.has_ring(N,C2,[6,6,6])) N_terminal = TRUE
              if (NOT N_terminal AND present(try)) &
                 N_terminal = NOT .is_protein_C_prime_carbon(C2,N,O11,Ca1,N11)
           else if (.is_protein_C_alpha(C2,N,Cb,Cp,O1,N1,Ot,Ct)) then
              res = TRUE
              Ca = C2
              if (.has_ring(N,C1,[6,6,6])) N_terminal = TRUE
              if (NOT N_terminal AND present(try)) &
                 N_terminal = NOT .is_protein_C_prime_carbon(C1,N,O11,Ca1,N11)
           end

        end

     ! Three connections to N: Backbone PRO N-C1C2C3 connection
     ! NOTE: this only works if Cp0 is given
     else if (.has_3_connections(N,6,6,6,C1,C2,C3)) then                                         
        if      (C1==Cp0) then; C1 = C2; C2 = C3; C3 = 0
        else if (C2==Cp0) then; C2 = C3; C3 = 0
        else if (C3==Cp0) then; C3 = 0
        end
        if (C3==0) then
           if      (.is_protein_C_alpha(C1,N,Cb,Cp,O1,N1,Ot,Ct)) then
              if (.has_ring(N,C2,[6,6,6])) then
                 Ca = C1
                 res = TRUE
              end
           else if (.is_protein_C_alpha(C2,N,Cb,Cp,O1,N1,Ot,Ct)) then
              if (.has_ring(N,C1,[6,6,6])) then
                 Ca = C2
                 res = TRUE
              end
           end
        end
     end

   end

   is_protein_C_alpha(Ca,N,Cb,Cp,O1,N1,Ot,Ct) result (res)
   ! Return TRUE if "Ca" is the index of a C-alpha atom in the
   ! backbone of a protein. You must supply the connected nitrogen
   ! atom "N". Returned are the index of the beta carbon "Cb", the
   ! index of the next C prime carboxy carbon "Cp", the connected
   ! oxygen atom "O1", and either the next nitrogen in the
   ! backbone "N1", or "Ot" the terminal oxygen in the backbone. 
   ! NOTE: this is useful for travelling from N terminal to C terminal
   ! Diagram: N-CaCb-Cp=O1-(N1,Ot,Ct)
     Ca,N :: INT, IN
     Cb,Cp,O1,N1,Ot,Ct :: INT, OUT
     res :: BIN

   ENSURE(connections_for.created,"no connection table")
   ENSURE(connections_for.dim==.dim,"wrong size connection table")
   ENSURE(N>0 AND N<=.dim,"N index out of range")
   ENSURE(Ca>=0 AND Ca<=.dim,"Ca index out of range")

     C1,C2,C3 :: INT

     res = FALSE

     ! GLY N-Ca-Cp connection
     if (.has_2_connections(Ca,N,6,Cp)) then    
        if      (.is_CCOO_carbon(Cp,Ca,Ot,O1)) then ! two terminal oxygens
           N1 = 0
           Ct = 0
           Cb = 0
           res = TRUE
        else if (.is_CCON_carbon(Cp,Ca,O1,N1)) then ! Cp has =O and next nitrogen
           Ot = 0
           Ct = 0
           Cb = 0
           res = TRUE
        else if (.is_CCOC_carbon(Cp,Ca,O1,Ct)) then ! terminal methyl
           N1 = 0
           Ot = 0
           Cb = 0
           res = TRUE
        else if (.has_2_connections(Cp,Ca,7,N1)) then ! Cp has no oxygen
           Ot = 0
           Ct = 0
           Cb = 0
           res = TRUE
        end

     ! Any other residue, which of C1 and C2 is Cp?
     else if (.has_3_connections(Ca,N,6,6,C1,C2)) then  
        if      (.is_CCOO_carbon(C1,Ca,Ot,O1)) then ! two terminal oxygens
           Cp = C1
           Cb = C2
           N1 = 0
           Ct = 0
           res = TRUE
        else if (.is_CCON_carbon(C1,Ca,O1,N1)) then ! Cp=C1 has =O and next nitrogen
           Cp = C1
           Cb = C2
           Ot = 0
           Ct = 0
           res = TRUE
        else if (.is_CCOC_carbon(C1,Ca,O1,Ct)) then ! terminal methyl
           Cp = C1
           Cb = C2
           N1 = 0
           Ot = 0
           res = TRUE

        else if (.is_CCOO_carbon(C2,Ca,Ot,O1)) then
           Cp = C2
           Cb = C1
           N1 = 0
           Ct = 0
           res = TRUE
        else if (.is_CCON_carbon(C2,Ca,O1,N1)) then
           Cp = C2
           Cb = C1
           Ot = 0
           Ct = 0
           res = TRUE
        else if (.is_CCOC_carbon(C2,Ca,O1,Ct)) then ! terminal methyl
           Cp = C2
           Cb = C1
           N1 = 0
           Ot = 0
           res = TRUE

        else if (.has_2_connections(C1,Ca,7,N1)) then ! Cp has no oxygen
           Cp = C1
           Cb = C2
           Ot = 0
           Ct = 0
           res = TRUE
        else if (.has_2_connections(C2,Ca,7,N1)) then ! Cp has no oxygen
           Cp = C2
           Cb = C1
           Ot = 0
           Ct = 0
           res = TRUE
        end

     ! For non-standard branched residues, which of C1, C2, C3 is Cp?
     else if (.has_4_connections(Ca,N,6,C1,C2,C3)) then  
        if      (.is_CCOO_carbon(C1,Ca,Ot,O1)) then
           Cp = C1
           Cb = 0
           N1 = 0
           Ct = 0
           res = TRUE
        else if (.is_CCON_carbon(C1,Ca,O1,N1)) then
           Cp = C1
           Cb = 0
           Ot = 0
           Ct = 0
           res = TRUE
        else if (.is_CCOC_carbon(C1,Ca,O1,Ct)) then ! terminal methyl
           Cp = C1
           Cb = 0
           N1 = 0
           Ot = 0
           res = TRUE

        else if (.is_CCOO_carbon(C2,Ca,Ot,O1)) then
           Cp = C2
           Cb = 0
           N1 = 0
           Ct = 0
           res = TRUE
        else if (.is_CCON_carbon(C2,Ca,O1,N1)) then
           Cp = C2
           Cb = 0
           Ot = 0
           Ct = 0
           res = TRUE
        else if (.is_CCOC_carbon(C2,Ca,O1,Ct)) then ! terminal methyl
           Cp = C2
           Cb = 0
           N1 = 0
           Ot = 0
           res = TRUE

        else if (.is_CCOO_carbon(C3,Ca,Ot,O1)) then
           Cp = C3
           Cb = 0
           N1 = 0
           Ct = 0
           res = TRUE
        else if (.is_CCON_carbon(C3,Ca,O1,N1)) then
           Cp = C3
           Cb = 0
           Ot = 0
           Ct = 0
           res = TRUE
        else if (.is_CCOC_carbon(C3,Ca,O1,Ct)) then ! terminal methyl
           Cp = C3
           Cb = 0
           N1 = 0
           Ot = 0
           res = TRUE

        else if (.has_2_connections(C1,Ca,7,N1)) then ! Cp has no oxygen
           Cp = C1
           Cb = 0
           Ot = 0
           Ct = 0
           res = TRUE
        else if (.has_2_connections(C2,Ca,7,N1)) then ! Cp has no oxygen
           Cp = C2
           Cb = 0
           Ot = 0
           Ct = 0
           res = TRUE
        else if (.has_2_connections(C3,Ca,7,N1)) then ! Cp has no oxygen
           Cp = C3
           Cb = 0
           Ot = 0
           Ct = 0
           res = TRUE
        end
     end
   end

   is_protein_C_prime_carbon(Cp,N,O,Ca,N1) result (res)
   ! Return TRUE if "Cp" is the index of a N-Cp-Ca-N1 carbon, where
   ! "N" is the index of a nitrogen bonded to "Cp". If TRUE, "O",
   ! "Ca" and "N1" are returned as the index of the bonded oxygen,
   ! alpha Carbon and previous nitrogen respectively.
     Cp,N :: INT, IN
     O,Ca,N1 :: INT, OUT
     res :: BIN
   ENSURE(connections_for.created,"no connection table")
   ENSURE(connections_for.dim==.dim,"wrong size connection table")
   ENSURE(Cp>=0 AND Cp<=.dim,"Cp index out of range")
   ENSURE( N>=0 AND  N<=.dim," N index out of range")
     Cb,Cb1,s,x,i :: INT
     list :: VEC{INT}*
     x = 6
     s = 7
     O  = 0
     Ca = 0
     N1 = 0
     res = FALSE
     if (.has_3_connections(Cp,N,8,6,O,Ca)) then      ! Cp=ON connection
        res =  .has_1_connection(O,Cp) &
          AND (.has_2_connections(Ca,Cp,7,N1) &
          OR   .has_3_connections(Ca,Cp,7,6,N1,Cb) &
          OR   .has_4_connections(Ca,Cp,s,x,x,N1,Cb,Cb1))
     else if (.has_a_connection(Cp,N)) then           ! Cp has no O connection
       if (.has_Z_connections(Cp,6,list)) then
          do i = 1,list.dim
             Ca = list(i)
             res = .has_2_connections(Ca,Cp,7,N1) &
              OR   .has_3_connections(Ca,Cp,7,6,N1,Cb) &
              OR   .has_4_connections(Ca,Cp,s,x,x,N1,Cb,Cb1)
              if (res) exit
          end
          list.destroy
       end
     end
   end

   is_NCOC_carbon(Cp,N,O,Ca,N1) result (res)
   ! Return TRUE if "Cp" is the index of a N-Cp=O-Ca-N1 carbon, where
   ! "N" is the index of a nitrogen bonded to "Cp". If TRUE, "O",
   ! "Ca" and "N1" are returned as the index of the bonded oxygen,
   ! alpha Carbon and next nitrogen respectively.
     Cp,N :: INT, IN
     O,Ca,N1 :: INT, OUT
     res :: BIN
   ENSURE(connections_for.created,"no connection table")
   ENSURE(connections_for.dim==.dim,"wrong size connection table")
   ENSURE(Cp>=0 AND Cp<=.dim,"Cp index out of range")
   ENSURE( N>=0 AND  N<=.dim," N index out of range")
     Cb,Cb1,s,x :: INT
     x = 6
     s = 7
     N1 = 0
     if (.has_3_connections(Cp,N,8,6,O,Ca)) then      ! Cp=ON connection
        res =  .has_1_connection(O,Cp) &
          AND (.has_2_connections(Ca,Cp,7,N1) &
          OR   .has_3_connections(Ca,Cp,7,6,N1,Cb) &
          OR   .has_4_connections(Ca,Cp,s,x,x,N1,Cb,Cb1))
     else
        res = FALSE
     end
   end

   is_CCOO_carbon(Cp,Ca,O1,O2) result (res)
   ! Return TRUE if "Cp" is the index of a Ca-Cp=OO carbon, where "Ca"
   ! is the index of an (alpha) carbon bonded to "Cp". If TRUE, "O1" and
   ! "O2" are returned as the indices of the bonded oxygens.
     Cp,Ca :: INT, IN
     O1,O2 :: INT, OUT
     res :: BIN
   ENSURE(connections_for.created,"no connection table")
   ENSURE(connections_for.dim==.dim,"wrong size connection table")
   ENSURE(Cp>=0 AND Cp<=.dim,"Cp index out of range")
   ENSURE(Ca>=0 AND Ca<=.dim,"Ca index out of range")
     if (.has_3_connections(Cp,Ca,8,8,O1,O2)) then      ! Cp=O1O2 connection
        res = .has_1_connection(O1,Cp) AND .has_1_connection(O2,Cp)
     else
        res = FALSE
     end
   end

   is_CCOC_carbon(Cp,Ca,O1,C) result (res)
   ! Return TRUE if "Cp" is the index of a Ca-Cp=OC carbon, where "Ca"
   ! is the index of an (alpha) carbon bonded to "Cp". If TRUE, "O1" and
   ! "C" are returned as the indices of the bonded oxygen and terminal
   ! methyl.
     Cp,Ca :: INT, IN
     O1,C :: INT, OUT
     res :: BIN
   ENSURE(connections_for.created,"no connection table")
   ENSURE(connections_for.dim==.dim,"wrong size connection table")
   ENSURE(Cp>=0 AND Cp<=.dim,"Cp index out of range")
   ENSURE(Ca>=0 AND Ca<=.dim,"Ca index out of range")
     if (.has_3_connections(Cp,Ca,8,6,O1,C)) then      ! Cp=O1C connection
        res = .has_1_connection(O1,Cp) AND .has_1_connection(C,Cp)
     else
        res = FALSE
     end
   end

   is_CCON_carbon(Cp,Ca,O1,N1) result (res)
   ! Return TRUE if "Cp" is the index of a Ca-Cp=ON carbon, where "Ca"
   ! is the index of an (alpha) carbon bonded to "Cp". If TRUE, "O1" and
   ! "N1" are returned as the indices of the bonded oxygen and
   ! nitrogen atom.
     Cp,Ca :: INT, IN
     O1,N1 :: INT, OUT
     res :: BIN
   ENSURE(connections_for.created,"no connection table")
   ENSURE(connections_for.dim==.dim,"wrong size connection table")
   ENSURE(Cp>=0 AND Cp<=.dim,"C index out of range")
     res = .has_3_connections(Cp,Ca,8,7,O1,N1)
   end

   has_a_connection(X,W) result (res)
   ! Returns TRUE if the atom with index "X" is connected to the atom
   ! with index "W".
     X,W :: INT, IN
     res :: BIN

   ENSURE(X>0 AND X<=.dim,"X index out of range")
   ENSURE(W>0 AND W<=.dim,"W index out of range")
   ENSURE(connections_for.created,"no connection table")
   ENSURE(connections_for.dim==.dim,"wrong size connection table")

     res = any(connections_for(X)[:]==W)

   end

   has_Z_connection(X,Z) result (res)
   ! Returns TRUE if the atom with index "X" is connected to an atom
   ! with atomic number "Z".
     X,Z :: INT, IN
     res :: BIN

   ENSURE(X>0 AND X<=.dim,"X index out of range")
   ENSURE(connections_for.created,"no connection table")
   ENSURE(connections_for.dim==.dim,"wrong size connection table")

     res = any(self(connections_for(X)[:]).atomic_number==Z)

   end

   has_Z_connections(X,Z,list) result (res) ::: leaky
   ! Return "TRUE" if atom "X" has connections to atoms with atomic
   ! number "Z", and if so, return a "list" of the atom indices.
     X,Z :: INT, IN
     list :: VEC{INT}*
     res :: BIN

   ENSURE(X>0 AND X<=.dim,"X index out of range")
   ENSURE(connections_for.created,"no connection table")
   ENSURE(connections_for.dim==.dim,"wrong size connection table")

     nx,i,Y :: INT

     res = FALSE
     nx = connections_for(X).element.dim

     if (nx==0) return

     list.create(0)
     do i = 1,nx
        Y = connections_for(X)[i]            ! Index of atom connected to X
        if (self(Y).atomic_number/=Z) cycle  ! Y must have atomic number Z
        list.append(Y)
     end

     res = list.created

   end

!   has_connections(X,Z,Y) result (res)
!   ! Returns TRUE if the atom with index "X" is connected to any atoms
!   ! with atomic number "Z", and if so, return the connected atom
!   ! indices in "Y".
!     X :: INT, IN
!     Z :: VEC{INT}, IN
!     Y :: VEC{INT}*
!     res :: BIN
!
!   ENSURE(X>0 AND X<=.dim,"X index out of range")
!   ENSURE(connections_for.created,"no connection table")
!   ENSURE(connections_for.dim==.dim,"wrong size connection table")
!
!     n,i,A :: INT
!
!     res = connections_for(X).element.dim>0
!     if (NOT res) return
!
!     n = count(self(connections_for(X)[:]).atomic_number==Z)
!     res = n>0
!     if (NOT res) return
!
!
!     Y.create(0)
!     n = 0
!     do i = 1,connections_for(X).element.dim
!        A = connections_for(X).element(i)
!        if (self(A).atomic_number/=Z) cycle
!        n = n + 1
!        Y.append(A)
!     end
!
!   end

   has_0_connections(X) result (res)
   ! Returns TRUE if the atom with index "X" no connection
     X :: INT, IN
     res :: BIN

   ENSURE(X>0 AND X<=.dim,"X index out of range")
   ENSURE(connections_for.created,"no connection table")
   ENSURE(connections_for.dim==.dim,"wrong size connection table")

     res = connections_for(X).element.dim == 0

   end

   has_1_connection(X,Y) result (res)
   ! Returns TRUE if the atom with index "X" only has one connection
   ! to an atom with index "Y".
     X,Y :: INT, IN
     res :: BIN

   ENSURE(X>0 AND X<=.dim,"X index out of range")
   ENSURE(Y>0 AND Y<=.dim,"Y index out of range")
   ENSURE(connections_for.created,"no connection table")
   ENSURE(connections_for.dim==.dim,"wrong size connection table")

     res = connections_for(X).element.dim == 1
     if (NOT res) return
     res = connections_for(X)[1] == Y

   end

   has_1_connection(X,Z,Y) result (res)
   ! Returns TRUE if the atom with index "X" only has one connection
   ! to an atom with atomic number "Z".If there is a connection, return
   ! the index of the connected atom in "Y".
     X,Z :: INT, IN
     Y   :: INT, OUT
     res :: BIN

   ENSURE(X>0 AND X<=.dim,"X index out of range")
   ENSURE(connections_for.created,"no connection table")
   ENSURE(connections_for.dim==.dim,"wrong size connection table")

     nx :: INT

     res = FALSE
     nx = connections_for(X).element.dim
     if (nx/=1) return

     Y = connections_for(X)[1] 
     if (self(Y).atomic_number/=Z) then
        Y = 0
     else
        res = TRUE
     end

   end

   has_2_connections(X,Y1,Y2) result (res)
   ! Returns TRUE if the atom with index "X" has two connections:
   ! one to the atom with index "Y1", the other to the atom with 
   ! index "Y2".
     X,Y1,Y2 :: INT, IN
     res :: BIN

   ENSURE(X>0 AND X<=.dim,"X index out of range")
   ENSURE(connections_for.created,"no connection table")
   ENSURE(connections_for.dim==.dim,"wrong size connection table")

     res = connections_for(X).element.dim == 2
     if (NOT res) return
     res = (connections_for(X)[1]==Y1 AND connections_for(X)[2]==Y2) OR &
           (connections_for(X)[2]==Y1 AND connections_for(X)[1]==Y2) 
   end

   has_2_connections(X,Z1,Z2,Y1,Y2) result (res)
   ! Returns TRUE if the atom with index "X" has two connections:
   ! one to an atom with atomic number "Z1", the other to an atom with
   ! atomic number "Z2". If there are connectons, return the indices
   ! of these atoms as "Y1" and "Y2" respectively.
     X,Z1,Z2 :: INT, IN
     Y1,Y2 :: INT, OUT
     res :: BIN

   ENSURE(X>0 AND X<=.dim,"X index out of range")
   ENSURE(connections_for.created,"no connection table")
   ENSURE(connections_for.dim==.dim,"wrong size connection table")

     A1,A2 :: INT

     Y1 = 0
     Y2 = 0
     res = FALSE
     if (connections_for(X).element.dim/=2) return

     A1 = connections_for(X)[1]
     A2 = connections_for(X)[2]
     if      (self(A1).atomic_number==Z1 AND self(A2).atomic_number==Z2) then
        Y1 = A1
        Y2 = A2
        res = TRUE
     else if (self(A2).atomic_number==Z1 AND self(A1).atomic_number==Z2) then
        Y1 = A2
        Y2 = A1
        res = TRUE
     end
   end

   has_2_connections(X,W,Z,Y) result (res)
   ! Returns TRUE if the atom with index "X" has two connections:
   ! one to the atom with index "W", the other to an atom with atomic
   ! number "Z".If there is a latter connection, return the index of 
   ! atom with atomic number "Z" in "Y".
     X,W,Z :: INT, IN
     Y :: INT, OUT
     res :: BIN

   ENSURE(X>0 AND X<=.dim,"X index out of range")
   ENSURE(W>0 AND W<=.dim,"W index out of range")
   ENSURE(connections_for.created,"no connection table")
   ENSURE(connections_for.dim==.dim,"wrong size connection table")

     nx,Y1,Y2 :: INT

     Y = 0
     res = FALSE
     nx = connections_for(X).element.dim
     if (nx/=2) return

     Y1 = connections_for(X)[1] 
     Y2 = connections_for(X)[2] 
     if      (Y1==W AND self(Y2).atomic_number==Z) then
        Y = Y2
        res = TRUE
     else if (Y2==W AND self(Y1).atomic_number==Z) then
        Y = Y1
        res = TRUE
     end
   end

   has_3_connections(X,Z1,Z2,Z3,Y1,Y2,Y3) result (res)
   ! Returns TRUE if the atom with index "X" has three connections:
   ! to atoms with atomic numbers "Z1", "Z2" and "Z3" with the atom
   ! indices returned in "Y1", "Y2" and "Y3".
     X,Z1,Z2,Z3 :: INT, IN
     Y1,Y2,Y3 :: INT, OUT
     res :: BIN

   ENSURE(X>0 AND X<=.dim,"X index out of range")
   ENSURE(connections_for.created,"no connection table")
   ENSURE(connections_for.dim==.dim,"wrong size connection table")

     A1,A2,A3,N1,N2,N3 :: INT

     Y1 = 0
     Y2 = 0
     Y3 = 0
     res = FALSE

     if (connections_for(X).element.dim/=3) return

     A1 = connections_for(X)[1] 
     A2 = connections_for(X)[2] 
     A3 = connections_for(X)[3] 

     N1 = self(A1).atomic_number
     N2 = self(A2).atomic_number
     N3 = self(A3).atomic_number

     if      (Z1==N1 AND Z2==N2 AND Z3==N3) then; Y1=A1; Y2=A2; Y3=A3; res = TRUE
     else if (Z1==N1 AND Z2==N3 AND Z3==N2) then; Y1=A1; Y2=A3; Y3=A2; res = TRUE
     else if (Z1==N2 AND Z2==N1 AND Z3==N3) then; Y1=A2; Y2=A1; Y3=A3; res = TRUE
     else if (Z1==N2 AND Z2==N3 AND Z3==N1) then; Y1=A2; Y2=A3; Y3=A1; res = TRUE
     else if (Z1==N3 AND Z2==N1 AND Z3==N2) then; Y1=A3; Y2=A1; Y3=A2; res = TRUE
     else if (Z1==N3 AND Z2==N2 AND Z3==N1) then; Y1=A3; Y2=A2; Y3=A1; res = TRUE
     end

   end

   has_3_connections(X,W,Z1,Z2,Y1,Y2) result (res)
   ! Returns TRUE if the atom with index "X" has three connections:
   ! one to the atom with index "W", the other two to atoms with atomic
   ! numbers "Z1" and "Z2".If there are these latter connections,
   ! return the indices of atoms with atomic numbers "Z1" and "Z2" 
   ! in "Y1" and "Y2".
     X,W,Z1,Z2 :: INT, IN
     Y1,Y2 :: INT, OUT
     res :: BIN

   ENSURE(X>0 AND X<=.dim,"X index out of range")
   ENSURE(W>0 AND W<=.dim,"W index out of range")
   ENSURE(connections_for.created,"no connection table")
   ENSURE(connections_for.dim==.dim,"wrong size connection table")

     A1,A2,A3,N1,N2,N3 :: INT

     Y1 = 0
     Y2 = 0
     res = FALSE

     if (connections_for(X).element.dim/=3) return

     A1 = connections_for(X)[1] 
     A2 = connections_for(X)[2] 
     A3 = connections_for(X)[3] 

     N1 = self(A1).atomic_number
     N2 = self(A2).atomic_number
     N3 = self(A3).atomic_number

     if      (A1==W AND Z1==N2 AND Z2==N3) then; Y1=A2; Y2=A3; res = TRUE
     else if (A1==W AND Z1==N3 AND Z2==N2) then; Y1=A3; Y2=A2; res = TRUE
     else if (A2==W AND Z1==N1 AND Z2==N3) then; Y1=A1; Y2=A3; res = TRUE
     else if (A2==W AND Z1==N3 AND Z2==N1) then; Y1=A3; Y2=A1; res = TRUE
     else if (A3==W AND Z1==N1 AND Z2==N2) then; Y1=A1; Y2=A2; res = TRUE
     else if (A3==W AND Z1==N2 AND Z2==N1) then; Y1=A2; Y2=A1; res = TRUE
     end

   end

   has_3_connections(X,V,W,Z,Y) result (res)
   ! Returns TRUE if the atom with index "X" has three connections:
   ! two to atoms "V" and "W", and one to an atom with atomic
   ! numbers "Z".If there is this latter connection, return the
   ! index of this atom in "Y".
     X,V,W,Z :: INT, IN
     Y :: INT, OUT
     res :: BIN

   ENSURE(X>0 AND X<=.dim,"X index out of range")
   ENSURE(V>0 AND V<=.dim,"V index out of range")
   ENSURE(W>0 AND W<=.dim,"W index out of range")
   ENSURE(connections_for.created,"no connection table")
   ENSURE(connections_for.dim==.dim,"wrong size connection table")

     A1,A2,A3,N1,N2,N3 :: INT

     Y = 0
     res = FALSE

     if (connections_for(X).element.dim/=3) return

     A1 = connections_for(X)[1] 
     A2 = connections_for(X)[2] 
     A3 = connections_for(X)[3] 

     N1 = self(A1).atomic_number
     N2 = self(A2).atomic_number
     N3 = self(A3).atomic_number

     if      (A1==V AND A2==W  AND Z==N1) then; Y=A1; res = TRUE
     else if (A1==W AND A2==V  AND Z==N1) then; Y=A1; res = TRUE
     else if (A1==V AND A2==W  AND Z==N2) then; Y=A2; res = TRUE
     else if (A1==W AND A2==V  AND Z==N2) then; Y=A2; res = TRUE
     else if (A1==V AND A2==W  AND Z==N3) then; Y=A3; res = TRUE
     else if (A1==W AND A2==V  AND Z==N3) then; Y=A3; res = TRUE
     end

   end

   has_4_connections(X,W,Z1,Z2,Z3,Y1,Y2,Y3) result (res)
   ! Returns TRUE if the atom with index "X" has four connections: one
   ! to the atom with index "W", the other three to atoms with atomic
   ! numbers "Z1", "Z2" and "Z3".If there are these latter
   ! connections, return the indices of atoms with thse atomic numbers 
   ! in "Y1", "Y2" and "Y3" respectively.
     X,W,Z1,Z2,Z3 :: INT, IN
     Y1,Y2,Y3 :: INT, OUT
     res :: BIN

   ENSURE(X>0 AND X<=.dim,"X index out of range")
   ENSURE(W>0 AND W<=.dim,"W index out of range")
   ENSURE(connections_for.created,"no connection table")
   ENSURE(connections_for.dim==.dim,"wrong size connection table")

     A1,A2,A3,A4,N1,N2,N3,N4 :: INT

     Y1 = 0
     Y2 = 0
     Y3 = 0
     res = FALSE

     if (connections_for(X).element.dim/=4) return

     A1 = connections_for(X)[1] 
     A2 = connections_for(X)[2] 
     A3 = connections_for(X)[3] 
     A4 = connections_for(X)[4] 

     N1 = self(A1).atomic_number
     N2 = self(A2).atomic_number
     N3 = self(A3).atomic_number
     N4 = self(A4).atomic_number

     if      (A1==W AND Z1==N2 AND Z2==N3 AND Z3==N4) then; Y1=A2; Y2=A3; Y3=A4; res = TRUE
     else if (A1==W AND Z1==N2 AND Z2==N4 AND Z3==N3) then; Y1=A2; Y2=A4; Y3=A3; res = TRUE
     else if (A1==W AND Z1==N3 AND Z2==N2 AND Z3==N4) then; Y1=A3; Y2=A2; Y3=A4; res = TRUE
     else if (A1==W AND Z1==N3 AND Z2==N4 AND Z3==N2) then; Y1=A3; Y2=A4; Y3=A2; res = TRUE
     else if (A1==W AND Z1==N4 AND Z2==N2 AND Z3==N3) then; Y1=A4; Y2=A2; Y3=A3; res = TRUE
     else if (A1==W AND Z1==N4 AND Z2==N3 AND Z3==N2) then; Y1=A4; Y2=A3; Y3=A2; res = TRUE
     else if (A2==W AND Z1==N1 AND Z2==N3 AND Z3==N4) then; Y1=A1; Y2=A3; Y3=A4; res = TRUE
     else if (A2==W AND Z1==N1 AND Z2==N4 AND Z3==N3) then; Y1=A1; Y2=A4; Y3=A3; res = TRUE
     else if (A2==W AND Z1==N3 AND Z2==N1 AND Z3==N4) then; Y1=A3; Y2=A1; Y3=A4; res = TRUE
     else if (A2==W AND Z1==N3 AND Z2==N4 AND Z3==N1) then; Y1=A3; Y2=A4; Y3=A1; res = TRUE
     else if (A2==W AND Z1==N4 AND Z2==N1 AND Z3==N3) then; Y1=A4; Y2=A1; Y3=A3; res = TRUE
     else if (A2==W AND Z1==N4 AND Z2==N3 AND Z3==N1) then; Y1=A4; Y2=A3; Y3=A1; res = TRUE
     else if (A3==W AND Z1==N2 AND Z2==N1 AND Z3==N4) then; Y1=A2; Y2=A1; Y3=A4; res = TRUE
     else if (A3==W AND Z1==N2 AND Z2==N4 AND Z3==N1) then; Y1=A2; Y2=A4; Y3=A1; res = TRUE
     else if (A3==W AND Z1==N1 AND Z2==N2 AND Z3==N4) then; Y1=A1; Y2=A2; Y3=A4; res = TRUE
     else if (A3==W AND Z1==N1 AND Z2==N4 AND Z3==N2) then; Y1=A1; Y2=A4; Y3=A2; res = TRUE
     else if (A3==W AND Z1==N4 AND Z2==N2 AND Z3==N1) then; Y1=A4; Y2=A2; Y3=A1; res = TRUE
     else if (A3==W AND Z1==N4 AND Z2==N1 AND Z3==N2) then; Y1=A4; Y2=A1; Y3=A2; res = TRUE
     else if (A4==W AND Z1==N2 AND Z2==N3 AND Z3==N1) then; Y1=A2; Y2=A3; Y3=A1; res = TRUE
     else if (A4==W AND Z1==N2 AND Z2==N1 AND Z3==N3) then; Y1=A2; Y2=A1; Y3=A3; res = TRUE
     else if (A4==W AND Z1==N3 AND Z2==N2 AND Z3==N1) then; Y1=A3; Y2=A2; Y3=A1; res = TRUE
     else if (A4==W AND Z1==N3 AND Z2==N1 AND Z3==N2) then; Y1=A3; Y2=A1; Y3=A2; res = TRUE
     else if (A4==W AND Z1==N1 AND Z2==N2 AND Z3==N3) then; Y1=A1; Y2=A2; Y3=A3; res = TRUE
     else if (A4==W AND Z1==N1 AND Z2==N3 AND Z3==N2) then; Y1=A1; Y2=A3; Y3=A2; res = TRUE
     end

   end

   has_4_connections(X,W,Z,Y1,Y2,Y3) result (res)
   ! Returns TRUE if the atom with index "X" has four connections: one
   ! to the atom with index "W", the other three to atoms with atomic
   ! number "Z".If there are these latter connections, return the
   ! indices of atoms with this atomic number in "Y1", "Y2" and "Y3"
   ! respectively.
     X,W,Z :: INT, IN
     Y1,Y2,Y3 :: INT, OUT
     res :: BIN

   ENSURE(X>0 AND X<=.dim,"X index out of range")
   ENSURE(W>0 AND W<=.dim,"W index out of range")
   ENSURE(connections_for.created,"no connection table")
   ENSURE(connections_for.dim==.dim,"wrong size connection table")

     A1,A2,A3,A4,N1,N2,N3,N4 :: INT

     Y1 = 0
     Y2 = 0
     Y3 = 0
     res = FALSE

     if (connections_for(X).element.dim/=4) return

     A1 = connections_for(X)[1] 
     A2 = connections_for(X)[2] 
     A3 = connections_for(X)[3] 
     A4 = connections_for(X)[4] 

     N1 = self(A1).atomic_number
     N2 = self(A2).atomic_number
     N3 = self(A3).atomic_number
     N4 = self(A4).atomic_number

     if      (A1==W AND Z==N2 AND Z==N3 AND Z==N4) then; Y1=A2; Y2=A3; Y3=A4; res = TRUE
     else if (A2==W AND Z==N1 AND Z==N3 AND Z==N4) then; Y1=A1; Y2=A3; Y3=A4; res = TRUE
     else if (A3==W AND Z==N2 AND Z==N1 AND Z==N4) then; Y1=A2; Y2=A1; Y3=A4; res = TRUE
     else if (A4==W AND Z==N2 AND Z==N3 AND Z==N1) then; Y1=A2; Y2=A3; Y3=A1; res = TRUE
     end

   end

   has_ring(A,B,Z,R) result (res)
   ! Return TRUE if the atoms with indices "A" and "B" form part of a
   ! single connection ring of atoms whose atomic numbers after atom
   ! "B" are given in "Z". NOTE: "A" need not be single connected.
     A,B :: INT, IN
     Z :: VEC{INT}, IN
     R :: VEC{INT}, OUT, optional
     res :: BIN
   ENSURE(connections_for.created,"no connection table")
   ENSURE(connections_for.dim==.dim,"wrong size connection table")
   ENSURE(A>=0 AND A<=.dim,"A index out of range")
   ENSURE(B>=0 AND B<=.dim,"A index out of range")
   ENSURE(Z.dim>0,"Z array too small")
     i,W,X,Y :: INT
     W = A
     X = B
     do i = 1,Z.dim
        res = .has_2_connections(X,W,Z(i),Y)
        if (NOT res) return
        if (present(R)) R(i) = Y
        W = X
        X = Y
     end
     res = .has_a_connection(X,A)
   end

   has_chain(A,B,Z,C) result (res)
   ! Return TRUE if the atoms with indices "A" and "B" form part of a
   ! single connection chain of atoms whose atomic numbers after atom
   ! "B" are given in "Z". 
     A,B :: INT, IN
     Z :: VEC{INT}, IN
     C :: VEC{INT}, OUT, optional
     res :: BIN
   ENSURE(connections_for.created,"no connection table")
   ENSURE(connections_for.dim==.dim,"wrong size connection table")
   ENSURE(A>=0 AND A<=.dim,"A index out of range")
   ENSURE(B>=0 AND B<=.dim,"A index out of range")
   ENSURE(Z.dim>0,"Z array too small")
     i,W,X,Y :: INT
     W = A
     X = B
     do i = 1,Z.dim
        res = .has_2_connections(X,W,Z(i),Y)
        if (NOT res) return
        if (present(C)) C(i) = Y
        W = X
        X = Y
     end
   end

!  ********************
!  Amino acid detectors
!  ********************

   put_protein_sequence ::: leaky
   ! Return the "backbone" of atom indices in each protein backbone.

     backbone :: VEC{VEC_{INT}}* 
     terminal :: VEC{INT}*
     N_terminal :: BIN
     i, N,Cp0,Ca,Cb,Cp,N1,Ot,Ct :: INT

     .make_connection_table(skip_hydrogen=TRUE)

     .find_N_terminal_atoms(terminal)

     backbone.create(terminal.dim,1)

     do i = 1,terminal.dim

        N = terminal(i)
        backbone(i)[1] = N
        Cp0 = 0

        stdout.show("Sequence for protein strand = ",i)

        do

           if (NOT .is_protein_backbone_N(N,Cp0,Ca,Cb,Cp,N1,Ot,Ct,N_terminal,try=TRUE)) exit

           if      (Ot/=0) then
              backbone(i).element.append([Ca,Cp,Ot])
              exit
           else if (Ct/=0) then
              backbone(i).element.append([Ca,Cp,Ct])
              exit
           else
              backbone(i).element.append([Ca,Cp,N1])
              N = N1
              Cp0 = Cp
           end

           if (Cb==0) then; stdout.text("GLY")
           else;            stdout.text(.protein_side_chain_3_code(Ca,Cb))
           end

        end

     end

     terminal.destroy
     backbone.destroy
     connections_for.destroy

   end

!   find_protein_backbone_from_N(N,C,found,Ca,Cc,N1,Ot)
!   ! Given the index "N" of a nitrogen atom and possibly the index "C"
!   ! of a connected carbon atom, return "found" as TRUE if that
!   ! nitrogen atom is part of a protein backbone. Also return the
!   ! index "Ca" of the C-alpha carbon, the index "Cc" of the C-carboxy
!   ! carbon, and either "N1" the next nitrogen in the backbone, or
!   ! "Ot" the terminal oxygen in the backbone. This assumes a
!   ! connection table has been made.
!     N,C :: INT, IN
!     found :: BIN, OUT
!     Ca,Cc,N1,Ot :: INT, OUT
!
!   ENSURE(connections_for.created,"no connection table")
!   ENSURE(connections_for.dim==.dim,"wrong size connection table")
!   ENSURE(N>0 AND N<=.dim,"N index out of range")
!   ENSURE(self(N).atomic_number==7,"N is not the index of a nitrogen atom")
!   ENSURE(C>=0 AND C<=.dim,"C index out of range")
!
!     nn,na,ia,nc,ic,O2,X :: INT
!
!     ! Set defaults
!     found = FALSE
!     Ca = 0; Cc = 0; N1 = 0; Ot = 0
!
!     ! Check if C is bonded to N
!     if (C>0) then
!        DIE_IF(NOT self(N).is_bonded_to(self(C)),"N is not bonded to C")
!     end
!
!     ! # of connections for N
!     nn = connections_for(N).element.dim                  
!
!     ! A backbone N must have 1 connection and can't have 
!     ! more than 2 connections
!     if (nn<=0) return
!     if (nn >2) return
!
!     ! Get the index of C-alpha atom
!     Ca = connections_for(N)[1]                         
!     if (Ca==C) then
!        DIE_IF(nn<2,"not enough connections to N = "//trim(N.to_str))
!        Ca = connections_for(N)[2]                         
!     end
!
!     ! C-alpha must be a carbon
!     if (self(Ca).atomic_number/=6) return
!
!     ! # of  connections for C-alpha
!     na = connections_for(Ca).element.dim 
!
!     ! C-alpha must have 2 connections (GLY) or 3 connections
!     if (na/=3 AND na/=2) return
!
!     ! Now find C-carboxy carbon
!     do ia = 1,na 
!        Cc = connections_for(Ca)[ia]          ! Index of C-carboxy
!        if (Cc==N) cycle                      ! Cc can't be the first N
!        if (self(Cc).atomic_number/=6) cycle  ! Cc must be a carbon
!        nc = connections_for(Cc).element.dim
!        if (nc/=3) cycle                      ! C-carboxy must have 3 connections
!        O2 = 0                                ! It must have a =O
!        N1 = 0                                ! It must have a -N, or
!        Ot = 0                                ! It must have a terminal -OH
!        do ic = 1,nc
!           X = connections_for(Cc)[ic]
!           if (X==Ca) cycle
!           if (self(X).atomic_number==7) N1 = X
!           if (self(X).atomic_number==8) then
!              if (Ot==0) then; O2 = X
!              else;            Ot = X
!              end
!           end
!        end
!        found = O2/=0 AND (N1/=0 OR Ot/=0)
!        if (found) exit
!     end
!   end

   protein_side_chain_3_code(Ca,Cb) result (res)
   ! Returns the 3 letter code for a side chain connected at carbon
   ! atoms "Ca" and "Cb".
     Ca,Cb :: INT, IN
     res :: STR
   ENSURE(Ca>=0 AND Ca<=.dim,"Ca index out of range")
   ENSURE(Cb>=0 AND Cb<=.dim,"Cb index out of range")
   ENSURE(self(Ca).atomic_number==6,"must suppy index of alpha carbon atom")
   ENSURE(self(Cb).atomic_number==6,"must suppy index of beta carbon atom")
     if      (.has_ALA(Ca,Cb)) then; res = "ALA"
     else if (.has_ARG(Ca,Cb)) then; res = "ARG"
     else if (.has_ASN(Ca,Cb)) then; res = "ASN"
     else if (.has_ASP(Ca,Cb)) then; res = "ASP"
     else if (.has_CYS(Ca,Cb)) then; res = "CYS"
     else if (.has_GLN(Ca,Cb)) then; res = "GLN"
     else if (.has_GLU(Ca,Cb)) then; res = "GLU"
     else if (.has_HIS(Ca,Cb)) then; res = "HIS"
     else if (.has_ILE(Ca,Cb)) then; res = "ILE"
     else if (.has_LEU(Ca,Cb)) then; res = "LEU"
     else if (.has_LYS(Ca,Cb)) then; res = "LYS"
     else if (.has_MET(Ca,Cb)) then; res = "MET"
     else if (.has_PHE(Ca,Cb)) then; res = "PHE"
     else if (.has_SER(Ca,Cb)) then; res = "SER"
     else if (.has_THR(Ca,Cb)) then; res = "THR"
     else if (.has_TRP(Ca,Cb)) then; res = "TRP"
     else if (.has_TYR(Ca,Cb)) then; res = "TYR"
     else if (.has_VAL(Ca,Cb)) then; res = "VAL"
     else;                           res = "UNK"
     end
   end

   has_ALA(Ca,Cb) result (res)
   ! Returns TRUE if the side chain at the alpha and beta carbon
   ! "Ca" and "Cb" describes ALA
     Ca,Cb :: INT, IN
     res :: BIN
     res = .has_1_connection(Cb,Ca)
   end

   has_ARG(Ca,Cb) result (res)
   ! Returns TRUE if the side chain at the alpha and beta carbon
   ! "Ca" and "Cb" describes ARG
     Ca,Cb :: INT, IN
     res :: BIN
     C :: VEC{INT}(4)
     Nz1,Nz2 :: INT
     res = .has_chain(Ca,Cb,[6,6,7,6],C)
     if (NOT res) return
     res = .has_3_connections(C(4),C(3),7,7,Nz1,Nz2)
     if (NOT res) return
     res = .has_1_connection(Nz1,C(4))
     if (NOT res) return
     res = .has_1_connection(Nz2,C(4))
   end

   has_ASN(Ca,Cb) result (res)
   ! Returns TRUE if the side chain at the alpha and beta carbon
   ! "Ca" and "Cb" describes ASN
     Ca,Cb :: INT, IN
     res :: BIN
     Cg,Og,Ng :: INT
     res = .has_2_connections(Cb,Ca,6,Cg)
     if (NOT res) return
     res = .has_3_connections(Cg,Cb,6,7,Og,Ng)
     if (NOT res) return
     res = .has_1_connection(Og,Cg)
     if (NOT res) return
     res = .has_1_connection(Ng,Cg)
   end

   has_ASP(Ca,Cb) result (res)
   ! Returns TRUE if the side chain at the alpha and beta carbon
   ! "Ca" and "Cb" describes ASP
     Ca,Cb :: INT, IN
     res :: BIN
     Cg,Og1,Og2 :: INT
     res = .has_2_connections(Cb,Ca,6,Cg)
     if (NOT res) return
     res = .has_3_connections(Cg,Cb,6,7,Og1,Og2)
     if (NOT res) return
     res = .has_1_connection(Og1,Cg)
     if (NOT res) return
     res = .has_1_connection(Og2,Cg)
   end

   has_CYS(Ca,Cb) result (res)
   ! Returns TRUE if the side chain at the alpha and beta carbon
   ! "Ca" and "Cb" describes CYS
     Ca,Cb :: INT, IN
     res :: BIN
     Sg :: INT
     res = .has_2_connections(Cb,Ca,16,Sg)
     if (NOT res) return
     res = .has_1_connection(Sg,Cb)
   end

   has_GLN(Ca,Cb) result (res)
   ! Returns TRUE if the side chain at the alpha and beta carbon
   ! "Ca" and "Cb" describes GLN
     Ca,Cb :: INT, IN
     res :: BIN
     C :: VEC{INT}(2)
     Ne,Oe :: INT
     res = .has_chain(Ca,Cb,[6,6],C)
     if (NOT res) return
     res = .has_3_connections(C(2),C(1),8,7,Oe,Ne)
     if (NOT res) return
     res = .has_1_connection(Ne,C(2))
     if (NOT res) return
     res = .has_1_connection(Oe,C(2))
   end

   has_GLU(Ca,Cb) result (res)
   ! Returns TRUE if the side chain at the alpha and beta carbon
   ! "Ca" and "Cb" describes GLU
     Ca,Cb :: INT, IN
     res :: BIN
     C :: VEC{INT}(2)
     Oe1,Oe2 :: INT
     res = .has_chain(Ca,Cb,[6,6],C)
     if (NOT res) return
     res = .has_3_connections(C(2),C(1),8,8,Oe1,Oe2)
     if (NOT res) return
     res = .has_1_connection(Oe1,C(2))
     if (NOT res) return
     res = .has_1_connection(Oe2,C(2))
   end

   has_HIS(Ca,Cb) result (res)
   ! Returns TRUE if the side chain at the alpha and beta carbon
   ! "Ca" and "Cb" describes HIS
     Ca,Cb :: INT, IN
     res :: BIN
     Cg,Nd,Cd :: INT
     res = .has_2_connections(Cb,Ca,16,Cg)
     if (NOT res) return
     res = .has_3_connections(Cg,Cb,7,6,Nd,Cd)
     if (NOT res) return
     res = .has_ring(Cg,Nd,[6,7,6])
   end

   has_ILE(Ca,Cb) result (res)
   ! Returns TRUE if the side chain at the alpha and beta carbon
   ! "Ca" and "Cb" describes ILE
     Ca,Cb :: INT, IN
     res :: BIN
     Cg1,Cg2,Nd,Cd :: INT
     res = .has_3_connections(Cb,Ca,6,6,Cg1,Cg2)
     if (NOT res) return
     if      (.has_1_connection(Cg1,Cb)) then
        res = .has_2_connections(Cg2,Cb,6,Cd)
        if (NOT res) return
        res = .has_1_connection(Cd,Cg2)
     else if (.has_1_connection(Cg2,Cb)) then
        res = .has_2_connections(Cg1,Cb,6,Cd)
        if (NOT res) return
        res = .has_1_connection(Cd,Cg1)
     else
        res = FALSE
     end
   end

   has_LEU(Ca,Cb) result (res)
   ! Returns TRUE if the side chain at the alpha and beta carbon
   ! "Ca" and "Cb" describes LEU
     Ca,Cb :: INT, IN
     res :: BIN
     Cg,Cd1,Cd2 :: INT
     res = .has_2_connections(Cb,Ca,6,Cg)
     if (NOT res) return
     res = .has_3_connections(Cg,Cb,6,7,Cd1,Cd2)
     if (NOT res) return
     res = .has_1_connection(Cd1,Cg)
     if (NOT res) return
     res = .has_1_connection(Cd2,Cg)
   end

   has_LYS(Ca,Cb) result (res)
   ! Returns TRUE if the side chain at the alpha and beta carbon
   ! "Ca" and "Cb" describes LYS
     Ca,Cb :: INT, IN
     res :: BIN
     C :: VEC{INT}(4)
     res = .has_chain(Ca,Cb,[6,6,6,7],C)
     if (NOT res) return
     res = .has_1_connection(C(4),C(3))
   end

   has_MET(Ca,Cb) result (res)
   ! Returns TRUE if the side chain at the alpha and beta carbon
   ! "Ca" and "Cb" describes MET
     Ca,Cb :: INT, IN
     res :: BIN
     C :: VEC{INT}(3)
     res = .has_chain(Ca,Cb,[6,16,6],C)
     if (NOT res) return
     res = .has_1_connection(C(3),C(2))
   end

   has_PHE(Ca,Cb) result (res)
   ! Returns TRUE if the side chain at the alpha and beta carbon
   ! "Ca" and "Cb" describes PHE
     Ca,Cb :: INT, IN
     res :: BIN
     Cg,Cd1,Cd2 :: INT
     res = .has_2_connections(Cb,Ca,6,Cg)
     if (NOT res) return
     res = .has_3_connections(Cg,Cb,6,6,Cd1,Cd2)
     if (NOT res) return
     res = .has_ring(Cg,Cd1,[6,6,6,6])
   end

   has_SER(Ca,Cb) result (res)
   ! Returns TRUE if the side chain at the alpha and beta carbon
   ! "Ca" and "Cb" describes SER
     Ca,Cb :: INT, IN
     res :: BIN
     Og :: INT
     res = .has_2_connections(Cb,Ca,8,Og)
     if (NOT res) return
     res = .has_1_connection(Og,Cb)
   end

   has_THR(Ca,Cb) result (res)
   ! Returns TRUE if the side chain at the alpha and beta carbon
   ! "Ca" and "Cb" describes THR
     Ca,Cb :: INT, IN
     res :: BIN
     Cg,Og :: INT
     res = .has_3_connections(Cb,Ca,6,8,Cg,Og)
     if (NOT res) return
     res = .has_1_connection(Cg,Cb)
     if (NOT res) return
     res = .has_1_connection(Og,Cb)
   end

   has_TRP(Ca,Cb) result (res)
   ! Returns TRUE if the side chain at the alpha and beta carbon
   ! "Ca" and "Cb" describes TRP
     Ca,Cb :: INT, IN
     res :: BIN
     C :: VEC{INT}(4)
     Cg,Cd1,Cd2,Ne,Ce1,Ce2,Cf1 :: INT
     res = .has_2_connections(Cb,Ca,6,Cg)
     if (NOT res) return
     res = .has_3_connections(Cg,Cb,6,6,Cd1,Cd2)
     if (NOT res) return
     if      (.has_2_connections(Cd1,Cg,7,Ne)) then
        res = .has_2_connections(Ne,Cd1,6,Ce1)
        if (NOT res) return
        res = .has_3_connections(Ce1,Ne,Cd2,6,Cf1)
        if (NOT res) return
        res = .has_chain(Ce1,Cf1,[6,6,6,6],C)
        if (NOT res) return
        res = C(4)==Cd2
     else if (.has_2_connections(Cd2,Cg,7,Ne)) then
        res = .has_2_connections(Ne,Cd2,6,Ce1)
        if (NOT res) return
        res = .has_3_connections(Ce1,Ne,Cd1,6,Cf1)
        if (NOT res) return
        res = .has_chain(Ce1,Cf1,[6,6,6,6],C)
        if (NOT res) return
        res = C(4)==Cd1
     else
        res = FALSE
     end
   end

   has_TYR(Ca,Cb) result (res)
   ! Returns TRUE if the side chain at the alpha and beta carbon
   ! "Ca" and "Cb" describes TYR
     Ca,Cb :: INT, IN
     res :: BIN
     Cg,Cd1,Cd2,Ce1,Ce2,Cz,Oz :: INT
     res = .has_2_connections(Cb,Ca,6,Cg)
     if (NOT res) return
     res = .has_3_connections(Cg,Cb,6,6,Cd1,Cd2)
     if (NOT res) return
     res = .has_2_connections(Cd1,Cg,6,Ce1)
     if (NOT res) return
     res = .has_2_connections(Cd2,Cg,6,Ce2)
     if (NOT res) return
     res = .has_2_connections(Ce1,Cg,6,Cz)
     if (NOT res) return
     res = .has_2_connections(Ce2,Cg,6,Cz)
     if (NOT res) return
     res = .has_3_connections(Cz,Ce1,Ce2,8,Oz)
     if (NOT res) return
     res = .has_1_connection(Oz,Cz)
   end

   has_VAL(Ca,Cb) result (res)
   ! Returns TRUE if the side chain at the alpha and beta carbon
   ! "Ca" and "Cb" describes THR
     Ca,Cb :: INT, IN
     res :: BIN
     Cg1,Cg2 :: INT
     res = .has_3_connections(Cb,Ca,6,6,Cg1,Cg2)
     if (NOT res) return
     res = .has_1_connection(Cg1,Cb)
     if (NOT res) return
     res = .has_1_connection(Cg2,Cb)
   end

!  ************************
!  Bonds, distances, angles
!  ************************

   bonded(a,b,range_factor) result (res)
   ! Return true if "self" is bonded to "b".  If present, "range_factor" is used
   ! to determine the distance range in which the atoms are regarded as bonded.
   ! This uses the CCDC method, as documented on their web page.
      a,b :: INT
      range_factor :: REAL, optional
      res :: BIN
      res = self(a).is_bonded_to(self(b),range_factor)
   end

   are_nearby(a,b,dist) result (res)
   ! Return whether atoms "a" and "b" are nearby, i.e. within length "dist".
      a,b :: INT
      dist :: REAL
      res :: BIN
      tmp :: VEC{REAL}(3)
      r2 :: REAL
      tmp = self(a).pos - self(b).pos
      tmp = abs(tmp)
      if      (tmp(1)>dist) then; res = FALSE
      else if (tmp(2)>dist) then; res = FALSE
      else if (tmp(3)>dist) then; res = FALSE
      else
         r2 = dot_product(tmp,tmp)
         res = (r2 < dist*dist)
      end
   end

   connected(a,b,c,d) result (res)
   ! Return true if atoms "a" "b" "c" and "d" are connected together
      a,b,c,d :: INT
      res :: BIN
      res = .bonded(a,b) OR .bonded(a,c) OR .bonded(a,d)
      res = res AND ( .bonded(b,a) OR .bonded(b,c) OR .bonded(b,d) )
      res = res AND ( .bonded(c,a) OR .bonded(c,b) OR .bonded(c,d) )
      res = res AND ( .bonded(d,a) OR .bonded(d,b) OR .bonded(d,c) )
   end

   no_of_bonds result (res)
   ! Return the number of bonded atoms
      res :: INT
      a,b :: INT
      res = 0
      do a = 1,.n_atom
      do b = 1,a-1
         if (.bonded(a,b)) res = res + 1
      end
      end
   end

!   bond_distance(a,b) result (res)
!   ! Return the bond distance between atoms "a" and "b"
!      a,b :: INT
!      res :: REAL
!      res = self(a).pos.distance_to(self(b).pos)
!   end

   bond_distance(a,b) result (res)
   ! Return the bond distance between atoms "a" and "b"
      a,b :: INT
      res :: REAL
      tmp :: VEC{REAL}(3)
      tmp = self(a).pos - self(b).pos
      res = sqrt(dot_product(tmp,tmp))
!      res = self(a).pos.distance_to(self(b).pos)
   end

   no_of_angles result (res)
   ! Return the number of angles within bond contact distance
      res :: INT
      n,a,b,c :: INT
      n = .n_atom
      res = 0
      do a = 1,n
      do b = 1,n
         if (a==b) cycle
         if (NOT .bonded(a,b)) cycle
         do c = 1,n
            if (a==c OR b==c) cycle
            if (NOT .bonded(b,c)) cycle
            res = res + 1
         end
      end
      end
      res = res/2
   end

   bond_angle(a,b,c,degrees) result (res)
   ! Return the bond angle between atoms "a" , "b" and "c".
   ! The central atom is "b".
   ! If "degrees" is present and TRUE, result is in degrees.
      a,b,c :: INT
      degrees :: BIN, optional
      res :: REAL
      rba,rbc :: VEC{REAL}(3)
      change :: BIN
      rba = self(a).pos - self(b).pos
      rbc = self(c).pos - self(b).pos
      rba.normalise
      rbc.normalise
      res = rba.dot(rbc)
      res = res.arccos
      change = FALSE
      if (present (degrees)) change = degrees
      if (change) res = (180/PI)*res
   end

   no_of_torsion_angles result (res)
   ! Return the number of torsion angles within bond contact distance
      res :: INT
      n,a,b,c,d :: INT
      n = .n_atom
      res = 0
      do a = 1,n
      do b = 1,n
         if (a==b) cycle
         if (NOT .bonded(a,b)) cycle
         do c = 1,n
            if (a==c OR b==c) cycle
            if (NOT .bonded(b,c)) cycle
            do d = 1,n
               if (a==d OR b==d OR c==d) cycle
               if (NOT .bonded(c,d)) cycle
               res = res + 1
            end
         end
      end
      end
      res = res/2
   end

   torsion_angle(a,b,c,d,abc_colinear,bcd_colinear,degrees) result (res)
   ! Return the torsion angle between atoms "a", "b", "c" and "d". The atoms are
   ! assumed connected like a--b--c--d and the angle returned is that between
   ! vectors (a-b) and (d-c) i.e. the torsion angle looking down the b--c bond.
   ! If "degrees" is present and TRUE, result is in degrees.
   ! NOTE *** If the result is -ONE, either a--b--c or b--c--d are colinear, and
   ! the variables "abc_colinear" and "bcd_colinear" are set.
      a,b,c,d :: INT
      abc_colinear,bcd_colinear :: BIN, optional
      degrees :: BIN, optional
      res :: REAL
      change :: BIN
      tcd,tba,rba,rcd,rbc :: VEC{REAL}(3)
      if (present(abc_colinear)) abc_colinear = FALSE
      if (present(bcd_colinear)) bcd_colinear = FALSE
      rba = self(a).pos - self(b).pos
      rcd = self(d).pos - self(c).pos
      rbc = self(c).pos - self(b).pos
      tcd.to_cross_product_of(rcd,rbc)
      tba.to_cross_product_of(rba,rbc)
      res = ZERO
      if (abs( tba.norm)<TOL(5)) then
         res = -ONE
         if (present(abc_colinear)) abc_colinear = TRUE
      end
      if (abs( tcd.norm)<TOL(5)) then
         res = -ONE
         if (present(bcd_colinear)) bcd_colinear = TRUE
      end
      if (res<0) return
      tba.normalise
      tcd.normalise
      res = tba.dot(tcd)
      res = res.arccos
      change = FALSE
      if (present (degrees)) change = degrees
      if (change) res = (180/PI)*res
   end

   has_all_Hs_single_bonded(has_Hs) result (res)
   ! Return TRUE if "self" has all H atom single bonded. If there are
   ! no H's then the result is TRUE but "has_Hs" is set FALSE..
      res :: BIN
      has_Hs :: BIN, OUT

      a,b,n :: INT

      res = TRUE
      has_Hs = FALSE

      do a = 1,.dim

         if (self(a).atomic_number/=1) cycle

         has_Hs = TRUE
         
         n = 0
         do b = 1,.dim
            if (self(b).atomic_number==1) cycle
            if (NOT self(a).is_bonded_to(self(b))) cycle
            n = n + 1
            if (n>1) exit
         end

         res = n==1
         if (NOT res) exit

      end

   end

!  ************************
!  Size information methods
!  ************************

   n_atom result (res) ::: pure
   ! Return the number of atoms in the atom vector
      self :: IN
      res :: INT
      res = size(self)
   end

   n_e result (res) ::: pure
   ! Work out and return the number of electrons in the atomvec assuming
   ! that it is neutrally charged.
      self :: IN
      res :: INT
       a :: INT
      res = 0
      do a = 1,.n_atom
         res = res + self(a).atomic_number
      end
   end

   no_of_shells result (res) ::: pure
   ! Work out and return the number of gaussian shells in the basis set for the
   ! molecule
      self :: IN
      res :: INT
      a :: INT
      res = 0
      do a = 1,.n_atom
         res = res + self(a).no_of_shells
      end
   end

   n_shell result (res) ::: pure
   ! Work out and return the number of gaussian shells in the basis set for the
   ! molecule
      self :: IN
      res :: INT
      a :: INT
      res = 0
      do a = 1,.n_atom
         res = res + self(a).n_shell
      end
   end

   n_shell_pairs result (res) ::: pure
   ! Return the number of shell pairs in the basis set for the molecule
      self :: IN
      res :: INT
 ! ENSURE(.bases_are_all_resolved, "no basis set")
      n_shell :: INT
      n_shell = .n_shell
      res = n_shell*(n_shell+1)/2
   end

   n_shell_for_atom(i) result (res) ::: pure
   ! Work out and return the number of gaussian shells in the basis set for the
   ! molecule
      self :: IN
       i :: INT, IN
      res :: INT
      res = self(i).basis.n_shell
   end

   no_of_basis_functions result (res) ::: pure
   ! Work out and return the number of basis functions in the concatenated
   ! basis set for the atom list.
      self :: IN
      res :: INT
      a :: INT
      res = 0
      do a = 1,.n_atom
         res = res + self(a).no_of_basis_functions
      end
   end

   n_bf result (res) ::: pure
   ! Work out and return the number of basis functions in the concatenated
   ! basis set for the atom list.
      self :: IN
      res :: INT
       a :: INT
      res = 0
      do a = 1,.n_atom
         res = res + self(a).n_bf
      end
   end

   no_of_primitives result (res) ::: pure
   ! Work out and return the number of primitives in the basis set for the
   ! molecule
      self :: IN
      res :: INT
       a :: INT
      res = 0
      do a = 1,.n_atom
         res = res + self(a).no_of_primitives
      end
   end

   n_prim result (res) ::: pure
   ! Work out and return the number of primitives in the basis set for the
   ! molecule
      self :: IN
      res :: INT
       a :: INT
      res = 0
      do a = 1,.n_atom
         res = res + self(a).n_prim
      end
   end

   no_of_occupied_ANOs(ANOkind,tol) result (res)
   ! Returns the number of non-zero occupied atomic natural orbitals. For this
   ! purpose, zero is defined to be "tol" if present, or TOL(7) otherwise
      ANOkind :: STR, optional
      tol :: REAL, optional
      res :: INT
   ENSURE(self(1).occupation_numbers.created,"no occupation numbers")
      a :: INT
      res = 0
      do a = 1,.n_atom
         res = res + self(a).no_of_occupied_NOs(ANOkind,tol)
      end
   end

!  *********************
!  Basis set information
!  *********************

   bases_all_exist result (res)
   ! Return TRUE if *all* basis sets are associated. NOTE: do not confuse this
   ! with the routine .basis_are_resolved, which is probably what you want.
      res :: BIN
      a :: INT
      res = TRUE
      do a = 1,.n_atom
         if (NOT associated(self(a).basis)) then
            res = FALSE
            exit
         end
      end
   end

   bases_are_all_unlabeled result (res)
   ! Return TRUE if all basis set labels do not exist (or are blank)
      res :: BIN
      a :: INT
      if (NOT .bases_all_exist) then
         res = TRUE
      else
         res = TRUE
         do a = 1,.n_atom
            if (self(a).basis.label/=" ") then
               res = FALSE
               exit
            end
         end
      end
   end

   bases_are_all_labeled result (res)
   ! Return TRUE if all basis set labels exist (i.e. are not blank)
      res :: BIN
      a :: INT
      if (NOT .bases_all_exist) then
         res = FALSE
      else
         res = TRUE
         do a = 1,.n_atom
            if (self(a).basis.label==" ") then
               res = FALSE
               exit
            end
         end
      end
   end

   bases_are_part_labeled result (res)
   ! Return TRUE if only some basis set labels exist (i.e. are not blank)
      res :: BIN
      if (NOT .bases_all_exist) then
         res = FALSE
      else
         res = NOT .bases_are_all_labeled   &
           AND NOT .bases_are_all_unlabeled
      end
   end

   bases_are_resolved result (res)
   ! Return TRUE if all basis sets are associated AND their shell list parts are
   ! also associated.
      res :: BIN
      a :: INT
      res = TRUE
      do a = 1,.n_atom
         if (NOT associated(self(a).basis)) then
            res = FALSE
            exit
         else if (NOT associated(self(a).basis.shell)) then
            res = FALSE
            exit
         end
      end
   end

   slaterbases_all_exist result (res)
   ! Return TRUE if *all* slaterbasis sets are associated. NOTE: do not confuse
   ! this with the routine .slaterbasis_are_resolved, which is probably what you
   ! want.
      res :: BIN
      a :: INT
      res = TRUE
      do a = 1,.n_atom
         if (NOT associated(self(a).slaterbasis)) then
            res = FALSE
            exit
         end
      end
   end

   slaterbases_are_all_unlabeled result (res)
   ! Return TRUE if all slaterbasis set labels do not exist (or are blank)
      res :: BIN
      a :: INT
      if (NOT .slaterbases_all_exist) then
         res = TRUE
      else
         res = TRUE
         do a = 1,.n_atom
            if (self(a).slaterbasis.label/=" ") then
               res = FALSE
               exit
            end
         end
      end
   end

   slaterbases_are_all_labeled result (res)
   ! Return TRUE if all slaterbasis set labels exist (i.e. are not blank)
      res :: BIN
      a :: INT
      if (NOT .slaterbases_all_exist) then
         res = FALSE
      else
         res = TRUE
         do a = 1,.n_atom
            if (self(a).slaterbasis.label==" ") then
               res = FALSE
               exit
            end
         end
      end
   end

   slaterbases_are_part_labeled result (res)
   ! Return TRUE if only some slaterbasis set labels exist (i.e. are not blank)
      res :: BIN
      if (NOT .slaterbases_all_exist) then
         res = FALSE
      else
         res = NOT .slaterbases_are_all_labeled   &
           AND NOT .slaterbases_are_all_unlabeled
      end
   end

   slaterbases_are_resolved result (res)
   ! Return TRUE if all slaterbasis sets are associated AND their shell list parts are
   ! also associated.
      res :: BIN
      a :: INT
      res = TRUE
      do a = 1,.n_atom
         if (NOT associated(self(a).slaterbasis)) then
            res = FALSE
            exit
         else if (NOT associated(self(a).slaterbasis.shell)) then
            res = FALSE
            exit
         end
      end
   end

   coppensbases_all_exist result (res)
   ! Return TRUE if *all* coppens basis sets are associated. NOTE: do not
   ! confuse this with the routine .basis_are_resolved, which is probably what
   ! you want.
      res :: BIN
      a :: INT
      res = TRUE
      do a = 1,.n_atom
         if (NOT associated(self(a).coppensbasis)) then
            res = FALSE
            exit
         end
      end
   end

   coppensbases_are_all_unlabeled result (res)
   ! Return TRUE if all coppens basis set labels do not exist (or are blank)
      res :: BIN
      a :: INT
      if (NOT .coppensbases_all_exist) then
         res = TRUE
      else
         res = TRUE
         do a = 1,.n_atom
            if (self(a).coppensbasis.label/=" ") then
               res = FALSE
               exit
            end
         end
      end
   end

   coppensbases_are_all_labeled result (res)
   ! Return TRUE if all coppens basis set labels exist (i.e. are not blank)
      res :: BIN
      a :: INT
      if (NOT .coppensbases_all_exist) then
         res = FALSE
      else
         res = TRUE
         do a = 1,.n_atom
            if (self(a).coppensbasis.label==" ") then
               res = FALSE
               exit
            end
         end
      end
   end

   coppensbases_are_part_labeled result (res)
   ! Return TRUE if only some coppens basis set labels exist (i.e. are not blank)
      res :: BIN
      if (NOT .coppensbases_all_exist) then
         res = FALSE
      else
         res = NOT .coppensbases_are_all_labeled   &
           AND NOT .coppensbases_are_all_unlabeled
      end
   end

   coppensbases_are_resolved result (res)
   ! Return TRUE if all coppens basis sets are associated AND their shell list
   ! parts are also associated.
      res :: BIN
      a :: INT
      res = TRUE
      do a = 1,.n_atom
         if (NOT associated(self(a).coppensbasis)) then
            res = FALSE
            exit
         else if (NOT associated(self(a).coppensbasis.orbital)) then
            res = FALSE
            exit
         end
      end
   end

   get_distance_from(atomvec,distance,t1,t2)
   ! Calculates the shortest distance between an atom in self and one in
   ! atomvec.  Will set the distance to zero if calculated to less than 10^-6.
   ! If present, t1 and t2 are the indices of the two closest atoms.
     atomvec :: VEC{ATOM}, IN
     self :: IN
     distance :: REAL
     t1,t2 :: INT, optional
     dist :: REAL
     i,j,dim1,dim2 :: INT
     difference :: VEC{REAL}(3)

     dim1 = .n_atom
     dim2 = size(atomvec)
     ENSURE(present(t1) EQV present(t2),"need 0 or 2 optional arguments")

     ! Do the first pair explicitly to set a starting distance.
     ! We also work with distance^2 until the end - saves computation.
     difference = self(1).pos(:) - atomvec(1).pos(:)
     distance = dot_product(difference,difference)

     do i=1,dim1
       do j=1,dim2
         difference = self(i).pos(:) - atomvec(j).pos(:)
         dist = dot_product(difference,difference)
         if (dist < TOL(6)) dist = ZERO
         if (dist < distance) then
           distance = dist
           if (present(t1)) then
             t1=i; t2=j
           end
         end
       end
     end

     distance = sqrt(distance)
   end

   get_distance_from(pos,distance,t1)
   ! Calculates the shortest distance of "pos" to an atom in self.
   ! If present, t1 is the index of the closest atom.
     pos :: VEC{REAL}(3), IN
     self :: IN
     distance :: REAL
     t1 :: INT, optional
     dist :: REAL
     difference :: VEC{REAL}(3)
      i :: INT

     ! Do the first pair explicitly to set a starting distance.
     ! We also work with distance^2 until the end - saves computation.
     difference = self(1).pos(:) - pos(:)
     distance = dot_product(difference,difference)

     do i = 1, .n_atom
       difference = self(i).pos(:) - pos(:)
       dist = dot_product(difference,difference)
       if (dist < TOL(6)) dist = ZERO
       if (dist < distance) then
         distance = dist
         if (present(t1)) t1=i
       end
     end

     distance = sqrt(distance)
   end

   same_as(atomvec) result (res)
   ! Returns true if the two atomvecs contain the same atoms, though maybe in a
   ! different order.  Checks atomic number and position of each atom, but not
   ! the basis sets.
     atomvec :: VEC{ATOM}, IN
     res :: BIN
     matched :: VEC{BIN}(size(self))
     match_pos,match_kind,match :: BIN
     n,q,dim :: INT
     res = FALSE
     dim = .n_atom
     if (dim/=size(atomvec)) return ! different number of atoms in each.
     matched = FALSE
     do n = 1, dim
       match=FALSE
       do q = 1, dim
         match_kind =  (self(n).atomic_number == atomvec(q).atomic_number)
         match_pos  =  self(n).pos.same_as( atomvec(q).pos, TOL(3) )
         if (match_pos AND match_kind AND (NOT matched(q))) then
           matched(q) = TRUE
           match = TRUE
           exit
         end
       end
       if (NOT match) return ! atom n doesn't have a match.
     end
     do q = 1, dim           ! If not all of q are matched then atomvecs not same.
       if (NOT matched(q)) return
     end
     res = TRUE
   end

!  *************
!  Crystal stuff
!  *************

   translate_by(vector)
   ! Translate self by vector.
     self :: INOUT
     vector :: VEC{REAL}(3), IN
      n :: INT
     do n=1,.n_atom
       self(n).pos = self(n).pos + vector
     end
   end

   rotate_by(matrix)
   ! Rotate the atom positions by the rotation matrix
     self :: INOUT
     matrix :: MAT{REAL}(3,3), IN
     .rotate_positions_by(matrix)
     .rotate_thermal_tensors_by(matrix)
   end

   rotate_positions_by(matrix)
   ! Rotate the atom positions by the rotation matrix
     self :: INOUT
     matrix :: MAT{REAL}(3,3), IN
     n :: INT
     do n = 1,.n_atom
       self(n).pos = matmul(matrix,self(n).pos)
     end
   end

   rotate_thermal_tensors_by(matrix)
   ! Rotate the atom thermal tensors by the rotation matrix: this is the
   ! rotation matrix which transforms the cartesian position to a new position.
     self :: INOUT
     matrix :: MAT{REAL}(3,3), IN
     n :: INT
     do n = 1,.n_atom
       self(n).thermal_tensor.back_transform_using(matrix)
     end
   end

   thermal_tensor_to(crystal)
   ! Convert all thermal tensors from cartesians to crystal coordinates.
     crystal :: CRYSTAL, IN
      n :: INT
     do n=1,.n_atom
       self(n).thermal_tensor_to(crystal)
     end
   end

   thermal_tensor_from(crystal)
   ! Convert all thermal tensors from crystal coordinates to cartesians.
     crystal :: CRYSTAL, IN
      n :: INT
     do n=1,.n_atom
       self(n).thermal_tensor_from(crystal)
     end
   end

!   B_iso_to_U_iso
!   ! Pretend all the U_iso values are B_iso values, and divide them all by 
!   ! 8 PI^2 ... this maybe needed when the U_iso's are entered as B_iso values
!   ! in a cif file.
!     n :: INT
!     do n=1,.n_atom
!       self(n).U_iso = self(n).U_iso/(EIGHT*PI*PI)
!     end
!   end

   ensure_in_unit_cell(crystal)
   ! Translate the position of self to be in the unit cell.
   ! WARNING: Does this work -- dylan ?
     self :: INOUT
     crystal :: CRYSTAL, IN
     translation,coa_cart,coa_frac,trans_int :: VEC{REAL}(3)
     coa_cart = .centre_of_atoms
     coa_frac = matmul(crystal.unit_cell.inverse_matrix,coa_cart)   ! fractionals
     trans_int = floor(coa_frac + TOL(6))                ! round to lattice vector
     translation = matmul(crystal.unit_cell.inverse_matrix,translation) !cartesians
     .translate_by(-translation)
   end

   default_multiplicity result (res)
   ! Return the default multiplicity for an atomvec/molecule.
     self :: IN
     res :: REAL
     if (.n_atom==1) then
        res = self(1).ground_state_multiplicity
     else
        res = mod(.n_e,2) + 1
     end
   end

!  *********
!  Integrals
!  *********

   make_nuclear_matrix(Z)
   ! Calculate the nuclear attraction matrix "Z" for the atoms in the list.
     self :: target
     Z :: MAT{REAL}
   ENSURE(.bases_are_resolved, "no basis set")
   ENSURE(Z.is_square,"Z is not square")
   ENSURE(Z.dim1==.n_bf,"wrong size, Z")
     atom :: ATOM*
     Z_c :: MAT{REAL}*
     q,c,fa,la,fb,lb :: INT
     sh :: SHELL2
     .make_index_info
     Z = ZERO
     do q = 1,.n_shell_pairs
        .get_shell_pair(sh,q,fa,la,fb,lb)
        Z_c.create(sh.a.n_comp,sh.b.n_comp)
        do c = 1,.n_atom
           atom => self(c)
           sh.get_nuc(Z_c,atom.mass,atom.pos)
           Z(fa:la,fb:lb) = Z(fa:la,fb:lb) - atom.atomic_number * Z_c
        end
        Z_c.destroy
        sh.destroy_ptr_part
     end
     Z.symmetric_reflect
     .destroy_index_info
   end

   make_nuclear_matrix(Z,nuclei)
   ! Calculate the nuclear attraction matrix "Z" for the basis functions on all
   ! atoms in the list, but only for the positive nuclei specified in the
   ! "nuclei" list.
     self :: target
     Z :: MAT{REAL}
     nuclei :: VEC{INT}
   ENSURE(.bases_are_resolved, "no basis set")
   ENSURE(Z.is_square,"Z is not square")
   ENSURE(Z.dim1==.n_bf,"wrong size, Z")
     atom :: ATOM*
     Z_c :: MAT{REAL}*
     q,c,fa,la,fb,lb :: INT
     sh :: SHELL2
     .make_index_info
     Z = ZERO
     do q = 1,.n_shell_pairs
        .get_shell_pair(sh,q,fa,la,fb,lb)
        Z_c.create(sh.a.n_comp,sh.b.n_comp)
        do c = 1,size(nuclei)
           atom => self(nuclei(c))
           sh.get_nuc(Z_c,atom.mass,atom.pos)
           Z(fa:la,fb:lb) = Z(fa:la,fb:lb) - atom.atomic_number * Z_c
        end
        Z_c.destroy
        sh.destroy_ptr_part
     end
     Z.symmetric_reflect
     .destroy_index_info
   end

!  ***********
!  Shell pairs
!  ***********

   get_shell_pair(shell,index,fa,la,fb,lb) ::: leaky
   ! Get the SHELL2 object "shell" correponding to the pair index "index"
   ! Also return the basis function start indices "fa", "la", etc ...
      index :: INT, IN
      shell :: SHELL2, OUT
      fa,la,fb,lb :: INT, OUT
   ENSURE(index_info_created,"no index information")
      a,b,aa,sa,bb,sb :: INT
      a  = (1+int(sqrt(8.0d0*index-7.0d0)))/2
      b  = index - a*(a-1)/2
      fa = first_basis_fn_4_shell(a) ! These are module variables
      fb = first_basis_fn_4_shell(b)
      la = last_basis_fn_4_shell(a)
      lb = last_basis_fn_4_shell(b)
      aa = atom_4_shell(a)
      bb = atom_4_shell(b)
      sa = atom_shell_4_shell(a)
      sb = atom_shell_4_shell(b)
      shell.copy(self(aa).basis.shell(sa), self(bb).basis.shell(sb), &
                 self(aa).pos, self(bb).pos )
   end

   get_shell_pair(shell,index,fa,la,fb,lb,atom_a,atom_b) ::: leaky
   ! Get the SHELL2 object "shell" correponding to the pair index "index"
   ! Also return the basis function start indices "fa", "la", etc ...
   ! Plus the atoms the shells are located on, "atom_a" and "atom_b".
     index :: INT, IN
     shell :: SHELL2, OUT
     fa,la,fb,lb,atom_a,atom_b :: INT, OUT
   ENSURE(index_info_created,"no index information")
     a,b,sa,sb :: INT
     a  = (1+int(sqrt(8.0d0*index-7.0d0)))/2
     b  = index - a*(a-1)/2
     fa = first_basis_fn_4_shell(a)
     fb = first_basis_fn_4_shell(b)
     la = last_basis_fn_4_shell(a)
     lb = last_basis_fn_4_shell(b)
     atom_a = atom_4_shell(a)
     atom_b = atom_4_shell(b)
     sa = atom_shell_4_shell(a)
     sb = atom_shell_4_shell(b)
     shell.copy(self(atom_a).basis.shell(sa), self(atom_b).basis.shell(sb), &
                self(atom_a).pos, self(atom_b).pos )
   end

   make_index_info ::: leaky
   ! Define a vector of atom numbers corresponding to the molecule
   ! basis set shell numbers; also define a vector of atom shell numbers
   ! corresponding to the molecule basis set shell number
     atom_4_shell       => .atom_for_shell
     atom_shell_4_shell => .atom_shell_for_shell
     first_shell_4_atom => .first_shell_for_atom
     .make_shell_limits(first_basis_fn_4_shell,last_basis_fn_4_shell,angular_moment_4_shell)
     .make_atom_basis_fn_limits(first_basis_fn_4_atom,last_basis_fn_4_atom)
     index_info_created = TRUE
   end

   destroy_index_info ::: leaky
   ! Destroythe private index information. There may be problems with this for
   ! compilers without default initialisation ...
     atom_4_shell.destroy
     atom_shell_4_shell.destroy
     first_shell_4_atom.destroy
     first_basis_fn_4_shell.destroy
     last_basis_fn_4_shell.destroy
     first_basis_fn_4_atom.destroy
     last_basis_fn_4_atom.destroy
     index_info_created = FALSE
   end

   make_coppens_interpolators(interpolator) ::: leaky
   ! Make a unique set of coppensbasis orbital density interpolators.
   ! Make them using the defaults set in a give "interpolator".
   ! NOTE: This requires careful destroying.
   ! NOTE: any existing interpolators are destroyed first
      interpolator :: INTERPOLATOR*, optional
      unique_atom,atom_kind :: VEC{INT}*
      n_kind,k,u,j :: INT
      .make_unique_atom_list(unique_atom,atom_kind,n_kind)
      do k = 1,n_kind   ! Get interpolators only for unique atoms
        u = unique_atom(k)
        self(u).coppensbasis.make_interpolator(interpolator)
      ! self(u).coppensbasis.interpolator.put
        do j = u+1,.dim ! ... pointer assign the rest
           if (atom_kind(j)/=k) cycle
           self(j).coppensbasis.interpolator => self(u).coppensbasis.interpolator
        end
      end
      unique_atom.destroy
      atom_kind.destroy
   end

   destroy_coppens_interpolators ::: leaky
   ! Destroy the coppens interpolators for each atom. NOTE: This assumes that
   ! they were created only by the routine "make_coppens_interpolators".
      unique_atom,atom_kind :: VEC{INT}*
      n_kind,k,u,j :: INT
      if (NOT .has_all_coppens_interpolators) return
      .make_unique_atom_list(unique_atom,atom_kind,n_kind)
      do k = 1,n_kind   ! Destroy interpolators only for unique atoms
        u = unique_atom(k)
        self(u).coppensbasis.interpolator.destroy
        do j = u+1,.dim ! ... nullify the rest
           if (atom_kind(j)/=k) cycle
           nullify(self(j).coppensbasis.interpolator)
        end
      end
      unique_atom.destroy
      atom_kind.destroy
   end

   make_slater_interpolators(interpolator) ::: leaky
   ! Make a unique set of slaterbasis orbital density interpolators.
   ! Make them using the defaults set in a give "interpolator".
   ! NOTE: This requires careful destroying.
   ! NOTE: any existing interpolators are destroyed first
      interpolator :: INTERPOLATOR*, optional
      unique_atom,atom_kind :: VEC{INT}*
      n_kind,k,u,j :: INT
      .make_unique_atom_list(unique_atom,atom_kind,n_kind)
      do k = 1,n_kind   ! Get interpolators only for unique atoms
        u = unique_atom(k)
        self(u).slaterbasis.make_interpolator(interpolator)
      ! self(u).slaterbasis.interpolator.put
        do j = u+1,.dim ! ... pointer assign the rest
           if (atom_kind(j)/=k) cycle
           self(j).slaterbasis.interpolator => self(u).slaterbasis.interpolator
        end
      end
      unique_atom.destroy
      atom_kind.destroy
   end

!   make_slater_d_interpolators(interpolator) ::: leaky
!   ! Make a unique set of slaterbasis orbital density interpolators.
!   ! Make them using the defaults set in a give "interpolator".
!   ! NOTE: This requires careful destroying.
!   ! NOTE: any existing interpolators are destroyed first
!      interpolator :: INTERPOLATOR*, optional
!      unique_atom,atom_kind :: VEC{INT}*
!      n_kind,k,u,j :: INT
!      .make_unique_atom_list(unique_atom,atom_kind,n_kind)
!      do k = 1,n_kind   ! Get interpolators only for unique atoms
!        u = unique_atom(k)
!        self(u).slaterbasis.make_d_interpolators(interpolator)
!      ! self(u).slaterbasis.interpolator.put
!        do j = u+1,.dim ! ... pointer assign the rest
!           if (atom_kind(j)/=k) cycle
!           self(j).slaterbasis.interpolator => self(u).slaterbasis.interpolator
!           self(j).slaterbasis.d_interpolator => self(u).slaterbasis.d_interpolator
!           self(j).slaterbasis.d2_interpolator => self(u).slaterbasis.d2_interpolator
!        end
!      end
!      unique_atom.destroy
!      atom_kind.destroy
!   end

   destroy_slater_interpolators ::: leaky
   ! Destroy the slater interpolators for each atom. NOTE: This assumes that
   ! they were created only by the routine "make_slater_interpolators".
      unique_atom,atom_kind :: VEC{INT}*
      n_kind,k,u,j :: INT
      if (NOT .has_all_slater_interpolators) return
      .make_unique_atom_list(unique_atom,atom_kind,n_kind)
      do k = 1,n_kind   ! Destroy interpolators only for unique atoms
        u = unique_atom(k)
        self(u).slaterbasis.interpolator.destroy
        self(u).slaterbasis.d_interpolator.destroy
        self(u).slaterbasis.d2_interpolator.destroy
        do j = u+1,.dim ! ... nullify the rest
           if (atom_kind(j)/=k) cycle
           nullify(self(j).slaterbasis.interpolator)
           nullify(self(j).slaterbasis.d_interpolator)
           nullify(self(j).slaterbasis.d2_interpolator)
        end
      end
      unique_atom.destroy
      atom_kind.destroy
   end

!   max_interpolator_table_length result (res)
!   ! Returns the maximum interpolator table length. The table length depends on
!   ! the table cutoff value that was used when the interpolator was generated.
!   ! This table length is used for setting the cluster radius, for calculations
!   ! where the cluster size must be determined so that the Hirshfeld surface is
!   ! accurate.
!      res :: REAL
!   ENSURE(.has_all_interpolators,"interpolators are missing")
!      last :: REAL
!      i :: INT
!      res = ZERO
!      if      (.has_all_slater_interpolators) then
!         do i = 1,.dim
!            last = self(i).slaterbasis.interpolator.last_data_point
!            res = max(res,last)
!         end
!      else if (.has_all_coppens_interpolators) then
!         do i = 1,.dim
!            last = self(i).coppensbasis.interpolator.last_data_point
!            res = max(res,last)
!         end
!      end
!   end

   max_interpolator_table_length(tol) result (res)
   ! Returns the maximum interpolator table length for a given table cutoff
   ! tolerance "tol".  This table length is used for setting the cluster radius,
   ! for calculations where the cluster size must be determined so that the
   ! Hirshfeld surface is accurate.
      tol,res :: REAL
      last :: REAL
      i :: INT
      res = ZERO
      select case (self(1).basis_kind)
         case ("slater")
            ENSURE(.has_all_slater_bases,"missing slater bases")
            do i = 1,.dim
               last = self(i).slaterbasis.interpolator_table_length(tol)
               res = max(res,last)
            end
         case ("coppens")
            ENSURE(.has_all_coppens_bases,"missing coppens bases")
            do i = 1,.dim
               last = self(i).coppensbasis.interpolator_table_length(tol)
               res = max(res,last)
            end
         case default
            UNKNOWN(self(1).basis_kind)
      end
   end

!*******************************************************************************
!   Linear scaling stuff.
!*******************************************************************************

   make_fmm_tree(the_tree)
   ! Make the tree of cubes that contains which atoms are in which box.
     the_tree :: FMM_CUBE*
   ! child_offsets :: MAT{REAL}(3,8)
   ! cube_width,centre :: VEC{REAL}(3)
     min_atoms_per_cube,i :: INT
 
     ! Set information for this top level cube.
     the_tree.centre = .centre_of_atoms
     the_tree.width = .bounding_cube_width
     the_tree.n_atoms = .n_atom
     the_tree.atomlist.create(the_tree.n_atoms)
     do i=1,the_tree.n_atoms
       the_tree.atomlist(i) = i
     end
 
     ! Some default stuff.
     min_atoms_per_cube = 10
 
     ! Call the tree recursion routine for the children.
     if (the_tree.n_atoms>min_atoms_per_cube) then
       .make_fmm_tree_for_children(the_tree,min_atoms_per_cube)
     end
   end
 
   make_fmm_tree_for_children(parent,min_atoms_per_cube) ::: recursive
   ! Something.
     parent :: FMM_CUBE
     min_atoms_per_cube :: INT
     pos,centre :: VEC{REAL}(3)
     atom,n_atoms,i,j,choice :: INT
 
     if (parent.n_atoms >= min_atoms_per_cube) then
 
       ! Loop through children.
       do j=1,8
         ! Work in cartesians, not ideal but makes it easy.
         ! Child cube centres are derived from the parent centre.
         parent.child(1).centre = parent.centre + (/ HALF, HALF, HALF/)*parent.width
         parent.child(2).centre = parent.centre + (/ HALF, HALF,-HALF/)*parent.width
         parent.child(3).centre = parent.centre + (/ HALF,-HALF, HALF/)*parent.width
         parent.child(4).centre = parent.centre + (/ HALF,-HALF,-HALF/)*parent.width
         parent.child(5).centre = parent.centre + (/-HALF, HALF, HALF/)*parent.width
         parent.child(6).centre = parent.centre + (/-HALF, HALF,-HALF/)*parent.width
         parent.child(7).centre = parent.centre + (/-HALF,-HALF, HALF/)*parent.width
         parent.child(8).centre = parent.centre + (/-HALF,-HALF,-HALF/)*parent.width
 
         do i=1,8
           parent.child(i).atomlist.create(parent.atomlist.dim)
           parent.child(i).n_atoms = 0
         end
 
         ! Work out which cube we are in.  Think of it in terms of quadrants
         ! relative to an origin.  The quadrant structure is based on the cube
         ! centres above.
         centre = parent.centre
         do i=1,parent.atomlist.dim
           atom = parent.atomlist(i)
           pos = self(atom).pos - centre
           choice = 1
           if (pos(1)<ZERO) choice = choice + 4
           if (pos(2)<ZERO) choice = choice + 2
           if (pos(3)<ZERO) choice = choice + 1
           parent.child(choice).n_atoms = parent.child(choice).n_atoms + 1
           parent.child(choice).atomlist(parent.child(choice).n_atoms) = atom
         end
 
         ! Clean up memory.
         do i=1,8
           n_atoms = parent.child(i).n_atoms
           if (n_atoms==0) then
             parent.child(i).atomlist.destroy
           else
             parent.child(i).atomlist.shrink(n_atoms)
           end
         end
 
         ! Repeat the process for the children.
         do i=1,8
           if (parent.child(i).n_atoms>0) then
             .make_fmm_tree_for_children(parent.child(i),min_atoms_per_cube)
           end
         end
 
       end
     end
   end

end
