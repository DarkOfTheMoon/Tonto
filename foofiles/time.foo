! $Id$
!---------------------------------------------------------------------------
!  Time: time stuff.  Such as output date, time execution, etc.
!  (c) Daniel Grimwood, 1998
!---------------------------------------------------------------------------
module TIME

   use TYPES
   use MM
   use DBL

   implicit none         

#  include "macros"
#  include "time.int"

! type time_type
!   IVEC(5) :: started, stopped     ! Contains date_and_time
!   DBL :: start_cpu, stop_cpu      ! Contains cpu_time (seconds)
! end

   TIME, public :: std_time

  interface reset
    start
  end

contains

  start
  ! starts the counter
    .started   = .current
    .start_cpu = .current_cpu_time
    .stopped = 0
  end

  stop
  ! Stop the counter.
    .stopped  = .current
    .stop_cpu = .current_cpu_time
  end

  current result (res)
  ! returns current time
    IVEC(5) :: res
    IVEC(8) :: time
    INT :: y,m,d,j
    call date_and_time(values=time)
    y = time(1)
    m = time(2)
    d = time(3)
    .to_julian(d,m,y,j)
    res(1) = j       ! Julian day
    res(2) = time(5) ! hour
    res(3) = time(6) ! minute
    res(4) = time(7) ! second
    res(5) = time(8) ! millisecond
  end

  current_cpu_time result (res)
  ! What the current CPU_TIME is.
    DBL :: res
    real :: time
    call cpu_time(time)
    res = time
  end

  elapsed result (time)
  ! returns elapsed time
    IVEC(5) :: time
    time = .subtract_times( .stopped , .started)
  end

! *********************************************************************
! return time strings.
! *********************************************************************

  current_time result (res)
    STR(40) :: res
    res = "The current time is " // .time_to_str( .current ) // "."
  end

  start_time result (res)
    STR(37) :: res
    res = "Timer started at " // .time_to_str( .started ) // "."
  end

  stop_time result (res)
    STR(37) :: res
    res = "Timer stopped at " // .time_to_str( .stopped ) // "."
  end

  time_taken(task) result (res)
  ! Returns time taken. "Time taken is ..."
  ! If task given, "Time taken for "task" is ..."
    STR :: res
    CHR(*), optional :: task
    .stop
    if (present(task)) then
      res = "Time taken for " // trim(task) // " is " // &
            trim( .elapsed_time_to_str( .elapsed )) // "."
    else
    res = "Time taken is " // trim( .elapsed_time_to_str( .elapsed )) // "."
    end
  end

  cpu_time_taken(task) result (res)
  ! Returns cpu time taken. "CPU time taken is ... CPU seconds."
  ! If task given, "CPU time taken for "task" is ... CPU seconds."
    STR :: res
    DBL :: time
    STR(*), optional :: task
    STR :: time_str
    .stop
    time = .stop_cpu - .start_cpu
    write(time_str,'(f15.3)') time
    if (present(task)) then
      res = "CPU time taken for " // trim(task) // " is " // &
             trim(adjustl(time_str)) // " CPU seconds."
    else
      res = "CPU time taken is " // trim(adjustl(time_str)) // " CPU seconds."
    end
  end

  elapsed_time_to_str(time) result (res)
  ! Returns the elapsed time as a string.
  ! Formatted as years, months, days, hours, min, sec, msec.
  ! If time is greater than a day, does not output min or smaller.
    IVEC(5), IN :: time
    STR :: res
    BIN :: comma
    comma = FALSE
    res = ""
    res =              .number_with_units(time(1),"day",comma)
    res = trim(res) // .number_with_units(time(2),"hour",comma)
    if ((time(1) == 0) AND (time(2) == 0)) then
      res = trim(res) // .number_with_units(time(3),"minute",comma)
      res = trim(res) // .number_with_units(time(4),"second",comma)
      res = trim(res) // .number_with_units(time(5),"millisecond",comma)
    end
  end

  time_to_str(time) result (res)
  ! Return a string containing the time.
  ! Formatted as DD/MM/YYYY HH:MM:SS
    IVEC(5), IN :: time
    STR(2) :: day,month,hour,min,sec
    STR(4) :: year
    STR(19) :: res
    INT :: i,y,m,d
    .from_julian(d,m,y,time(1))
    res = ""
    write(day,fmt='(i2)') d
    write(month,fmt='(i2)') m
    write(year,fmt='(i4)') y
    write(hour,fmt='(i2)') time(2)
    write(min,fmt='(i2)') time(3)
    write(sec,fmt='(i2)') time(4)
    res = day //"/"// month //"/"// year //" "// hour //":"// min //":"// sec
    do i=1,19
      if (res(i:i) == " ") res(i:i) = "0"
    end
    res(11:11) = " "
  end

! *********************************************************************
! private routines
! *********************************************************************

  number_with_units(number,unit,comma) result (res)
  ! Returns the number with its units, if the number is non-zero.
  ! Inserts a comma if comma is true.  If the number is non-zero,
  ! then comma is set to true.
    INT, IN :: number
    CHR(*), IN :: unit
    BIN :: comma
    INT :: i
    STR :: res,res1
    res = ""
    if (number /= 0) then
      res1 = ""
      write(res1,'(i)') number
      res1 = adjustl(res1)
      i = 1
      if (comma) then           ! insert comma at start if needed.
        res(1:2) = ", "
        i = 3
      end
      res(i:) = trim(res1) // " " // unit
      if (number /= 1) then     ! add "s" to "unit"s if number not 1.
        i=len_trim(res)+1
        res(i:i) = "s"
      end
      comma = TRUE
    end
  end

  subtract_times(time1,time2) result(res)
  ! result = time1 - time2
    IVEC(5), IN :: time1,time2
    IVEC(5) :: res
    INT :: sn
    DBL :: secs,secs1,secs2
    secs1 = .time_to_seconds(time1)
    secs2 = .time_to_seconds(time2)
    secs = secs1 - secs2
    res = .seconds_to_time(secs)
write(*,*) res
  end

  seconds_to_time(secs) result(res)
  ! Returns the number of days, hours, minutes, seconds, milliseconds from the
  ! number of seconds.
    IVEC(5) :: res
    DBL, IN :: secs
    DBL :: sex
    sex = abs(secs)
    res(1) = floor( sex / 86400 ) ! days
    sex = sex - res(1) * 86400
    res(2) = floor( sex / 3600 )  ! hours
    sex = sex - res(2) * 3600
    res(3) = floor( sex / 60 )    ! minutes
    sex = sex - res(3) * 60
    res(4) = floor(sex)           ! seconds
    sex = sex - res(4)
    res(5) = 1000*sex             ! milliseconds
    res = sign(res,secs)
write(*,*) res
  end

  time_to_seconds(time) result(res)
  ! Returns the number of seconds from the days, hours, minutes, seconds, and
  ! milliseconds.
    IVEC(5), IN :: time
    DBL :: res
    res = 86400 * time(1) + 3600 * time(2) + 60 * time(3) + time(4) + &
          time(5)/1000d0
  end

  to_julian(d,m,y,j)
  ! Converts the days, months, years, into the Julian date.
    INT, IN :: d,m,y
    INT, OUT :: j
    INT :: mm,yy,c
    mm = m
    yy = y
    if (mm>2) then
      mm = mm - 3
    else
      mm = mm + 9
      yy = yy - 1
    end
    c = yy / 100
    yy = yy - 100 * c
    j = (146097*c)/4 + (1461*yy)/4 + (153*mm+2)/5 + d + 1721119
  end

  from_julian(d,m,y,j)
  ! Converts the days, months, years, from the Julian date.
    INT, IN :: j
    INT, OUT :: d,m,y
    INT :: jj
    jj=j - 1721119
    y = (4*jj-1)/146097
    jj = 4*jj - 1 - 146097 * y
    d = jj/4
    jj = (4*d+3)/1461
    d = 4*d + 3 - 1461*jj
    d = (d+4)/4
    m = (5*d-3)/153
    d = 5*d - 3 - 153*m
    d = (d+5)/5
    y = 100*y + jj
    if (m<10) then
      m = m + 3
    else
      m = m - 9
      y = y + 1
    end
  end

end
