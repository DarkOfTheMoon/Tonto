!---------------------------------------------------------------------------
!
! MAT{OBJECT}: generic matrix operations ...
!
! Copyright (C) Dylan Jayatilaka, 1997
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!---------------------------------------------------------------------------

virtual module MAT{OBJECT}

   implicit none

contains

!  =================
!  Memory allocation
!  =================

   create(dim1,dim2) ::: leaky
   ! Create space for object
      self :: PTR
      dim1,dim2 :: INT, IN

      status :: INT

      nullify(self)

      allocate(self(dim1,dim2),stat=status)

      ENSURE(status==0,"error in deallocating memory")
      status = status
      status = 0

      ADD_MEMORY(dim1*dim2*ELEMENT_TYPE_SIZE)

      .nullify_ptr_part
      .set_defaults

   end

   create(dim1,dim2) ::: leaky
   ! Create space for object. This version does not set defaults.
      self :: PTR
      dim1,dim2 :: INT, IN

      status :: INT

      nullify(self)

      allocate(self(dim1,dim2),stat=status)

      ENSURE(status==0,"error in deallocating memory")
      status = status
      status = 0

      ADD_MEMORY(dim1*dim2*ELEMENT_TYPE_SIZE)

      .nullify_ptr_part

   end

   create(lb1,ub1,lb2,ub2) ::: leaky
   ! Create a matrix with the given dimensions
      self :: PTR
      lb1,ub1,lb2,ub2 :: INT, IN

      status :: INT

      nullify(self)

      allocate(self(lb1:ub1,lb2:ub2),stat=status)

      ENSURE(status==0,"error in deallocating memory")
      status = status
      status = 0

      ADD_MEMORY((ub1-lb1+1)*(ub2-lb2+1)*ELEMENT_TYPE_SIZE)

      .nullify_ptr_part
      .set_defaults

   end

   create(lb1,ub1,lb2,ub2) ::: leaky
   ! Create a matrix with the given dimensions
   ! This version does not set defaults.
      self :: PTR
      lb1,ub1,lb2,ub2 :: INT, IN

      status :: INT

      nullify(self)

      allocate(self(lb1:ub1,lb2:ub2),stat=status)

      ENSURE(status==0,"error in deallocating memory")
      status = status
      status = 0

      ADD_MEMORY((ub1-lb1+1)*(ub2-lb2+1)*ELEMENT_TYPE_SIZE)

      .nullify_ptr_part

   end

   destroy ::: leaky
   ! Destroy the object
      self :: PTR

      status :: INT

      if (.destroyed) return

      .destroy_ptr_part

      DELETE_MEMORY(.size*ELEMENT_TYPE_SIZE)

      deallocate(self,stat=status)

      ENSURE(status==0,"error in deallocating memory")
      status = status
      status = 0

   end

   created result (res) ::: inlined_by_foo
   ! Returns true if self has been created
      self :: PTR
      res :: BIN
      result = associated(self)
   end

   destroyed result (res) ::: inlined_by_foo
   ! Returns true if self has *not* been created
      self :: PTR
      res :: BIN
      result = NOT associated(self)
   end

   nullify_ptr_part
   ! Nullify the pointer parts of self
      i,j :: INT
      do i = 1,.dim1
      do j = 1,.dim2
         self(i,j).nullify_ptr_part
      end
      end
   end

   destroy_ptr_part ::: leaky
   ! Destroy the pointer parts of self

      i,j :: INT

      do i = 1,.dim1
      do j = 1,.dim2
         self(i,j).destroy_ptr_part
      end
      end

   end

!  ============
!  Copy methods
!  ============

   create_copy(mx) ::: leaky, pure
   ! Create a copy of "mx"
      self :: PTR
      mx :: MAT{OBJECT}, IN

      .create(mx.dim1,mx.dim2)
      .copy(mx)

   end

   copy(mx) ::: leaky, pure
   ! Copy the "mx".
      self :: OUT
      mx :: MAT{OBJECT}, IN

   ENSURE(.is_same_shape_as(mx),"shapes do not match")

      i,j :: INT

      do i = 1,mx.dim1
      do j = 1,mx.dim2
         self(i,j).copy(mx(i,j))
      end
      end

   end

!  ===========
!  Set methods
!  ===========

   set_defaults ::: always_pure
   ! Set default values
      self :: OUT

      i,j :: INT

      do i = 1,.dim1
      do j = 1,.dim2
         self(i,j).set_defaults
      end
      end

   end

!  ============================
!  Size-of and shape operations 
!  ============================

   size result (res) ::: inlined_by_foo
   ! Return the size of the array
      res :: INT
      res = size(self)
   end

   dim1 result (res) ::: inlined_by_foo
   ! Return the size of the 1st dimension
      res :: INT
      res = .dim1
   end

   dim2 result (res) ::: inlined_by_foo
   ! Return the size of the 2nd dimension
      res :: INT
      res = .dim2
   end

   shape result (res)
   ! Return the shape of "self"
      res :: VEC{INT}(2)
      res = [.dim1,.dim2]
   end

   is_same_shape_as(mx) result (res) ::: pure
   ! Returns TRUE if "mx" has the same shape as "self"
      self :: IN
      mx :: MAT{OBJECT}, IN
      res :: BIN

      res = .dim1==mx.dim1 AND .dim2==mx.dim2

   end

   is_transposed_shape_of(mx) result (res) ::: pure
   ! Returns TRUE if "mx" is the transposed shape of "self"
      self :: IN
      mx :: MAT{OBJECT}, IN
      res :: BIN

      res = .dim1==mx.dim2 AND .dim2==mx.dim1

   end

   is_square result (res) ::: pure
   ! Returns TRUE if the matrix is square
      self :: IN
      res :: BIN
      res = .dim1==.dim2
   end

!  ======
!  Output
!  ======

   dump(object_name,lower_triangle)
   ! Dump a matrix object in text format
      self :: IN
      object_name :: STR, IN
      lower_triangle :: BIN, optional, IN
    
      element :: STR
      lower :: BIN
      i,j :: INT

      lower = FALSE
      if (present(lower_triangle)) lower = lower_triangle

      stdout.flush

      stdout.text(trim(object_name)//":MAT{TYPE} = {")

      stdout.increment_margin_width(1)
      stdout.flush

      stdout.put("dimensions =",width=11)
      stdout.put(.dim1,width=0)
      stdout.put(.dim2,width=0)
      stdout.flush

      if (NOT lower) then

         do i = 1,.dim1
         do j = 1,.dim2
            element = trim(object_name)//"("//trim(i.to_str)//","//trim(j.to_str)//")"
            self(i,j).dump(trim(element))
         end
         end

      else

         do i = 1,.dim1
         do j = 1,i
            element = trim(object_name)//"("//trim(i.to_str)//","//trim(j.to_str)//")"
            self(i,j).dump(trim(element))
         end
         end

      end

      stdout.increment_margin_width(-1)
      stdout.flush

      stdout.text("}")

   end

   dmpp(object_name,lower_triangle)
   ! Dump a matrix pointer object in text format
      self :: PTR
      object_name :: STR, IN
      lower_triangle :: BIN, optional, IN
    
      element :: STR
      lower :: BIN
      i,j :: INT

      stdout.flush

      if (.destroyed) then

         stdout.text(trim(object_name)//":MAT{TYPE}* = null")

      else

         lower = FALSE
         if (present(lower_triangle)) lower = lower_triangle

         stdout.text(trim(object_name)//":MAT{TYPE} = {")

         stdout.increment_margin_width(1)
         stdout.flush

         stdout.put("dimensions =",width=11)
         stdout.put(.dim1,width=0)
         stdout.put(.dim2,width=0)
         stdout.flush

         if (NOT lower) then
       
            do i = 1,.dim1
            do j = 1,.dim2
               element = trim(object_name)//"("//trim(i.to_str)//","//trim(j.to_str)//")"
               self(i,j).dump(trim(element))
            end
            end
       
         else
       
            do i = 1,.dim1
            do j = 1,i
             stdout.flush
               element = trim(object_name)//"("//trim(i.to_str)//","//trim(j.to_str)//")"
               self(i,j).dump(trim(element))
            end
            end
       
         end

         stdout.increment_margin_width(-1)
         stdout.flush

         stdout.text("}")

      end

   end

end
