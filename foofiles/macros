! Macros file
! $Id$

!----------------------------------------------------------------------
! Kind parameters for scalar intrinsic types. Note that kind type 
! parameters may not match with byte size length, especially for CPX
!----------------------------------------------------------------------

# define CHR_KIND      1

# define INT_KIND      4
# define INT_1_KIND    1
# define INT_2_KIND    2
# define INT_4_KIND    4
# define INT_8_KIND    8

# define BIN_KIND      4
# define BIN_1_KIND    1
# define BIN_4_KIND    4

# define PTR_KIND      8

# define REAL_KIND     8
# define REAL_4_KIND   4
# define REAL_8_KIND   8
# define REAL_16_KIND  16

# define CPX_KIND      8
# define CPX_4_KIND    4
# define CPX_8_KIND    8
# define CPX_16_KIND   16

!----------------------------------------------------------------------
! Byte Size parameters for scalar intrinsic types
!----------------------------------------------------------------------

# define CHR_SIZE      1

# define STR_SIZE    128
# define BSTR_SIZE   256

# define INT_SIZE      4
# define INT_1_SIZE    1
# define INT_2_SIZE    2
# define INT_4_SIZE    4
# define INT_8_SIZE    8

# define BIN_SIZE      4
# define BIN_1_SIZE    1
# define BIN_4_SIZE    4

# define PTR_SIZE      8

# define REAL_SIZE     8
# define REAL_4_SIZE   4
# define REAL_8_SIZE   8
# define REAL_16_SIZE  16

# define CPX_SIZE      16
# define CPX_4_SIZE    8
# define CPX_8_SIZE    16
# define CPX_16_SIZE   32

!----------------------------------------------------------------------
! Intrinsic scalar types ... 
!----------------------------------------------------------------------

# define INT        integer(INT_KIND)
# define INT_1      integer(INT_1_KIND)
# define INT_2      integer(INT_2_KIND)
# define INT_4      integer(INT_4_KIND)
# define INT_8      integer(INT_8_KIND)

# define BIN        logical(BIN_KIND)
# define BIN_1      logical(BIN_1_KIND)
# define BIN_4      logical(BIN_4_KIND)

# define REAL       real(REAL_KIND)
# define REAL_4     real(REAL_4_KIND)
# define REAL_8     real(REAL_8_KIND)
# define REAL_16    real(REAL_16_KIND)

# define CPX        complex(CPX_KIND)
# define CPX_4      complex(CPX_4_KIND)
# define CPX_8      complex(CPX_8_KIND)
# define CPX_16     complex(CPX_16_KIND)

# define CHR        character

!----------------------------------------------------------------------
! Array types ... 
!----------------------------------------------------------------------

# define STR(X)                     character(X)
# define BSTR(X)                    character(X)
# define VEC(X,A)                   X, dimension(A)
# define MAT(X,A,B)                 X, dimension(A,B)
# define MAT3(X,A,B,C)              X, dimension(A,B,C)
# define MAT4(X,A,B,C,D)            X, dimension(A,B,C,D)
# define MAT5(X,A,B,C,D,E)          X, dimension(A,B,C,D,E)
# define MAT6(X,A,B,C,D,E,F)        X, dimension(A,B,C,D,E,F)
# define MAT7(X,A,B,C,D,E,F,G)      X, dimension(A,B,C,D,E,F,G)

!----------------------------------------------------------------------
! Generic vs. Nogeneric call formats ... 
!----------------------------------------------------------------------

# ifndef NOGENERIC
#    define STACK0(X)               call stack_(tonto,X)
#    define UNSTACK0                call unstack_(tonto)
#    define CHECK0                  call check_(tonto)
#    define ADD_MEMORY0(X)          call add_memory_(tonto,X)
#    define DELETE_MEMORY0(X)       call delete_memory_(tonto,X)
#    define IGNORE_MEMORY_LEAK0(X)  call ignore_memory_leak_(tonto,X)
#    define ENSURE0(X,Y)            call ensure_(tonto,X,Y)
#    define DIE0(X)                 call die_(tonto,X)
#    define DIE_IF0(X,Y)            call die_if_(tonto,X,Y)
#    define WARN0(X)                call warn_(tonto,X)
#    define WARN_IF0(X,Y)           call warn_if_(tonto,X,Y)
#    define START_TIMER0(X)         call start_timer_(tonto,X)
#    define STOP_TIMER0             call stop_timer_(tonto)
# else
#    define STACK0(X)               call SYSTEM_stack(tonto,X)
#    define UNSTACK0                call SYSTEM_unstack(tonto)
#    define CHECK0                  call SYSTEM_check(tonto)
#    define ADD_MEMORY0(X)          call SYSTEM_add_memory(tonto,X)
#    define DELETE_MEMORY0(X)       call SYSTEM_delete_memory(tonto,X)
#    define IGNORE_MEMORY_LEAK0(X)  call SYSTEM_ignore_memory_leak(tonto,X)
#    define ENSURE0(X,Y)            call SYSTEM_ensure(tonto,X,Y)
#    define DIE0(X)                 call SYSTEM_die(tonto,X)
#    define DIE_IF0(X,Y)            call SYSTEM_die_if(tonto,X,Y)
#    define WARN0(X)                call SYSTEM_warn(tonto,X)
#    define WARN_IF0(X,Y)           call SYSTEM_warn_if(tonto,X,Y)
#    define START_TIMER0(X)         call SYSTEM_start_timer(tonto,X)
#    define STOP_TIMER0             call SYSTEM_stop_timer(tonto)
# endif

!----------------------------------------------------------------------
! Memory/Call stack management macros ... 
!----------------------------------------------------------------------

# ifdef USE_CALL_STACK_MANAGEMENT
#    define USE_PRE_AND_POST_CONDITIONS
#    define STACK(X)                STACK0(X)     
#    define UNSTACK                 UNSTACK0
#    define CHECK                   CHECK0
#    define ADD_MEMORY(X)           ADD_MEMORY0(X)
#    define DELETE_MEMORY(X)        DELETE_MEMORY0(X)
#    define IGNORE_MEMORY_LEAK(X)   IGNORE_MEMORY_LEAK0(X)
# else
#    define STACK(X)     
#    define UNSTACK   
#    define CHECK  
#    define ADD_MEMORY(X)
#    define DELETE_MEMORY(X)
#    define IGNORE_MEMORY_LEAK(X)   
# endif

!----------------------------------------------------------------------
! Precondition and Postcodition macros ... 
!----------------------------------------------------------------------

# ifdef USE_PRE_AND_POST_CONDITIONS
#    define USE_ERROR_MANAGEMENT
#    define ENSURE(X,Y)             ENSURE0(X,Y)
# else
#    define ENSURE(X,Y)       
# endif

!----------------------------------------------------------------------
! Error macros ... 
!----------------------------------------------------------------------

# ifdef USE_ERROR_MANAGEMENT
#    define DIE(X)                  DIE0(X)            
#    define DIE_IF(X,Y)             DIE_IF0(X,Y)     
#    define WARN(X)                 WARN0(X)           
#    define WARN_IF(X,Y)            WARN_IF0(X,Y)      
# else
#    define DIE(X)            
#    define DIE_IF(X,Y)     
#    define WARN(X)           
#    define WARN_IF(X,Y)      
# endif

!----------------------------------------------------------------------
! Time profiling macros ... 
!----------------------------------------------------------------------

# ifdef USE_TIME_PROFILING
#    define BROKEN_PURE
#    define START_TIMER(X)          START_TIMER0(X)
#    define STOP_TIMER              STOP_TIMER0
# else
#    define START_TIMER(X) 
#    define STOP_TIMER   
# endif

!----------------------------------------------------------------------
! Unknown case macro ...
!----------------------------------------------------------------------

# define UNKNOWN(X)    DIE("unknown case option: " // trim(X))

!-------------------------------------------------------------------------------
! Some compilers cannot handle Fortran 95 features ...
!-------------------------------------------------------------------------------

# ifdef LANGUAGE_FORTRAN_90
#    define BROKEN_TYPE_INITIALIZATION
#    define BROKEN_PURE
# endif

!-------------------------------------------------------------------------------
! Some Fortran 95 compilers can't handle pure routines ...
!-------------------------------------------------------------------------------

# ifdef BROKEN_PURE
#    define PURE 
#    define ELEMENTAL 
#    define ALWAYS_PURE 
#    define ALWAYS_ELEMENTAL 
# else
#    define PURE                    pure
#    define ELEMENTAL               elemental
#    define ALWAYS_PURE             pure
#    define ALWAYS_ELEMENTAL        elemental
# endif

!-------------------------------------------------------------------------------
! Some Fortran 95 compilers can't handle default initialisation properly ...
!-------------------------------------------------------------------------------

# ifdef BROKEN_TYPE_INITIALIZATION
#    define DEFAULT_NULL
#    define DEFAULT(X)
# else
#    define DEFAULT(X)              = X
#    define DEFAULT_NULL            => NULL()
# endif

!----------------------------------------------------------------------
! Convenience macros ... 
!----------------------------------------------------------------------

# define AND        .and.
# define OR         .or.
# define NOT        .not.
# define FALSE      .false.
# define TRUE       .true.
# define EQV        .eqv.
# define NEQV       .neqv.

# define PTR        pointer
# define IN         intent(in)
# define OUT        intent(out)
# define INOUT      intent(inout)
# define PAR        parameter

# define ZERO          0.0d0
# define ONE           1.0d0
# define TWO           2.0d0
# define THREE         3.0d0
# define FOUR          4.0d0
# define FIVE          5.0d0
# define SIX           6.0d0
# define SEVEN         7.0d0
# define EIGHT         8.0d0
# define NINE          9.0d0
# define TEN          10.0d0
# define HALF         0.50d0
# define QUARTER      0.25d0
# define EIGHTH      0.125d0
# define TENTH        0.10d0

# define THIRD             0.33333333333333333333333d0
# define ONETHIRD          0.33333333333333333333333d0
# define TWOTHIRD          0.66666666666666666666667d0
# define TWOTHIRDS         0.66666666666666666666667d0
# define SIXTH             0.16666666666666666666666d0
# define PI                3.141592653589793d0
# define E                 2.718281828459045d0
# define TWOPI5ON2         34.98683665524973d0

# define TOL(N)                   TEN**(-N)

!----------------------------------------------------------------------
! Fundamental constants and conversion factors ...
!----------------------------------------------------------------------

# define SPEED_OF_LIGHT_SI        2.99792458d+8
# define CHARGE_OF_ELECTRON_SI    1.602177d-19
# define AMU_SI                   1.6605402d-27
# define MASS_OF_ELECTRON_SI      9.10939d-31
# define MASS_OF_PROTON_SI        1.67262d-27
# define MASS_OF_NEUTRON_SI       1.67493d-27
# define BOHR_MAGNETON_SI         9.27402d-24
# define NUCLEAR_MAGNETON_SI      5.05079d-27
# define G_FACTOR                 2.002319304386
# define BOLTZMANN_SI             1.38066d-23
# define HARTREE_SI               4.3597482d-18
# define ANGSTROM_SI              1.0d-10
# define PLANCK_SI                6.6260755d-34
# define BOHR_MAGNETON_AU         HALF      
# define SPEED_OF_LIGHT_AU        137.03599d0

# define AMU_PER_MASS_OF_ELECTRON (MASS_OF_ELECTRON_SI/AMU_SI)
# define MASS_OF_ELECTRON_PER_AMU (AMU_SI/MASS_OF_ELECTRON_SI)
# define ANGSTROM_PER_BOHR        0.52917724924d0
# define METER_PER_ANGSTROM       1.0d-10
# define BOHR_PER_BOHR            ONE
# define BOHR_PER_ANGSTROM        (1/0.52917724924d0)
# define WAVENUMBER_PER_HARTREE   2.1947463067d+5
# define EV_PER_HARTREE           27.21           
# define KELVIN_PER_HARTREE       3.158d+5         
# define JOULE_PER_HARTREE        4.3597482d-18
# define KJOULE_PER_HARTREE       4.3597482d-21
# define CAL_PER_HARTREE          1.042d-18        
# define KCAL_PER_HARTREE         1.042d-21        
# define KCALMOL_PER_HARTREE      627.5            
# define KJOULEMOL_PER_HARTREE    2625.46          
# define JOULE_PER_CAL            4.184            
# define DEGREE_PER_RADIAN        (180d0/PI)
# define RADIAN_PER_DEGREE        (PI/180d0)
# define DEBYE_PER_AU             2.5418d0
# define AU_PER_DEBYE             (ONE/2.5418d0)

!----------------------------------------------------------------------
! Module constants ...
! The first word identifies the module to which the constant belongs
!----------------------------------------------------------------------

# define ATOMVEC_BONDED_SCALE_FACTOR      1.15

# define BUFFER_COMMENT_CHARS             "!#"
# define BUFFER_QUOTE_CHARS               "'"""

# define CIF_CH_BOND_LENGTH              1.083d0
# define CIF_NH_BOND_LENGTH              1.009d0
# define CIF_OH_BOND_LENGTH              0.983d0

# define CLUSTER_GENERATION_METHOD        "fragment"
# define CLUSTER_RADIUS                   ZERO
# define CLUSTER_DEFRAGMENT               TRUE

# define COPPENSORBITAL_VALUES_CUTOFF     TOL(6)

# define CRYSTAL_UNIT_CELL_ANGLES         (/90.0d0,90.0d0,90.0d0/)        
# define CRYSTAL_UNIT_CELL_LENGTHS        (/10.0d0,10.0d0,10.0d0/)         
# define CRYSTAL_SYNTHESISE_SIGMA_I       FALSE                             
# define CRYSTAL_OPTIMISE_SCALE           TRUE
# define CRYSTAL_OPTIMISE_EXTINCTION      TRUE                               
# define CRYSTAL_CORRECT_DISPERSION       FALSE                             
# define CRYSTAL_SCALE_FACTOR             ONE
# define CRYSTAL_EXP_SCALE_FACTOR         ONE                             
# define CRYSTAL_EXTINCTION_FACTOR        ZERO                             
# define CRYSTAL_WAVELENGTH               0.71069d0 * BOHR_PER_ANGSTROM
# define CRYSTAL_DATA_KIND                "x-ray"
# define CRYSTAL_THERMAL_SMEARING_MODEL   " "                                   
# define CRYSTAL_PARTITION_MODEL          " "                           

# define DFTGRID_SPHERICAL_GRID_KIND      "lebedev"
# define DFTGRID_SPHERICAL_GRID_ORDER     35
# define DFTGRID_RADIAL_GRID_KIND         "gauss-chebyshev"
# define DFTGRID_RADIAL_GRID_ORDER        60
# define DFTGRID_BECKE_M_PARTITION_POWER  TWO
# define DFTGRID_GAUSS_CHEBYSHEV_M        ONE
# define DFTGRID_GAUSS_CHEBYSHEV_ALPHA    THREE
# define DFTGRID_EULER_MACLAURIN_M        TWO
# define DFTGRID_EULER_MACLAURIN_ALPHA    TWO
# define DFTGRID_ARCHIVE_ROOT_NAME        "dftgrid"
# define DFTGRID_ARCHIVE_NAME             "grid"

# define DIIS_KEEP                        8
# define DIIS_START                       3

# define FILE_BUFFER_LENGTH               1024

# define ISOSURFACE_ISO_VALUE             ONE
# define ISOSURFACE_SURFACE_POINT         (/TOL(6),TOL(6),TOL(6)/)
# define ISOSURFACE_PROPERTY_LB           -huge(ONE)
# define ISOSURFACE_PROPERTY_UB           huge(ONE)
# define ISOSURFACE_N_POINT               10000
# define ISOSURFACE_N_FACE                20000

# define MAT_LINEAR_DEPENDENCE_TOL        TOL(10)

# define PLOTGRID_MAXIMUM_CELL_DISTANCE   5
# define PLOTGRID_NX                      75
# define PLOTGRID_NY                      75
# define PLOTGRID_NZ                      1
# define PLOTGRID_X_AXIS                  (/ ONE,ZERO,ZERO/)
# define PLOTGRID_Y_AXIS                  (/ZERO, ONE,ZERO/)
# define PLOTGRID_Z_AXIS                  (/ZERO,ZERO, ONE/)
# define PLOTGRID_WIDTH                   (/ TWO, TWO,ZERO/)

# define REAL_EPSILON                     TOL(6)

# define ROBY_OCCUPIED_ANO_CUTOFF         0.05d0
# define ROBY_COVALENT_CUTOFF             90.0d0
# define ROBY_IONIC_CUTOFF                77.0d0
# define ROBY_ZERO_CUTOFF                 TOL(4)
# define ROBY_PI_ON_2_CUTOFF              90.0d0
# define ROBY_OUTPUT_THETA_INFO           TRUE

# define SCFDATA_CONVERGENCE              TOL(4)
# define SCFDATA_DIIS_CONVERGENCE         TOL(4)
# define SCFDATA_USING_ROUGH_CONVERGENCE  TRUE
# define SCFDATA_ROUGH_CONVERGENCE        TOL(2)
# define SCFDATA_ROUGH_DIIS_CONVERGENCE   TOL(2)
# define SCFDATA_USING_DAMPING            TRUE
# define SCFDATA_DIIS_START_ITERATION     DIIS_START
# define SCFDATA_USING_LEVEL_SHIFT        TRUE
# define SCFDATA_ERI_LIMIT                1.0d-12
# define SCFDATA_ERI_LIMIT_ROUGH          1.0d-7
# define SCFDATA_MIN_ITERATIONS           1
# define SCFDATA_MAX_ITERATIONS           100
# define SCFDATA_DAMP_FACTOR              0.5d0
# define SCFDATA_LEVEL_SHIFT              0.3d0

# define SHELL4_ERI_CUTOFF                1.0d-15

# define SPACEGROUP_MAX_UNIQUE_SYMOPS     1000

# define SYSTEM_ERROR_OUTPUT_UNIT         6
# define SYSTEM_MEMORY_UNITS              "Words"
# define SYSTEM_MEMORY_LIMIT              6*8000000
# define SYSTEM_STACK_LIMIT               20

# define TEXTFILE_STDIN_UNIT              5
# define TEXTFILE_STDOUT_UNIT             6
# define TEXTFILE_STDERR_UNIT             7
# define TEXTFILE_COMMENT_CHARS           "!#"
# define TEXTFILE_QUOTE_CHARS             "'"""
# define TEXTFILE_USE_LABELS              TRUE
# define TEXTFILE_MARGIN_WIDTH            0
# define TEXTFILE_N_FIELDS                5
# define TEXTFILE_REAL_WIDTH              16
# define TEXTFILE_INT_WIDTH               9
# define TEXTFILE_REAL_PRECISION          6
# define TEXTFILE_REAL_STYLE              " f"

# define UNITCELL_ANGLES                  (/90.0d0,90.0d0,90.0d0/)        
# define UNITCELL_LENGTHS                 (/10.0d0,10.0d0,10.0d0/)         

# define UNITNUMBER_STARTING_UNIT         10
