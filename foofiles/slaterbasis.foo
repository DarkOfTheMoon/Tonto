!-------------------------------------------------------------------------------
!
! SLATERBASIS: For Slater basis sets
!
! Copyright (C) Dylan Jayatilaka, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!
!-------------------------------------------------------------------------------

module SLATERBASIS

   implicit none

   keys :: VEC{STR}*, private DEFAULT_NULL

contains

!*******************************************************************************
!                             Create and Destroy Routines
!*******************************************************************************

   create ::: get_from(OBJECT), leaky
   ! Create an object
      self :: PTR
   end

   destroy ::: get_from(OBJECT), leaky
   ! Destroy an object
      self :: PTR
   end

   nullify_ptr_part
   ! Nullify the shell parts of self
      nullify(.shell)
      nullify(.interpolator)
      nullify(.d_interpolator)
      nullify(.d2_interpolator)
   end

   destroy_ptr_part  ::: leaky
   ! Destroy the shell parts of self
      .shell.destroy
      .interpolator.destroy
      .d_interpolator.destroy
      .d2_interpolator.destroy
   end

   created result (res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has been created
      self :: PTR
      res :: BIN
   end

   destroyed result (res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has *not* been created
      self :: PTR
      res :: BIN
   end

   create_copy(b) ::: leaky
   ! Create a copy of the basis "b".
     b :: SLATERBASIS, IN
     self :: PTR
     .create
     .copy(b)
   end

   copy(b) ::: leaky
   ! Copy a basis "b" to "self". Make sure pointer parts are first
   ! destroyed or nullified, as you want.
      b :: SLATERBASIS, IN
      self = b
      .nullify_ptr_part
      if (b.shell.created) .shell.create_copy(b.shell)
      if (b.interpolator.created) .interpolator.create_copy(b.interpolator)
      if (b.d_interpolator.created) .d_interpolator.create_copy(b.d_interpolator)
      if (b.d2_interpolator.created) .d2_interpolator.create_copy(b.d2_interpolator)
   end

   set_defaults
   ! Create and set up a default basis set
      .label   = " "
      .n_shell = 0
      .n_bf    = 0
      .n_prim  = 0
      .use_r2_interpolation = TRUE 
   end

   update ::: get_from(BASIS)
   ! Update the shell data, if it exists
   end

   set_label(label)
   ! Set the basis label
      label :: STR
      .label = label
   end

   set_use_r2_interpolation(use_r2)
   ! Set whether to use r2 interpolation
      use_r2 :: BIN
      .use_r2_interpolation = use_r2
   end

   resolve_by_label(label,basis,clobber,found) ::: get_from(BASIS, BASIS=>SLATERBASIS)
   ! Resolve "self" by pointer assigning it to the element in "basis" which has
   ! a label which matches "label". If "clobber" is present and TRUE (the
   ! default situation), then "self" is pointer assigned to the matching element
   ! in "basis" irrespective of whether it is already associated; otherwise it
   ! is not pointer assigned. If present, "found" is set TRUE if "self" is
   ! resolved (or was already resolved if clobber was not set), or false
   ! otherwise. If "found" is not present, and a match has not been found, an
   ! error is generated.
   end

!  ************
!  I/O Routines
!  ************

   read_keywords ::: get_from(OBJECT), recursive, leaky
   ! Read data from "stdin" using keyword style input.
   end

   process_keyword(keyword) ::: leaky
   ! Process command "keyword". Any required data needed by the "keyword" is
   ! inputted from "stdin".
     keyword :: STR, IN
     word :: STR
     word = keyword
     word.to_lower_case
     select case (word)
       case ("-- Regular options --   ")
       case ("}                       "); ! exit surrounding loop
       case ("analyse_configuration   "); .analyse_configuration
       case ("configuration=          "); .read_configuration
       case ("label=                  "); .read_label
       case ("put                     "); .put
       case ("shells=                 "); .read_shell
       case ("tonto-style=            "); .read_tonto_style
       case ("units=                  "); SLATERBASIS::read_units
       case ("use_r2_interpolation=   "); .read_use_r2_interpolation
       ! These are only for making custom tables for the list type
       case ("-- Options for tables --")
       case ("flush                   "); stdout.flush
       case ("put_label               "); stdout.put(.label,int_width=TRUE)
       case ("put_n_shells            "); stdout.put(.n_shell)
       case ("put_n_bf                "); stdout.put(.n_bf)
       case ("put_n_prim              "); stdout.put(.n_prim)
       case  default ;      UNKNOWN(word)
     end
   end

   read_units ::: get_from(OBJECT), selfless, private
   ! Read a string which describes the units to be used
   end

   read_label ::: get_from(BASIS)
   ! Read only the basis label
   end

   read_shell ::: get_from(BASIS), leaky
   ! Read a shell
   end

   read_configuration
   ! Read in the configuration string
      stdin.read(.configuration)
   end

   read_interpolator ::: leaky
   ! Read the interpolator
   ENSURE(.shell.created,"no shells defined!")
     .interpolator.destroy
     .interpolator.create
     .interpolator.read_keywords
   end

   read_tonto_style ::: leaky
   ! Create and read a tonto style basis set
      the_keys :: VEC{STR}*
      .read_label
      .read_configuration
      the_keys => ("l_chr= kind= n,z,c*=").split
      .shell.set_keys(the_keys)
      the_keys.destroy
      .shell.read_data
      .update
   end

   read_use_r2_interpolation
   ! Read whether to use r2 interpolation
      stdin.read(.use_r2_interpolation)
   end

   analyse_configuration 
   ! Analyse the orbital configuration and set the shell occupancies
   ENSURE(.configuration/=" ","no configuration")
   ENSURE(.shell.created,"no shells")
   ENSURE(.shell_kinds_created,"not all orbital kinds are there")
      configuration,conf_kind :: STR
      split,conf :: VEC{STR}*
      match :: VEC{BIN}*
      found,keep :: BIN
      i,j,s,occ,ind :: INT
      ! Split configuration into separate fields
      configuration = .configuration
      configuration.replace_all("("," ")
      configuration.replace_all(")"," ")
      split => configuration.split
      i = 1
      do ! loop over shell/orbital configurations
         if (i>split.dim) exit
         ! Now get orbital configurations only
         keep = FALSE
         select case (split(i))
            case ("K");   conf => ("1S 2").split
            case ("L");   conf => ("2S 2 2P 6").split
            case ("M");   conf => ("3S 2 3P 6 3D 10").split
            case default; conf => split(i:i+1); keep = TRUE
         end
         j = 1
         do ! Loop over orbital configurations 
            if (j>conf.dim) exit
            conf_kind = conf(j)
            occ  = conf(j+1).to_int
            ! Now find the shell with the correct orbital kind
            if (occ>0) then
            found = FALSE 
            do s = 1,.shell.dim
               if (all(.shell(s).orb_kind/=conf_kind)) cycle
               match.create(.shell(s).n_orb)
               match = .shell(s).orb_kind==conf_kind
               ind = match.index_of_first_true_element
               match.destroy
               ENSURE(.shell(s).occupancy.created,"occupancies have not been created")
               .shell(s).occupancy(ind) = occ
               found = TRUE
               exit
            end
            ENSURE(found,"orbital kind "//conf_kind.trim//" not found")
            end
            j = j + 2
         end
         if (NOT keep) conf.destroy
         i = i + 2
      end
      split.destroy
   end

!  ********************
!  Key related routines
!  ********************

   read_keys ::: get_from(OBJECT)
   ! Read the "keys".
   end

   process_keys ::: get_from(OBJECT), leaky
   ! Process each of the words in the "keys" list.
   end

   keys_created result (res) ::: get_from(OBJECT)
   ! Return TRUE if the list-element keys are created.
      res :: BIN
   end

   set_keys(the_keys) ::: get_from(OBJECT)
   ! This is for setting the "keys" externally.
     the_keys :: VEC{STR}
   end

   clear_keys ::: get_from(OBJECT)
   ! This is for destroying the "keys" externally.
   end

   put_table_footer ::: get_from(OBJECT)
   ! Output a table footer from the list of "keys". NOTE: not all keywords need
   ! contribute to the banner - any unrecognised keyword is skipped.
   end

   put_table_header
   ! Output a table header from the list of "keys". NOTE: not all keywords need
   ! contribute to the banner - any unrecognised keyword is skipped.
   ENSURE(keys.created,"no keys")
     word :: STR
     width,k :: INT
     width = .table_width
     if (width > 0) then
       stdout.dash(width=width)
       do k = 1,size(keys)
         word = keys(k)
         word.to_lower_case
         select case (word)
           case ("put_configuration"); stdout.put("Config.")
           case ("put_label        "); stdout.put("label",int_width=TRUE)
           case ("put_n_shells     "); stdout.put("n_shells",int_width=TRUE)
           case ("put_n_bf         "); stdout.put("n_bf",int_width=TRUE)
           case ("put_n_prim       "); stdout.put("n_prim",int_width=TRUE)
           case ("flush            "); stdout.flush; exit
         end
         if (k==size(keys)) then
           stdout.flush ! In case they didn't write one.
           WARN("no flush keyword - you may later overrun the output buffer")
         end
       end
       stdout.dash(width=width)
     end
   end

   table_width result (res)
   ! Return the table width in characters, based on "keys".  Note that not all
   ! keywords need to contribute to the banner - if a keyword is not recognised,
   ! then it is skipped.
     res :: INT
   ENSURE(keys.created,"no keys")
     int_dash,real_dash,k :: INT
     word :: STR
     int_dash = 0
     real_dash = 0
     do k = 1,size(keys)
       word = keys(k)
       word.to_lower_case
       select case (word)
         case ("}                "); ! exit surrounding loop
         case ("put_configuration"); real_dash = real_dash + 1
         case ("put_label        "); int_dash = int_dash + 1
         case ("put_n_shells     "); int_dash = int_dash + 1
         case ("put_n_bf         "); int_dash = int_dash + 1
         case ("put_n_prim       "); int_dash = int_dash + 1
         case ("flush            "); exit
         case default
       end
     end
     res = int_dash * stdout.int_width + real_dash * stdout.real_width
   end

!  ***************
!  Inquiry methods
!  ***************

   same_as(b) result (res) ::: get_from(BASIS)
   ! Return TRUE if the basis set "self" is the same as "b". Only the
   ! shell vector is compared to see if they are "really" the same.
      self :: IN
      b :: SLATERBASIS, IN
      res :: BIN
   end

   max_n_orb result (res) 
   ! Return the maximum number of contracted orbitals in any one shell.
      self :: IN
      res :: INT
      res = maxval(.shell.n_orb)
   end

   no_of_shells result (res) ::: get_from(BASIS), pure
   ! Work out and return the number of shells in the basis set
      self :: IN
      res :: INT
   end

   no_of_basis_functions result (res) ::: get_from(BASIS), pure
   ! Work out and return the number of basis functions in the basis set
      self :: IN
      res :: INT
   end

   no_of_primitives result (res) ::: get_from(BASIS), pure
   ! Work out and return the number of primitives in the basis set
      self :: IN
      res :: INT
   end

   min_exponent result (res) ::: get_from(BASIS), pure
   ! Return the minimum exponent in the basis.
     self :: IN
     res :: REAL
   end

   shell_kinds_created result (res) 
   ! Return TRUE if all the .shell.orb_kind vectors are there.
      self :: IN
      res :: BIN
      i :: INT
      if (.shell.destroyed) then
         res = FALSE
      else
         res = TRUE
         do i = 1,.shell.dim
            if (.shell(i).orb_kind.created) cycle
            res = FALSE
            exit
         end
      end
   end

!  **************
!  Output methods
!  **************

   put
   ! Put out the basis information to file "stdout"
      stdout.flush
      stdout.show("Slater basis set : ",trim(.label))
      stdout.flush
      stdout.show("Configuration          =",.configuration)
      stdout.show("No. of shells          =",.n_shell)
      stdout.show("No. of basis functions =",.n_bf)
      stdout.show("No. of primitives      =",.n_prim)
      if (.shell.created) .shell.put
   end

!  ******************
!  Density evaluation
!  ******************

   make_density_grid(density_grid,pt,pos)
   ! Work out the electron "density_grid" on a set of points "pt", assuming the
   ! orbitals are at position "pos".
      self :: IN
      density_grid :: VEC{REAL}, OUT
      pt :: MAT{REAL}, IN
      pos :: VEC{REAL}(3), IN
   ENSURE(density_grid.dim==pt.dim1,"inconsistent number of points")
      if (.interpolator.created) then
         ! .make_interpolated_density_grid(density_grid,pt,pos)
         .fast_interpolated_density(density_grid,pt,pos)
      else
         .make_normal_density_grid(density_grid,pt,pos)
      end
   end

   make_d_density_grid(density,d_density,d2_density,pt,pos)
   ! Work out the electron "density", its 1st derivative "d_density" and 2nd
   ! derivative "d2_density" on a set of points "pt", assuming the orbitals are
   ! at position "pos".
      self :: IN
      density :: VEC{REAL}, OUT
      d_density :: MAT{REAL}, OUT
      d2_density :: MAT3{REAL}, OUT
      pt :: MAT{REAL}, IN
      pos :: VEC{REAL}(3), IN
   ENSURE(density.dim==pt.dim1,"inconsistent number of points")
   ENSURE(d_density.dim2==pt.dim1,"inconsistent number of points")
   ENSURE(d2_density.dim3==pt.dim1,"inconsistent number of points")
   ENSURE(d_density.dim1==3,"wrong dim1 for d_density")
   ENSURE(d2_density.dim1==3,"wrong dim1 for d2_density")
   ENSURE(d2_density.dim2==3,"wrong dim1 for d2_density")
      if (.interpolator.created) then
         .fast_interpolated_density(density,d_density,d2_density,pt,pos)
      else
         DIE("not implemented yet")
      end
   end

!   skip_density_grid(pt,pos) result (res)
!   ! Work out if we can skip the density grid because the points are so far away
!   ! that the density would be zero.
!      self :: IN
!      pt :: MAT{REAL}, IN
!      pos :: VEC{REAL}(3), IN
!      res :: BIN
!      res = FALSE
!      if (.interpolator.created) then
!         res = .skip_interpolated_density_grid(pt,pos)
!      end
!   end

   make_normal_density_grid(density_grid,pt,pos)
   ! Make the normal (uninterpolated) "density_grid" for the supplied points
   ! "pt" from the real slater atomic orbitals, as fitted by coppens, assuming
   ! the orbital is at position "pos".
     self :: IN
     density_grid :: VEC{REAL}, OUT
     pt :: MAT{REAL}, IN
     pos :: VEC{REAL}(3), IN
   ENSURE(pt.dim2==3,"wrong dimension for points array")
   ENSURE(density_grid.dim==pt.dim1,"inconsistent number of points")
   ENSURE(.shell.created,"no shell vector")
     R :: VEC{REAL}*
     n_pt,n :: INT
     x, y, z :: REAL
     n_pt = pt.dim1
     R.create(n_pt)
     do n = 1,n_pt
        x = pt(n,1) - pos(1)
        y = pt(n,2) - pos(2)
        z = pt(n,3) - pos(3)
        R(n) = sqrt(x*x + y*y + z*z)
     end
     ! Now get the density values
     density_grid = .shell.densities_at_radii(R)
     R.destroy
   end

!   make_interpolated_density_grid(density_grid,pt,pos)
!   ! Make the interpolated "density_grid" for the supplied points "pt" from the real
!   ! slater atomic orbitals, as fitted by coppens, assuming the orbitals are at
!   ! position "pos".
!     self :: IN
!     density_grid :: VEC{REAL}, OUT
!     pt :: MAT{REAL}, IN
!     pos :: VEC{REAL}(3), IN
!   ENSURE(pt.dim2==3,"wrong dimension for points array")
!   ENSURE(density_grid.dim==pt.dim1,"inconsistent number of points")
!   ENSURE(.interpolator.created,"no interpolator defined!")
!     R :: VEC{REAL}*
!     n_pt,n :: INT
!     x, y, z :: REAL
!     n_pt = pt.dim1
!     R.create(n_pt)
!     do n = 1,n_pt
!        x = pt(n,1) - pos(1)
!        y = pt(n,2) - pos(2)
!        z = pt(n,3) - pos(3)
!        R(n) = sqrt(x*x + y*y + z*z)
!     end
!     ! Now get the interpolated density values
!     density_grid = .interpolator.values_for(R)
!     R.destroy
!   end

   add_interpolated_density(density,pt,pos)
   ! Make the interpolated "density" for the supplied points "pt" from the real
   ! slater atomic orbitals assuming the orbitals are at position "pos". This
   ! fast version skips tests and makes assumptions.
     self :: IN
     density :: VEC{REAL}, OUT
     pt :: MAT{REAL}, IN
     pos :: VEC{REAL}(3), IN

   ! ENSURE(pt.dim2==3,"wrong dimension for points array")
   ! ENSURE(density.dim==pt.dim1,"inconsistent number of points")
   ! ENSURE(.interpolator.created,"no interpolator defined!")

     R :: VEC{REAL}*
     n_pt,n :: INT
     x,y,z :: REAL

     n_pt = pt.dim1
     R.create(n_pt)

     do n = 1,n_pt
        x = pt(n,1) - pos(1)
        y = pt(n,2) - pos(2)
        z = pt(n,3) - pos(3)
      ! R(n) = sqrt(x*x + y*y + z*z)
        R(n) = x*x + y*y + z*z
     end

     ! Now get the interpolated density values
     if (.use_r2_interpolation) then
        .interpolator.add_values_for(R,density)
     else
        .interpolator.add_values_for_squared(R,density)
     end

     R.destroy

   end

   fast_interpolated_density(density,pt,pos)
   ! Make the interpolated "density" for the supplied points "pt" from the real
   ! slater atomic orbitals assuming the orbitals are at position "pos". This
   ! fast version skips tests and makes assumptions.
     self :: IN
     density :: VEC{REAL}, OUT
     pt :: MAT{REAL}, IN
     pos :: VEC{REAL}(3), IN

   ! ENSURE(pt.dim2==3,"wrong dimension for points array")
   ! ENSURE(density.dim==pt.dim1,"inconsistent number of points")
   ! ENSURE(.interpolator.created,"no interpolator defined!")

     R :: VEC{REAL}*
     n_pt,n :: INT
     x,y,z :: REAL

     n_pt = pt.dim1
     R.create(n_pt)

     do n = 1,n_pt
        x = pt(n,1) - pos(1)
        y = pt(n,2) - pos(2)
        z = pt(n,3) - pos(3)
      ! R(n) = sqrt(x*x + y*y + z*z)
        R(n) = x*x + y*y + z*z
     end

     ! Now get the interpolated density values
     if (.use_r2_interpolation) then
        density = .interpolator.fast_values_for(R)
     else
        density = .interpolator.fast_values_for_squared(R)
     end

     R.destroy

   end

   fast_interpolated_density(density,d_density,pt,pos)
   ! Make the interpolated "density" and its derivative "d_density" for the
   ! supplied points "pt" from the real slater atomic orbitals assuming the
   ! orbitals are at position "pos". This fast version skips tests and makes
   ! assumptions.  
     self :: IN
     density :: VEC{REAL}, OUT
     d_density :: MAT{REAL}, OUT
     pt :: MAT{REAL}, IN
     pos :: VEC{REAL}(3), IN
   ! ENSURE(pt.dim2==3,"wrong dimension for points array")
   ! ENSURE(density_grid.dim==pt.dim1,"inconsistent number of points")
   ! ENSURE(.interpolator.created,"no interpolator defined!")
     R,D :: VEC{REAL}*
     n_pt,n :: INT
     x,y,z,fac :: REAL
     n_pt = pt.dim1
     D.create(n_pt)
     R.create(n_pt)
     do n = 1,n_pt
        x = pt(n,1) - pos(1)
        y = pt(n,2) - pos(2)
        z = pt(n,3) - pos(3)
        R(n) = sqrt(x*x + y*y + z*z)
     end
     ! Now get the interpolated density values
     density = .interpolator.fast_values_for(R)
     D = .d_interpolator.fast_d_values_for(R) ! include minus sign, maybe
     do n = 1,n_pt
        x = pt(n,1) - pos(1)
        y = pt(n,2) - pos(2)
        z = pt(n,3) - pos(3)
        fac = D(n)/R(n)
        d_density(1,n) = fac*x
        d_density(2,n) = fac*y
        d_density(3,n) = fac*z
     end
     R.destroy
     D.destroy
   end

!   fast_interpolated_density(d1_density,d2_density,pt,pos)
!   ! Make the interpolated 1st derivative density "d1_density", and 2nd
!   ! derivative "d2_density" for the supplied points "pt" from the real slater
!   ! atomic orbitals assuming the orbitals are at position "pos". This fast
!   ! version skips tests and makes assumptions.  
!     self :: IN
!     d1_density :: MAT{REAL}, OUT
!     d2_density :: MAT3{REAL}, OUT
!     pt :: MAT{REAL}, IN
!     pos :: VEC{REAL}(3), IN
!   ! ENSURE(pt.dim2==3,"wrong dimension for points array")
!   ! ENSURE(density_grid.dim==pt.dim1,"inconsistent number of points")
!   ! ENSURE(.interpolator.created,"no interpolator defined!")
!     R,D1,D2 :: VEC{REAL}*
!     n_pt,n :: INT
!     x,y,z,r1,r2,r3,xx,yy,zz,xy,xz,yz, fac1,fac2,val :: REAL
!     n_pt = pt.dim1
!     D1.create(n_pt)
!     D2.create(n_pt)
!     R.create(n_pt)
!     do n = 1,n_pt
!        x = pt(n,1) - pos(1)
!        y = pt(n,2) - pos(2)
!        z = pt(n,3) - pos(3)
!        R(n) = sqrt(x*x + y*y + z*z)
!     end
!     ! Now get the interpolated density values
!     D1 = .d_interpolator.fast_d_values_for(R) ! include minus sign, maybe
!     D2 = .d2_interpolator.fast_values_for(R)  ! minus sign not needed
!     do n = 1,n_pt
!        x = pt(n,1) - pos(1)
!        y = pt(n,2) - pos(2)
!        z = pt(n,3) - pos(3)
!        r1 = ONE/R(n)
!        r2 = r1*r1
!        r3 = r2*r1
!        xx = x*x; yy = y*y; zz = z*z
!        xy = x*y; xz = x*z; yz = y*z
!        fac1 = D1(n)
!        fac2 = D2(n)*r2 - fac1*r3
!        val  = fac1*r1
!        d2_density(1,1,n) = fac2*xx + val
!        d2_density(2,2,n) = fac2*yy + val
!        d2_density(3,3,n) = fac2*zz + val
!        d2_density(1,2,n) = fac2*xy; d2_density(2,1,n) = d2_density(1,2,n)
!        d2_density(1,3,n) = fac2*xz; d2_density(3,1,n) = d2_density(1,3,n)
!        d2_density(2,3,n) = fac2*yz; d2_density(3,2,n) = d2_density(2,3,n)
!        fac1 = fac1*r1
!        d1_density(1,n) = fac1*x
!        d1_density(2,n) = fac1*y
!        d1_density(3,n) = fac1*z
!     end
!     R.destroy
!     D2.destroy
!     D1.destroy
!   end

   fast_interpolated_density(density,d1_density,d2_density,pt,pos)
   ! Make the interpolated "density", its 1st derivative "d1_density", and 2nd
   ! derivative "d2_density" for the supplied points "pt" from the real slater
   ! atomic orbitals assuming the orbitals are at position "pos". This fast
   ! version skips tests and makes assumptions.  
     self :: IN
     density :: VEC{REAL}, OUT
     d1_density :: MAT{REAL}, OUT
     d2_density :: MAT3{REAL}, OUT
     pt :: MAT{REAL}, IN
     pos :: VEC{REAL}(3), IN
   ! ENSURE(pt.dim2==3,"wrong dimension for points array")
   ! ENSURE(density_grid.dim==pt.dim1,"inconsistent number of points")
   ! ENSURE(.interpolator.created,"no interpolator defined!")
     R,D1,D2 :: VEC{REAL}*
     n_pt,n :: INT
     x,y,z,r1,r2,r3,xx,yy,zz,xy,xz,yz, fac1,fac2,val :: REAL
     n_pt = pt.dim1
     D1.create(n_pt)
     D2.create(n_pt)
     R.create(n_pt)
     do n = 1,n_pt
        x = pt(n,1) - pos(1)
        y = pt(n,2) - pos(2)
        z = pt(n,3) - pos(3)
        R(n) = sqrt(x*x + y*y + z*z)
     end
     ! Now get the interpolated density values
     density = .interpolator.fast_values_for(R)
     D1 = .d_interpolator.fast_d_values_for(R) ! include minus sign, maybe
     D2 = .d2_interpolator.fast_values_for(R)  ! minus sign not needed
     do n = 1,n_pt
        x = pt(n,1) - pos(1)
        y = pt(n,2) - pos(2)
        z = pt(n,3) - pos(3)
        r1 = ONE/R(n)
        r2 = r1*r1
        r3 = r2*r1
        xx = x*x; yy = y*y; zz = z*z
        xy = x*y; xz = x*z; yz = y*z
        fac1 = D1(n)
        fac2 = D2(n)*r2 - fac1*r3
        val  = fac1*r1
        d2_density(1,1,n) = fac2*xx + val
        d2_density(2,2,n) = fac2*yy + val
        d2_density(3,3,n) = fac2*zz + val
        d2_density(1,2,n) = fac2*xy; d2_density(2,1,n) = d2_density(1,2,n)
        d2_density(1,3,n) = fac2*xz; d2_density(3,1,n) = d2_density(1,3,n)
        d2_density(2,3,n) = fac2*yz; d2_density(3,2,n) = d2_density(2,3,n)
        fac1 = fac1*r1
        d1_density(1,n) = fac1*x
        d1_density(2,n) = fac1*y
        d1_density(3,n) = fac1*z
     end
     R.destroy
     D2.destroy
     D1.destroy
   end

   fast_interpolated_d1_density(d1_density,pt,pos)
   ! Make the interpolated derivative "density_grid" for the supplied points
   ! "pt" from the real slater atomic orbitals assuming the orbitals are at
   ! position "pos". This fast version skips tests and makes assumptions.
     self :: IN
     d1_density :: MAT{REAL}, OUT
     pt :: MAT{REAL}, IN
     pos :: VEC{REAL}(3), IN
   ! ENSURE(pt.dim2==3,"wrong dimension for points array")
   ! ENSURE(density_grid.dim==pt.dim1,"inconsistent number of points")
   ! ENSURE(.interpolator.created,"no interpolator defined!")
     R,D :: VEC{REAL}*
     n_pt,n :: INT
     x,y,z,fac :: REAL
     n_pt = pt.dim1
     D.create(n_pt)
     R.create(n_pt)
     do n = 1,n_pt
        x = pt(n,1) - pos(1)
        y = pt(n,2) - pos(2)
        z = pt(n,3) - pos(3)
        R(n) = sqrt(x*x + y*y + z*z)
     end
     ! Now get the interpolated radial derivative density values
     D = .d_interpolator.fast_d_values_for(R)
     do n = 1,n_pt
        x = pt(n,1) - pos(1)
        y = pt(n,2) - pos(2)
        z = pt(n,3) - pos(3)
        fac = D(n)/R(n)
        d1_density(1,n) = fac*x
        d1_density(2,n) = fac*y
        d1_density(3,n) = fac*z
     end
     R.destroy
     D.destroy
   end

   fast_interpolated_d2_density(d2_density,pt,pos)
   ! Make the interpolated 2nd derivative "d2_density" for the supplied points
   ! "pt" from the real slater atomic orbitals assuming the orbitals are at
   ! position "pos". This fast version skips tests and makes assumptions.
     self :: IN
     d2_density :: MAT3{REAL}, OUT
     pt :: MAT{REAL}, IN
     pos :: VEC{REAL}(3), IN
   ! ENSURE(pt.dim2==3,"wrong dimension for points array")
   ! ENSURE(density_grid.dim==pt.dim1,"inconsistent number of points")
   ! ENSURE(.interpolator.created,"no interpolator defined!")
     R,D1,D2 :: VEC{REAL}*
     n_pt,n :: INT
     x,y,z,r1,r2,r3,xx,yy,zz,xy,xz,yz, fac1,fac2,val :: REAL
     n_pt = pt.dim1
     D1.create(n_pt)
     D2.create(n_pt)
     R.create(n_pt)
     do n = 1,n_pt
        x = pt(n,1) - pos(1)
        y = pt(n,2) - pos(2)
        z = pt(n,3) - pos(3)
        R(n) = sqrt(x*x + y*y + z*z)
     end
     ! Now get the interpolated derivative density values
     D1 = .d_interpolator.fast_d_values_for(R) ! minus sign, maybe
     D2 = .d2_interpolator.fast_values_for(R)  ! no minus sign needed
     do n = 1,n_pt
        x = pt(n,1) - pos(1)
        y = pt(n,2) - pos(2)
        z = pt(n,3) - pos(3)
        r1 = ONE/R(n)
        r2 = r1*r1
        r3 = r2*r1
        xx = x*x; yy = y*y; zz = z*z
        xy = x*y; xz = x*z; yz = y*z
        fac1 = D1(n)
        fac2 = D2(n)*r2 - fac1*r3
        val  = fac1*r1
        d2_density(1,1,n) = fac2*xx + val
        d2_density(2,2,n) = fac2*yy + val
        d2_density(3,3,n) = fac2*zz + val
        d2_density(1,2,n) = fac2*xy; d2_density(2,1,n) = d2_density(1,2,n)
        d2_density(1,3,n) = fac2*xz; d2_density(3,1,n) = d2_density(1,3,n)
        d2_density(2,3,n) = fac2*yz; d2_density(3,2,n) = d2_density(2,3,n)
     end
     R.destroy
     D2.destroy
     D1.destroy
   end

   skip_interpolated_density_grid(pt,pos) result (res)
   ! Find out if we can skip evaluating the interpolated for the supplied points
   ! "pt" assuming the orbitals are at position "pos" because the points are so
   ! far away that the density would be zero.
     self :: IN
     pt :: MAT{REAL}, IN
     pos :: VEC{REAL}(3), IN
     res :: BIN
   ! ENSURE(pt.dim2==3,"wrong dimension for points array")
   ! ENSURE(density_grid.dim==pt.dim1,"inconsistent number of points")
   ! ENSURE(.interpolator.created,"no interpolator defined!")
     R :: VEC{REAL}*
     n_pt,n :: INT
     x, y, z :: REAL
     n_pt = pt.dim1
     R.create(n_pt)
     do n = 1,n_pt
        x = pt(n,1) - pos(1)
        y = pt(n,2) - pos(2)
        z = pt(n,3) - pos(3)
        R(n) = sqrt(x*x + y*y + z*z)
     end
     res = .interpolator.skip_values_for(R)
     R.destroy
   end

   density_at_radius(R) result (res)
   ! Work out the electron density at radius "R" from the orbitals.
      R :: REAL, IN
      res :: REAL
      if (.interpolator.created) then
         res = .interpolator.value_for(R)
      else
         res = .shell.density_at_radius(R)
      end
   end

!   make_interpolator(interpolator,tol) ::: leaky
!   ! Make the interpolator for the slater atom density. If present,
!   ! "interpolator" is used as a template to get the settings needed.
!   ! Otherwise a default interpolator is used.
!     interpolator :: INTERPOLATOR*, optional
!     tol :: REAL, optional
!   ENSURE(.shell.created,"no slater orbitals defined!")
!      if (present(interpolator)) then
!      if (interpolator.created) then
!         .interpolator.destroy
!         .interpolator.create_copy(interpolator)
!      end
!      end
!      if (.interpolator.destroyed) then
!         .interpolator.create
!      end
!      .shell.set_saved_self ! Used by function below
!      .interpolator.set_even_spaced_data(VEC{SLATERSHELL}::density_value_at_radius,tol)
!   end

   make_interpolator(interpolator) ::: leaky
   ! Make the interpolator for the slater atom density in terms of the radial
   ! distance squared (to avoid square roots). If present, "interpolator" is
   ! used as a template to get the settings needed. If present, "tol" defines
   ! the length of the table, so that the smallest value just exceeds "tol". 
     interpolator :: INTERPOLATOR*, optional

   ENSURE(.shell.created,"no slater orbitals defined!")

      if (present(interpolator)) then
      if (interpolator.created) then
         .interpolator.destroy
         .interpolator.create_copy(interpolator)
      end
      end

      if (.interpolator.destroyed) then
         .interpolator.create
      end

      .shell.set_saved_self                    ! Used by function below
      if (.use_r2_interpolation) then
         .interpolator.set_table_length(900d0) ! 30 Bohr table
         .interpolator.set_even_spaced_data(VEC{SLATERSHELL}::density_at_sqrt_radius2)
      else
         .interpolator.set_even_spaced_data(VEC{SLATERSHELL}::density_value_at_radius)
      end
   end

   interpolator_table_length(tol) result (length)
   ! Return the interpolator table "length" for a given tolerance "tol" for the
   ! atom density. The interpolator is a default one.
     tol,length :: REAL
   ENSURE(.shell.created,"no slater orbitals defined!")
      interpolator :: INTERPOLATOR*
      interpolator.create  
      .shell.set_saved_self ! Used by function below
      length = interpolator.the_table_length(VEC{SLATERSHELL}::density_value_at_radius,tol)
      interpolator.destroy
   end

   make_d_interpolators(interpolator,tol) ::: leaky
   ! Make the DERIVATIVE interpolators as well for the slater atom density. If
   ! present, "interpolator" is used as a template to get the settings needed.
   ! Otherwise a default interpolator is used.
     interpolator :: INTERPOLATOR*, optional
     tol :: REAL, optional
   ENSURE(.shell.created,"no slater orbitals defined!")
     len :: REAL
      if (present(interpolator)) then
      if (interpolator.created) then
         .interpolator.destroy
         .interpolator.create_copy(interpolator)
         .d_interpolator.destroy
         .d_interpolator.create_copy(interpolator)
         .d2_interpolator.destroy
         .d2_interpolator.create_copy(interpolator)
      end
      end
      if (.interpolator.destroyed) then
         .interpolator.create
         .d_interpolator.create
         .d2_interpolator.create
      end
      .shell.set_saved_self ! Used by function below
      .interpolator.set_even_spaced_data(VEC{SLATERSHELL}::density_value_at_radius,tol=tol)
      len = .interpolator.table_length
      .d_interpolator.set_even_spaced_data(VEC{SLATERSHELL}::density_d1_value_at_radius,length=len)
      .d2_interpolator.set_even_spaced_data(VEC{SLATERSHELL}::density_d2_value_at_radius,length=len)
    ! .d_interpolator.set_even_spaced_d_data(VEC{SLATERSHELL}::density_value_at_radius)
    ! .d2_interpolator.set_even_spaced_d2_data(VEC{SLATERSHELL}::density_value_at_radius)
   end

   unnormalise
   ! Set the value of the orbital coefficients to correspond to un-normalised
   ! Slater functions -- assuming they are normalised. This saves computation.
      if (.shell.created) .shell.unnormalise
   end

   renormalise
   ! Set the value of the orbitals coefficients to correspond to normalised
   ! Slater functions --- assuming they are w.r.t. unnormalised functions. 
      if (.shell.created) .shell.renormalise
   end

end
