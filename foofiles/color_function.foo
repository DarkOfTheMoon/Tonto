!------------------------------------------------------------------------------
!
! COLOR_FUNCTION:
!
! For generating an RGB color triple from a given data value.
!
! The module takes as input a series of data values with their assigned RGB
! colors. Any data value is then assigned an RGB color by interpolation from
! the color table.
!
! The default data range is [0...1]. The colors assigned are:
! Blue-Green for the range [0...0.5
! Green-Red  for the range [0.5...1].
!
! Copyright (C) Dylan Jayatilaka, 2002
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: color_function.foo 3250 2009-02-16 05:48:33Z dylan_ $
!
!------------------------------------------------------------------------------

module COLOR_FUNCTION

   implicit none

contains

!  ==========
!  Allocation
!  ==========

   create ::: get_from(OBJECT), leaky, pure
   ! Create an object
   end

   destroy ::: get_from(OBJECT), leaky, pure
   ! Destroy an object
   end

   nullify_ptr_part ::: always_pure
   ! Nullify the pointer parts
      nullify(.data)
      nullify(.RGB)
   end

   destroy_ptr_part ::: leaky, pure
   ! Destroy the pointer parts
      .data.destroy
      .RGB.destroy
   end

   created result (res) ::: get_from(OBJECT), inlined_by_foo, always_pure
   ! Returns true if self has been created
      self :: PTR
      res :: BIN
   end

   destroyed result (res) ::: get_from(OBJECT), inlined_by_foo, always_pure
   ! Returns true if self has *not* been created
      self :: PTR
      res :: BIN
   end

   create(range) ::: leaky
   ! Create the object
      self :: PTR
      range :: VEC{REAL}(2)
      .create
      .set_defaults(range)
   end

!  ============
!  Copy methods
!  ============

   create_copy(object) ::: get_from(OBJECT), leaky, pure
   ! Create a copy of object
   end

   copy(object) ::: leaky, pure
   ! Copy the contents of "object" to self.
      self :: INOUT
      object :: COLOR_FUNCTION, IN

      self = object

      .nullify_ptr_part

      CREATE_COPY_COMPONENT(data)
      CREATE_COPY_COMPONENT(RGB)

   end

!  ===========
!  Set methods
!  ===========

   set_defaults(range) ::: leaky, pure
   ! Set up a defaults
      self :: OUT
      range :: VEC{REAL}(2), IN, optional

      .n_data = 3
      .data.destroy
      .data.create(3)
      .data     = [ZERO,HALF, ONE]
      .RGB.destroy
      .RGB.create(3,3)
      .RGB(:,1) = [ZERO,ZERO, ONE]
      .RGB(:,2) = [ZERO, ONE,ZERO]
      .RGB(:,3) = [ ONE,ZERO,ZERO]

      if (present(range)) .rescale_data(range)

      .finalized = TRUE

   end

   set_reverse_defaults(range)
   ! Set up reversed defaults
      range :: VEC{REAL}(2), optional
      .n_data = 3
      .data.destroy
      .data.create(3)
      .data     = [ZERO,HALF, ONE]
      .RGB.destroy
      .RGB.create(3,3)
      .RGB(:,1) = [ ONE,ZERO,ZERO]
      .RGB(:,2) = [ZERO, ONE,ZERO]
      .RGB(:,3) = [ZERO,ZERO, ONE]
      if (present(range)) .rescale_data(range)
      .finalized = TRUE
   end

!  =============
!  Input methods
!  =============

   read_keywords ::: get_from(OBJECT), recursive, leaky
   ! Read data from "stdin" using keyword style input.
   end

   process_keyword(keyword) ::: leaky
   ! Process command "keyword". Any required data needed by the "keyword" is
   ! inputted from "stdin".
      keyword :: STR
      word :: STR
      word = keyword
      word.to_lower_case
      select case (word)
         case ("}               ")  ! exit case
       ! case ("data_and_color="); .read_data_and_color
         case ("data_and_rgb=   "); .read_data_and_RGB
         case ("put             "); .put
         case ("units=          "); .read_units
         case default;         UNKNOWN(word)
      end
   end

   read_units ::: get_from(OBJECT), private
   ! Read a string which describes the units to be used
   end

   read_data_and_RGB ::: leaky
   ! Read in the data-color pair. The color must be an RGB real triple
   ! And the list of data and color triples, a list of four real numbers, must
   ! be entered as a single vector.
      length,i,k :: INT
      data_and_color :: VEC{REAL}*
      stdin.read_ptr(data_and_color)
      ENSURE(mod(data_and_color.dim,4)==0,"data and color array must be divisible by 4")
      length = data_and_color.dim/4
      .data.destroy; .data.create(length)
      .RGB.destroy;  .RGB.create(3,length)
      k = 0
      do i = 1,length
         .data(i)  = data_and_color(k+1)
         .RGB(1,i) = data_and_color(k+2)
         .RGB(2,i) = data_and_color(k+3)
         .RGB(3,i) = data_and_color(k+4)
         k = k + 4
      end
      data_and_color.destroy
   end

!   read_data_and_color ::: leaky
!   ! Read in the data-color pair. The color can be a text string of a known
!   ! color, an RGB 255 integer triple, or an RGB real triple. Only the latter
!   ! is used and stored.
!   ENSURE(stdin.next_item=="{","open bracket '{' expected")
!      word :: STR
!      color :: COLOR
!      length,line,item,i :: INT
!      data :: REAL
!      stdin.read(word)
!      stdin.read(word)
!      length = 0
!      line = stdin.line_number
!      item = stdin.previous_line_item
!      do
!         stdin.move_to_previous_item
!         stdin.read(data)
!         color.read
!         length = length + 1
!         stdin.read(word)
!         word.to_lower_case
!         if (word=="}") exit
!      end
!      stdin.move_to_line(line)
!      stdin.move_to_line_item(item)
!      .data.destroy
!      .data.create(length)
!      .RGB.destroy
!      .RGB.create(3,length)
!      do i = 1,length
!         stdin.read(data)
!         color.read
!         .data(i)  = data
!         .RGB(:,i) = color.RGB
!      end
!      stdin.read(word)
!      word.to_lower_case
!      ENSURE(word=="}","expecting a }")
!   end

   finalize ::: leaky
   ! Check everything is OK after reading data. Saturation must exist but it is
   ! applied into the RGB triples and then destroyed.
   ENSURE(.data.created,"no data values")
   ENSURE(.RGB.created,"no RGB values")
   ENSURE(.data.dim==.RGB.dim2,"incompatible #: data and RGB")
   ENSURE(all(.RGB>=ZERO),"negative RGB values exist")
   ENSURE(all(.RGB<=ONE),"some RGB values greater than 1")
   ENSURE(all(.RGB.column_norms<=THREE),"some RGB norms larger than 3")
      order :: VEC{INT}*
      .n_data = .data.dim
      order.create(.n_data)
      ! Re-order from smallest to largest
      .data.quick_sort(order)
      .data       = .data(order)
      .RGB        = .RGB(:,order)
      order.destroy
      .finalized = TRUE
   end

!  ============
!  Set routines
!  ============

   set_data(data) ::: leaky
   ! Set the data. Make sure that .finalize is called after all set routines.
      data :: VEC{REAL}
      .data.destroy
      .data.create_copy(data)
   end

   set_RGB(RGB) ::: leaky
   ! Set the RGB's. Make sure that .finalize is called after all set routines.
      RGB :: MAT{REAL}
      .RGB.destroy
      .RGB.create_copy(RGB)
   end

!  ================
!  Colors for data
!  ================

   RGB_for(value,truncate_to_range) result (res)
   ! Return the RGB triple corresponding to a certain "value".
      self :: IN
      value :: REAL, IN
      truncate_to_range :: BIN, optional, IN
      res :: VEC{REAL}(3)
   ENSURE(.finalized,"not finalized")
      color :: VEC{REAL}(3)
      frac,thevalue :: REAL
      i1,i2 :: INT
      truncate :: BIN
      thevalue = value
      truncate = TRUE
      if (present(truncate_to_range)) truncate = truncate_to_range
      if (NOT truncate) then
        ENSURE(thevalue.is_in_range(.data.range),"value out of range")
      else
        thevalue = min(thevalue,maxval(.data))
        thevalue = max(thevalue,minval(.data))
      end
      i1 = count(.data<=thevalue) ! assuming .data is ordered !
      i1 = min(i1,.n_data-1)
      i2 = i1 + 1
      frac   = (thevalue - .data(i1))/(.data(i2)-.data(i1))
      color = .RGB(:,i2) - .RGB(:,i1)
      res    = .RGB(:,i1) + frac*color
   end

   RGB255_for(value) result (res)
   ! Return the RGB255 triple corresponding to a certain "value".
      value :: REAL
      res :: VEC{INT}(3)
   ENSURE(.finalized,"not finalized")
   ENSURE(value.is_in_range(.data.range),"value out of range")
      color :: VEC{REAL}(3)
      frac :: REAL
      i1,i2 :: INT
      i1 = count(.data<=value) ! assuming .data is ordered !
      i1 = min(i1,.n_data-1)
      i2 = i1 + 1
      frac   = (value - .data(i1))/(.data(i2)-.data(i1))
      color = .RGB(:,i2) - .RGB(:,i1)
      res    = nint(255*(.RGB(:,i1) + frac*color))
   end

   get_RGB_for(values,RGB)
   ! Return the "RGB" triples corresponding to a set of "values".
      values :: VEC{REAL}
      RGB :: MAT{REAL}
   ENSURE(.finalized,"not finalized")
   ENSURE(RGB.dim1==3,"first dimension of RGB array must be 3")
   ENSURE(RGB.dim2==values.dim,"values and RGB are incompatible")
      i,n :: INT
      n = values.dim
      do i = 1,n
         RGB(:,i) = .RGB_for(values(i))
      end
   end

   get_RGB_for(values,RGB)
   ! Return the "RGB" triples corresponding to a set of "values".
      values :: VEC{REAL}
      RGB :: MAT{INT}
   ENSURE(.finalized,"not finalized")
   ENSURE(RGB.dim1==3,"first dimension of RGB array must be 3")
   ENSURE(RGB.dim2==values.dim,"values and RGB are incompatible")
      i,n :: INT
      n = values.dim
      do i = 1,n
         RGB(:,i) = nint(.RGB_for(values(i)))
      end
   end

   get_RGB_for(values,RGB)
   ! Return the "RGB" triples corresponding to a set of "values".
      values :: MAT{REAL}
      RGB :: MAT3{INT}
   ENSURE(.finalized,"not finalized")
   ENSURE(RGB.dim1==3,"first dimension of RGB array must be 3")
   ENSURE(RGB.dim2==values.dim1,"values and RGB are incompatible")
   ENSURE(RGB.dim3==values.dim2,"values and RGB are incompatible")
      i,j,n,m :: INT
      n = values.dim2
      m = values.dim1
      do j = 1,n
        do i = 1,m
          RGB(:,i,j) = nint(.RGB_for(values(i,j)))
        end
      end
   end

   get_RGB255_for(values,RGB255)
   ! Return the "RGB255" triples corresponding to a set of "values".
      values :: VEC{REAL}
      RGB255 :: MAT{INT}
   ENSURE(.finalized,"not finalized")
   ENSURE(RGB255.dim2==values.dim,"values and RGB255 are incompatible")
      i,n :: INT
      n = values.dim
      do i = 1,n
         RGB255(:,i) = .RGB255_for(values(i))
      end
   end

   rescale_data(range)
   ! Rescale the .data so that the lowest value corresponds to
   ! range(1), and the largest value corresponds to range(2).
      self :: INOUT
      range :: VEC{REAL}(2), IN

   ENSURE(.data.created,"no data")
   ENSURE(.n_data>1,"not enough data")

      data1,del,frac :: REAL
      i :: INT

      data1 = .data(1)
      del   = .data(.n_data) - data1

      do i = 1,.n_data
         frac = (.data(i) - data1)/del
         .data(i) = range(1) + frac*(range(2)-range(1))
      end

   end

  rescale_RGB(range)
  ! Rescale the .RGB so that the lowest value corresponds to
  ! range(1), and the largest value corresponds to range(2).
    range :: VEC{REAL}(2)
    ENSURE(.RGB.created,"no data")
    ENSURE(.n_data>1,"not enough data")
    minv,maxv,del,frac :: VEC{REAL}(3)
    i :: INT
    minv = (/minval(.RGB(:,1)),minval(.RGB(:,2)),minval(.RGB(:,3))/)
    maxv = (/maxval(.RGB(:,1)),maxval(.RGB(:,2)),maxval(.RGB(:,3))/)
    del = maxv - minv
    do i = 1,.n_data
      frac = (.RGB(i,:) - minv)/del
      .RGB(i,:) = range(1) + frac*(range(2)-range(1))
    end
  end

   set_default_colors(values) ::: leaky
   ! Set up default colors for a set of "values".
      values :: VEC{REAL}
      .rescale_data(values.range)
   end

!  ==============
!  Output methods
!  ==============

   put
   ! Put the list of interpolating colors.
      i :: INT
      stdout.flush
      stdout.text("Color function data")
      stdout.flush
      stdout.show("No. of interpolating data points =",.n_data)
      stdout.flush
      stdout.dash(int_fields=1,real_fields=4)
      stdout.put("#",int_width=TRUE)
      stdout.put("Data")
      stdout.put("Red")
      stdout.put("Green")
      stdout.put("Blue")
      stdout.flush
      stdout.dash(int_fields=1,real_fields=4)
      do i = 1,.n_data
         stdout.put(i)
         stdout.put(.data(i))
         stdout.put(.RGB(1,i))
         stdout.put(.RGB(2,i))
         stdout.put(.RGB(3,i))
         stdout.flush
      end
      stdout.dash(int_fields=1,real_fields=4)
   end

end
