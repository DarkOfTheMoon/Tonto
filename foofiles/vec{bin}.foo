!---------------------------------------------------------------------------
!
! VEC{BIN} : Boolean vector operations ...
!
! Copyright (C) Daniel Grimwood, 1999
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!
!---------------------------------------------------------------------------

module VEC{BIN}

  implicit none

contains

! *****************
! Memory allocation
! *****************

   create(dim) ::: get_from(VEC{INTRINSIC}), leaky
   ! Create space for object
      self :: PTR
      dim :: INT, IN
   end

   create(lb,ub) ::: get_from(VEC{INTRINSIC}), leaky
   ! Create the vector with lower bound "lb", upper bound "ub"
      self :: PTR
      lb,ub :: INT, IN
   end

   create(bounds) ::: get_from(VEC{INTRINSIC}), leaky
   ! Create the vector with "bounds"
      self :: PTR
      bounds :: VEC{INT}(2), IN
   end

   destroy ::: get_from(VEC{INTRINSIC}), leaky
   ! Destroy space for object
      self :: PTR
   end

   create_copy(v) ::: get_from(VEC{INTRINSIC}), leaky
   ! Create a copy of vector "v".
      self :: PTR
      v :: VEC{BIN}, IN
   end

   copy(v) ::: get_from(VEC{INTRINSIC})
   ! Copy vector "v".
      v :: VEC{BIN}, IN
   end

   created result(res) ::: get_from(VEC{INTRINSIC}), inlined_by_foo
   ! Returns true if self has been created
      self :: PTR
      res :: BIN
   end

   destroyed result(res) ::: get_from(VEC{INTRINSIC}), inlined_by_foo
   ! Returns true if self has *not* been created
      self :: PTR
      res :: BIN
   end

! ******************
! Size-of operations
! ******************

   size result (res) ::: get_from(VEC{INTRINSIC}), inlined_by_foo
   ! Return the size of the array
      res :: INT
   end

   dim result (res) ::: get_from(VEC{INTRINSIC}), inlined_by_foo
   ! Return the size of the 1st dimension
      res :: INT
   end

! ***********************
! Shrinking and expansion
! ***********************

   shrink(dim) ::: get_from(VEC{INTRINSIC}), leaky
   ! Shrink self to dimension dim.  Contents are retained.
     self :: PTR
     dim :: INT, IN
   end

   expand(dim) ::: get_from(VEC{INTRINSIC}), leaky
   ! Expand self to dimension dim. New slots are left undefined.
     self :: PTR
     dim :: INT, IN
   end

   append(v) ::: get_from(VEC{INTRINSIC}), leaky
   ! Expands self and appends the contents of vector "v".
     self :: PTR
     v :: VEC{BIN}, IN
   end

   append(value) ::: get_from(VEC{INTRINSIC}), leaky
   ! Expands self by 1, and appends the single scalar "value" onto the end.
     self :: PTR
     value :: BIN, IN
   end

   prepend(v) ::: get_from(VEC{INTRINSIC}), leaky
   ! Prepend the vector "v" to "self". "self" is expanded.
     self :: PTR
     v :: VEC{BIN}, IN
   end

   prepend(value) ::: get_from(VEC{INTRINSIC}), leaky
   ! Prepend an single "value" to "self". "self" is expanded.
     self :: PTR
     value :: BIN, IN
   end

   join(v) result (res) ::: get_from(VEC{INTRINSIC}), leaky
   ! Yield a vector which is the concatenation of "self" and "v"
     v :: VEC{BIN}, IN
     res :: VEC{BIN}*
   end

   join(v1,v2) result (res) ::: get_from(VEC{INTRINSIC}), leaky
   ! Yield a vector which is the concatenation of "self" and "v1" and "v2"
     v1,v2 :: VEC{BIN}, IN
     res :: VEC{BIN}*
   end

! ********************
! Comparison functions
! ********************

   equals(v) result(res)
   ! Return true if "self" is the same as "v".
      self :: IN
      v :: VEC{BIN}, IN
      res :: BIN
      res = .same_as(v)
   end

   same_as(v) result(res)
   ! Return true if "self" is the same as "v".
      self :: IN
      v :: VEC{BIN}, IN
      res :: BIN
      if (.dim/=v.dim) then; res = FALSE
      else;                  res = all(self EQV v)
      end
   end

! ****************
! Sorting routines
! ****************

   reverse_order ::: get_from(VEC{INTRINSIC}), pure
   ! Reverse the order of the elements of self
     self :: INOUT
   end

   swap_elements(e1,e2) ::: get_from(VEC{INTRINSIC}), pure
   ! Swap elements "e1" and "e2" in "self".
      self :: INOUT
      e1,e2 :: INT, IN
   end

! **********
! Misc stuff
! **********

   n_true result(res)
   ! Returns the number of true items in self.
     res :: INT
     res = count(self)
   end

   n_false result(res)
   ! Returns the number of false items in self.
     res :: INT
     res = size(self) - count(self)
   end

   index_of_first_true_element result(res)
   ! Returns the index of the first true element in self, or zero if there is no
   ! true element.
     res :: INT
     i :: INT
     res = 0
     do i = 1,size(self)
        if (self(i)) then
           res = i
           exit
        end
     end
   end

end
