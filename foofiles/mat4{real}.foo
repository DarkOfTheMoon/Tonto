!---------------------------------------------------------------------------
!
!  MAT4{REAL}: 4 dimensional matrices
!
! Copyright (C) Dylan Jayatilaka and Daniel Grimwood, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!---------------------------------------------------------------------------

module MAT4{REAL}

   implicit none

contains

   create(dim1,dim2,dim3,dim4) ::: get_from(MAT4{INTRINSIC}), leaky
   ! Create the object with the desired bounds
   end

   create(bounds) ::: get_from(MAT4{INTRINSIC}), leaky
   ! Create a 4-d array with all upper "bounds" specified
   end

   create(lb1,ub1,lb2,ub2,lb3,ub3,lb4,ub4) ::: get_from(MAT4{INTRINSIC}), leaky
   ! Create the object with the desired bounds
   end

   create(bounds1,bounds2,bounds3,bounds4) ::: get_from(MAT4{INTRINSIC}), leaky
   ! Create the object with the desired bounds
   end

   create(bounds) ::: get_from(MAT4{INTRINSIC}), leaky
   ! Create the object with the desired bounds
   end

   create_copy(c) ::: get_from(MAT4{INTRINSIC}), leaky
   ! Create a copy of matrix "c"
   end

   destroy ::: get_from(MAT4{INTRINSIC}), leaky
   ! Destroy the object
   end

   created result (res) ::: get_from(MAT4{INTRINSIC}), inlined_by_foo
   ! Returns true if self has been created
   end

   destroyed result (res) ::: get_from(MAT4{INTRINSIC}), inlined_by_foo
   ! Returns true if self has *not* been created
   end

   size result (res) ::: get_from(MAT4{INTRINSIC}), inlined_by_foo
   ! Return the size of the array
   end

   dim1 result (res) ::: get_from(MAT4{INTRINSIC}), inlined_by_foo
   ! Return the size of the 1st dimension
   end

   dim2 result (res) ::: get_from(MAT4{INTRINSIC}), inlined_by_foo
   ! Return the size of the 2nd dimension
   end

   dim3 result (res) ::: get_from(MAT4{INTRINSIC}), inlined_by_foo
   ! Return the size of the 3rd dimension
   end

   dim4 result (res) ::: get_from(MAT4{INTRINSIC}), inlined_by_foo
   ! Return the size of the 4th dimension
   end

   shape result (res) ::: get_from(MAT4{INTRINSIC})
   ! Return the shape of the matrix
   end

   is_same_shape_as(b) result (res)  ::: get_from(MAT4{INTRINSIC})
   ! Returns TRUE if the matrix "b" has the same shape as self
   end

   set_to(b) ::: get_from(MAT4{INTRINSIC})
   ! Set "self" to "b"
   end

   set_to(b) ::: get_from(MAT4{INTRINSIC})
   ! Set "self" to vector "b" in standard order
   end

   partial_trace(d1,d2,T)
   ! Contract self by tracing over its dimensions d1 and d2, d1<d2.
   ! return the matrix T.
      T :: MAT{REAL}
      d1,d2 :: INT
      ENSURE(1<=d1 AND d2<=4, "dimensions out of bound")
      ENSURE(d1<d2,"dimensions not in increasing order")
      m,n :: INT
      if (d1==1 AND d2==2) then
       do m=1,.dim3
       do n=1,.dim4
         T(m,n)=self(:,:,m,n).trace
       end
       end
      else if (d1==1 AND d2==3) then
       do m=1,.dim2
       do n=1,.dim4
         T(m,n)=self(:,m,:,n).trace
       end
       end
      else if (d1==1 AND d2==4) then
       do m=1,.dim2
       do n=1,.dim3
         T(m,n)=self(:,m,n,:).trace
       end
       end
      else if (d1==2 AND d2==3) then
       do m=1,.dim1
       do n=1,.dim4
         T(m,n)=self(m,:,:,n).trace
       end
       end
      else if (d1==2 AND d2==4) then
       do m=1,.dim1
       do n=1,.dim3
         T(m,n)=self(m,:,n,:).trace
       end
       end
      else if (d1==3 AND d2==4) then
       do m=1,.dim1
       do n=1,.dim2
         T(m,n)=self(m,n,:,:).trace
       end
       end
      end
   end

   change_index_1_to(new,V)
   ! Change the 1st index basis of "self" using vectors "V", and place
   ! the result in "new".  new(1,:,:,:) = self(1,:,:,:) V(1,:)
      new :: MAT4{REAL}
      V :: MAT{REAL}, IN
   ENSURE(V.dim1==   .dim1,"wrong shapes")
   ENSURE(V.dim2==new.dim1,"wrong shapes")
      i,j,k :: INT
      forall(i=1:.dim2,j=1:.dim3,k=1:.dim4)
         new(:,i,j,k) = matmul(self(:,i,j,k),V)
      end
   end

   change_index_2_to(new,V)
   ! Change the 2nd index basis of "self" using vectors "V", and place
   ! the result in "new".  new(:,2,:,:) = self(:,2,:,:) V(2,:)
      new :: MAT4{REAL}
      V :: MAT{REAL}, IN
   ENSURE(V.dim1==   .dim2,"wrong shapes")
   ENSURE(V.dim2==new.dim2,"wrong shapes")
      i,j,k :: INT
      forall(i=1:.dim1,j=1:.dim3,k=1:.dim4)
         new(i,:,j,k) = matmul(self(i,:,j,k),V)
      end
   end

   change_index_3_to(new,V)
   ! Change the 3rd index basis of "self" using vectors "V", and place
   ! the result in "new".  new(:,:,3,:) = self(:,:,3,:) V(3,:)
      new :: MAT4{REAL}
      V :: MAT{REAL}, IN
   ENSURE(V.dim1==   .dim3,"wrong shapes")
   ENSURE(V.dim2==new.dim3,"wrong shapes")
      i,j,k :: INT
      forall(i=1:.dim1,j=1:.dim2,k=1:.dim4)
         new(i,j,:,k) = matmul(self(i,j,:,k),V)
      end
   end

   change_index_4_to(new,V)
   ! Change the 3rd index basis of "self" using vectors "V", and place
   ! the result in "new".  new(:,:,:,4) = self(:,:,:,4) V(4,:)
      new :: MAT4{REAL}
      V :: MAT{REAL}, IN
   ENSURE(V.dim1==   .dim4,"wrong shapes")
   ENSURE(V.dim2==new.dim4,"wrong shapes")
      i,j,k :: INT
      forall(i=1:.dim1,j=1:.dim2,k=1:.dim3)
         new(i,j,k,:) = matmul(self(i,j,k,:),V)
      end
   end

end
