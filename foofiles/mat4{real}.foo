!---------------------------------------------------------------------------
!
!  MAT4{REAL}: 4 dimensional matrices
!
! Copyright (C) Dylan Jayatilaka and Daniel Grimwood, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!---------------------------------------------------------------------------

module MAT4{REAL}

   implicit none

contains

   create(dim1,dim2,dim3,dim4) ::: get_from(MAT4{INTRINSIC}), leaky
   ! Create the object with the desired bounds
   end

   create(bounds) ::: get_from(MAT4{INTRINSIC}), leaky
   ! Create a 4-d array with all upper "bounds" specified
   end

   create(lb1,ub1,lb2,ub2,lb3,ub3,lb4,ub4) ::: get_from(MAT4{INTRINSIC}), leaky
   ! Create the object with the desired bounds
   end

   create(bounds1,bounds2,bounds3,bounds4) ::: get_from(MAT4{INTRINSIC}), leaky
   ! Create the object with the desired bounds
   end

   create(bounds) ::: get_from(MAT4{INTRINSIC}), leaky
   ! Create the object with the desired bounds
   end

   create_copy(c) ::: get_from(MAT4{INTRINSIC}), leaky
   ! Create a copy of matrix "c"
   end

   destroy ::: get_from(MAT4{INTRINSIC}), leaky
   ! Destroy the object
   end

   created result(res) ::: get_from(MAT4{INTRINSIC}), inlined_by_foo
   ! Returns true if self has been created
   end

   destroyed result(res) ::: get_from(MAT4{INTRINSIC}), inlined_by_foo
   ! Returns true if self has *not* been created
   end

   size result (res) ::: get_from(MAT4{INTRINSIC}), inlined_by_foo
   ! Return the size of the array
   end

   dim1 result (res) ::: get_from(MAT4{INTRINSIC}), inlined_by_foo
   ! Return the size of the 1st dimension
   end

   dim2 result (res) ::: get_from(MAT4{INTRINSIC}), inlined_by_foo
   ! Return the size of the 2nd dimension
   end

   dim3 result (res) ::: get_from(MAT4{INTRINSIC}), inlined_by_foo
   ! Return the size of the 3rd dimension
   end

   dim4 result (res) ::: get_from(MAT4{INTRINSIC}), inlined_by_foo
   ! Return the size of the 4th dimension
   end

   shape result (res) ::: get_from(MAT4{INTRINSIC})
   ! Return the shape of the matrix
   end

   is_same_shape_as(b) result(res)  ::: get_from(MAT4{INTRINSIC})
   ! Returns TRUE if the matrix "b" has the same shape as self
   end

   set_to(b) ::: get_from(MAT4{INTRINSIC})
   ! Set "self" to "b"
   end

   set_to(b) ::: get_from(MAT4{INTRINSIC})
   ! Set "self" to vector "b" in standard order
   end

   make_symmetric
   ! Make the upper pyramid of "self" the same as the lower pyramid in the case
   ! that "self" has the symmetry of real two electron eri integrals.
   ENSURE(.dim1==.dim2,"non-cube tensor")
   ENSURE(.dim1==.dim3,"non-cube tensor")
   ENSURE(.dim1==.dim4,"non-cube tensor")
      dim, i,j,k,l :: INT
      val :: REAL
      do i = 1,.dim1
      do j = 1,i
         do k = 1,i-1
         do l = 1,k
            val = self(i,j,k,l)
            if (val.equals(-ONE)) write(*,*) "fail at i,j,k,l =",i,j,k,l
            self(i,j,l,k) = val
            self(j,i,k,l) = val
            self(j,i,l,k) = val
            self(k,l,i,j) = val
            self(k,l,j,i) = val
            self(l,k,i,j) = val
            self(l,k,j,i) = val
         end
         end
         k = i
         do l = 1,j
            val = self(i,j,k,l)
            if (val.equals(-ONE)) write(*,*) "fail at i,j,k,l =",i,j,k,l
            self(i,j,l,k) = val
            self(j,i,k,l) = val
            self(j,i,l,k) = val
            self(k,l,i,j) = val
            self(k,l,j,i) = val
            self(l,k,i,j) = val
            self(l,k,j,i) = val
         end
      end
      end
   end

end
