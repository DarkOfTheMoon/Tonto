program run_ADAPTIVE_QUADRATURE

  implicit none

  q :: ADAPTIVE_QUADRATURE*
  accuracy,res :: REAL

  q.create                                          ! Create the adaptive integrator

  print *, "Enter desired accuracy:"
  read *, accuracy
  print *, "Desired accuracy      = ",accuracy

  q.set_algorithm("adaptive_ewing_41")              ! Algorithm, Ewing (1941)
  q.set_limits([-TWO,TWO])                          ! Set integration limits
  q.set_accuracy(accuracy)                          ! Set desired accuracy
  ! Do the adaptive integration of 3D function test_gauss ...
  res = q.adaptive_integrate(ADAPTIVE_QUADRATURE:test_gauss) 
  print *, "Ewing                 = ",res           ! Display the results
  print *, "# of func evaluations = ",q.n_points

  q.set_algorithm("adaptive_genz_malik_80")         ! Algorithm, Genz-Malik (1980)
  q.set_limits([-TWO,TWO])
  q.set_accuracy(accuracy)
  res = q.adaptive_integrate(ADAPTIVE_QUADRATURE:test_gauss)
  print *, "Genz-Malik            = ",res           ! Display the results
  print *, "# of func evaluations = ",q.n_points

  q.set_algorithm("adaptive_hammer_stroud_58")      ! Algorithm, Hammer-Stroud (1958)
  q.set_limits([-TWO,TWO])
  q.set_accuracy(accuracy)
  res = q.adaptive_integrate(ADAPTIVE_QUADRATURE:test_gauss)
  print *, "Hammer-Stroud         = ",res           ! Display the results
  print *, "# of func evaluations = ",q.n_points

  q.set_algorithm("adaptive_tyler_53")              ! Algorithm, Tyler (1953)
  q.set_limits([-TWO,TWO])
  q.set_accuracy(accuracy)
  res = q.adaptive_integrate(ADAPTIVE_QUADRATURE:test_gauss)
  print *, "Tyler                 = ",res           ! Display the results
  print *, "# of func evaluations = ",q.n_points

end
