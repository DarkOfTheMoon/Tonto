!---------------------------------------------------------------------------
!
! VEC{MAT_{REAL}}: Vector of matrices
!
! Copyright (C) Daniel Grimwood, 1999
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!---------------------------------------------------------------------------

module VEC{MAT_{REAL}}

   implicit none

contains

!  ==========
!  Allocation
!  ==========

   create(dim) ::: get_from(VEC{MAT_{INTRINSIC}}), leaky
   ! Create the object
   end

   create(lb,ub) ::: get_from(VEC{MAT_{INTRINSIC}}), leaky
   ! Create the object with specified bounds
   end

   create(dim,dim1,dim2) ::: get_from(VEC{MAT_{INTRINSIC}}), leaky
   ! Create space for a vector of matrices
   end

   create_mat(dim1,dim2) ::: get_from(VEC{MAT_{INTRINSIC}}), leaky, pure
   ! Allocate the pointer parts
   end

   destroy ::: get_from(VEC{MAT_{INTRINSIC}}), leaky, pure
   ! Destroy the object
   end

   nullify_ptr_part ::: get_from(VEC{MAT_{INTRINSIC}})
   ! Nullify the pointer parts of a matvec
   end

   destroy_ptr_part ::: get_from(VEC{MAT_{INTRINSIC}}), leaky, pure
   ! Destroy the pointer parts of a matvec
   end

   created result (res) ::: get_from(OBJECT), inlined_by_foo, always_pure
   ! Returns true if self has been created
   end

   destroyed result (res) ::: get_from(OBJECT), inlined_by_foo, always_pure
   ! Returns true if self has *not* been created
   end

!  ============
!  Copy methods
!  ============

   create_copy(v) ::: get_from(VEC{MAT_{INTRINSIC}}), leaky, pure
   ! Create a copy of "v"
   end

   copy(v) ::: get_from(VEC{MAT_{INTRINSIC}}), leaky, pure
   ! Make a copy of "v"
   end

!  ==================
!  Size-of operations 
!  ==================

   lb result(res) ::: always_pure
   ! Returns the lower bound of self
      self :: IN
      res :: INT

      res = lbound(self,1)

   end

   ub result(res) ::: always_pure
   ! Returns the upper bound of self
      self :: IN
      res :: INT

      res = ubound(self,1)

   end

!  ===============
!  General methods
!  ===============

   make_gaussian_xyz_matrices(ptr) ::: leaky
   ! Return representation matrices for the s, p, d, f, and g (l = 0
   ! ... 4) xyz cartesian gaussian shell components from a single p
   ! xyz representation matrix "ptr".
   ! NOTE: nothing in self in pointer assigned, it can be destroyed
      self :: PTR
      ptr :: MAT{REAL}
   
   ENSURE(ptr.is_square,"ptr matrix is not square")
   ENSURE(ptr.dim2==3,"wrong 1st dimension, self")

      self.create(0,4)
      self(0).element.create(1,1)
      self(1).element.create(3,3)
      self(2).element.create(6,6)
      self(3).element.create(10,10)
      self(4).element.create(15,15)

      ! Now assign the transformation matrices
      self(0).element = ONE
      self(1).element = ptr
      self(2).element = ptr.gaussian_d_xyz_matrix
      self(3).element = ptr.gaussian_f_xyz_matrix
      self(4).element = ptr.gaussian_g_xyz_matrix

   end

   to_product_of(a,v,transpose_a)
   ! Set "self" to the product of the matrix "a" and vector "v". If present,
   ! "transpose_a" can be set to TRUE if the matrix needs to be transposed.
      a :: MAT{REAL}, IN
      v :: VEC{MAT_{REAL}}, IN
      transpose_a :: BIN, optional

      i,j :: INT
      trans_a :: BIN
      trans_a = FALSE

      if (present(transpose_a)) trans_a = transpose_a

      if (trans_a) then

         ENSURE(a.dim2==.dim,"array dimensions do not agree")
         ENSURE(a.dim1==v.dim,"array dimensions do not agree")
         
         do i = 1,.dim
            self(i).element = ZERO
            do j = 1,a.dim1
               self(i).element = self(i).element + a(j,i) * v(j).element
            end
         end

      else

         ENSURE(a.dim1==.dim,"array dimensions do not agree")
         ENSURE(a.dim2==v.dim,"array dimensions do not agree")
         
         do i = 1,.dim
            self(i).element = ZERO
            do j = 1,a.dim2
               self(i).element = self(i).element + a(i,j) * v(j).element
            end
         end

      end

   end

   weak_two_orthonormalize(vec)
   ! two orthogonalize also with respect to the set of unit vectors
   ! collinear to those in vec. 
     self :: target
     vec :: VEC{MAT_{REAL}}, IN

   ENSURE(vec.dim>0,"size of vec is zero")
   ENSURE(self(1).element.dim1==vec(1).element.dim1,"geminals not of the same shape")
   ENSURE(self(1).element.dim2==vec(1).element.dim2,"geminals not of the same shape")

     old,new :: MAT{REAL}*
     fac,norm :: REAL
     n,p,dim1,dim2 :: INT

     dim1 = vec(1).element.dim1
     dim2 = vec(1).element.dim2
     old.create(dim1,dim2)

     ! Orthogonalisation to spectator bra's
     do p = 1,vec.dim

       old = vec(p)[:,:]
       norm = MAT{REAL}:sum(old*old)
       old  = old/sqrt(norm)

       do n = 1,self.dim
         new => self(n)[:,:]
         fac = MAT{REAL}:sum(old*new)
         new = new - fac*old
       end

     end

     nullify(new)
     old.destroy

   end

   two_orthonormalize(eigenvectors)
   ! project singlet geminals on the orthogonal complement of the 
   !2_internal space (spanned by the
   ! vectors in the argument "eigenvectors") of the exterior product 
   ! of spectator geminals
     self :: target
     eigenvectors :: MAT{REAL}, IN

     new :: MAT{REAL}*
     resz,vec :: VEC{REAL}*
     fac :: REAL
     n,o,dim1,dim2,k,j,i :: INT

     dim1= self(1).element.dim1
     dim2= self(1).element.dim2

     resz.create(dim1*dim1)
     vec.create(dim1*dim1)

     do n=1,self.dim

       new => self(n)[:,:]
       resz(:)=ZERO

       do j=1,eigenvectors.dim1

         fac = ZERO
         vec = ZERO
         o=1

         do i=1,dim1
           do k=1,i
             if (i==k) then
               fac=fac+eigenvectors(j,o)*new(i,i)
               vec((i-1)*dim1+k)=eigenvectors(j,o)
             else
               fac=fac+eigenvectors(j,o)*(new(i,k)+new(k,i))/sqrt(TWO)
               vec((i-1)*dim1+k)=eigenvectors(j,o)/sqrt(TWO)
               vec((k-1)*dim1+i)=eigenvectors(j,o)/sqrt(TWO)
             end
             o=o+1
           end
         end

         resz=resz+fac*vec

       end

       do i=1,dim1
         do k=1,dim2
           new(i,k)=new(i,k)-resz((i-1)*dim2+k)
         end
       end

     end

     resz.destroy
     vec.destroy

   end

   strong_two_orthonormalize(eigenvectors)
   ! project singlet geminals on the 2_external space (spanned by the
   ! vectors in the argument "eigenvectors") of the exterior product 
   ! of spectator geminals
     self :: target
     eigenvectors :: MAT{REAL}, IN

     new :: MAT{REAL}*
     resz :: VEC{REAL}*
     vec :: VEC{REAL}*
     fac :: REAL
     n,o,dim1,dim2,k,j,i :: INT

     dim1= self(1).element.dim1
     dim2= self(1).element.dim2

     resz.create(dim1*dim1)
     vec.create(dim1*dim1)

     do n=1,self.dim

       new => self(n)[:,:]
       resz = ZERO

       do j=1,eigenvectors.dim1

         fac=ZERO
         vec=ZERO

         o=1
         do i=1,dim1
           do k=1,i
             if (i==k) then
               fac=fac+eigenvectors(j,o)*new(i,i)
               vec((i-1)*dim1+k)=eigenvectors(j,o)
             else
               fac=fac+eigenvectors(j,o)*(new(i,k)+new(k,i))/sqrt(TWO)
               vec((i-1)*dim1+k)=eigenvectors(j,o)/sqrt(TWO)
               vec((k-1)*dim1+i)=eigenvectors(j,o)/sqrt(TWO)
             end
             o=o+1
           end
         end

         resz=resz+fac*vec

       end

       do i=1,dim1
         do k=1,dim2
           new(i,k)=resz((i-1)*dim2+k)
         end
       end

     end

     resz.destroy
     vec.destroy

   end

   schmidt_orthonormalize(S,scales,n_dependent,ld_tol)
   ! Schmidt orthonormalize the vectors in "self" using "S" as the
   ! metric. "scales" is set to the
   ! normalisation factors used to normalize each column after the Schmidt
   ! procedure. Only those vectors with norm more than the linear dependence
   ! tolerance are orthonormalized. the others are counted (n_dependent) 
   ! and normalized if the norm is not initially below a certain threshold. 
     S :: MAT{REAL} 
     scales :: VEC{REAL}, OUT
     n_dependent :: INT, OUT
     ld_tol :: REAL, optional
   ENSURE(NOT S.is_zero,"S is zero matrix")
   ENSURE(S.is_square,"S matrix is not square")
     unorthovec :: MAT{REAL}*
     unorthovec.create(.dim,.dim)
     unorthovec.to_unit_matrix !first index will run other the orthonormal vectors 
     if(present(ld_tol)) then
       unorthovec.schmidt_orthonormalize(S,scales,n_dependent,ld_tol)
     else
       unorthovec.schmidt_orthonormalize(S,scales,n_dependent)
     end  
     .change_basis_using(unorthovec)
     unorthovec.destroy
   end

   schmidt_orthonormalize(S,keep,scales,n_dependent,ld_tol)
   ! Schmidt orthonormalize the vectors in "self" using "S" as the
   ! metric. "scales" is set to the
   ! keep contains original vectors to restore: if the norm of a vector
   ! to orthogonalize is less than ld_tol the corresponding vector in
   ! keep is restored.
   ! normalisation factors used to normalize each column after the Schmidt
   ! procedure. Only those vectors with norm more than the linear dependence
   ! tolerance are orthonormalized. the others are counted (n_dependent) 
   ! and normalized if the norm is not initially below a certain threshold. 
     self :: PTR
     keep :: VEC{MAT_{REAL}}
     S :: MAT{REAL} 
     scales :: VEC{REAL}, OUT
     n_dependent :: INT, OUT
     ld_tol :: REAL, optional
   ENSURE(NOT S.is_zero,"S is zero matrix")
   ENSURE(S.is_square,"S matrix is not square")
   ENSURE(.dim==keep.dim,"number of stored vectors different from number of vectors to orthonormalize")
     unorthovec :: MAT{REAL}*
     indices :: VEC{INT}*
     i :: INT
     unorthovec.create(.dim,.dim)
     unorthovec.to_unit_matrix !first index will run other the orthonormal vectors 
     if(present(ld_tol)) then
       unorthovec.schmidt_orthonormalize(S,indices,scales,n_dependent,ld_tol)
     else
       unorthovec.schmidt_orthonormalize(S,indices,scales,n_dependent)
     end  
     .change_basis_using(unorthovec)
     do i=.dim-n_dependent+1,.dim
       self(i).element=keep(indices(i)).element
     end  
     indices.destroy !create in schmidt_orthonormalize
     unorthovec.destroy
   end

   flatten(vec_vec)
   ! flatten the matrices of a vector of matrices into vectors
   ! meant for singlet contraction_wfs at present
      vec_vec :: VEC{VEC_{REAL}}*

   ENSURE(vec_vec.created,"vec_vec not created")

      n,o,p,dim1 :: INT
      counter :: INT
     
      dim1 = self(1).element.dim1
     
      do n = .lb,.ub

         counter = 0

         do o = 1, dim1
            counter = counter + 1
            vec_vec(n).element(counter) = self(n).element(o,o)
         end

         do o = 1, dim1
         do p = 1,o-1
            counter = counter + 1
            vec_vec(n).element(counter) = self(n).element(o,p)
            ENSURE(self(n).element(o,p)==self(n).element(p,o),"not singlet")
         end
         end
      end

   end

   flatten(mat)
   ! flatten the matrices of a vector of matrices into vectors
   ! meant for singlet contraction_wfs at present
      mat :: MAT{REAL}*

   ENSURE(mat.created,"mat not created")

      n,o,p,dim1 :: INT
      counter :: INT
      
      dim1 = self(1).element.dim1
      ENSURE(mat.dim1==self.dim ,"mat.dim1/=self.dim")
      ENSURE(mat.dim2==dim1*(dim1+1)/2,"mat.dim2/=dim")
      
      do n = .lb,.ub
      
         counter = 0
         do o = 1, dim1
            counter = counter + 1
            mat(n,counter)=self(n).element(o,o)
         end
         
         do o = 2, dim1
         do p = 1,o-1
            counter=counter+1
            mat(n,counter)=self(n).element(o,p)
            ENSURE(self(n).element(o,p)==self(n).element(p,o),"not singlet")
         end
         end
      
      end

   end

   change_basis_using(mat,use_transpose)
   ! transform the vector of matrices self into 
   ! mat. self or transpose(mat). self if use_transpose is TRUE
     mat :: MAT{REAL}, IN
     use_transpose :: BIN, optional
     ENSURE(mat.dim1==self.dim,"dimension of mat does not match that of self")
     new :: VEC{MAT_{REAL}}*
     use_tr :: BIN
     dim,j :: INT
     use_tr = FALSE
     if (present(use_transpose)) use_tr=use_transpose
     dim = mat.dim1
     new.create_copy(self)
     new.to_product_of(mat,self,use_tr)
     do j = 1,dim
       self(j).element = new(j).element
     end
     new.destroy 
   end

   expand(dim) ::: leaky
   ! Expands self to dimension dim.  Contents are retained.
     self :: PTR
     dim :: INT, IN
     ENSURE(dim>=.dim, "dimension given is too small")
     old :: VEC{MAT_{REAL}}*
     old_size :: INT
     mat_dim1,mat_dim2,i :: INT
     old => self
     old_size = old.dim
     mat_dim1 = old(1).element.dim1
     mat_dim2 = old(1).element.dim2
     nullify(self)
     self.create(dim)
     do i=1,dim
       self(i).element.create(mat_dim1,mat_dim2)
     end
     do i=1,old_size
       self(i).element=old(i).element
     end
     old.destroy
   end

end
