!---------------------------------------------------------------------------
!
! MAT3{VEC_{INT}} : 
!
! A 3-D matrix where each element is a vector of (possibly) a different length
!
! Copyright (C) Daniel Grimwood, 2003
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id$
!---------------------------------------------------------------------------

module MAT3{VEC_{REAL}}

   implicit none

contains

   create(dim1,dim2,dim3) ::: get_from(MAT3{VEC_{INTRINSIC}}), leaky
   ! Create object with desired dimensions, ".element" part nullfied.
   end

   create(dim) ::: get_from(MAT3{VEC_{INTRINSIC}}), leaky
   ! Create the object with the desired dimensions "dim"
   end

   create(dim1,dim2,dim3,dimv) ::: get_from(MAT3{VEC_{INTRINSIC}}), leaky
   ! Create object with desired dimensions, ".element" part size "dimv".
   end

   create(dim1,dim2,dim3,dimv) ::: get_from(MAT3{VEC_{INTRINSIC}}), leaky
   ! Create object with desired dimensions, ".element" part with bounds "dimv".
   end

   create(dim,dimv) ::: get_from(MAT3{VEC_{INTRINSIC}}), leaky
   ! Create object with desired dimensions, ".element" part size "dimv".
   end

   create(dim,dimv) ::: get_from(MAT3{VEC_{INTRINSIC}}), leaky
   ! Create object with desired dimensions, ".element" part with bounds "dimv".
   end

   create_vec(dimv) ::: get_from(MAT3{VEC_{INTRINSIC}}), leaky
   ! Allocate only the the ".element" pointer parts with size "dimv".
   end

   create_vec(dimv) ::: get_from(MAT3{VEC_{INTRINSIC}}), leaky
   ! Allocate only the ".element" pointer parts with bounds "dimv".
   end

   create_copy(v) ::: get_from(MAT3{VEC_{INTRINSIC}}), leaky
   ! Create a copy of "v"
   end

   copy(v) ::: get_from(MAT3{VEC_{INTRINSIC}}), leaky
   ! Make a copy of "v"
   end

   destroy ::: get_from(MAT3{VEC_{INTRINSIC}}), leaky
   ! Destroy the object
   end

   nullify_ptr_part ::: get_from(MAT3{VEC_{INTRINSIC}})
   ! Nullify the "element" pointer parts
   end

   destroy_ptr_part ::: get_from(MAT3{VEC_{INTRINSIC}})
   ! Destroy the ".element" pointer parts of an ivecvec
   end

   created result (res) ::: inlined_by_foo
   ! Returns true if self has been created
   end

   destroyed result (res) ::: inlined_by_foo
   ! Returns true if self has *not* been created
   end

   set_to(v) ::: get_from(MAT3{VEC_{INTRINSIC}})
   ! Set self to "v". Up to you to make sure they are compatible!
   end

   zero ::: get_from(MAT3{VEC_{INTRINSIC}})
   ! Zero all elements
   end

   size result (res) ::: get_from(MAT3{INTRINSIC}), inlined_by_foo
   ! Return the size of the array
   end

   dim1 result (res) ::: get_from(MAT3{INTRINSIC})
   ! Return the size of the 1st dimension
   end

   dim2 result (res) ::: get_from(MAT3{INTRINSIC})
   ! Return the size of the 2nd dimension
   end

   dim3 result (res) ::: get_from(MAT3{INTRINSIC})
   ! Return the size of the 2nd dimension
   end

   shape result (res) ::: get_from(MAT3{INTRINSIC})
   ! Return the size of the 2nd dimension
   end

   is_same_shape_as(b) result(res) ::: get_from(MAT3{INTRINSIC})
   ! Returns TRUE if the matrix "b" has the same shape as self
   end

end
