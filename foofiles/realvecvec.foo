! $Id$
!---------------------------------------------------------------------------
!  VECVEC: VEC vectors
!  (c) Daniel Grimwood, 1998
!
!  VECVEC : a matrix where each column is a different length
!
!---------------------------------------------------------------------------
module VECVEC

   use TYPES
   use SYSTEM
   use VEC

   implicit none

#  include "macros"
#  include "vecvec.int"

contains

   create(dim)
   ! Create space for a vector of integer vectors
      PTR :: self
      INT, IN :: dim
      nullify(self)
      allocate(self(dim))
      ADD_MEM(dim*PTR_SIZE)
      .nullify_ptr_part
   end

   create(lb,ub)
   ! Create space for a vector of integer vectors with the given bounds
      PTR :: self
      INT, IN :: lb,ub
      nullify(self)
      allocate(self(lb:ub))
      ADD_MEM((ub-lb+1)*PTR_SIZE)
      .nullify_ptr_part
   end

   destroy
   ! Destroy allocated space for vec vector
      PTR :: self
      if (.destroyed) return
      .destroy_ptr_part
      DELETE_MEM(size(self)*PTR_SIZE)
      deallocate(self)
   end

   nullify_ptr_part
   ! Nullify the pointer part of the vecvec
      INT :: s
      do s = 1,size(self)
         nullify(self(s)%vec)
      end
   end

   destroy_ptr_part
   ! Destroy the pointer part of the vecvec
      INT :: s
      do s = 1,size(self)
         self(s)%vec.destroy
      end
   end

   created result(res)
   ! Returns true if self has been created
      PTR :: self
      BIN :: res
      res = associated(self)
   end

   destroyed result(res)
   ! Returns true if self has *not* been created
      PTR :: self
      BIN :: res
      res = NOT associated(self)
   end
      
end 
