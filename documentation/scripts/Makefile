# Generated automatically from Makefile.in by configure.
#==============================================================================
#
# >>> Makefile for the TONTO system
#
# You will need GNU make for this to work.
#
# For basic use you should not need to change anything if you ran the
# "configure" script successfully.  Just type "make run_mol.x".
#
# You can add/permute/remove the compiler options $(FFAST), $(FDEBUG) and
# $(FPROF) in the F90 definition to get different versions of the program.  
#
# (c) dylan jayatilaka, daniel grimwood 
#     university of western australia, 1999-2000
#
# $Id$
#
#==============================================================================




F90 = $(FFAST)




prefix := /usr/local
exec_prefix := ${prefix}
installdir := ${exec_prefix}/bin





#==============================================================================
# For normal use you shouldn't have to change anything below here.
#==============================================================================

FC := f95

FFLAGS    := -align dcommons -cpp -std -fp_reorder -module ./new_modules \
             -I. -I./f90 -I./interfaces -I./modules -I./objects \
             -error_limit 10
FPROF     := -p -g3 -gen_feedback
FDEBUG    := -g -ladebug -check bounds -check format -check overflow \
             -warn argument_checking -warn declarations -warn unused \
             -warn truncated_source
FFAST     := -g0 -O5 -arch host
F90SUFFIX := f90

#------------------------------------------------------------------------------
# >>> Standard Makefile options
#
# Note: For modules, the f95 compiler produces (temporarily) a .mod file
# in a directory "new_modules". The actual .mod file used by make resides 
# in the "modules" directory (see "VPATH" variable). The temporary .mod file 
# overwrites the old one only if it is different from it. This can save
# a lot of time in compilation.  (see the "update_module_file" script).
#------------------------------------------------------------------------------

COFLAGS  := -M -q
SHELL    := /bin/csh -f
VPATH    := .:./objects:./modules:./f90: \
            ./dependencies:./foofiles:./scripts \
            ./documentation/htmlfiles

.DEFAULT :
.SUFFIXES :
.SUFFIXES : .o .x .$(F90SUFFIX) .dep .foo .html
.PHONY : clean all objectfiles directories install

#------------------------------------------------------------------------------
# >>> Object files in hierachical order
#
# If you write a new TONTO module, you will need to add its .o filename 
# in the correct hierarchical position below. The correct position is after 
# all the modules which it USE's, but before all the modules which USE it.
#------------------------------------------------------------------------------

basic := types.o system.o time.o str.o int.o dbl.o buffer.o 
array :=  strvec.o   \
          binvec.o   \
            ivec.o   imat.o   imat3.o   imat4.o           \
             vec.o    mat.o    mat3.o    mat4.o    mat5.o \
            cvec.o   cmat.o   cmat3.o   cmat4.o   cmat5.o \
         ivecvec.o                                        \
          vecvec.o matvec.o mat3vec.o mat4vec.o           \
           opvec.o  opmat.o
files := unitnumber.o file.o textfile.o archive.o
diis  := vecdiis.o
basis := rys.o gaussian.o gaussian2.o gaussian4.o \
         shell.o shell1.o shell2.o shell4.o shellvec.o \
         basis.o basisvec.o  
atoms := atom.o atomvec.o 
group := irrep.o irrepvec.o pointgroup.o spacegroup.o crystal.o
mol   := plotgrid.o dftgrid.o scfdata.o \
         mol.o mol_dylan.o mol_chris.o mol_daniel.o mol_main.o

objectfiles := $(basic) $(array) $(files) $(diis) $(basis) $(atoms) $(group) $(mol)

runfiles := $(patsubst foofiles/%, %  , $(wildcard foofiles/run_*.foo))
runfiles := $(sort $(runfiles:.foo=.x))

dependfiles := $(objectfiles:.o=.dep) $(runfiles:.x=.dep)

htmlfiles := $(objectfiles:.o=.html)

f90files := $(objectfiles:.o=.$(F90SUFFIX))

#------------------------------------------------------------------------------
# >>> Targets and dependencies
#------------------------------------------------------------------------------

all : objectfiles run_mol.x

objectfiles : $(objectfiles)

help :
	@echo ""
	@echo "Please supply an argument to make."
	@echo "Common arguments are:"
	@echo ""
	@echo "    help            - displays this screen"
	@echo "    documentation   - makes the html documentation"
	@echo "    run_mol.x       - builds the program run_mol.x"
	@echo "    install         - builds and installs run_mol.x"
	@echo "    clean           - removes built program files"
	@echo "    docsclean       - removes built documentation files"
	@echo "    distclean       - removes all built files"
	@echo ""

install : run_mol.x
	install -f $(installdir) ./run_mol.x

clean :
	@if (-d ./dependencies)  echo "rm -f dependencies/*"
	@if (-d ./dependencies)  rm -f ./dependencies/*; exit 0
	@if (-d ./objects)       echo "rm -f objects/*"
	@if (-d ./objects)       rm -f ./objects/*; exit 0
	@if (-d ./modules)       echo "rm -f modules/*"
	@if (-d ./modules)       rm -f ./modules/*; exit 0
	@if (-d ./new_modules)   echo "rm -f new_modules/*"
	@if (-d ./new_modules)   rm -f ./new_modules/*; exit 0
	@if (-d ./interfaces)    echo "rm -f interfaces/*"
	@if (-d ./interfaces)    rm -f ./interfaces/*; exit 0
	@if (-d ./f90)           echo "rm -f f90/*"
	@if (-d ./f90)           rm -f ./f90/*; exit 0
	@rm -f ./run_*.x;      exit 0
	@if (-e ./dependfile)    rm -f ./dependfile

docsclean :
	@if (-d ./documentation/htmlfiles) echo "rm -f documentation/htmlfiles/*"
	@if (-d ./documentation/htmlfiles) rm -f ./documentation/htmlfiles/*; exit 0
	@if (-d ./documentation/f90files)  echo "rm -f documentation/f90files/*"
	@if (-d ./documentation/f90files)  rm -f ./documentation/f90files/*; exit 0
	@if (-d ./documentation/foofiles)  echo "rm -f documentation/foofiles/*"
	@if (-d ./documentation/foofiles)  rm -f ./documentation/foofiles/*; exit 0
	@if (-d ./documentation/scripts)   echo "rm -f documentation/scripts/*"
	@if (-d ./documentation/scripts)   rm -f ./documentation/scripts/*; exit 0

distclean : clean docsclean
	@if (-e ./sysinfo)       rm -f ./sysinfo

distribution :
	./scripts/make_dist

Makefile : Makefile.in configure
	@./configure

configure : configure.in
	@autoconf

#---------------------------------------------------------------------------
# >>> HTML documentation files
#
# This makes HTML documentation for all modules, and stores it in the
# documentation directory.  Point your browser to the "index.html" file for the
# start of the documentation.
#---------------------------------------------------------------------------

documentation : $(htmlfiles) make_navbar macros Makefile \
           make_deps.perl update_module_file macros \
           foo.perl foo2html.perl
	@if (! -d ./documentation/scripts)   mkdir ./documentation/scripts
	@if (! -d ./documentation/htmlfiles) mkdir ./documentation/htmlfiles
	@if (! -d ./documentation/f90files)  mkdir ./documentation/f90files
	@if (! -d ./documentation/foofiles)  mkdir ./documentation/foofiles
	cp -f ./configure                  ./documentation/scripts
	cp -f ./configure.in               ./documentation/scripts
	cp -f ./macros                     ./documentation/scripts
	cp -f ./Makefile                   ./documentation/scripts
	cp -f ./Makefile.in                ./documentation/scripts
	cp -f ./scripts/update_module_file ./documentation/scripts
	cp -f ./scripts/make_deps.perl     ./documentation/scripts
	cp -f ./scripts/make_dist          ./documentation/scripts
	cp -f ./scripts/foo.perl           ./documentation/scripts
	cp -f ./scripts/foo2html.perl      ./documentation/scripts
	./scripts/make_navbar $(sort $(basename $(htmlfiles))) > \
                                ./documentation/TONTO-nav-bar.html

#------------------------------------------------------------------------------
# >>> Main dependency rules file
#
# The "make_deps" script scans all the .foo files to make a .dep file, which
# contains the dependent modules USE'd by the .foo file. These .dep files are
# placed in the "dependencies" directory and are combined together to form the
# main "dependfile" makefile.
#------------------------------------------------------------------------------

ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),distclean)
ifneq ($(MAKECMDGOALS),docsclean)
ifneq ($(MAKECMDGOALS),distribution)
ifneq ($(MAKECMDGOALS),dependfile)
ifneq ($(MAKECMDGOALS),documentation)
include ./dependfile
endif
endif
endif
endif
endif
endif

dependfile : $(dependfiles)
	@if (! -e ./dependencies)  mkdir ./dependencies
	perl -pe "s/f90/$(F90SUFFIX)/go;" $(addprefix ./dependencies/, $(dependfiles)) \
                        > ./dependfile

#------------------------------------------------------------------------------
# >>> Default (implicit) suffix rules
#
# See the discussion in the "make_deps.perl" script for an idea of
# how this works.
#------------------------------------------------------------------------------

%.dep : %.foo make_deps.perl
	@if (! -e dependencies)  mkdir dependencies
	perl -w scripts/make_deps.perl foofiles/$(*F).foo dependencies/$(*F).dep

types.$(F90SUFFIX) : types.foo foo.perl
	@if (! -d f90)           mkdir f90
	perl -w scripts/foo.perl foofiles/$(<F) f90/$(*F).$(F90SUFFIX) interfaces/$(*F).int

%.$(F90SUFFIX) : %.foo foo.perl types.mod
	@if (! -d f90)           mkdir f90
	perl -w scripts/foo.perl foofiles/$(<F) f90/$(*F).$(F90SUFFIX) interfaces/$(*F).int

%.html : %.foo foo2html.perl types.foo foo.perl
	@if (! -d documentation/htmlfiles) mkdir documentation/htmlfiles
	@if (! -d documentation/f90files)  mkdir documentation/f90files
	@if (! -d documentation/foofiles)  mkdir documentation/foofiles
	perl -w scripts/foo2html.perl foofiles/$(<F) documentation/htmlfiles/$(*F).html documentation/htmlfiles/$(*F)_short.html
	perl -w scripts/foo.perl foofiles/$(<F) documentation/f90files/$(*F).$(F90SUFFIX) documentation/f90files/$(*F).int
	cp -f foofiles/$(*F).foo documentation/foofiles

%.mod : 
	make $(*F).o

%.o : %.$(F90SUFFIX) macros Makefile
	@if (! -d objects)       mkdir objects
	@if (! -d modules)       mkdir modules
	@if (! -d new_modules)   mkdir new_modules
	@if (! -d interfaces)    mkdir interfaces
	f95 $(FFLAGS) $(F90)   -c -o objects/$(*F).o f90/$(<F)
	scripts/update_module_file $(*F).mod

%.x : %.$(F90SUFFIX) macros Makefile
	make $($(*F))
	f95 $(FFLAGS) $(F90)   -o $@ $(addprefix objects/, $(notdir $(filter %.o, $^))) f90/$(<F) -lcxml 
	@if (-e $(*F).o) mv -f $(*F).o objects


#------------------------------------------------------------------------------
# Special rule for optimised run_mol.x. Usually breaks the compiler.
#------------------------------------------------------------------------------
#
#run_mol.x : $(f90files) macros Makefile
#	f95 $(FFLAGS) $(F90) -o run_mol.x $(addprefix f90/, $(f90files))
