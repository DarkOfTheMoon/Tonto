!----------------------------------------------------------------------
! Kind parameters for value types
!----------------------------------------------------------------------
#define CHR_KIND     1
#define INT_KIND     4
#define BIN_KIND     4
#define PTR_KIND     8
#define SGL_KIND     4
#define DBL_KIND     8
#define CDBL_KIND    8

!----------------------------------------------------------------------
! Size parameters for value types
!----------------------------------------------------------------------
#define CHR_SIZE     1
#define INT_SIZE     4
#define BIN_SIZE     4
#define PTR_SIZE     8
#define SGL_SIZE     4
#define DBL_SIZE     8
#define CDBL_SIZE   16
#define STR_SIZE    64
#define BSTR_SIZE  256

!----------------------------------------------------------------------
! Value types ... 
!----------------------------------------------------------------------
#define BIN        logical(BIN_KIND)
#define INT        integer(INT_KIND)
#define SGL        real(SGL_KIND)
#define DBL        real(DBL_KIND)
#define CDBL       complex(CDBL_KIND)
#define CHR        character
#define STR(A)     CHR(A)

!----------------------------------------------------------------------
! Fortran95 conditionally pure macros ... 
!----------------------------------------------------------------------

!define PURE              
!define ELEMENTAL         
!define ALWAYS_PURE       pure
!define ALWAYS_ELEMENTAL  elemental

#define PURE              pure
#define ELEMENTAL         elemental
#define ALWAYS_PURE       pure
#define ALWAYS_ELEMENTAL  elemental

#define DEFAULT_NULL
#define DEFAULT(X)

!define DEFAULT(X)         = X
!define DEFAULT_NULL       => NULL()

!----------------------------------------------------------------------
! Memory management macros ... 
!----------------------------------------------------------------------

!define STACK(X)     
!define UNSTACK   
!define CHECK  
!define ADD_MEM(X)
!define DELETE_MEM(X)

#define STACK(X)          call stack_(std_system,X);
#define UNSTACK           call unstack_(std_system);
#define CHECK             call check_(std_system);
#define ADD_MEM(X)        call add_mem_(std_system,X);
#define DELETE_MEM(X)     call delete_mem_(std_system,X);

#define RETURN            UNSTACK return
#define RETURN_IF(X)      if (X) then; RETURN; end if

!----------------------------------------------------------------------
! Precondition/Postcodition/error macros ... 
!----------------------------------------------------------------------

!define DIE(X)            
!define WARN(X)           
!define ENSURE(X,Y)       
!define DIE_IF(X,Y)       
!define WARN_IF(X,Y)      

#define DIE(X)            call die_(std_system,X)
#define WARN(X)           call warn_(std_system,X)
#define ENSURE(X,Y)       call ensure_(std_system,X,Y)
#define DIE_IF(X,Y)       call die_if_(std_system,X,Y)
#define WARN_IF(X,Y)      call warn_if_(std_system,X,Y)

!----------------------------------------------------------------------
! Convenience macros ... 
!----------------------------------------------------------------------
#define AND        .and.
#define OR         .or.
#define NOT        .not.
#define FALSE      .false.
#define TRUE       .true.

#define ZERO          0.0d0
#define ONE           1.0d0
#define TWO           2.0d0
#define THREE         3.0d0
#define FOUR          4.0d0
#define FIVE          5.0d0
#define SIX           6.0d0
#define SEVEN         7.0d0
#define EIGHT         8.0d0
#define NINE          9.0d0
#define TEN          10.0d0
#define HALF         0.50d0
#define QUARTER      0.25d0
#define TENTH        0.10d0

#define TWOTHIRDS         0.666666666666667d0
#define PI                3.141592653589793d0
#define E                 2.718281828459045d0
#define TWOPI5ON2         34.98683665524973d0

#define SPEED_OF_LIGHT_SI        2.99792458d+8
#define CHARGE_OF_ELECTRON_SI    1.602177d-19
#define AMU_SI                   1.6605402d-27
#define MASS_OF_ELECTRON_SI      9.10939d-31
#define MASS_OF_PROTON_SI        1.67262d-27
#define MASS_OF_NEUTRON_SI       1.67493d-27
#define BOHR_MAGNETON_SI         9.27402d-24
#define NUCLEAR_MAGNETON_SI      5.05079d-27
#define G_FACTOR                 2.002319304386
#define BOLTZMANN_SI             1.38066d-23

#define HARTREE_SI               4.3597482d-18
#define ANGSTROM_SI              1.0d-10
#define PLANCK_SI                6.6260755d-34
#define BOHR_MAGNETON_AU         HALF      
#define SPEED_OF_LIGHT_AU        137.03599d0
#define AMU_PER_MASS_OF_ELECTRON MASS_OF_ELECTRON_SI/AMU_SI
#define MASS_OF_ELECTRON_PER_AMU AMU_SI/MASS_OF_ELECTRON_SI
#define ANGSTROM_PER_BOHR        0.52917724924d+0
#define METER_PER_ANGSTROM       1.0d-10
#define BOHR_PER_ANGSTROM        1/0.52917724924d+0
#define WAVENUMBER_PER_HARTREE   2.1947463067d+5
#define EV_PER_HARTREE           27.21           
#define KELVIN_PER_HARTREE       3.158d+5         
#define JOULE_PER_HARTREE        4.3597482d-18
#define KJOULE_PER_HARTREE       4.3597482d-21
#define CAL_PER_HARTREE          1.042d-18        
#define KCAL_PER_HARTREE         1.042d-21        
#define KCALMOL_PER_HARTREE      627.5            
#define KJOULEMOL_PER_HARTREE    2625.46          
#define JOULE_PER_CAL            4.184            
#define DEGREE_PER_RADIAN        180d0/PI


#define TOL(N)                   TEN**(-N)

!----------------------------------------------------------------------
! Program constants ...
! The first word identifies the module to which the constant belongs
!----------------------------------------------------------------------

#define UNITNUMBER_STARTING_UNIT     10

#define BUFFER_COMMENT_CHARS         "!#"

#define SYSTEM_STD_ERROR_UNIT        6
#define INPUT_STD_INPUT_UNIT         5
#define OUTPUT_STD_OUTPUT_UNIT       6

#define SYSTEM_MEMORY_UNITS          "Words"
#define SYSTEM_MEMORY_LIMIT          6*8000000
#define SYSTEM_STACK_LIMIT           20

#define DBL_EPSILON                  TOL(6)

#define DIIS_KEEP                    8
#define DIIS_START                   3

#define OUTPUT_USE_LABELS            TRUE
#define OUTPUT_MARGIN_WIDTH          0
#define OUTPUT_NO_OF_FIELDS           5
#define OUTPUT_DBL_WIDTH             20
#define OUTPUT_INT_WIDTH              9
#define OUTPUT_PRECISION              9
#define OUTPUT_DBL_STYLE             " f"

#define FILE_BUFFER_LENGTH 1024
#define SHELL4_ERI_CUTOFF  1.0d-15

!----------------------------------------------------------------------
! Attributes ... 
!----------------------------------------------------------------------
#define PTR        pointer
#define IN         intent(in)
#define OUT        intent(out)
#define INOUT      intent(inout)
#define PAR        parameter

!----------------------------------------------------------------------
! Derived non-array types ... 
!----------------------------------------------------------------------
#define SYSTEM             type(system_type)
#define BUFFER             type(buffer_type)
#define FILE               type(file_type)
#define STREAM             type(stream_type)
#define INPUT              type(input_type)
#define OUTPUT             type(output_type)
#define ARCHIVE            type(archive_type)
#define SHELLDATA          type(shelldata_type)
#define SHELL              type(shell_type)
#define SHELL1             type(shell1_type)
#define SHELL2             type(shell2_type)
#define SHELL4             type(shell4_type)
#define GAUSSIAN           type(gaussian_type)
#define GAUSSIAN2          type(gaussian2_type)
#define GAUSSIAN4          type(gaussian4_type)
#define BASIS              type(basis_type)
#define ATOM               type(atom_type)
#define PLOTGRID           type(plotgrid_type)
#define DBLFMT             type(dblfmt_type)
#define IRREP              type(irrep_type)
#define POINTGROUP         type(pointgroup_type)
#define SPACEGROUP         type(spacegroup_type)
#define UNITCELL           type(unitcell_type)
#define XTAL               type(xtal_type)
#define MOL                type(mol_type)
#define RYS                type(rys_type)
#define VEC_               type(vec__type)
#define IVEC_              type(ivec__type)
#define MAT_               type(mat__type)
#define MAT3_              type(mat3__type)
#define OPVEC              type(opvec_type)
#define OPMAT              type(opmat_type)
#define TIME               type(time_type)
#define DIIS               type(diis_type)
#define VECDIIS            type(vecdiis_type)
#define CVECDIIS           type(cvecdiis_type)
#define MATDIIS            type(matdiis_type)
#define CMATDIIS           type(cmatdiis_type)
#define UNITNUMBER         type(unitnumber_type)
#define SCFDATA            type(scfdata_type)
#define DFTGRID            type(dftgrid_type)

!----------------------------------------------------------------------
! Parameterised abstract array types ... 
!----------------------------------------------------------------------
#define ARRAY(X,A)           X, dimension(A)
#define ARRAY2(X,A,B)        X, dimension(A,B)
#define ARRAY3(X,A,B,C)      X, dimension(A,B,C)
#define ARRAY4(X,A,B,C,D)    X, dimension(A,B,C,D)
#define ARRAY5(X,A,B,C,D,E)  X, dimension(A,B,C,D,E)

!----------------------------------------------------------------------
! Derived array types ...
!----------------------------------------------------------------------
#define TRI(A)             ARRAY(DBL,A)
#define VEC(A)             ARRAY(DBL,A)
#define VECVEC(A)          ARRAY(VEC_,A)
#define IVEC(A)            ARRAY(INT,A)
#define BINVEC(A)          ARRAY(BIN,A)
#define IVECVEC(A)         ARRAY(IVEC_,A)
#define CVEC(A)            ARRAY(CDBL,A)
#define MATVEC(A)          ARRAY(MAT_,A)
#define MAT3VEC(A)         ARRAY(MAT3_,A)
#define STRVEC(A)          ARRAY(STR(STR_SIZE),A)
#define FILEVEC(A)         ARRAY(FILE,A)
#define SHELLVEC(A)        ARRAY(SHELL,A)
#define BASISVEC(A)        ARRAY(BASIS,A)
#define ATOMVEC(A)         ARRAY(ATOM,A)
#define IRREPVEC(A)        ARRAY(IRREP,A)
#define MAT(A,B)           ARRAY2(DBL,A,B)
#define MAT3(A,B,C)        ARRAY3(DBL,A,B,C)
#define MAT4(A,B,C,D)      ARRAY4(DBL,A,B,C,D)
#define MAT5(A,B,C,D,E)    ARRAY5(DBL,A,B,C,D,E)
#define IMAT(A,B)          ARRAY2(INT,A,B)
#define IMAT3(A,B,C)       ARRAY3(INT,A,B,C)
#define IMAT4(A,B,C,D)     ARRAY4(INT,A,B,C,D)
#define CMAT(A,B)          ARRAY2(CDBL,A,B)
#define CMAT3(A,B,C)       ARRAY3(CDBL,A,B,C)
#define CMAT4(A,B,C,D)     ARRAY4(CDBL,A,B,C,D)
#define CMAT5(A,B,C,D,E)   ARRAY5(CDBL,A,B,C,D,E)

!----------------------------------------------------------------------
! Type sizes ... 
!----------------------------------------------------------------------
#define ARCHIVE_SIZE    4*STR_SIZE+3*PTR_SIZE
#define ATOM_SIZE       STR_SIZE+INT_SIZE+12*DBL_SIZE+PTR_SIZE
#define BASIS_SIZE      3*INT_SIZE+STR_SIZE+PTR_SIZE
#define BUFFER_SIZE     3*INT_SIZE+BIN_SIZE+STR_SIZE+BSTR_SIZE
#define CMATDIIS_SIZE   3*INT_SIZE+DBL_SIZE+(ARCHIVE_SIZE)+2*PTR_SIZE
#define CVECDIIS_SIZE   3*INT_SIZE+DBL_SIZE+(ARCHIVE_SIZE)+2*PTR_SIZE
#define DFTGRID_SIZE    2*STR_SIZE+5*INT_SIZE+4*DBL_SIZE
#define FILE_SIZE       4*INT_SIZE+3*STR_SIZE+BIN_SIZE+2*PTR_SIZE
#define GAUSSIAN_SIZE   INT_SIZE+4*DBL_SIZE
#define GAUSSIAN2_SIZE  2*(GAUSSIAN_SIZE)
#define GAUSSIAN4_SIZE  2*(GAUSSIAN2_SIZE)
#define PLOTGRID_SIZE   STR_SIZE+3*INT_SIZE+11*DBL_SIZE
#define INPUT_SIZE      3*INT_SIZE+STR_SIZE+BSTR_SIZE
#define IRREP_SIZE      INT_SIZE+2*PTR_SIZE+4
#define MATDIIS_SIZE    3*INT_SIZE+DBL_SIZE+(ARCHIVE_SIZE)+2*PTR_SIZE
#define MOL_SIZE        9*INT_SIZE+8*PTR_SIZE+STR_SIZE
#define OPMAT_SIZE      INT_SIZE+10*PTR_SIZE
#define OPVEC_SIZE      INT_SIZE+4*PTR_SIZE
#define OUTPUT_SIZE     8*INT_SIZE+BIN_SIZE+2*STR_SIZE+BSTR_SIZE
#define POINTGROUP_SIZE 8+BIN_SIZE+5*INT_SIZE+7*PTR_SIZE
#define RYS_SIZE        INT_SIZE+2*INT_SIZE
#define SHELL_SIZE      3*INT_SIZE+2*PTR_SIZE
#define SHELL1_SIZE     3*INT_SIZE+3*DBL_SIZE+2*PTR_SIZE
#define SHELL2_SIZE     2*(SHELL1_SIZE)
#define SHELL4_SIZE     4*(SHELL1_SIZE)
#define SPACEGROUP_SIZE 2*STR_SIZE+20*PTR_SIZE+13*INT_SIZE+6*DBL_SIZE
#define UNITCELL_SIZE   52*DBL_SIZE
#define VECDIIS_SIZE    4*INT_SIZE+DBL_SIZE+(ARCHIVE_SIZE)+2*PTR_SIZE
#define SCFDATA_SIZE    2*STR_SIZE+9*DBL_SIZE+3*INT_SIZE+4*BIN_SIZE+(VECDIIS_SIZE)
#define SYSTEM_SIZE     11*INT_SIZE+3*STR_SIZE+2*PTR_SIZE+BIN_SIZE
#define XTAL_SIZE       8*PTR_SIZE+2*INT_SIZE+8*DBL_SIZE+3*BIN_SIZE+STR_SIZE
